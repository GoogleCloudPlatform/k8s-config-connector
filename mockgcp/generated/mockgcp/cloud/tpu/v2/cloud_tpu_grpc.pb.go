// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/tpu/v2/cloud_tpu.proto

package tpupb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TpuClient is the client API for Tpu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TpuClient interface {
	// Lists nodes.
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// Gets the details of a node.
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
	// Creates a node.
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a node.
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Stops a node. This operation is only available with single TPU nodes.
	StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Starts a node.
	StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the configurations of a node.
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists queued resources.
	ListQueuedResources(ctx context.Context, in *ListQueuedResourcesRequest, opts ...grpc.CallOption) (*ListQueuedResourcesResponse, error)
	// Gets details of a queued resource.
	GetQueuedResource(ctx context.Context, in *GetQueuedResourceRequest, opts ...grpc.CallOption) (*QueuedResource, error)
	// Creates a QueuedResource TPU instance.
	CreateQueuedResource(ctx context.Context, in *CreateQueuedResourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a QueuedResource TPU instance.
	DeleteQueuedResource(ctx context.Context, in *DeleteQueuedResourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Resets a QueuedResource TPU instance
	ResetQueuedResource(ctx context.Context, in *ResetQueuedResourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Generates the Cloud TPU service identity for the project.
	GenerateServiceIdentity(ctx context.Context, in *GenerateServiceIdentityRequest, opts ...grpc.CallOption) (*GenerateServiceIdentityResponse, error)
	// Lists accelerator types supported by this API.
	ListAcceleratorTypes(ctx context.Context, in *ListAcceleratorTypesRequest, opts ...grpc.CallOption) (*ListAcceleratorTypesResponse, error)
	// Gets AcceleratorType.
	GetAcceleratorType(ctx context.Context, in *GetAcceleratorTypeRequest, opts ...grpc.CallOption) (*AcceleratorType, error)
	// Lists runtime versions supported by this API.
	ListRuntimeVersions(ctx context.Context, in *ListRuntimeVersionsRequest, opts ...grpc.CallOption) (*ListRuntimeVersionsResponse, error)
	// Gets a runtime version.
	GetRuntimeVersion(ctx context.Context, in *GetRuntimeVersionRequest, opts ...grpc.CallOption) (*RuntimeVersion, error)
	// Retrieves the guest attributes for the node.
	GetGuestAttributes(ctx context.Context, in *GetGuestAttributesRequest, opts ...grpc.CallOption) (*GetGuestAttributesResponse, error)
}

type tpuClient struct {
	cc grpc.ClientConnInterface
}

func NewTpuClient(cc grpc.ClientConnInterface) TpuClient {
	return &tpuClient{cc}
}

func (c *tpuClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/StartNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) ListQueuedResources(ctx context.Context, in *ListQueuedResourcesRequest, opts ...grpc.CallOption) (*ListQueuedResourcesResponse, error) {
	out := new(ListQueuedResourcesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/ListQueuedResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) GetQueuedResource(ctx context.Context, in *GetQueuedResourceRequest, opts ...grpc.CallOption) (*QueuedResource, error) {
	out := new(QueuedResource)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/GetQueuedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) CreateQueuedResource(ctx context.Context, in *CreateQueuedResourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/CreateQueuedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) DeleteQueuedResource(ctx context.Context, in *DeleteQueuedResourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/DeleteQueuedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) ResetQueuedResource(ctx context.Context, in *ResetQueuedResourceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/ResetQueuedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) GenerateServiceIdentity(ctx context.Context, in *GenerateServiceIdentityRequest, opts ...grpc.CallOption) (*GenerateServiceIdentityResponse, error) {
	out := new(GenerateServiceIdentityResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/GenerateServiceIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) ListAcceleratorTypes(ctx context.Context, in *ListAcceleratorTypesRequest, opts ...grpc.CallOption) (*ListAcceleratorTypesResponse, error) {
	out := new(ListAcceleratorTypesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/ListAcceleratorTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) GetAcceleratorType(ctx context.Context, in *GetAcceleratorTypeRequest, opts ...grpc.CallOption) (*AcceleratorType, error) {
	out := new(AcceleratorType)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/GetAcceleratorType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) ListRuntimeVersions(ctx context.Context, in *ListRuntimeVersionsRequest, opts ...grpc.CallOption) (*ListRuntimeVersionsResponse, error) {
	out := new(ListRuntimeVersionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/ListRuntimeVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) GetRuntimeVersion(ctx context.Context, in *GetRuntimeVersionRequest, opts ...grpc.CallOption) (*RuntimeVersion, error) {
	out := new(RuntimeVersion)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/GetRuntimeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpuClient) GetGuestAttributes(ctx context.Context, in *GetGuestAttributesRequest, opts ...grpc.CallOption) (*GetGuestAttributesResponse, error) {
	out := new(GetGuestAttributesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.tpu.v2.Tpu/GetGuestAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TpuServer is the server API for Tpu service.
// All implementations must embed UnimplementedTpuServer
// for forward compatibility
type TpuServer interface {
	// Lists nodes.
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// Gets the details of a node.
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
	// Creates a node.
	CreateNode(context.Context, *CreateNodeRequest) (*longrunningpb.Operation, error)
	// Deletes a node.
	DeleteNode(context.Context, *DeleteNodeRequest) (*longrunningpb.Operation, error)
	// Stops a node. This operation is only available with single TPU nodes.
	StopNode(context.Context, *StopNodeRequest) (*longrunningpb.Operation, error)
	// Starts a node.
	StartNode(context.Context, *StartNodeRequest) (*longrunningpb.Operation, error)
	// Updates the configurations of a node.
	UpdateNode(context.Context, *UpdateNodeRequest) (*longrunningpb.Operation, error)
	// Lists queued resources.
	ListQueuedResources(context.Context, *ListQueuedResourcesRequest) (*ListQueuedResourcesResponse, error)
	// Gets details of a queued resource.
	GetQueuedResource(context.Context, *GetQueuedResourceRequest) (*QueuedResource, error)
	// Creates a QueuedResource TPU instance.
	CreateQueuedResource(context.Context, *CreateQueuedResourceRequest) (*longrunningpb.Operation, error)
	// Deletes a QueuedResource TPU instance.
	DeleteQueuedResource(context.Context, *DeleteQueuedResourceRequest) (*longrunningpb.Operation, error)
	// Resets a QueuedResource TPU instance
	ResetQueuedResource(context.Context, *ResetQueuedResourceRequest) (*longrunningpb.Operation, error)
	// Generates the Cloud TPU service identity for the project.
	GenerateServiceIdentity(context.Context, *GenerateServiceIdentityRequest) (*GenerateServiceIdentityResponse, error)
	// Lists accelerator types supported by this API.
	ListAcceleratorTypes(context.Context, *ListAcceleratorTypesRequest) (*ListAcceleratorTypesResponse, error)
	// Gets AcceleratorType.
	GetAcceleratorType(context.Context, *GetAcceleratorTypeRequest) (*AcceleratorType, error)
	// Lists runtime versions supported by this API.
	ListRuntimeVersions(context.Context, *ListRuntimeVersionsRequest) (*ListRuntimeVersionsResponse, error)
	// Gets a runtime version.
	GetRuntimeVersion(context.Context, *GetRuntimeVersionRequest) (*RuntimeVersion, error)
	// Retrieves the guest attributes for the node.
	GetGuestAttributes(context.Context, *GetGuestAttributesRequest) (*GetGuestAttributesResponse, error)
	mustEmbedUnimplementedTpuServer()
}

// UnimplementedTpuServer must be embedded to have forward compatible implementations.
type UnimplementedTpuServer struct {
}

func (UnimplementedTpuServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedTpuServer) GetNode(context.Context, *GetNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedTpuServer) CreateNode(context.Context, *CreateNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedTpuServer) DeleteNode(context.Context, *DeleteNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedTpuServer) StopNode(context.Context, *StopNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (UnimplementedTpuServer) StartNode(context.Context, *StartNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNode not implemented")
}
func (UnimplementedTpuServer) UpdateNode(context.Context, *UpdateNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedTpuServer) ListQueuedResources(context.Context, *ListQueuedResourcesRequest) (*ListQueuedResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueuedResources not implemented")
}
func (UnimplementedTpuServer) GetQueuedResource(context.Context, *GetQueuedResourceRequest) (*QueuedResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueuedResource not implemented")
}
func (UnimplementedTpuServer) CreateQueuedResource(context.Context, *CreateQueuedResourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueuedResource not implemented")
}
func (UnimplementedTpuServer) DeleteQueuedResource(context.Context, *DeleteQueuedResourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueuedResource not implemented")
}
func (UnimplementedTpuServer) ResetQueuedResource(context.Context, *ResetQueuedResourceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetQueuedResource not implemented")
}
func (UnimplementedTpuServer) GenerateServiceIdentity(context.Context, *GenerateServiceIdentityRequest) (*GenerateServiceIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateServiceIdentity not implemented")
}
func (UnimplementedTpuServer) ListAcceleratorTypes(context.Context, *ListAcceleratorTypesRequest) (*ListAcceleratorTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAcceleratorTypes not implemented")
}
func (UnimplementedTpuServer) GetAcceleratorType(context.Context, *GetAcceleratorTypeRequest) (*AcceleratorType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceleratorType not implemented")
}
func (UnimplementedTpuServer) ListRuntimeVersions(context.Context, *ListRuntimeVersionsRequest) (*ListRuntimeVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuntimeVersions not implemented")
}
func (UnimplementedTpuServer) GetRuntimeVersion(context.Context, *GetRuntimeVersionRequest) (*RuntimeVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeVersion not implemented")
}
func (UnimplementedTpuServer) GetGuestAttributes(context.Context, *GetGuestAttributesRequest) (*GetGuestAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestAttributes not implemented")
}
func (UnimplementedTpuServer) mustEmbedUnimplementedTpuServer() {}

// UnsafeTpuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TpuServer will
// result in compilation errors.
type UnsafeTpuServer interface {
	mustEmbedUnimplementedTpuServer()
}

func RegisterTpuServer(s grpc.ServiceRegistrar, srv TpuServer) {
	s.RegisterService(&Tpu_ServiceDesc, srv)
}

func _Tpu_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).StopNode(ctx, req.(*StopNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_StartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).StartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/StartNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).StartNode(ctx, req.(*StartNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_ListQueuedResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuedResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).ListQueuedResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/ListQueuedResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).ListQueuedResources(ctx, req.(*ListQueuedResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_GetQueuedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueuedResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).GetQueuedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/GetQueuedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).GetQueuedResource(ctx, req.(*GetQueuedResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_CreateQueuedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueuedResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).CreateQueuedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/CreateQueuedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).CreateQueuedResource(ctx, req.(*CreateQueuedResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_DeleteQueuedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueuedResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).DeleteQueuedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/DeleteQueuedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).DeleteQueuedResource(ctx, req.(*DeleteQueuedResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_ResetQueuedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetQueuedResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).ResetQueuedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/ResetQueuedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).ResetQueuedResource(ctx, req.(*ResetQueuedResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_GenerateServiceIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateServiceIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).GenerateServiceIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/GenerateServiceIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).GenerateServiceIdentity(ctx, req.(*GenerateServiceIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_ListAcceleratorTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAcceleratorTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).ListAcceleratorTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/ListAcceleratorTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).ListAcceleratorTypes(ctx, req.(*ListAcceleratorTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_GetAcceleratorType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAcceleratorTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).GetAcceleratorType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/GetAcceleratorType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).GetAcceleratorType(ctx, req.(*GetAcceleratorTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_ListRuntimeVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuntimeVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).ListRuntimeVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/ListRuntimeVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).ListRuntimeVersions(ctx, req.(*ListRuntimeVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_GetRuntimeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).GetRuntimeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/GetRuntimeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).GetRuntimeVersion(ctx, req.(*GetRuntimeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpu_GetGuestAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpuServer).GetGuestAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.tpu.v2.Tpu/GetGuestAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpuServer).GetGuestAttributes(ctx, req.(*GetGuestAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tpu_ServiceDesc is the grpc.ServiceDesc for Tpu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tpu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.tpu.v2.Tpu",
	HandlerType: (*TpuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNodes",
			Handler:    _Tpu_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Tpu_GetNode_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _Tpu_CreateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Tpu_DeleteNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _Tpu_StopNode_Handler,
		},
		{
			MethodName: "StartNode",
			Handler:    _Tpu_StartNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Tpu_UpdateNode_Handler,
		},
		{
			MethodName: "ListQueuedResources",
			Handler:    _Tpu_ListQueuedResources_Handler,
		},
		{
			MethodName: "GetQueuedResource",
			Handler:    _Tpu_GetQueuedResource_Handler,
		},
		{
			MethodName: "CreateQueuedResource",
			Handler:    _Tpu_CreateQueuedResource_Handler,
		},
		{
			MethodName: "DeleteQueuedResource",
			Handler:    _Tpu_DeleteQueuedResource_Handler,
		},
		{
			MethodName: "ResetQueuedResource",
			Handler:    _Tpu_ResetQueuedResource_Handler,
		},
		{
			MethodName: "GenerateServiceIdentity",
			Handler:    _Tpu_GenerateServiceIdentity_Handler,
		},
		{
			MethodName: "ListAcceleratorTypes",
			Handler:    _Tpu_ListAcceleratorTypes_Handler,
		},
		{
			MethodName: "GetAcceleratorType",
			Handler:    _Tpu_GetAcceleratorType_Handler,
		},
		{
			MethodName: "ListRuntimeVersions",
			Handler:    _Tpu_ListRuntimeVersions_Handler,
		},
		{
			MethodName: "GetRuntimeVersion",
			Handler:    _Tpu_GetRuntimeVersion_Handler,
		},
		{
			MethodName: "GetGuestAttributes",
			Handler:    _Tpu_GetGuestAttributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/tpu/v2/cloud_tpu.proto",
}
