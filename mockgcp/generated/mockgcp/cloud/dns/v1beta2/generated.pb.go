// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/dns/v1beta2/generated.proto

package dnspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoliciesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Kind          string          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	NextPageToken string          `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Policies      []*Policy       `protobuf:"bytes,4,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *PoliciesListResponse) Reset() {
	*x = PoliciesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesListResponse) ProtoMessage() {}

func (x *PoliciesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesListResponse.ProtoReflect.Descriptor instead.
func (*PoliciesListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{0}
}

func (x *PoliciesListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PoliciesListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PoliciesListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *PoliciesListResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ResponsePolicyRuleLocalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalDatas []*ResourceRecordSet `protobuf:"bytes,1,rep,name=local_datas,json=localDatas,proto3" json:"local_datas,omitempty"`
}

func (x *ResponsePolicyRuleLocalData) Reset() {
	*x = ResponsePolicyRuleLocalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRuleLocalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRuleLocalData) ProtoMessage() {}

func (x *ResponsePolicyRuleLocalData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRuleLocalData.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRuleLocalData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{1}
}

func (x *ResponsePolicyRuleLocalData) GetLocalDatas() []*ResourceRecordSet {
	if x != nil {
		return x.LocalDatas
	}
	return nil
}

type DnsKeySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	KeyLength uint32 `protobuf:"varint,2,opt,name=key_length,json=keyLength,proto3" json:"key_length,omitempty"`
	KeyType   string `protobuf:"bytes,3,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Kind      string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *DnsKeySpec) Reset() {
	*x = DnsKeySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKeySpec) ProtoMessage() {}

func (x *DnsKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKeySpec.ProtoReflect.Descriptor instead.
func (*DnsKeySpec) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{2}
}

func (x *DnsKeySpec) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DnsKeySpec) GetKeyLength() uint32 {
	if x != nil {
		return x.KeyLength
	}
	return 0
}

func (x *DnsKeySpec) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *DnsKeySpec) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type PoliciesUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Policy *Policy         `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *PoliciesUpdateResponse) Reset() {
	*x = PoliciesUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesUpdateResponse) ProtoMessage() {}

func (x *PoliciesUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesUpdateResponse.ProtoReflect.Descriptor instead.
func (*PoliciesUpdateResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{3}
}

func (x *PoliciesUpdateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PoliciesUpdateResponse) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type PolicyNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind       string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	NetworkUrl string `protobuf:"bytes,2,opt,name=network_url,json=networkUrl,proto3" json:"network_url,omitempty"`
}

func (x *PolicyNetwork) Reset() {
	*x = PolicyNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyNetwork) ProtoMessage() {}

func (x *PolicyNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyNetwork.ProtoReflect.Descriptor instead.
func (*PolicyNetwork) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyNetwork) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PolicyNetwork) GetNetworkUrl() string {
	if x != nil {
		return x.NetworkUrl
	}
	return ""
}

type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZonesPerNetwork               int32         `protobuf:"varint,1,opt,name=managed_zones_per_network,json=managedZonesPerNetwork,proto3" json:"managed_zones_per_network,omitempty"`
	PeeringZonesPerTargetNetwork         int32         `protobuf:"varint,2,opt,name=peering_zones_per_target_network,json=peeringZonesPerTargetNetwork,proto3" json:"peering_zones_per_target_network,omitempty"`
	RrsetAdditionsPerChange              int32         `protobuf:"varint,3,opt,name=rrset_additions_per_change,json=rrsetAdditionsPerChange,proto3" json:"rrset_additions_per_change,omitempty"`
	GkeClustersPerManagedZone            int32         `protobuf:"varint,4,opt,name=gke_clusters_per_managed_zone,json=gkeClustersPerManagedZone,proto3" json:"gke_clusters_per_managed_zone,omitempty"`
	GkeClustersPerPolicy                 int32         `protobuf:"varint,5,opt,name=gke_clusters_per_policy,json=gkeClustersPerPolicy,proto3" json:"gke_clusters_per_policy,omitempty"`
	ManagedZonesPerGkeCluster            int32         `protobuf:"varint,6,opt,name=managed_zones_per_gke_cluster,json=managedZonesPerGkeCluster,proto3" json:"managed_zones_per_gke_cluster,omitempty"`
	GkeClustersPerResponsePolicy         int32         `protobuf:"varint,7,opt,name=gke_clusters_per_response_policy,json=gkeClustersPerResponsePolicy,proto3" json:"gke_clusters_per_response_policy,omitempty"`
	RrsetsPerManagedZone                 int32         `protobuf:"varint,8,opt,name=rrsets_per_managed_zone,json=rrsetsPerManagedZone,proto3" json:"rrsets_per_managed_zone,omitempty"`
	NetworksPerManagedZone               int32         `protobuf:"varint,9,opt,name=networks_per_managed_zone,json=networksPerManagedZone,proto3" json:"networks_per_managed_zone,omitempty"`
	NetworksPerResponsePolicy            int32         `protobuf:"varint,10,opt,name=networks_per_response_policy,json=networksPerResponsePolicy,proto3" json:"networks_per_response_policy,omitempty"`
	Policies                             int32         `protobuf:"varint,11,opt,name=policies,proto3" json:"policies,omitempty"`
	ResourceRecordsPerRrset              int32         `protobuf:"varint,12,opt,name=resource_records_per_rrset,json=resourceRecordsPerRrset,proto3" json:"resource_records_per_rrset,omitempty"`
	ResponsePolicies                     int32         `protobuf:"varint,13,opt,name=response_policies,json=responsePolicies,proto3" json:"response_policies,omitempty"`
	DnsKeysPerManagedZone                int32         `protobuf:"varint,14,opt,name=dns_keys_per_managed_zone,json=dnsKeysPerManagedZone,proto3" json:"dns_keys_per_managed_zone,omitempty"`
	ItemsPerRoutingPolicy                int32         `protobuf:"varint,15,opt,name=items_per_routing_policy,json=itemsPerRoutingPolicy,proto3" json:"items_per_routing_policy,omitempty"`
	ManagedZones                         int32         `protobuf:"varint,16,opt,name=managed_zones,json=managedZones,proto3" json:"managed_zones,omitempty"`
	ResponsePolicyRulesPerResponsePolicy int32         `protobuf:"varint,17,opt,name=response_policy_rules_per_response_policy,json=responsePolicyRulesPerResponsePolicy,proto3" json:"response_policy_rules_per_response_policy,omitempty"`
	WhitelistedKeySpecs                  []*DnsKeySpec `protobuf:"bytes,18,rep,name=whitelisted_key_specs,json=whitelistedKeySpecs,proto3" json:"whitelisted_key_specs,omitempty"`
	TargetNameServersPerManagedZone      int32         `protobuf:"varint,19,opt,name=target_name_servers_per_managed_zone,json=targetNameServersPerManagedZone,proto3" json:"target_name_servers_per_managed_zone,omitempty"`
	TargetNameServersPerPolicy           int32         `protobuf:"varint,20,opt,name=target_name_servers_per_policy,json=targetNameServersPerPolicy,proto3" json:"target_name_servers_per_policy,omitempty"`
	TotalRrdataSizePerChange             int32         `protobuf:"varint,21,opt,name=total_rrdata_size_per_change,json=totalRrdataSizePerChange,proto3" json:"total_rrdata_size_per_change,omitempty"`
	Kind                                 string        `protobuf:"bytes,22,opt,name=kind,proto3" json:"kind,omitempty"`
	NetworksPerPolicy                    int32         `protobuf:"varint,23,opt,name=networks_per_policy,json=networksPerPolicy,proto3" json:"networks_per_policy,omitempty"`
	RrsetDeletionsPerChange              int32         `protobuf:"varint,24,opt,name=rrset_deletions_per_change,json=rrsetDeletionsPerChange,proto3" json:"rrset_deletions_per_change,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{5}
}

func (x *Quota) GetManagedZonesPerNetwork() int32 {
	if x != nil {
		return x.ManagedZonesPerNetwork
	}
	return 0
}

func (x *Quota) GetPeeringZonesPerTargetNetwork() int32 {
	if x != nil {
		return x.PeeringZonesPerTargetNetwork
	}
	return 0
}

func (x *Quota) GetRrsetAdditionsPerChange() int32 {
	if x != nil {
		return x.RrsetAdditionsPerChange
	}
	return 0
}

func (x *Quota) GetGkeClustersPerManagedZone() int32 {
	if x != nil {
		return x.GkeClustersPerManagedZone
	}
	return 0
}

func (x *Quota) GetGkeClustersPerPolicy() int32 {
	if x != nil {
		return x.GkeClustersPerPolicy
	}
	return 0
}

func (x *Quota) GetManagedZonesPerGkeCluster() int32 {
	if x != nil {
		return x.ManagedZonesPerGkeCluster
	}
	return 0
}

func (x *Quota) GetGkeClustersPerResponsePolicy() int32 {
	if x != nil {
		return x.GkeClustersPerResponsePolicy
	}
	return 0
}

func (x *Quota) GetRrsetsPerManagedZone() int32 {
	if x != nil {
		return x.RrsetsPerManagedZone
	}
	return 0
}

func (x *Quota) GetNetworksPerManagedZone() int32 {
	if x != nil {
		return x.NetworksPerManagedZone
	}
	return 0
}

func (x *Quota) GetNetworksPerResponsePolicy() int32 {
	if x != nil {
		return x.NetworksPerResponsePolicy
	}
	return 0
}

func (x *Quota) GetPolicies() int32 {
	if x != nil {
		return x.Policies
	}
	return 0
}

func (x *Quota) GetResourceRecordsPerRrset() int32 {
	if x != nil {
		return x.ResourceRecordsPerRrset
	}
	return 0
}

func (x *Quota) GetResponsePolicies() int32 {
	if x != nil {
		return x.ResponsePolicies
	}
	return 0
}

func (x *Quota) GetDnsKeysPerManagedZone() int32 {
	if x != nil {
		return x.DnsKeysPerManagedZone
	}
	return 0
}

func (x *Quota) GetItemsPerRoutingPolicy() int32 {
	if x != nil {
		return x.ItemsPerRoutingPolicy
	}
	return 0
}

func (x *Quota) GetManagedZones() int32 {
	if x != nil {
		return x.ManagedZones
	}
	return 0
}

func (x *Quota) GetResponsePolicyRulesPerResponsePolicy() int32 {
	if x != nil {
		return x.ResponsePolicyRulesPerResponsePolicy
	}
	return 0
}

func (x *Quota) GetWhitelistedKeySpecs() []*DnsKeySpec {
	if x != nil {
		return x.WhitelistedKeySpecs
	}
	return nil
}

func (x *Quota) GetTargetNameServersPerManagedZone() int32 {
	if x != nil {
		return x.TargetNameServersPerManagedZone
	}
	return 0
}

func (x *Quota) GetTargetNameServersPerPolicy() int32 {
	if x != nil {
		return x.TargetNameServersPerPolicy
	}
	return 0
}

func (x *Quota) GetTotalRrdataSizePerChange() int32 {
	if x != nil {
		return x.TotalRrdataSizePerChange
	}
	return 0
}

func (x *Quota) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Quota) GetNetworksPerPolicy() int32 {
	if x != nil {
		return x.NetworksPerPolicy
	}
	return 0
}

func (x *Quota) GetRrsetDeletionsPerChange() int32 {
	if x != nil {
		return x.RrsetDeletionsPerChange
	}
	return 0
}

type RRSetRoutingPolicyHealthCheckTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalEndpoints     []string                                `protobuf:"bytes,1,rep,name=external_endpoints,json=externalEndpoints,proto3" json:"external_endpoints,omitempty"`
	InternalLoadBalancers []*RRSetRoutingPolicyLoadBalancerTarget `protobuf:"bytes,2,rep,name=internal_load_balancers,json=internalLoadBalancers,proto3" json:"internal_load_balancers,omitempty"`
}

func (x *RRSetRoutingPolicyHealthCheckTargets) Reset() {
	*x = RRSetRoutingPolicyHealthCheckTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyHealthCheckTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyHealthCheckTargets) ProtoMessage() {}

func (x *RRSetRoutingPolicyHealthCheckTargets) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyHealthCheckTargets.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyHealthCheckTargets) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{6}
}

func (x *RRSetRoutingPolicyHealthCheckTargets) GetExternalEndpoints() []string {
	if x != nil {
		return x.ExternalEndpoints
	}
	return nil
}

func (x *RRSetRoutingPolicyHealthCheckTargets) GetInternalLoadBalancers() []*RRSetRoutingPolicyLoadBalancerTarget {
	if x != nil {
		return x.InternalLoadBalancers
	}
	return nil
}

type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      string               `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	StartTime string               `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Status    string               `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Additions []*ResourceRecordSet `protobuf:"bytes,4,rep,name=additions,proto3" json:"additions,omitempty"`
	Deletions []*ResourceRecordSet `protobuf:"bytes,5,rep,name=deletions,proto3" json:"deletions,omitempty"`
	Id        string               `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	IsServing bool                 `protobuf:"varint,7,opt,name=is_serving,json=isServing,proto3" json:"is_serving,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{7}
}

func (x *Change) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Change) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Change) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Change) GetAdditions() []*ResourceRecordSet {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *Change) GetDeletions() []*ResourceRecordSet {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *Change) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Change) GetIsServing() bool {
	if x != nil {
		return x.IsServing
	}
	return false
}

type GoogleIamV1GetPolicyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedPolicyVersion int32 `protobuf:"varint,1,opt,name=requested_policy_version,json=requestedPolicyVersion,proto3" json:"requested_policy_version,omitempty"`
}

func (x *GoogleIamV1GetPolicyOptions) Reset() {
	*x = GoogleIamV1GetPolicyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1GetPolicyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1GetPolicyOptions) ProtoMessage() {}

func (x *GoogleIamV1GetPolicyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1GetPolicyOptions.ProtoReflect.Descriptor instead.
func (*GoogleIamV1GetPolicyOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{8}
}

func (x *GoogleIamV1GetPolicyOptions) GetRequestedPolicyVersion() int32 {
	if x != nil {
		return x.RequestedPolicyVersion
	}
	return 0
}

type ManagedZonePeeringConfigTargetNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeactivateTime string `protobuf:"bytes,1,opt,name=deactivate_time,json=deactivateTime,proto3" json:"deactivate_time,omitempty"`
	Kind           string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	NetworkUrl     string `protobuf:"bytes,3,opt,name=network_url,json=networkUrl,proto3" json:"network_url,omitempty"`
}

func (x *ManagedZonePeeringConfigTargetNetwork) Reset() {
	*x = ManagedZonePeeringConfigTargetNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePeeringConfigTargetNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePeeringConfigTargetNetwork) ProtoMessage() {}

func (x *ManagedZonePeeringConfigTargetNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePeeringConfigTargetNetwork.ProtoReflect.Descriptor instead.
func (*ManagedZonePeeringConfigTargetNetwork) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{9}
}

func (x *ManagedZonePeeringConfigTargetNetwork) GetDeactivateTime() string {
	if x != nil {
		return x.DeactivateTime
	}
	return ""
}

func (x *ManagedZonePeeringConfigTargetNetwork) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZonePeeringConfigTargetNetwork) GetNetworkUrl() string {
	if x != nil {
		return x.NetworkUrl
	}
	return ""
}

type PoliciesPatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Policy *Policy         `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *PoliciesPatchResponse) Reset() {
	*x = PoliciesPatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesPatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesPatchResponse) ProtoMessage() {}

func (x *PoliciesPatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesPatchResponse.ProtoReflect.Descriptor instead.
func (*PoliciesPatchResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{10}
}

func (x *PoliciesPatchResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PoliciesPatchResponse) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *ResponseHeader) Reset() {
	*x = ResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseHeader) ProtoMessage() {}

func (x *ResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseHeader.ProtoReflect.Descriptor instead.
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{11}
}

func (x *ResponseHeader) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

type GoogleIamV1Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Expr    `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Members   []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	Role      string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GoogleIamV1Binding) Reset() {
	*x = GoogleIamV1Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1Binding) ProtoMessage() {}

func (x *GoogleIamV1Binding) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1Binding.ProtoReflect.Descriptor instead.
func (*GoogleIamV1Binding) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{12}
}

func (x *GoogleIamV1Binding) GetCondition() *Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *GoogleIamV1Binding) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GoogleIamV1Binding) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type GoogleIamV1TestIamPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GoogleIamV1TestIamPermissionsRequest) Reset() {
	*x = GoogleIamV1TestIamPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1TestIamPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1TestIamPermissionsRequest) ProtoMessage() {}

func (x *GoogleIamV1TestIamPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1TestIamPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1TestIamPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{13}
}

func (x *GoogleIamV1TestIamPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type PolicyAlternativeNameServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string                                               `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	TargetNameServers []*PolicyAlternativeNameServerConfigTargetNameServer `protobuf:"bytes,2,rep,name=target_name_servers,json=targetNameServers,proto3" json:"target_name_servers,omitempty"`
}

func (x *PolicyAlternativeNameServerConfig) Reset() {
	*x = PolicyAlternativeNameServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAlternativeNameServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAlternativeNameServerConfig) ProtoMessage() {}

func (x *PolicyAlternativeNameServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAlternativeNameServerConfig.ProtoReflect.Descriptor instead.
func (*PolicyAlternativeNameServerConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{14}
}

func (x *PolicyAlternativeNameServerConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfig) GetTargetNameServers() []*PolicyAlternativeNameServerConfigTargetNameServer {
	if x != nil {
		return x.TargetNameServers
	}
	return nil
}

type ResponsePoliciesUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsePolicy *ResponsePolicy `protobuf:"bytes,1,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
	Header         *ResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ResponsePoliciesUpdateResponse) Reset() {
	*x = ResponsePoliciesUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePoliciesUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePoliciesUpdateResponse) ProtoMessage() {}

func (x *ResponsePoliciesUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePoliciesUpdateResponse.ProtoReflect.Descriptor instead.
func (*ResponsePoliciesUpdateResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{15}
}

func (x *ResponsePoliciesUpdateResponse) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

func (x *ResponsePoliciesUpdateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type OperationDnsKeyContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewValue *DnsKey `protobuf:"bytes,1,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	OldValue *DnsKey `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
}

func (x *OperationDnsKeyContext) Reset() {
	*x = OperationDnsKeyContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDnsKeyContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDnsKeyContext) ProtoMessage() {}

func (x *OperationDnsKeyContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDnsKeyContext.ProtoReflect.Descriptor instead.
func (*OperationDnsKeyContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{16}
}

func (x *OperationDnsKeyContext) GetNewValue() *DnsKey {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *OperationDnsKeyContext) GetOldValue() *DnsKey {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type ManagedZonePrivateVisibilityConfigGKECluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GkeClusterName string `protobuf:"bytes,1,opt,name=gke_cluster_name,json=gkeClusterName,proto3" json:"gke_cluster_name,omitempty"`
	Kind           string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) Reset() {
	*x = ManagedZonePrivateVisibilityConfigGKECluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePrivateVisibilityConfigGKECluster) ProtoMessage() {}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePrivateVisibilityConfigGKECluster.ProtoReflect.Descriptor instead.
func (*ManagedZonePrivateVisibilityConfigGKECluster) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{17}
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) GetGkeClusterName() string {
	if x != nil {
		return x.GkeClusterName
	}
	return ""
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type PolicyAlternativeNameServerConfigTargetNameServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingPath string `protobuf:"bytes,1,opt,name=forwarding_path,json=forwardingPath,proto3" json:"forwarding_path,omitempty"`
	Ipv4Address    string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address    string `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Kind           string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) Reset() {
	*x = PolicyAlternativeNameServerConfigTargetNameServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAlternativeNameServerConfigTargetNameServer) ProtoMessage() {}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAlternativeNameServerConfigTargetNameServer.ProtoReflect.Descriptor instead.
func (*PolicyAlternativeNameServerConfigTargetNameServer) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{18}
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetForwardingPath() string {
	if x != nil {
		return x.ForwardingPath
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind   string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Quota  *Quota `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{19}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Project) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Project) GetQuota() *Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

type RRSetRoutingPolicyWrrPolicyWrrPolicyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthCheckedTargets *RRSetRoutingPolicyHealthCheckTargets `protobuf:"bytes,1,opt,name=health_checked_targets,json=healthCheckedTargets,proto3" json:"health_checked_targets,omitempty"`
	Kind                 string                                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Rrdatas              []string                              `protobuf:"bytes,3,rep,name=rrdatas,proto3" json:"rrdatas,omitempty"`
	SignatureRrdatas     []string                              `protobuf:"bytes,4,rep,name=signature_rrdatas,json=signatureRrdatas,proto3" json:"signature_rrdatas,omitempty"`
	Weight               float64                               `protobuf:"fixed64,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) Reset() {
	*x = RRSetRoutingPolicyWrrPolicyWrrPolicyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyWrrPolicyWrrPolicyItem) ProtoMessage() {}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyWrrPolicyWrrPolicyItem.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyWrrPolicyWrrPolicyItem) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{20}
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetHealthCheckedTargets() *RRSetRoutingPolicyHealthCheckTargets {
	if x != nil {
		return x.HealthCheckedTargets
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetRrdatas() []string {
	if x != nil {
		return x.Rrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetSignatureRrdatas() []string {
	if x != nil {
		return x.SignatureRrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type GoogleIamV1TestIamPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GoogleIamV1TestIamPermissionsResponse) Reset() {
	*x = GoogleIamV1TestIamPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1TestIamPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1TestIamPermissionsResponse) ProtoMessage() {}

func (x *GoogleIamV1TestIamPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1TestIamPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleIamV1TestIamPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{21}
}

func (x *GoogleIamV1TestIamPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type ManagedZoneOperationsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Kind          string          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	NextPageToken string          `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Operations    []*Operation    `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *ManagedZoneOperationsListResponse) Reset() {
	*x = ManagedZoneOperationsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneOperationsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneOperationsListResponse) ProtoMessage() {}

func (x *ManagedZoneOperationsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneOperationsListResponse.ProtoReflect.Descriptor instead.
func (*ManagedZoneOperationsListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{22}
}

func (x *ManagedZoneOperationsListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ManagedZoneOperationsListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZoneOperationsListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ManagedZoneOperationsListResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ManagedZonePrivateVisibilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GkeClusters []*ManagedZonePrivateVisibilityConfigGKECluster `protobuf:"bytes,1,rep,name=gke_clusters,json=gkeClusters,proto3" json:"gke_clusters,omitempty"`
	Kind        string                                          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Networks    []*ManagedZonePrivateVisibilityConfigNetwork    `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *ManagedZonePrivateVisibilityConfig) Reset() {
	*x = ManagedZonePrivateVisibilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePrivateVisibilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePrivateVisibilityConfig) ProtoMessage() {}

func (x *ManagedZonePrivateVisibilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePrivateVisibilityConfig.ProtoReflect.Descriptor instead.
func (*ManagedZonePrivateVisibilityConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{23}
}

func (x *ManagedZonePrivateVisibilityConfig) GetGkeClusters() []*ManagedZonePrivateVisibilityConfigGKECluster {
	if x != nil {
		return x.GkeClusters
	}
	return nil
}

func (x *ManagedZonePrivateVisibilityConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZonePrivateVisibilityConfig) GetNetworks() []*ManagedZonePrivateVisibilityConfigNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

type ManagedZonesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string          `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Header        *ResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Kind          string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	ManagedZones  []*ManagedZone  `protobuf:"bytes,4,rep,name=managed_zones,json=managedZones,proto3" json:"managed_zones,omitempty"`
}

func (x *ManagedZonesListResponse) Reset() {
	*x = ManagedZonesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonesListResponse) ProtoMessage() {}

func (x *ManagedZonesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonesListResponse.ProtoReflect.Descriptor instead.
func (*ManagedZonesListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{24}
}

func (x *ManagedZonesListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ManagedZonesListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ManagedZonesListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZonesListResponse) GetManagedZones() []*ManagedZone {
	if x != nil {
		return x.ManagedZones
	}
	return nil
}

type ManagedZoneDnsSecConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultKeySpecs []*DnsKeySpec `protobuf:"bytes,1,rep,name=default_key_specs,json=defaultKeySpecs,proto3" json:"default_key_specs,omitempty"`
	Kind            string        `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	NonExistence    string        `protobuf:"bytes,3,opt,name=non_existence,json=nonExistence,proto3" json:"non_existence,omitempty"`
	State           string        `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ManagedZoneDnsSecConfig) Reset() {
	*x = ManagedZoneDnsSecConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneDnsSecConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneDnsSecConfig) ProtoMessage() {}

func (x *ManagedZoneDnsSecConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneDnsSecConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneDnsSecConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{25}
}

func (x *ManagedZoneDnsSecConfig) GetDefaultKeySpecs() []*DnsKeySpec {
	if x != nil {
		return x.DefaultKeySpecs
	}
	return nil
}

func (x *ManagedZoneDnsSecConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZoneDnsSecConfig) GetNonExistence() string {
	if x != nil {
		return x.NonExistence
	}
	return ""
}

func (x *ManagedZoneDnsSecConfig) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type OperationManagedZoneContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewValue *ManagedZone `protobuf:"bytes,1,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	OldValue *ManagedZone `protobuf:"bytes,2,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
}

func (x *OperationManagedZoneContext) Reset() {
	*x = OperationManagedZoneContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationManagedZoneContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationManagedZoneContext) ProtoMessage() {}

func (x *OperationManagedZoneContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationManagedZoneContext.ProtoReflect.Descriptor instead.
func (*OperationManagedZoneContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{26}
}

func (x *OperationManagedZoneContext) GetNewValue() *ManagedZone {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *OperationManagedZoneContext) GetOldValue() *ManagedZone {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                        string                             `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Name                        string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Networks                    []*PolicyNetwork                   `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	AlternativeNameServerConfig *PolicyAlternativeNameServerConfig `protobuf:"bytes,4,opt,name=alternative_name_server_config,json=alternativeNameServerConfig,proto3" json:"alternative_name_server_config,omitempty"`
	Description                 string                             `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	EnableInboundForwarding     bool                               `protobuf:"varint,6,opt,name=enable_inbound_forwarding,json=enableInboundForwarding,proto3" json:"enable_inbound_forwarding,omitempty"`
	EnableLogging               bool                               `protobuf:"varint,7,opt,name=enable_logging,json=enableLogging,proto3" json:"enable_logging,omitempty"`
	Id                          string                             `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{27}
}

func (x *Policy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetNetworks() []*PolicyNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Policy) GetAlternativeNameServerConfig() *PolicyAlternativeNameServerConfig {
	if x != nil {
		return x.AlternativeNameServerConfig
	}
	return nil
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetEnableInboundForwarding() bool {
	if x != nil {
		return x.EnableInboundForwarding
	}
	return false
}

func (x *Policy) GetEnableLogging() bool {
	if x != nil {
		return x.EnableLogging
	}
	return false
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResponsePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind               string                      `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Labels             map[string]string           `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Networks           []*ResponsePolicyNetwork    `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	ResponsePolicyName string                      `protobuf:"bytes,4,opt,name=response_policy_name,json=responsePolicyName,proto3" json:"response_policy_name,omitempty"`
	Description        string                      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	GkeClusters        []*ResponsePolicyGKECluster `protobuf:"bytes,6,rep,name=gke_clusters,json=gkeClusters,proto3" json:"gke_clusters,omitempty"`
	Id                 string                      `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResponsePolicy) Reset() {
	*x = ResponsePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicy) ProtoMessage() {}

func (x *ResponsePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicy.ProtoReflect.Descriptor instead.
func (*ResponsePolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{28}
}

func (x *ResponsePolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResponsePolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResponsePolicy) GetNetworks() []*ResponsePolicyNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ResponsePolicy) GetResponsePolicyName() string {
	if x != nil {
		return x.ResponsePolicyName
	}
	return ""
}

func (x *ResponsePolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResponsePolicy) GetGkeClusters() []*ResponsePolicyGKECluster {
	if x != nil {
		return x.GkeClusters
	}
	return nil
}

func (x *ResponsePolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DnsKeysListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsKeys       []*DnsKey       `protobuf:"bytes,1,rep,name=dns_keys,json=dnsKeys,proto3" json:"dns_keys,omitempty"`
	Header        *ResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Kind          string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	NextPageToken string          `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *DnsKeysListResponse) Reset() {
	*x = DnsKeysListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKeysListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKeysListResponse) ProtoMessage() {}

func (x *DnsKeysListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKeysListResponse.ProtoReflect.Descriptor instead.
func (*DnsKeysListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{29}
}

func (x *DnsKeysListResponse) GetDnsKeys() []*DnsKey {
	if x != nil {
		return x.DnsKeys
	}
	return nil
}

func (x *DnsKeysListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DnsKeysListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DnsKeysListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ManagedZoneForwardingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              string                                         `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	TargetNameServers []*ManagedZoneForwardingConfigNameServerTarget `protobuf:"bytes,2,rep,name=target_name_servers,json=targetNameServers,proto3" json:"target_name_servers,omitempty"`
}

func (x *ManagedZoneForwardingConfig) Reset() {
	*x = ManagedZoneForwardingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneForwardingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneForwardingConfig) ProtoMessage() {}

func (x *ManagedZoneForwardingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneForwardingConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneForwardingConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{30}
}

func (x *ManagedZoneForwardingConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZoneForwardingConfig) GetTargetNameServers() []*ManagedZoneForwardingConfigNameServerTarget {
	if x != nil {
		return x.TargetNameServers
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        string                       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Type          string                       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	User          string                       `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	ZoneContext   *OperationManagedZoneContext `protobuf:"bytes,4,opt,name=zone_context,json=zoneContext,proto3" json:"zone_context,omitempty"`
	DnsKeyContext *OperationDnsKeyContext      `protobuf:"bytes,5,opt,name=dns_key_context,json=dnsKeyContext,proto3" json:"dns_key_context,omitempty"`
	Id            string                       `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Kind          string                       `protobuf:"bytes,7,opt,name=kind,proto3" json:"kind,omitempty"`
	StartTime     string                       `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{31}
}

func (x *Operation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Operation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Operation) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Operation) GetZoneContext() *OperationManagedZoneContext {
	if x != nil {
		return x.ZoneContext
	}
	return nil
}

func (x *Operation) GetDnsKeyContext() *OperationDnsKeyContext {
	if x != nil {
		return x.DnsKeyContext
	}
	return nil
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Operation) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

type ResponsePolicyRulesUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *ResponseHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,2,opt,name=response_policy_rule,json=responsePolicyRule,proto3" json:"response_policy_rule,omitempty"`
}

func (x *ResponsePolicyRulesUpdateResponse) Reset() {
	*x = ResponsePolicyRulesUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRulesUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRulesUpdateResponse) ProtoMessage() {}

func (x *ResponsePolicyRulesUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRulesUpdateResponse.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRulesUpdateResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{32}
}

func (x *ResponsePolicyRulesUpdateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponsePolicyRulesUpdateResponse) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Expression  string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Location    string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{33}
}

func (x *Expr) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Expr) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Expr) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Expr) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ManagedZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardingConfig        *ManagedZoneForwardingConfig        `protobuf:"bytes,1,opt,name=forwarding_config,json=forwardingConfig,proto3" json:"forwarding_config,omitempty"`
	Id                      string                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PeeringConfig           *ManagedZonePeeringConfig           `protobuf:"bytes,3,opt,name=peering_config,json=peeringConfig,proto3" json:"peering_config,omitempty"`
	CreationTime            string                              `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	NameServers             []string                            `protobuf:"bytes,5,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`
	Labels                  map[string]string                   `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description             string                              `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	DnssecConfig            *ManagedZoneDnsSecConfig            `protobuf:"bytes,8,opt,name=dnssec_config,json=dnssecConfig,proto3" json:"dnssec_config,omitempty"`
	Name                    string                              `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	ReverseLookupConfig     *ManagedZoneReverseLookupConfig     `protobuf:"bytes,10,opt,name=reverse_lookup_config,json=reverseLookupConfig,proto3" json:"reverse_lookup_config,omitempty"`
	ServiceDirectoryConfig  *ManagedZoneServiceDirectoryConfig  `protobuf:"bytes,11,opt,name=service_directory_config,json=serviceDirectoryConfig,proto3" json:"service_directory_config,omitempty"`
	CloudLoggingConfig      *ManagedZoneCloudLoggingConfig      `protobuf:"bytes,12,opt,name=cloud_logging_config,json=cloudLoggingConfig,proto3" json:"cloud_logging_config,omitempty"`
	Kind                    string                              `protobuf:"bytes,13,opt,name=kind,proto3" json:"kind,omitempty"`
	NameServerSet           string                              `protobuf:"bytes,14,opt,name=name_server_set,json=nameServerSet,proto3" json:"name_server_set,omitempty"`
	PrivateVisibilityConfig *ManagedZonePrivateVisibilityConfig `protobuf:"bytes,15,opt,name=private_visibility_config,json=privateVisibilityConfig,proto3" json:"private_visibility_config,omitempty"`
	Visibility              string                              `protobuf:"bytes,16,opt,name=visibility,proto3" json:"visibility,omitempty"`
	DnsName                 string                              `protobuf:"bytes,17,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
}

func (x *ManagedZone) Reset() {
	*x = ManagedZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZone) ProtoMessage() {}

func (x *ManagedZone) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZone.ProtoReflect.Descriptor instead.
func (*ManagedZone) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{34}
}

func (x *ManagedZone) GetForwardingConfig() *ManagedZoneForwardingConfig {
	if x != nil {
		return x.ForwardingConfig
	}
	return nil
}

func (x *ManagedZone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagedZone) GetPeeringConfig() *ManagedZonePeeringConfig {
	if x != nil {
		return x.PeeringConfig
	}
	return nil
}

func (x *ManagedZone) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *ManagedZone) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *ManagedZone) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ManagedZone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ManagedZone) GetDnssecConfig() *ManagedZoneDnsSecConfig {
	if x != nil {
		return x.DnssecConfig
	}
	return nil
}

func (x *ManagedZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManagedZone) GetReverseLookupConfig() *ManagedZoneReverseLookupConfig {
	if x != nil {
		return x.ReverseLookupConfig
	}
	return nil
}

func (x *ManagedZone) GetServiceDirectoryConfig() *ManagedZoneServiceDirectoryConfig {
	if x != nil {
		return x.ServiceDirectoryConfig
	}
	return nil
}

func (x *ManagedZone) GetCloudLoggingConfig() *ManagedZoneCloudLoggingConfig {
	if x != nil {
		return x.CloudLoggingConfig
	}
	return nil
}

func (x *ManagedZone) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZone) GetNameServerSet() string {
	if x != nil {
		return x.NameServerSet
	}
	return ""
}

func (x *ManagedZone) GetPrivateVisibilityConfig() *ManagedZonePrivateVisibilityConfig {
	if x != nil {
		return x.PrivateVisibilityConfig
	}
	return nil
}

func (x *ManagedZone) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *ManagedZone) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

type ManagedZoneForwardingConfigNameServerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6Address    string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	Kind           string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	ForwardingPath string `protobuf:"bytes,3,opt,name=forwarding_path,json=forwardingPath,proto3" json:"forwarding_path,omitempty"`
	Ipv4Address    string `protobuf:"bytes,4,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
}

func (x *ManagedZoneForwardingConfigNameServerTarget) Reset() {
	*x = ManagedZoneForwardingConfigNameServerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneForwardingConfigNameServerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneForwardingConfigNameServerTarget) ProtoMessage() {}

func (x *ManagedZoneForwardingConfigNameServerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneForwardingConfigNameServerTarget.ProtoReflect.Descriptor instead.
func (*ManagedZoneForwardingConfigNameServerTarget) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{35}
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetForwardingPath() string {
	if x != nil {
		return x.ForwardingPath
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

type RRSetRoutingPolicyGeoPolicyGeoPolicyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                 string                                `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Location             string                                `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Rrdatas              []string                              `protobuf:"bytes,3,rep,name=rrdatas,proto3" json:"rrdatas,omitempty"`
	SignatureRrdatas     []string                              `protobuf:"bytes,4,rep,name=signature_rrdatas,json=signatureRrdatas,proto3" json:"signature_rrdatas,omitempty"`
	HealthCheckedTargets *RRSetRoutingPolicyHealthCheckTargets `protobuf:"bytes,5,opt,name=health_checked_targets,json=healthCheckedTargets,proto3" json:"health_checked_targets,omitempty"`
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) Reset() {
	*x = RRSetRoutingPolicyGeoPolicyGeoPolicyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyGeoPolicyGeoPolicyItem) ProtoMessage() {}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyGeoPolicyGeoPolicyItem.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyGeoPolicyGeoPolicyItem) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{36}
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetRrdatas() []string {
	if x != nil {
		return x.Rrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetSignatureRrdatas() []string {
	if x != nil {
		return x.SignatureRrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetHealthCheckedTargets() *RRSetRoutingPolicyHealthCheckTargets {
	if x != nil {
		return x.HealthCheckedTargets
	}
	return nil
}

type ResponsePolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Behavior  string                       `protobuf:"bytes,1,opt,name=behavior,proto3" json:"behavior,omitempty"`
	DnsName   string                       `protobuf:"bytes,2,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	Kind      string                       `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	LocalData *ResponsePolicyRuleLocalData `protobuf:"bytes,4,opt,name=local_data,json=localData,proto3" json:"local_data,omitempty"`
	RuleName  string                       `protobuf:"bytes,5,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
}

func (x *ResponsePolicyRule) Reset() {
	*x = ResponsePolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRule) ProtoMessage() {}

func (x *ResponsePolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRule.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{37}
}

func (x *ResponsePolicyRule) GetBehavior() string {
	if x != nil {
		return x.Behavior
	}
	return ""
}

func (x *ResponsePolicyRule) GetDnsName() string {
	if x != nil {
		return x.DnsName
	}
	return ""
}

func (x *ResponsePolicyRule) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResponsePolicyRule) GetLocalData() *ResponsePolicyRuleLocalData {
	if x != nil {
		return x.LocalData
	}
	return nil
}

func (x *ResponsePolicyRule) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

type RRSetRoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wrr           *RRSetRoutingPolicyWrrPolicy           `protobuf:"bytes,1,opt,name=wrr,proto3" json:"wrr,omitempty"`
	WrrPolicy     *RRSetRoutingPolicyWrrPolicy           `protobuf:"bytes,2,opt,name=wrr_policy,json=wrrPolicy,proto3" json:"wrr_policy,omitempty"`
	Geo           *RRSetRoutingPolicyGeoPolicy           `protobuf:"bytes,3,opt,name=geo,proto3" json:"geo,omitempty"`
	GeoPolicy     *RRSetRoutingPolicyGeoPolicy           `protobuf:"bytes,4,opt,name=geo_policy,json=geoPolicy,proto3" json:"geo_policy,omitempty"`
	HealthCheck   string                                 `protobuf:"bytes,5,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	Kind          string                                 `protobuf:"bytes,6,opt,name=kind,proto3" json:"kind,omitempty"`
	PrimaryBackup *RRSetRoutingPolicyPrimaryBackupPolicy `protobuf:"bytes,7,opt,name=primary_backup,json=primaryBackup,proto3" json:"primary_backup,omitempty"`
}

func (x *RRSetRoutingPolicy) Reset() {
	*x = RRSetRoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{38}
}

func (x *RRSetRoutingPolicy) GetWrr() *RRSetRoutingPolicyWrrPolicy {
	if x != nil {
		return x.Wrr
	}
	return nil
}

func (x *RRSetRoutingPolicy) GetWrrPolicy() *RRSetRoutingPolicyWrrPolicy {
	if x != nil {
		return x.WrrPolicy
	}
	return nil
}

func (x *RRSetRoutingPolicy) GetGeo() *RRSetRoutingPolicyGeoPolicy {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *RRSetRoutingPolicy) GetGeoPolicy() *RRSetRoutingPolicyGeoPolicy {
	if x != nil {
		return x.GeoPolicy
	}
	return nil
}

func (x *RRSetRoutingPolicy) GetHealthCheck() string {
	if x != nil {
		return x.HealthCheck
	}
	return ""
}

func (x *RRSetRoutingPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicy) GetPrimaryBackup() *RRSetRoutingPolicyPrimaryBackupPolicy {
	if x != nil {
		return x.PrimaryBackup
	}
	return nil
}

type RRSetRoutingPolicyLoadBalancerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind             string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	LoadBalancerType string `protobuf:"bytes,2,opt,name=load_balancer_type,json=loadBalancerType,proto3" json:"load_balancer_type,omitempty"`
	NetworkUrl       string `protobuf:"bytes,3,opt,name=network_url,json=networkUrl,proto3" json:"network_url,omitempty"`
	Port             string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	Project          string `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	Region           string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	IpAddress        string `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IpProtocol       string `protobuf:"bytes,8,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty"`
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) Reset() {
	*x = RRSetRoutingPolicyLoadBalancerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyLoadBalancerTarget) ProtoMessage() {}

func (x *RRSetRoutingPolicyLoadBalancerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyLoadBalancerTarget.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyLoadBalancerTarget) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{39}
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetLoadBalancerType() string {
	if x != nil {
		return x.LoadBalancerType
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetNetworkUrl() string {
	if x != nil {
		return x.NetworkUrl
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetIpProtocol() string {
	if x != nil {
		return x.IpProtocol
	}
	return ""
}

type ResponsePoliciesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header           *ResponseHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	NextPageToken    string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	ResponsePolicies []*ResponsePolicy `protobuf:"bytes,3,rep,name=response_policies,json=responsePolicies,proto3" json:"response_policies,omitempty"`
}

func (x *ResponsePoliciesListResponse) Reset() {
	*x = ResponsePoliciesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePoliciesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePoliciesListResponse) ProtoMessage() {}

func (x *ResponsePoliciesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePoliciesListResponse.ProtoReflect.Descriptor instead.
func (*ResponsePoliciesListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{40}
}

func (x *ResponsePoliciesListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponsePoliciesListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ResponsePoliciesListResponse) GetResponsePolicies() []*ResponsePolicy {
	if x != nil {
		return x.ResponsePolicies
	}
	return nil
}

type ResponsePolicyRulesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *ResponseHeader       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	NextPageToken       string                `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	ResponsePolicyRules []*ResponsePolicyRule `protobuf:"bytes,3,rep,name=response_policy_rules,json=responsePolicyRules,proto3" json:"response_policy_rules,omitempty"`
}

func (x *ResponsePolicyRulesListResponse) Reset() {
	*x = ResponsePolicyRulesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRulesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRulesListResponse) ProtoMessage() {}

func (x *ResponsePolicyRulesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRulesListResponse.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRulesListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{41}
}

func (x *ResponsePolicyRulesListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponsePolicyRulesListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ResponsePolicyRulesListResponse) GetResponsePolicyRules() []*ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRules
	}
	return nil
}

type GoogleIamV1AuditConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service         string                       `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	AuditLogConfigs []*GoogleIamV1AuditLogConfig `protobuf:"bytes,2,rep,name=audit_log_configs,json=auditLogConfigs,proto3" json:"audit_log_configs,omitempty"`
}

func (x *GoogleIamV1AuditConfig) Reset() {
	*x = GoogleIamV1AuditConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1AuditConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1AuditConfig) ProtoMessage() {}

func (x *GoogleIamV1AuditConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1AuditConfig.ProtoReflect.Descriptor instead.
func (*GoogleIamV1AuditConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{42}
}

func (x *GoogleIamV1AuditConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GoogleIamV1AuditConfig) GetAuditLogConfigs() []*GoogleIamV1AuditLogConfig {
	if x != nil {
		return x.AuditLogConfigs
	}
	return nil
}

type RRSetRoutingPolicyWrrPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RRSetRoutingPolicyWrrPolicyWrrPolicyItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Kind  string                                      `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *RRSetRoutingPolicyWrrPolicy) Reset() {
	*x = RRSetRoutingPolicyWrrPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyWrrPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyWrrPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicyWrrPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyWrrPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyWrrPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{43}
}

func (x *RRSetRoutingPolicyWrrPolicy) GetItems() []*RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ResourceRecordSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ttl              int32               `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Type             string              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Kind             string              `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Name             string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	RoutingPolicy    *RRSetRoutingPolicy `protobuf:"bytes,5,opt,name=routing_policy,json=routingPolicy,proto3" json:"routing_policy,omitempty"`
	Rrdatas          []string            `protobuf:"bytes,6,rep,name=rrdatas,proto3" json:"rrdatas,omitempty"`
	SignatureRrdatas []string            `protobuf:"bytes,7,rep,name=signature_rrdatas,json=signatureRrdatas,proto3" json:"signature_rrdatas,omitempty"`
}

func (x *ResourceRecordSet) Reset() {
	*x = ResourceRecordSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecordSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecordSet) ProtoMessage() {}

func (x *ResourceRecordSet) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecordSet.ProtoReflect.Descriptor instead.
func (*ResourceRecordSet) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{44}
}

func (x *ResourceRecordSet) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *ResourceRecordSet) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceRecordSet) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceRecordSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceRecordSet) GetRoutingPolicy() *RRSetRoutingPolicy {
	if x != nil {
		return x.RoutingPolicy
	}
	return nil
}

func (x *ResourceRecordSet) GetRrdatas() []string {
	if x != nil {
		return x.Rrdatas
	}
	return nil
}

func (x *ResourceRecordSet) GetSignatureRrdatas() []string {
	if x != nil {
		return x.SignatureRrdatas
	}
	return nil
}

type ResponsePolicyGKECluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GkeClusterName string `protobuf:"bytes,1,opt,name=gke_cluster_name,json=gkeClusterName,proto3" json:"gke_cluster_name,omitempty"`
	Kind           string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ResponsePolicyGKECluster) Reset() {
	*x = ResponsePolicyGKECluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyGKECluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyGKECluster) ProtoMessage() {}

func (x *ResponsePolicyGKECluster) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyGKECluster.ProtoReflect.Descriptor instead.
func (*ResponsePolicyGKECluster) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{45}
}

func (x *ResponsePolicyGKECluster) GetGkeClusterName() string {
	if x != nil {
		return x.GkeClusterName
	}
	return ""
}

func (x *ResponsePolicyGKECluster) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ChangesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes       []*Change       `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	Header        *ResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Kind          string          `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	NextPageToken string          `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ChangesListResponse) Reset() {
	*x = ChangesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesListResponse) ProtoMessage() {}

func (x *ChangesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesListResponse.ProtoReflect.Descriptor instead.
func (*ChangesListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{46}
}

func (x *ChangesListResponse) GetChanges() []*Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *ChangesListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ChangesListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ChangesListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GoogleIamV1GetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *GoogleIamV1GetPolicyOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *GoogleIamV1GetIamPolicyRequest) Reset() {
	*x = GoogleIamV1GetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1GetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1GetIamPolicyRequest) ProtoMessage() {}

func (x *GoogleIamV1GetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1GetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1GetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{47}
}

func (x *GoogleIamV1GetIamPolicyRequest) GetOptions() *GoogleIamV1GetPolicyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ManagedZoneCloudLoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableLogging bool   `protobuf:"varint,1,opt,name=enable_logging,json=enableLogging,proto3" json:"enable_logging,omitempty"`
	Kind          string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ManagedZoneCloudLoggingConfig) Reset() {
	*x = ManagedZoneCloudLoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneCloudLoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneCloudLoggingConfig) ProtoMessage() {}

func (x *ManagedZoneCloudLoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneCloudLoggingConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneCloudLoggingConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{48}
}

func (x *ManagedZoneCloudLoggingConfig) GetEnableLogging() bool {
	if x != nil {
		return x.EnableLogging
	}
	return false
}

func (x *ManagedZoneCloudLoggingConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ManagedZoneServiceDirectoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      string                                      `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Namespace *ManagedZoneServiceDirectoryConfigNamespace `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ManagedZoneServiceDirectoryConfig) Reset() {
	*x = ManagedZoneServiceDirectoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneServiceDirectoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneServiceDirectoryConfig) ProtoMessage() {}

func (x *ManagedZoneServiceDirectoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneServiceDirectoryConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneServiceDirectoryConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{49}
}

func (x *ManagedZoneServiceDirectoryConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZoneServiceDirectoryConfig) GetNamespace() *ManagedZoneServiceDirectoryConfigNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ManagedZoneServiceDirectoryConfigNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletionTime string `protobuf:"bytes,1,opt,name=deletion_time,json=deletionTime,proto3" json:"deletion_time,omitempty"`
	Kind         string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	NamespaceUrl string `protobuf:"bytes,3,opt,name=namespace_url,json=namespaceUrl,proto3" json:"namespace_url,omitempty"`
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) Reset() {
	*x = ManagedZoneServiceDirectoryConfigNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneServiceDirectoryConfigNamespace) ProtoMessage() {}

func (x *ManagedZoneServiceDirectoryConfigNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneServiceDirectoryConfigNamespace.ProtoReflect.Descriptor instead.
func (*ManagedZoneServiceDirectoryConfigNamespace) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{50}
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) GetDeletionTime() string {
	if x != nil {
		return x.DeletionTime
	}
	return ""
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) GetNamespaceUrl() string {
	if x != nil {
		return x.NamespaceUrl
	}
	return ""
}

type DnsKeyDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DnsKeyDigest) Reset() {
	*x = DnsKeyDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKeyDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKeyDigest) ProtoMessage() {}

func (x *DnsKeyDigest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKeyDigest.ProtoReflect.Descriptor instead.
func (*DnsKeyDigest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{51}
}

func (x *DnsKeyDigest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *DnsKeyDigest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GoogleIamV1SetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy     *GoogleIamV1Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	UpdateMask string             `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *GoogleIamV1SetIamPolicyRequest) Reset() {
	*x = GoogleIamV1SetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1SetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1SetIamPolicyRequest) ProtoMessage() {}

func (x *GoogleIamV1SetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1SetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1SetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{52}
}

func (x *GoogleIamV1SetIamPolicyRequest) GetPolicy() *GoogleIamV1Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *GoogleIamV1SetIamPolicyRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

type ResponsePolicyNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkUrl string `protobuf:"bytes,1,opt,name=network_url,json=networkUrl,proto3" json:"network_url,omitempty"`
	Kind       string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ResponsePolicyNetwork) Reset() {
	*x = ResponsePolicyNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyNetwork) ProtoMessage() {}

func (x *ResponsePolicyNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyNetwork.ProtoReflect.Descriptor instead.
func (*ResponsePolicyNetwork) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{53}
}

func (x *ResponsePolicyNetwork) GetNetworkUrl() string {
	if x != nil {
		return x.NetworkUrl
	}
	return ""
}

func (x *ResponsePolicyNetwork) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ResponsePoliciesPatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ResponsePolicy *ResponsePolicy `protobuf:"bytes,2,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
}

func (x *ResponsePoliciesPatchResponse) Reset() {
	*x = ResponsePoliciesPatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePoliciesPatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePoliciesPatchResponse) ProtoMessage() {}

func (x *ResponsePoliciesPatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePoliciesPatchResponse.ProtoReflect.Descriptor instead.
func (*ResponsePoliciesPatchResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{54}
}

func (x *ResponsePoliciesPatchResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponsePoliciesPatchResponse) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type ResponsePolicyRulesPatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header             *ResponseHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,2,opt,name=response_policy_rule,json=responsePolicyRule,proto3" json:"response_policy_rule,omitempty"`
}

func (x *ResponsePolicyRulesPatchResponse) Reset() {
	*x = ResponsePolicyRulesPatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRulesPatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRulesPatchResponse) ProtoMessage() {}

func (x *ResponsePolicyRulesPatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRulesPatchResponse.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRulesPatchResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{55}
}

func (x *ResponsePolicyRulesPatchResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResponsePolicyRulesPatchResponse) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type GoogleIamV1AuditLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExemptedMembers []string `protobuf:"bytes,1,rep,name=exempted_members,json=exemptedMembers,proto3" json:"exempted_members,omitempty"`
	LogType         string   `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
}

func (x *GoogleIamV1AuditLogConfig) Reset() {
	*x = GoogleIamV1AuditLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1AuditLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1AuditLogConfig) ProtoMessage() {}

func (x *GoogleIamV1AuditLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1AuditLogConfig.ProtoReflect.Descriptor instead.
func (*GoogleIamV1AuditLogConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{56}
}

func (x *GoogleIamV1AuditLogConfig) GetExemptedMembers() []string {
	if x != nil {
		return x.ExemptedMembers
	}
	return nil
}

func (x *GoogleIamV1AuditLogConfig) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

type ManagedZonePeeringConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          string                                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	TargetNetwork *ManagedZonePeeringConfigTargetNetwork `protobuf:"bytes,2,opt,name=target_network,json=targetNetwork,proto3" json:"target_network,omitempty"`
}

func (x *ManagedZonePeeringConfig) Reset() {
	*x = ManagedZonePeeringConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePeeringConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePeeringConfig) ProtoMessage() {}

func (x *ManagedZonePeeringConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePeeringConfig.ProtoReflect.Descriptor instead.
func (*ManagedZonePeeringConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{57}
}

func (x *ManagedZonePeeringConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZonePeeringConfig) GetTargetNetwork() *ManagedZonePeeringConfigTargetNetwork {
	if x != nil {
		return x.TargetNetwork
	}
	return nil
}

type ManagedZonePrivateVisibilityConfigNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind       string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	NetworkUrl string `protobuf:"bytes,2,opt,name=network_url,json=networkUrl,proto3" json:"network_url,omitempty"`
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) Reset() {
	*x = ManagedZonePrivateVisibilityConfigNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePrivateVisibilityConfigNetwork) ProtoMessage() {}

func (x *ManagedZonePrivateVisibilityConfigNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePrivateVisibilityConfigNetwork.ProtoReflect.Descriptor instead.
func (*ManagedZonePrivateVisibilityConfigNetwork) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{58}
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) GetNetworkUrl() string {
	if x != nil {
		return x.NetworkUrl
	}
	return ""
}

type RRSetRoutingPolicyGeoPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableFencing bool                                        `protobuf:"varint,1,opt,name=enable_fencing,json=enableFencing,proto3" json:"enable_fencing,omitempty"`
	Items         []*RRSetRoutingPolicyGeoPolicyGeoPolicyItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Kind          string                                      `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *RRSetRoutingPolicyGeoPolicy) Reset() {
	*x = RRSetRoutingPolicyGeoPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyGeoPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyGeoPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicyGeoPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyGeoPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyGeoPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{59}
}

func (x *RRSetRoutingPolicyGeoPolicy) GetEnableFencing() bool {
	if x != nil {
		return x.EnableFencing
	}
	return false
}

func (x *RRSetRoutingPolicyGeoPolicy) GetItems() []*RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RRSetRoutingPolicyGeoPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type RRSetRoutingPolicyPrimaryBackupPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrickleTraffic   float64                               `protobuf:"fixed64,1,opt,name=trickle_traffic,json=trickleTraffic,proto3" json:"trickle_traffic,omitempty"`
	BackupGeoTargets *RRSetRoutingPolicyGeoPolicy          `protobuf:"bytes,2,opt,name=backup_geo_targets,json=backupGeoTargets,proto3" json:"backup_geo_targets,omitempty"`
	Kind             string                                `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	PrimaryTargets   *RRSetRoutingPolicyHealthCheckTargets `protobuf:"bytes,4,opt,name=primary_targets,json=primaryTargets,proto3" json:"primary_targets,omitempty"`
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) Reset() {
	*x = RRSetRoutingPolicyPrimaryBackupPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyPrimaryBackupPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyPrimaryBackupPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyPrimaryBackupPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{60}
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetTrickleTraffic() float64 {
	if x != nil {
		return x.TrickleTraffic
	}
	return 0
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetBackupGeoTargets() *RRSetRoutingPolicyGeoPolicy {
	if x != nil {
		return x.BackupGeoTargets
	}
	return nil
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetPrimaryTargets() *RRSetRoutingPolicyHealthCheckTargets {
	if x != nil {
		return x.PrimaryTargets
	}
	return nil
}

type DnsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	KeyTag       int32           `protobuf:"varint,2,opt,name=key_tag,json=keyTag,proto3" json:"key_tag,omitempty"`
	PublicKey    string          `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Algorithm    string          `protobuf:"bytes,4,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CreationTime string          `protobuf:"bytes,5,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	IsActive     bool            `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	KeyLength    uint32          `protobuf:"varint,7,opt,name=key_length,json=keyLength,proto3" json:"key_length,omitempty"`
	Kind         string          `protobuf:"bytes,8,opt,name=kind,proto3" json:"kind,omitempty"`
	Type         string          `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Description  string          `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Digests      []*DnsKeyDigest `protobuf:"bytes,11,rep,name=digests,proto3" json:"digests,omitempty"`
}

func (x *DnsKey) Reset() {
	*x = DnsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKey) ProtoMessage() {}

func (x *DnsKey) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKey.ProtoReflect.Descriptor instead.
func (*DnsKey) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{61}
}

func (x *DnsKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DnsKey) GetKeyTag() int32 {
	if x != nil {
		return x.KeyTag
	}
	return 0
}

func (x *DnsKey) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *DnsKey) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DnsKey) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *DnsKey) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *DnsKey) GetKeyLength() uint32 {
	if x != nil {
		return x.KeyLength
	}
	return 0
}

func (x *DnsKey) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DnsKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DnsKey) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DnsKey) GetDigests() []*DnsKeyDigest {
	if x != nil {
		return x.Digests
	}
	return nil
}

type GoogleIamV1Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditConfigs []*GoogleIamV1AuditConfig `protobuf:"bytes,1,rep,name=audit_configs,json=auditConfigs,proto3" json:"audit_configs,omitempty"`
	Bindings     []*GoogleIamV1Binding     `protobuf:"bytes,2,rep,name=bindings,proto3" json:"bindings,omitempty"`
	Etag         string                    `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	Version      int32                     `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GoogleIamV1Policy) Reset() {
	*x = GoogleIamV1Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1Policy) ProtoMessage() {}

func (x *GoogleIamV1Policy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1Policy.ProtoReflect.Descriptor instead.
func (*GoogleIamV1Policy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{62}
}

func (x *GoogleIamV1Policy) GetAuditConfigs() []*GoogleIamV1AuditConfig {
	if x != nil {
		return x.AuditConfigs
	}
	return nil
}

func (x *GoogleIamV1Policy) GetBindings() []*GoogleIamV1Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *GoogleIamV1Policy) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *GoogleIamV1Policy) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ManagedZoneReverseLookupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ManagedZoneReverseLookupConfig) Reset() {
	*x = ManagedZoneReverseLookupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneReverseLookupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneReverseLookupConfig) ProtoMessage() {}

func (x *ManagedZoneReverseLookupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneReverseLookupConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneReverseLookupConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{63}
}

func (x *ManagedZoneReverseLookupConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type ResourceRecordSetsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *ResponseHeader      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Kind          string               `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	NextPageToken string               `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Rrsets        []*ResourceRecordSet `protobuf:"bytes,4,rep,name=rrsets,proto3" json:"rrsets,omitempty"`
}

func (x *ResourceRecordSetsListResponse) Reset() {
	*x = ResourceRecordSetsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecordSetsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecordSetsListResponse) ProtoMessage() {}

func (x *ResourceRecordSetsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecordSetsListResponse.ProtoReflect.Descriptor instead.
func (*ResourceRecordSetsListResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{64}
}

func (x *ResourceRecordSetsListResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ResourceRecordSetsListResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceRecordSetsListResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ResourceRecordSetsListResponse) GetRrsets() []*ResourceRecordSet {
	if x != nil {
		return x.Rrsets
	}
	return nil
}

type CreateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string  `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Project     string  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Change      *Change `protobuf:"bytes,3,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *CreateChangeRequest) Reset() {
	*x = CreateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChangeRequest) ProtoMessage() {}

func (x *CreateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChangeRequest.ProtoReflect.Descriptor instead.
func (*CreateChangeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{65}
}

func (x *CreateChangeRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *CreateChangeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateChangeRequest) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

type GetChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeId    string `protobuf:"bytes,1,opt,name=change_id,json=changeId,proto3" json:"change_id,omitempty"`
	ManagedZone string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Project     string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetChangeRequest) Reset() {
	*x = GetChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangeRequest) ProtoMessage() {}

func (x *GetChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangeRequest.ProtoReflect.Descriptor instead.
func (*GetChangeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{66}
}

func (x *GetChangeRequest) GetChangeId() string {
	if x != nil {
		return x.ChangeId
	}
	return ""
}

func (x *GetChangeRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *GetChangeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type ListChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Project     string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListChangesRequest) Reset() {
	*x = ListChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangesRequest) ProtoMessage() {}

func (x *ListChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangesRequest.ProtoReflect.Descriptor instead.
func (*ListChangesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{67}
}

func (x *ListChangesRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *ListChangesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type GetDnsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Project     string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	DnsKeyId    string `protobuf:"bytes,3,opt,name=dns_key_id,json=dnsKeyId,proto3" json:"dns_key_id,omitempty"`
}

func (x *GetDnsKeyRequest) Reset() {
	*x = GetDnsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsKeyRequest) ProtoMessage() {}

func (x *GetDnsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsKeyRequest.ProtoReflect.Descriptor instead.
func (*GetDnsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{68}
}

func (x *GetDnsKeyRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *GetDnsKeyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetDnsKeyRequest) GetDnsKeyId() string {
	if x != nil {
		return x.DnsKeyId
	}
	return ""
}

type ListDnsKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project     string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ManagedZone string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
}

func (x *ListDnsKeysRequest) Reset() {
	*x = ListDnsKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDnsKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsKeysRequest) ProtoMessage() {}

func (x *ListDnsKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsKeysRequest.ProtoReflect.Descriptor instead.
func (*ListDnsKeysRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{69}
}

func (x *ListDnsKeysRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListDnsKeysRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

type GetManagedZoneOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Operation   string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	Project     string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetManagedZoneOperationRequest) Reset() {
	*x = GetManagedZoneOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagedZoneOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagedZoneOperationRequest) ProtoMessage() {}

func (x *GetManagedZoneOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagedZoneOperationRequest.ProtoReflect.Descriptor instead.
func (*GetManagedZoneOperationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{70}
}

func (x *GetManagedZoneOperationRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *GetManagedZoneOperationRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GetManagedZoneOperationRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type ListManagedZoneOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Project     string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListManagedZoneOperationsRequest) Reset() {
	*x = ListManagedZoneOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListManagedZoneOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListManagedZoneOperationsRequest) ProtoMessage() {}

func (x *ListManagedZoneOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListManagedZoneOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListManagedZoneOperationsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{71}
}

func (x *ListManagedZoneOperationsRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *ListManagedZoneOperationsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string  `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Policy  *Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{72}
}

func (x *CreatePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{73}
}

func (x *DeletePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeletePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type DeletePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePolicyResponse) Reset() {
	*x = DeletePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyResponse) ProtoMessage() {}

func (x *DeletePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyResponse.ProtoReflect.Descriptor instead.
func (*DeletePolicyResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{74}
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{75}
}

func (x *GetPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{76}
}

func (x *ListPoliciesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type PatchPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Policy  *Policy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *PatchPolicyRequest) Reset() {
	*x = PatchPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchPolicyRequest) ProtoMessage() {}

func (x *PatchPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchPolicyRequest.ProtoReflect.Descriptor instead.
func (*PatchPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{77}
}

func (x *PatchPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchPolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PatchPolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Policy  *Policy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{78}
}

func (x *UpdatePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UpdatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ListResourceRecordSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Project     string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListResourceRecordSetsRequest) Reset() {
	*x = ListResourceRecordSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceRecordSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceRecordSetsRequest) ProtoMessage() {}

func (x *ListResourceRecordSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceRecordSetsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceRecordSetsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{79}
}

func (x *ListResourceRecordSetsRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *ListResourceRecordSetsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type PatchResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone       string             `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Name              string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Project           string             `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Type              string             `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ResourceRecordSet *ResourceRecordSet `protobuf:"bytes,5,opt,name=resource_record_set,json=resourceRecordSet,proto3" json:"resource_record_set,omitempty"`
}

func (x *PatchResourceRecordSetRequest) Reset() {
	*x = PatchResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResourceRecordSetRequest) ProtoMessage() {}

func (x *PatchResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*PatchResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{80}
}

func (x *PatchResourceRecordSetRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetResourceRecordSet() *ResourceRecordSet {
	if x != nil {
		return x.ResourceRecordSet
	}
	return nil
}

type CreateResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project           string             `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ManagedZone       string             `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	ResourceRecordSet *ResourceRecordSet `protobuf:"bytes,3,opt,name=resource_record_set,json=resourceRecordSet,proto3" json:"resource_record_set,omitempty"`
}

func (x *CreateResourceRecordSetRequest) Reset() {
	*x = CreateResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceRecordSetRequest) ProtoMessage() {}

func (x *CreateResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{81}
}

func (x *CreateResourceRecordSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateResourceRecordSetRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *CreateResourceRecordSetRequest) GetResourceRecordSet() *ResourceRecordSet {
	if x != nil {
		return x.ResourceRecordSet
	}
	return nil
}

type DeleteResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Project     string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeleteResourceRecordSetRequest) Reset() {
	*x = DeleteResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceRecordSetRequest) ProtoMessage() {}

func (x *DeleteResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{82}
}

func (x *DeleteResourceRecordSetRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DeleteResourceRecordSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourceRecordSetResponse) Reset() {
	*x = DeleteResourceRecordSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceRecordSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceRecordSetResponse) ProtoMessage() {}

func (x *DeleteResourceRecordSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceRecordSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourceRecordSetResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{83}
}

type GetResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Project     string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetResourceRecordSetRequest) Reset() {
	*x = GetResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRecordSetRequest) ProtoMessage() {}

func (x *GetResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*GetResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{84}
}

func (x *GetResourceRecordSetRequest) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project     string       `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ManagedZone *ManagedZone `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
}

func (x *CreateManagedZoneRequest) Reset() {
	*x = CreateManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManagedZoneRequest) ProtoMessage() {}

func (x *CreateManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*CreateManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{85}
}

func (x *CreateManagedZoneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateManagedZoneRequest) GetManagedZone() *ManagedZone {
	if x != nil {
		return x.ManagedZone
	}
	return nil
}

type PatchManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project     string       `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	ManagedZone *ManagedZone `protobuf:"bytes,3,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
}

func (x *PatchManagedZoneRequest) Reset() {
	*x = PatchManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchManagedZoneRequest) ProtoMessage() {}

func (x *PatchManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*PatchManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{86}
}

func (x *PatchManagedZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchManagedZoneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PatchManagedZoneRequest) GetManagedZone() *ManagedZone {
	if x != nil {
		return x.ManagedZone
	}
	return nil
}

type UpdateManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project     string       `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	ManagedZone *ManagedZone `protobuf:"bytes,3,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
}

func (x *UpdateManagedZoneRequest) Reset() {
	*x = UpdateManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateManagedZoneRequest) ProtoMessage() {}

func (x *UpdateManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*UpdateManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateManagedZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateManagedZoneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UpdateManagedZoneRequest) GetManagedZone() *ManagedZone {
	if x != nil {
		return x.ManagedZone
	}
	return nil
}

type DeleteManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *DeleteManagedZoneRequest) Reset() {
	*x = DeleteManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteManagedZoneRequest) ProtoMessage() {}

func (x *DeleteManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*DeleteManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteManagedZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteManagedZoneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type DeleteManagedZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteManagedZoneResponse) Reset() {
	*x = DeleteManagedZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteManagedZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteManagedZoneResponse) ProtoMessage() {}

func (x *DeleteManagedZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteManagedZoneResponse.ProtoReflect.Descriptor instead.
func (*DeleteManagedZoneResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{89}
}

type GetManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetManagedZoneRequest) Reset() {
	*x = GetManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagedZoneRequest) ProtoMessage() {}

func (x *GetManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*GetManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{90}
}

func (x *GetManagedZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetManagedZoneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type ListManagedZonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListManagedZonesRequest) Reset() {
	*x = ListManagedZonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListManagedZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListManagedZonesRequest) ProtoMessage() {}

func (x *ListManagedZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListManagedZonesRequest.ProtoReflect.Descriptor instead.
func (*ListManagedZonesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{91}
}

func (x *ListManagedZonesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{92}
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project        string          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy *ResponsePolicy `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
}

func (x *UpdateResponsePolicyRequest) Reset() {
	*x = UpdateResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponsePolicyRequest) ProtoMessage() {}

func (x *UpdateResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateResponsePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateResponsePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UpdateResponsePolicyRequest) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type CreateResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project        string          `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy *ResponsePolicy `protobuf:"bytes,2,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
}

func (x *CreateResponsePolicyRequest) Reset() {
	*x = CreateResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponsePolicyRequest) ProtoMessage() {}

func (x *CreateResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{94}
}

func (x *CreateResponsePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateResponsePolicyRequest) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type DeleteResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteResponsePolicyRequest) Reset() {
	*x = DeleteResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponsePolicyRequest) ProtoMessage() {}

func (x *DeleteResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{95}
}

func (x *DeleteResponsePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteResponsePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteResponsePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponsePolicyResponse) Reset() {
	*x = DeleteResponsePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponsePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponsePolicyResponse) ProtoMessage() {}

func (x *DeleteResponsePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponsePolicyResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponsePolicyResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{96}
}

type GetResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResponsePolicyRequest) Reset() {
	*x = GetResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponsePolicyRequest) ProtoMessage() {}

func (x *GetResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*GetResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{97}
}

func (x *GetResponsePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetResponsePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListResponsePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListResponsePoliciesRequest) Reset() {
	*x = ListResponsePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponsePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponsePoliciesRequest) ProtoMessage() {}

func (x *ListResponsePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponsePoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListResponsePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{98}
}

func (x *ListResponsePoliciesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type PatchResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project        string          `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResponsePolicy *ResponsePolicy `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
}

func (x *PatchResponsePolicyRequest) Reset() {
	*x = PatchResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResponsePolicyRequest) ProtoMessage() {}

func (x *PatchResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*PatchResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{99}
}

func (x *PatchResponsePolicyRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PatchResponsePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchResponsePolicyRequest) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type CreateResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project            string              `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy     string              `protobuf:"bytes,2,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,3,opt,name=response_policy_rule,json=responsePolicyRule,proto3" json:"response_policy_rule,omitempty"`
}

func (x *CreateResponsePolicyRuleRequest) Reset() {
	*x = CreateResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponsePolicyRuleRequest) ProtoMessage() {}

func (x *CreateResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{100}
}

func (x *CreateResponsePolicyRuleRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil {
		return x.ResponsePolicy
	}
	return ""
}

func (x *CreateResponsePolicyRuleRequest) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type DeleteResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project        string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy string `protobuf:"bytes,2,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteResponsePolicyRuleRequest) Reset() {
	*x = DeleteResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponsePolicyRuleRequest) ProtoMessage() {}

func (x *DeleteResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteResponsePolicyRuleRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil {
		return x.ResponsePolicy
	}
	return ""
}

func (x *DeleteResponsePolicyRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteResponsePolicyRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponsePolicyRuleResponse) Reset() {
	*x = DeleteResponsePolicyRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponsePolicyRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponsePolicyRuleResponse) ProtoMessage() {}

func (x *DeleteResponsePolicyRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponsePolicyRuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponsePolicyRuleResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{102}
}

type GetResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project        string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy string `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
}

func (x *GetResponsePolicyRuleRequest) Reset() {
	*x = GetResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponsePolicyRuleRequest) ProtoMessage() {}

func (x *GetResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*GetResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{103}
}

func (x *GetResponsePolicyRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetResponsePolicyRuleRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil {
		return x.ResponsePolicy
	}
	return ""
}

type ListResponsePolicyRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsePolicy string `protobuf:"bytes,1,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
	Project        string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ListResponsePolicyRulesRequest) Reset() {
	*x = ListResponsePolicyRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponsePolicyRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponsePolicyRulesRequest) ProtoMessage() {}

func (x *ListResponsePolicyRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponsePolicyRulesRequest.ProtoReflect.Descriptor instead.
func (*ListResponsePolicyRulesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{104}
}

func (x *ListResponsePolicyRulesRequest) GetResponsePolicy() string {
	if x != nil {
		return x.ResponsePolicy
	}
	return ""
}

func (x *ListResponsePolicyRulesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type PatchResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project            string              `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy     string              `protobuf:"bytes,2,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
	Name               string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,4,opt,name=response_policy_rule,json=responsePolicyRule,proto3" json:"response_policy_rule,omitempty"`
}

func (x *PatchResponsePolicyRuleRequest) Reset() {
	*x = PatchResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResponsePolicyRuleRequest) ProtoMessage() {}

func (x *PatchResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*PatchResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{105}
}

func (x *PatchResponsePolicyRuleRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil {
		return x.ResponsePolicy
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type UpdateResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project            string              `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	ResponsePolicy     string              `protobuf:"bytes,2,opt,name=response_policy,json=responsePolicy,proto3" json:"response_policy,omitempty"`
	Name               string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,4,opt,name=response_policy_rule,json=responsePolicyRule,proto3" json:"response_policy_rule,omitempty"`
}

func (x *UpdateResponsePolicyRuleRequest) Reset() {
	*x = UpdateResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponsePolicyRuleRequest) ProtoMessage() {}

func (x *UpdateResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP(), []int{106}
}

func (x *UpdateResponsePolicyRuleRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil {
		return x.ResponsePolicy
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

var File_mockgcp_cloud_dns_v1beta2_generated_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x78, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x94, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x44, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0xa2, 0x0b, 0x0a,
	0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x50, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x72, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72,
	0x72, 0x73, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x67,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x6b, 0x65, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x6b, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x50, 0x65, 0x72, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x20, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x67, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x72, 0x73,
	0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x72, 0x73, 0x65,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72,
	0x52, 0x72, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x15, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x4d, 0x0a,
	0x24, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x42, 0x0a, 0x1e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x72, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0xcd, 0x01, 0x0a, 0x24, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x17, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x73, 0x22, 0x98, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x22, 0x57, 0x0a, 0x1b,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x25, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x93, 0x01,
	0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x33, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x24, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x54, 0x65, 0x73, 0x74, 0x49, 0x61,
	0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x21, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x7b, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x1e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d,
	0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a,
	0x2c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x31,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x7c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x22, 0x93, 0x02, 0x0a, 0x28, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x74, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52,
	0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x49, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x54, 0x65, 0x73, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x02, 0x0a,
	0x22, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4a,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x17, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x8d, 0x03, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1b, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xb5, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x44, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x75,
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a,
	0x0f, 0x64, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6e, 0x73, 0x4b, 0x65,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x21, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x5e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf9,
	0x08, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x62,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x44, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x64, 0x6e,
	0x73, 0x73, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c,
	0x0a, 0x15, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x75, 0x0a, 0x18,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x78, 0x0a, 0x19, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x2b, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x97, 0x02,
	0x0a, 0x28, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x74, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf1, 0x03, 0x0a,
	0x12, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x03, 0x77, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x03, 0x77, 0x72, 0x72, 0x12, 0x54, 0x0a, 0x0a,
	0x77, 0x72, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x77, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x47, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x54, 0x0a, 0x0a, 0x67,
	0x65, 0x6f, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x22, 0x8f, 0x02, 0x0a, 0x24, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x55, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x60, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49,
	0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x52,
	0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xfd, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61,
	0x6d, 0x56, 0x31, 0x47, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x62, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x2a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x3a,
	0x0a, 0x0c, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x53, 0x65, 0x74, 0x49, 0x61, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49,
	0x61, 0x6d, 0x56, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x5e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x61, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x66, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x60, 0x0a, 0x29, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0xb2, 0x01,
	0x0a, 0x1b, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x25, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x63, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x67, 0x65, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x52, 0x53,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47,
	0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x47, 0x65, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x67,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x06, 0x44, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65,
	0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x07, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x49, 0x61, 0x6d, 0x56, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x1e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xe3, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x43, 0x0a, 0x06, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x06,
	0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x51, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x7b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x5f, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x2f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x7c, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x7d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x5c,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xe1, 0x01, 0x0a,
	0x1d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0c,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x48, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x51, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x4b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0xc4, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x78, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x63, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xd7, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x32, 0xaf, 0x04, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0xb4, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x43, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x3a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb7,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xf9, 0x02, 0x0a, 0x07, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79,
	0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x64,
	0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12,
	0x43, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x64, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x32, 0xd5, 0x03, 0x0a, 0x15, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd4,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x54, 0x12, 0x52, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f,
	0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xe4, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xe9, 0x07, 0x0a,
	0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x22, 0x28, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x92,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x12, 0x2f, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x64, 0x6e,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x32, 0x2f, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xb0, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x1a,
	0x2f, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x84, 0x09, 0x0a, 0x12, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12,
	0xd7, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x16, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x67, 0x32, 0x50, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f,
	0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x74,
	0x79, 0x70, 0x65, 0x7d, 0x3a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xe1, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x5f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x59, 0x22, 0x42, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xe8, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x2a, 0x50, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0xd4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x32,
	0xcb, 0x08, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x12, 0xb2, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x2c, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x32, 0x33, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0xb7, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x43, 0x1a, 0x33, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0xb9, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33,
	0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x3b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12,
	0x2c, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x32, 0x8f, 0x01,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32,
	0xcc, 0x09, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0xd9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x1a, 0x37, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0xc2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x43, 0x22, 0x30, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x3a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0xc6, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x39, 0x2a, 0x37, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb2,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xbf, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4a, 0x32, 0x37, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0xb1,
	0x0b, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xeb, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x66, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x60, 0x22, 0x48, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0xea, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51,
	0x2a, 0x4f, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0xd6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xe0, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xfe, 0x01,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x32, 0x4f, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x81,
	0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x1a, 0x4f, 0x2f, 0x64, 0x6e,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x14, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x42, 0x30, 0x5a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x32, 0x2f, 0x64, 0x6e, 0x73, 0x70, 0x62, 0x3b, 0x64,
	0x6e, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescData = file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDesc
)

func file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescData)
	})
	return file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDescData
}

var file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 109)
var file_mockgcp_cloud_dns_v1beta2_generated_proto_goTypes = []interface{}{
	(*PoliciesListResponse)(nil),                              // 0: google.cloud.dns.v1beta2.PoliciesListResponse
	(*ResponsePolicyRuleLocalData)(nil),                       // 1: google.cloud.dns.v1beta2.ResponsePolicyRuleLocalData
	(*DnsKeySpec)(nil),                                        // 2: google.cloud.dns.v1beta2.DnsKeySpec
	(*PoliciesUpdateResponse)(nil),                            // 3: google.cloud.dns.v1beta2.PoliciesUpdateResponse
	(*PolicyNetwork)(nil),                                     // 4: google.cloud.dns.v1beta2.PolicyNetwork
	(*Quota)(nil),                                             // 5: google.cloud.dns.v1beta2.Quota
	(*RRSetRoutingPolicyHealthCheckTargets)(nil),              // 6: google.cloud.dns.v1beta2.RRSetRoutingPolicyHealthCheckTargets
	(*Change)(nil),                                            // 7: google.cloud.dns.v1beta2.Change
	(*GoogleIamV1GetPolicyOptions)(nil),                       // 8: google.cloud.dns.v1beta2.GoogleIamV1GetPolicyOptions
	(*ManagedZonePeeringConfigTargetNetwork)(nil),             // 9: google.cloud.dns.v1beta2.ManagedZonePeeringConfigTargetNetwork
	(*PoliciesPatchResponse)(nil),                             // 10: google.cloud.dns.v1beta2.PoliciesPatchResponse
	(*ResponseHeader)(nil),                                    // 11: google.cloud.dns.v1beta2.ResponseHeader
	(*GoogleIamV1Binding)(nil),                                // 12: google.cloud.dns.v1beta2.GoogleIamV1Binding
	(*GoogleIamV1TestIamPermissionsRequest)(nil),              // 13: google.cloud.dns.v1beta2.GoogleIamV1TestIamPermissionsRequest
	(*PolicyAlternativeNameServerConfig)(nil),                 // 14: google.cloud.dns.v1beta2.PolicyAlternativeNameServerConfig
	(*ResponsePoliciesUpdateResponse)(nil),                    // 15: google.cloud.dns.v1beta2.ResponsePoliciesUpdateResponse
	(*OperationDnsKeyContext)(nil),                            // 16: google.cloud.dns.v1beta2.OperationDnsKeyContext
	(*ManagedZonePrivateVisibilityConfigGKECluster)(nil),      // 17: google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfigGKECluster
	(*PolicyAlternativeNameServerConfigTargetNameServer)(nil), // 18: google.cloud.dns.v1beta2.PolicyAlternativeNameServerConfigTargetNameServer
	(*Project)(nil),                                           // 19: google.cloud.dns.v1beta2.Project
	(*RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil),          // 20: google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicyWrrPolicyItem
	(*GoogleIamV1TestIamPermissionsResponse)(nil),             // 21: google.cloud.dns.v1beta2.GoogleIamV1TestIamPermissionsResponse
	(*ManagedZoneOperationsListResponse)(nil),                 // 22: google.cloud.dns.v1beta2.ManagedZoneOperationsListResponse
	(*ManagedZonePrivateVisibilityConfig)(nil),                // 23: google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfig
	(*ManagedZonesListResponse)(nil),                          // 24: google.cloud.dns.v1beta2.ManagedZonesListResponse
	(*ManagedZoneDnsSecConfig)(nil),                           // 25: google.cloud.dns.v1beta2.ManagedZoneDnsSecConfig
	(*OperationManagedZoneContext)(nil),                       // 26: google.cloud.dns.v1beta2.OperationManagedZoneContext
	(*Policy)(nil),                                            // 27: google.cloud.dns.v1beta2.Policy
	(*ResponsePolicy)(nil),                                    // 28: google.cloud.dns.v1beta2.ResponsePolicy
	(*DnsKeysListResponse)(nil),                               // 29: google.cloud.dns.v1beta2.DnsKeysListResponse
	(*ManagedZoneForwardingConfig)(nil),                       // 30: google.cloud.dns.v1beta2.ManagedZoneForwardingConfig
	(*Operation)(nil),                                         // 31: google.cloud.dns.v1beta2.Operation
	(*ResponsePolicyRulesUpdateResponse)(nil),                 // 32: google.cloud.dns.v1beta2.ResponsePolicyRulesUpdateResponse
	(*Expr)(nil),        // 33: google.cloud.dns.v1beta2.Expr
	(*ManagedZone)(nil), // 34: google.cloud.dns.v1beta2.ManagedZone
	(*ManagedZoneForwardingConfigNameServerTarget)(nil), // 35: google.cloud.dns.v1beta2.ManagedZoneForwardingConfigNameServerTarget
	(*RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil),    // 36: google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicyGeoPolicyItem
	(*ResponsePolicyRule)(nil),                          // 37: google.cloud.dns.v1beta2.ResponsePolicyRule
	(*RRSetRoutingPolicy)(nil),                          // 38: google.cloud.dns.v1beta2.RRSetRoutingPolicy
	(*RRSetRoutingPolicyLoadBalancerTarget)(nil),        // 39: google.cloud.dns.v1beta2.RRSetRoutingPolicyLoadBalancerTarget
	(*ResponsePoliciesListResponse)(nil),                // 40: google.cloud.dns.v1beta2.ResponsePoliciesListResponse
	(*ResponsePolicyRulesListResponse)(nil),             // 41: google.cloud.dns.v1beta2.ResponsePolicyRulesListResponse
	(*GoogleIamV1AuditConfig)(nil),                      // 42: google.cloud.dns.v1beta2.GoogleIamV1AuditConfig
	(*RRSetRoutingPolicyWrrPolicy)(nil),                 // 43: google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicy
	(*ResourceRecordSet)(nil),                           // 44: google.cloud.dns.v1beta2.ResourceRecordSet
	(*ResponsePolicyGKECluster)(nil),                    // 45: google.cloud.dns.v1beta2.ResponsePolicyGKECluster
	(*ChangesListResponse)(nil),                         // 46: google.cloud.dns.v1beta2.ChangesListResponse
	(*GoogleIamV1GetIamPolicyRequest)(nil),              // 47: google.cloud.dns.v1beta2.GoogleIamV1GetIamPolicyRequest
	(*ManagedZoneCloudLoggingConfig)(nil),               // 48: google.cloud.dns.v1beta2.ManagedZoneCloudLoggingConfig
	(*ManagedZoneServiceDirectoryConfig)(nil),           // 49: google.cloud.dns.v1beta2.ManagedZoneServiceDirectoryConfig
	(*ManagedZoneServiceDirectoryConfigNamespace)(nil),  // 50: google.cloud.dns.v1beta2.ManagedZoneServiceDirectoryConfigNamespace
	(*DnsKeyDigest)(nil),                                // 51: google.cloud.dns.v1beta2.DnsKeyDigest
	(*GoogleIamV1SetIamPolicyRequest)(nil),              // 52: google.cloud.dns.v1beta2.GoogleIamV1SetIamPolicyRequest
	(*ResponsePolicyNetwork)(nil),                       // 53: google.cloud.dns.v1beta2.ResponsePolicyNetwork
	(*ResponsePoliciesPatchResponse)(nil),               // 54: google.cloud.dns.v1beta2.ResponsePoliciesPatchResponse
	(*ResponsePolicyRulesPatchResponse)(nil),            // 55: google.cloud.dns.v1beta2.ResponsePolicyRulesPatchResponse
	(*GoogleIamV1AuditLogConfig)(nil),                   // 56: google.cloud.dns.v1beta2.GoogleIamV1AuditLogConfig
	(*ManagedZonePeeringConfig)(nil),                    // 57: google.cloud.dns.v1beta2.ManagedZonePeeringConfig
	(*ManagedZonePrivateVisibilityConfigNetwork)(nil),   // 58: google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfigNetwork
	(*RRSetRoutingPolicyGeoPolicy)(nil),                 // 59: google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicy
	(*RRSetRoutingPolicyPrimaryBackupPolicy)(nil),       // 60: google.cloud.dns.v1beta2.RRSetRoutingPolicyPrimaryBackupPolicy
	(*DnsKey)(nil),                           // 61: google.cloud.dns.v1beta2.DnsKey
	(*GoogleIamV1Policy)(nil),                // 62: google.cloud.dns.v1beta2.GoogleIamV1Policy
	(*ManagedZoneReverseLookupConfig)(nil),   // 63: google.cloud.dns.v1beta2.ManagedZoneReverseLookupConfig
	(*ResourceRecordSetsListResponse)(nil),   // 64: google.cloud.dns.v1beta2.ResourceRecordSetsListResponse
	(*CreateChangeRequest)(nil),              // 65: google.cloud.dns.v1beta2.CreateChangeRequest
	(*GetChangeRequest)(nil),                 // 66: google.cloud.dns.v1beta2.GetChangeRequest
	(*ListChangesRequest)(nil),               // 67: google.cloud.dns.v1beta2.ListChangesRequest
	(*GetDnsKeyRequest)(nil),                 // 68: google.cloud.dns.v1beta2.GetDnsKeyRequest
	(*ListDnsKeysRequest)(nil),               // 69: google.cloud.dns.v1beta2.ListDnsKeysRequest
	(*GetManagedZoneOperationRequest)(nil),   // 70: google.cloud.dns.v1beta2.GetManagedZoneOperationRequest
	(*ListManagedZoneOperationsRequest)(nil), // 71: google.cloud.dns.v1beta2.ListManagedZoneOperationsRequest
	(*CreatePolicyRequest)(nil),              // 72: google.cloud.dns.v1beta2.CreatePolicyRequest
	(*DeletePolicyRequest)(nil),              // 73: google.cloud.dns.v1beta2.DeletePolicyRequest
	(*DeletePolicyResponse)(nil),             // 74: google.cloud.dns.v1beta2.DeletePolicyResponse
	(*GetPolicyRequest)(nil),                 // 75: google.cloud.dns.v1beta2.GetPolicyRequest
	(*ListPoliciesRequest)(nil),              // 76: google.cloud.dns.v1beta2.ListPoliciesRequest
	(*PatchPolicyRequest)(nil),               // 77: google.cloud.dns.v1beta2.PatchPolicyRequest
	(*UpdatePolicyRequest)(nil),              // 78: google.cloud.dns.v1beta2.UpdatePolicyRequest
	(*ListResourceRecordSetsRequest)(nil),    // 79: google.cloud.dns.v1beta2.ListResourceRecordSetsRequest
	(*PatchResourceRecordSetRequest)(nil),    // 80: google.cloud.dns.v1beta2.PatchResourceRecordSetRequest
	(*CreateResourceRecordSetRequest)(nil),   // 81: google.cloud.dns.v1beta2.CreateResourceRecordSetRequest
	(*DeleteResourceRecordSetRequest)(nil),   // 82: google.cloud.dns.v1beta2.DeleteResourceRecordSetRequest
	(*DeleteResourceRecordSetResponse)(nil),  // 83: google.cloud.dns.v1beta2.DeleteResourceRecordSetResponse
	(*GetResourceRecordSetRequest)(nil),      // 84: google.cloud.dns.v1beta2.GetResourceRecordSetRequest
	(*CreateManagedZoneRequest)(nil),         // 85: google.cloud.dns.v1beta2.CreateManagedZoneRequest
	(*PatchManagedZoneRequest)(nil),          // 86: google.cloud.dns.v1beta2.PatchManagedZoneRequest
	(*UpdateManagedZoneRequest)(nil),         // 87: google.cloud.dns.v1beta2.UpdateManagedZoneRequest
	(*DeleteManagedZoneRequest)(nil),         // 88: google.cloud.dns.v1beta2.DeleteManagedZoneRequest
	(*DeleteManagedZoneResponse)(nil),        // 89: google.cloud.dns.v1beta2.DeleteManagedZoneResponse
	(*GetManagedZoneRequest)(nil),            // 90: google.cloud.dns.v1beta2.GetManagedZoneRequest
	(*ListManagedZonesRequest)(nil),          // 91: google.cloud.dns.v1beta2.ListManagedZonesRequest
	(*GetProjectRequest)(nil),                // 92: google.cloud.dns.v1beta2.GetProjectRequest
	(*UpdateResponsePolicyRequest)(nil),      // 93: google.cloud.dns.v1beta2.UpdateResponsePolicyRequest
	(*CreateResponsePolicyRequest)(nil),      // 94: google.cloud.dns.v1beta2.CreateResponsePolicyRequest
	(*DeleteResponsePolicyRequest)(nil),      // 95: google.cloud.dns.v1beta2.DeleteResponsePolicyRequest
	(*DeleteResponsePolicyResponse)(nil),     // 96: google.cloud.dns.v1beta2.DeleteResponsePolicyResponse
	(*GetResponsePolicyRequest)(nil),         // 97: google.cloud.dns.v1beta2.GetResponsePolicyRequest
	(*ListResponsePoliciesRequest)(nil),      // 98: google.cloud.dns.v1beta2.ListResponsePoliciesRequest
	(*PatchResponsePolicyRequest)(nil),       // 99: google.cloud.dns.v1beta2.PatchResponsePolicyRequest
	(*CreateResponsePolicyRuleRequest)(nil),  // 100: google.cloud.dns.v1beta2.CreateResponsePolicyRuleRequest
	(*DeleteResponsePolicyRuleRequest)(nil),  // 101: google.cloud.dns.v1beta2.DeleteResponsePolicyRuleRequest
	(*DeleteResponsePolicyRuleResponse)(nil), // 102: google.cloud.dns.v1beta2.DeleteResponsePolicyRuleResponse
	(*GetResponsePolicyRuleRequest)(nil),     // 103: google.cloud.dns.v1beta2.GetResponsePolicyRuleRequest
	(*ListResponsePolicyRulesRequest)(nil),   // 104: google.cloud.dns.v1beta2.ListResponsePolicyRulesRequest
	(*PatchResponsePolicyRuleRequest)(nil),   // 105: google.cloud.dns.v1beta2.PatchResponsePolicyRuleRequest
	(*UpdateResponsePolicyRuleRequest)(nil),  // 106: google.cloud.dns.v1beta2.UpdateResponsePolicyRuleRequest
	nil,                                      // 107: google.cloud.dns.v1beta2.ResponsePolicy.LabelsEntry
	nil,                                      // 108: google.cloud.dns.v1beta2.ManagedZone.LabelsEntry
}
var file_mockgcp_cloud_dns_v1beta2_generated_proto_depIdxs = []int32{
	11,  // 0: google.cloud.dns.v1beta2.PoliciesListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	27,  // 1: google.cloud.dns.v1beta2.PoliciesListResponse.policies:type_name -> google.cloud.dns.v1beta2.Policy
	44,  // 2: google.cloud.dns.v1beta2.ResponsePolicyRuleLocalData.local_datas:type_name -> google.cloud.dns.v1beta2.ResourceRecordSet
	11,  // 3: google.cloud.dns.v1beta2.PoliciesUpdateResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	27,  // 4: google.cloud.dns.v1beta2.PoliciesUpdateResponse.policy:type_name -> google.cloud.dns.v1beta2.Policy
	2,   // 5: google.cloud.dns.v1beta2.Quota.whitelisted_key_specs:type_name -> google.cloud.dns.v1beta2.DnsKeySpec
	39,  // 6: google.cloud.dns.v1beta2.RRSetRoutingPolicyHealthCheckTargets.internal_load_balancers:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyLoadBalancerTarget
	44,  // 7: google.cloud.dns.v1beta2.Change.additions:type_name -> google.cloud.dns.v1beta2.ResourceRecordSet
	44,  // 8: google.cloud.dns.v1beta2.Change.deletions:type_name -> google.cloud.dns.v1beta2.ResourceRecordSet
	11,  // 9: google.cloud.dns.v1beta2.PoliciesPatchResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	27,  // 10: google.cloud.dns.v1beta2.PoliciesPatchResponse.policy:type_name -> google.cloud.dns.v1beta2.Policy
	33,  // 11: google.cloud.dns.v1beta2.GoogleIamV1Binding.condition:type_name -> google.cloud.dns.v1beta2.Expr
	18,  // 12: google.cloud.dns.v1beta2.PolicyAlternativeNameServerConfig.target_name_servers:type_name -> google.cloud.dns.v1beta2.PolicyAlternativeNameServerConfigTargetNameServer
	28,  // 13: google.cloud.dns.v1beta2.ResponsePoliciesUpdateResponse.response_policy:type_name -> google.cloud.dns.v1beta2.ResponsePolicy
	11,  // 14: google.cloud.dns.v1beta2.ResponsePoliciesUpdateResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	61,  // 15: google.cloud.dns.v1beta2.OperationDnsKeyContext.new_value:type_name -> google.cloud.dns.v1beta2.DnsKey
	61,  // 16: google.cloud.dns.v1beta2.OperationDnsKeyContext.old_value:type_name -> google.cloud.dns.v1beta2.DnsKey
	5,   // 17: google.cloud.dns.v1beta2.Project.quota:type_name -> google.cloud.dns.v1beta2.Quota
	6,   // 18: google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicyWrrPolicyItem.health_checked_targets:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyHealthCheckTargets
	11,  // 19: google.cloud.dns.v1beta2.ManagedZoneOperationsListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	31,  // 20: google.cloud.dns.v1beta2.ManagedZoneOperationsListResponse.operations:type_name -> google.cloud.dns.v1beta2.Operation
	17,  // 21: google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfig.gke_clusters:type_name -> google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfigGKECluster
	58,  // 22: google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfig.networks:type_name -> google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfigNetwork
	11,  // 23: google.cloud.dns.v1beta2.ManagedZonesListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	34,  // 24: google.cloud.dns.v1beta2.ManagedZonesListResponse.managed_zones:type_name -> google.cloud.dns.v1beta2.ManagedZone
	2,   // 25: google.cloud.dns.v1beta2.ManagedZoneDnsSecConfig.default_key_specs:type_name -> google.cloud.dns.v1beta2.DnsKeySpec
	34,  // 26: google.cloud.dns.v1beta2.OperationManagedZoneContext.new_value:type_name -> google.cloud.dns.v1beta2.ManagedZone
	34,  // 27: google.cloud.dns.v1beta2.OperationManagedZoneContext.old_value:type_name -> google.cloud.dns.v1beta2.ManagedZone
	4,   // 28: google.cloud.dns.v1beta2.Policy.networks:type_name -> google.cloud.dns.v1beta2.PolicyNetwork
	14,  // 29: google.cloud.dns.v1beta2.Policy.alternative_name_server_config:type_name -> google.cloud.dns.v1beta2.PolicyAlternativeNameServerConfig
	107, // 30: google.cloud.dns.v1beta2.ResponsePolicy.labels:type_name -> google.cloud.dns.v1beta2.ResponsePolicy.LabelsEntry
	53,  // 31: google.cloud.dns.v1beta2.ResponsePolicy.networks:type_name -> google.cloud.dns.v1beta2.ResponsePolicyNetwork
	45,  // 32: google.cloud.dns.v1beta2.ResponsePolicy.gke_clusters:type_name -> google.cloud.dns.v1beta2.ResponsePolicyGKECluster
	61,  // 33: google.cloud.dns.v1beta2.DnsKeysListResponse.dns_keys:type_name -> google.cloud.dns.v1beta2.DnsKey
	11,  // 34: google.cloud.dns.v1beta2.DnsKeysListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	35,  // 35: google.cloud.dns.v1beta2.ManagedZoneForwardingConfig.target_name_servers:type_name -> google.cloud.dns.v1beta2.ManagedZoneForwardingConfigNameServerTarget
	26,  // 36: google.cloud.dns.v1beta2.Operation.zone_context:type_name -> google.cloud.dns.v1beta2.OperationManagedZoneContext
	16,  // 37: google.cloud.dns.v1beta2.Operation.dns_key_context:type_name -> google.cloud.dns.v1beta2.OperationDnsKeyContext
	11,  // 38: google.cloud.dns.v1beta2.ResponsePolicyRulesUpdateResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	37,  // 39: google.cloud.dns.v1beta2.ResponsePolicyRulesUpdateResponse.response_policy_rule:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRule
	30,  // 40: google.cloud.dns.v1beta2.ManagedZone.forwarding_config:type_name -> google.cloud.dns.v1beta2.ManagedZoneForwardingConfig
	57,  // 41: google.cloud.dns.v1beta2.ManagedZone.peering_config:type_name -> google.cloud.dns.v1beta2.ManagedZonePeeringConfig
	108, // 42: google.cloud.dns.v1beta2.ManagedZone.labels:type_name -> google.cloud.dns.v1beta2.ManagedZone.LabelsEntry
	25,  // 43: google.cloud.dns.v1beta2.ManagedZone.dnssec_config:type_name -> google.cloud.dns.v1beta2.ManagedZoneDnsSecConfig
	63,  // 44: google.cloud.dns.v1beta2.ManagedZone.reverse_lookup_config:type_name -> google.cloud.dns.v1beta2.ManagedZoneReverseLookupConfig
	49,  // 45: google.cloud.dns.v1beta2.ManagedZone.service_directory_config:type_name -> google.cloud.dns.v1beta2.ManagedZoneServiceDirectoryConfig
	48,  // 46: google.cloud.dns.v1beta2.ManagedZone.cloud_logging_config:type_name -> google.cloud.dns.v1beta2.ManagedZoneCloudLoggingConfig
	23,  // 47: google.cloud.dns.v1beta2.ManagedZone.private_visibility_config:type_name -> google.cloud.dns.v1beta2.ManagedZonePrivateVisibilityConfig
	6,   // 48: google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicyGeoPolicyItem.health_checked_targets:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyHealthCheckTargets
	1,   // 49: google.cloud.dns.v1beta2.ResponsePolicyRule.local_data:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRuleLocalData
	43,  // 50: google.cloud.dns.v1beta2.RRSetRoutingPolicy.wrr:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicy
	43,  // 51: google.cloud.dns.v1beta2.RRSetRoutingPolicy.wrr_policy:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicy
	59,  // 52: google.cloud.dns.v1beta2.RRSetRoutingPolicy.geo:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicy
	59,  // 53: google.cloud.dns.v1beta2.RRSetRoutingPolicy.geo_policy:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicy
	60,  // 54: google.cloud.dns.v1beta2.RRSetRoutingPolicy.primary_backup:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyPrimaryBackupPolicy
	11,  // 55: google.cloud.dns.v1beta2.ResponsePoliciesListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	28,  // 56: google.cloud.dns.v1beta2.ResponsePoliciesListResponse.response_policies:type_name -> google.cloud.dns.v1beta2.ResponsePolicy
	11,  // 57: google.cloud.dns.v1beta2.ResponsePolicyRulesListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	37,  // 58: google.cloud.dns.v1beta2.ResponsePolicyRulesListResponse.response_policy_rules:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRule
	56,  // 59: google.cloud.dns.v1beta2.GoogleIamV1AuditConfig.audit_log_configs:type_name -> google.cloud.dns.v1beta2.GoogleIamV1AuditLogConfig
	20,  // 60: google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicy.items:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyWrrPolicyWrrPolicyItem
	38,  // 61: google.cloud.dns.v1beta2.ResourceRecordSet.routing_policy:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicy
	7,   // 62: google.cloud.dns.v1beta2.ChangesListResponse.changes:type_name -> google.cloud.dns.v1beta2.Change
	11,  // 63: google.cloud.dns.v1beta2.ChangesListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	8,   // 64: google.cloud.dns.v1beta2.GoogleIamV1GetIamPolicyRequest.options:type_name -> google.cloud.dns.v1beta2.GoogleIamV1GetPolicyOptions
	50,  // 65: google.cloud.dns.v1beta2.ManagedZoneServiceDirectoryConfig.namespace:type_name -> google.cloud.dns.v1beta2.ManagedZoneServiceDirectoryConfigNamespace
	62,  // 66: google.cloud.dns.v1beta2.GoogleIamV1SetIamPolicyRequest.policy:type_name -> google.cloud.dns.v1beta2.GoogleIamV1Policy
	11,  // 67: google.cloud.dns.v1beta2.ResponsePoliciesPatchResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	28,  // 68: google.cloud.dns.v1beta2.ResponsePoliciesPatchResponse.response_policy:type_name -> google.cloud.dns.v1beta2.ResponsePolicy
	11,  // 69: google.cloud.dns.v1beta2.ResponsePolicyRulesPatchResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	37,  // 70: google.cloud.dns.v1beta2.ResponsePolicyRulesPatchResponse.response_policy_rule:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRule
	9,   // 71: google.cloud.dns.v1beta2.ManagedZonePeeringConfig.target_network:type_name -> google.cloud.dns.v1beta2.ManagedZonePeeringConfigTargetNetwork
	36,  // 72: google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicy.items:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicyGeoPolicyItem
	59,  // 73: google.cloud.dns.v1beta2.RRSetRoutingPolicyPrimaryBackupPolicy.backup_geo_targets:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyGeoPolicy
	6,   // 74: google.cloud.dns.v1beta2.RRSetRoutingPolicyPrimaryBackupPolicy.primary_targets:type_name -> google.cloud.dns.v1beta2.RRSetRoutingPolicyHealthCheckTargets
	51,  // 75: google.cloud.dns.v1beta2.DnsKey.digests:type_name -> google.cloud.dns.v1beta2.DnsKeyDigest
	42,  // 76: google.cloud.dns.v1beta2.GoogleIamV1Policy.audit_configs:type_name -> google.cloud.dns.v1beta2.GoogleIamV1AuditConfig
	12,  // 77: google.cloud.dns.v1beta2.GoogleIamV1Policy.bindings:type_name -> google.cloud.dns.v1beta2.GoogleIamV1Binding
	11,  // 78: google.cloud.dns.v1beta2.ResourceRecordSetsListResponse.header:type_name -> google.cloud.dns.v1beta2.ResponseHeader
	44,  // 79: google.cloud.dns.v1beta2.ResourceRecordSetsListResponse.rrsets:type_name -> google.cloud.dns.v1beta2.ResourceRecordSet
	7,   // 80: google.cloud.dns.v1beta2.CreateChangeRequest.change:type_name -> google.cloud.dns.v1beta2.Change
	27,  // 81: google.cloud.dns.v1beta2.CreatePolicyRequest.policy:type_name -> google.cloud.dns.v1beta2.Policy
	27,  // 82: google.cloud.dns.v1beta2.PatchPolicyRequest.policy:type_name -> google.cloud.dns.v1beta2.Policy
	27,  // 83: google.cloud.dns.v1beta2.UpdatePolicyRequest.policy:type_name -> google.cloud.dns.v1beta2.Policy
	44,  // 84: google.cloud.dns.v1beta2.PatchResourceRecordSetRequest.resource_record_set:type_name -> google.cloud.dns.v1beta2.ResourceRecordSet
	44,  // 85: google.cloud.dns.v1beta2.CreateResourceRecordSetRequest.resource_record_set:type_name -> google.cloud.dns.v1beta2.ResourceRecordSet
	34,  // 86: google.cloud.dns.v1beta2.CreateManagedZoneRequest.managed_zone:type_name -> google.cloud.dns.v1beta2.ManagedZone
	34,  // 87: google.cloud.dns.v1beta2.PatchManagedZoneRequest.managed_zone:type_name -> google.cloud.dns.v1beta2.ManagedZone
	34,  // 88: google.cloud.dns.v1beta2.UpdateManagedZoneRequest.managed_zone:type_name -> google.cloud.dns.v1beta2.ManagedZone
	28,  // 89: google.cloud.dns.v1beta2.UpdateResponsePolicyRequest.response_policy:type_name -> google.cloud.dns.v1beta2.ResponsePolicy
	28,  // 90: google.cloud.dns.v1beta2.CreateResponsePolicyRequest.response_policy:type_name -> google.cloud.dns.v1beta2.ResponsePolicy
	28,  // 91: google.cloud.dns.v1beta2.PatchResponsePolicyRequest.response_policy:type_name -> google.cloud.dns.v1beta2.ResponsePolicy
	37,  // 92: google.cloud.dns.v1beta2.CreateResponsePolicyRuleRequest.response_policy_rule:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRule
	37,  // 93: google.cloud.dns.v1beta2.PatchResponsePolicyRuleRequest.response_policy_rule:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRule
	37,  // 94: google.cloud.dns.v1beta2.UpdateResponsePolicyRuleRequest.response_policy_rule:type_name -> google.cloud.dns.v1beta2.ResponsePolicyRule
	65,  // 95: google.cloud.dns.v1beta2.Changes.CreateChange:input_type -> google.cloud.dns.v1beta2.CreateChangeRequest
	66,  // 96: google.cloud.dns.v1beta2.Changes.GetChange:input_type -> google.cloud.dns.v1beta2.GetChangeRequest
	67,  // 97: google.cloud.dns.v1beta2.Changes.ListChanges:input_type -> google.cloud.dns.v1beta2.ListChangesRequest
	68,  // 98: google.cloud.dns.v1beta2.DnsKeys.GetDnsKey:input_type -> google.cloud.dns.v1beta2.GetDnsKeyRequest
	69,  // 99: google.cloud.dns.v1beta2.DnsKeys.ListDnsKeys:input_type -> google.cloud.dns.v1beta2.ListDnsKeysRequest
	70,  // 100: google.cloud.dns.v1beta2.ManagedZoneOperations.GetManagedZoneOperation:input_type -> google.cloud.dns.v1beta2.GetManagedZoneOperationRequest
	71,  // 101: google.cloud.dns.v1beta2.ManagedZoneOperations.ListManagedZoneOperations:input_type -> google.cloud.dns.v1beta2.ListManagedZoneOperationsRequest
	72,  // 102: google.cloud.dns.v1beta2.Policies.CreatePolicy:input_type -> google.cloud.dns.v1beta2.CreatePolicyRequest
	73,  // 103: google.cloud.dns.v1beta2.Policies.DeletePolicy:input_type -> google.cloud.dns.v1beta2.DeletePolicyRequest
	75,  // 104: google.cloud.dns.v1beta2.Policies.GetPolicy:input_type -> google.cloud.dns.v1beta2.GetPolicyRequest
	76,  // 105: google.cloud.dns.v1beta2.Policies.ListPolicies:input_type -> google.cloud.dns.v1beta2.ListPoliciesRequest
	77,  // 106: google.cloud.dns.v1beta2.Policies.PatchPolicy:input_type -> google.cloud.dns.v1beta2.PatchPolicyRequest
	78,  // 107: google.cloud.dns.v1beta2.Policies.UpdatePolicy:input_type -> google.cloud.dns.v1beta2.UpdatePolicyRequest
	79,  // 108: google.cloud.dns.v1beta2.ResourceRecordSets.ListResourceRecordSets:input_type -> google.cloud.dns.v1beta2.ListResourceRecordSetsRequest
	80,  // 109: google.cloud.dns.v1beta2.ResourceRecordSets.PatchResourceRecordSet:input_type -> google.cloud.dns.v1beta2.PatchResourceRecordSetRequest
	81,  // 110: google.cloud.dns.v1beta2.ResourceRecordSets.CreateResourceRecordSet:input_type -> google.cloud.dns.v1beta2.CreateResourceRecordSetRequest
	82,  // 111: google.cloud.dns.v1beta2.ResourceRecordSets.DeleteResourceRecordSet:input_type -> google.cloud.dns.v1beta2.DeleteResourceRecordSetRequest
	84,  // 112: google.cloud.dns.v1beta2.ResourceRecordSets.GetResourceRecordSet:input_type -> google.cloud.dns.v1beta2.GetResourceRecordSetRequest
	85,  // 113: google.cloud.dns.v1beta2.ManagedZones.CreateManagedZone:input_type -> google.cloud.dns.v1beta2.CreateManagedZoneRequest
	86,  // 114: google.cloud.dns.v1beta2.ManagedZones.PatchManagedZone:input_type -> google.cloud.dns.v1beta2.PatchManagedZoneRequest
	87,  // 115: google.cloud.dns.v1beta2.ManagedZones.UpdateManagedZone:input_type -> google.cloud.dns.v1beta2.UpdateManagedZoneRequest
	88,  // 116: google.cloud.dns.v1beta2.ManagedZones.DeleteManagedZone:input_type -> google.cloud.dns.v1beta2.DeleteManagedZoneRequest
	90,  // 117: google.cloud.dns.v1beta2.ManagedZones.GetManagedZone:input_type -> google.cloud.dns.v1beta2.GetManagedZoneRequest
	91,  // 118: google.cloud.dns.v1beta2.ManagedZones.ListManagedZones:input_type -> google.cloud.dns.v1beta2.ListManagedZonesRequest
	92,  // 119: google.cloud.dns.v1beta2.Projects.GetProject:input_type -> google.cloud.dns.v1beta2.GetProjectRequest
	93,  // 120: google.cloud.dns.v1beta2.ResponsePolicies.UpdateResponsePolicy:input_type -> google.cloud.dns.v1beta2.UpdateResponsePolicyRequest
	94,  // 121: google.cloud.dns.v1beta2.ResponsePolicies.CreateResponsePolicy:input_type -> google.cloud.dns.v1beta2.CreateResponsePolicyRequest
	95,  // 122: google.cloud.dns.v1beta2.ResponsePolicies.DeleteResponsePolicy:input_type -> google.cloud.dns.v1beta2.DeleteResponsePolicyRequest
	97,  // 123: google.cloud.dns.v1beta2.ResponsePolicies.GetResponsePolicy:input_type -> google.cloud.dns.v1beta2.GetResponsePolicyRequest
	98,  // 124: google.cloud.dns.v1beta2.ResponsePolicies.ListResponsePolicies:input_type -> google.cloud.dns.v1beta2.ListResponsePoliciesRequest
	99,  // 125: google.cloud.dns.v1beta2.ResponsePolicies.PatchResponsePolicy:input_type -> google.cloud.dns.v1beta2.PatchResponsePolicyRequest
	100, // 126: google.cloud.dns.v1beta2.ResponsePolicyRules.CreateResponsePolicyRule:input_type -> google.cloud.dns.v1beta2.CreateResponsePolicyRuleRequest
	101, // 127: google.cloud.dns.v1beta2.ResponsePolicyRules.DeleteResponsePolicyRule:input_type -> google.cloud.dns.v1beta2.DeleteResponsePolicyRuleRequest
	103, // 128: google.cloud.dns.v1beta2.ResponsePolicyRules.GetResponsePolicyRule:input_type -> google.cloud.dns.v1beta2.GetResponsePolicyRuleRequest
	104, // 129: google.cloud.dns.v1beta2.ResponsePolicyRules.ListResponsePolicyRules:input_type -> google.cloud.dns.v1beta2.ListResponsePolicyRulesRequest
	105, // 130: google.cloud.dns.v1beta2.ResponsePolicyRules.PatchResponsePolicyRule:input_type -> google.cloud.dns.v1beta2.PatchResponsePolicyRuleRequest
	106, // 131: google.cloud.dns.v1beta2.ResponsePolicyRules.UpdateResponsePolicyRule:input_type -> google.cloud.dns.v1beta2.UpdateResponsePolicyRuleRequest
	7,   // 132: google.cloud.dns.v1beta2.Changes.CreateChange:output_type -> google.cloud.dns.v1beta2.Change
	7,   // 133: google.cloud.dns.v1beta2.Changes.GetChange:output_type -> google.cloud.dns.v1beta2.Change
	46,  // 134: google.cloud.dns.v1beta2.Changes.ListChanges:output_type -> google.cloud.dns.v1beta2.ChangesListResponse
	61,  // 135: google.cloud.dns.v1beta2.DnsKeys.GetDnsKey:output_type -> google.cloud.dns.v1beta2.DnsKey
	29,  // 136: google.cloud.dns.v1beta2.DnsKeys.ListDnsKeys:output_type -> google.cloud.dns.v1beta2.DnsKeysListResponse
	31,  // 137: google.cloud.dns.v1beta2.ManagedZoneOperations.GetManagedZoneOperation:output_type -> google.cloud.dns.v1beta2.Operation
	22,  // 138: google.cloud.dns.v1beta2.ManagedZoneOperations.ListManagedZoneOperations:output_type -> google.cloud.dns.v1beta2.ManagedZoneOperationsListResponse
	27,  // 139: google.cloud.dns.v1beta2.Policies.CreatePolicy:output_type -> google.cloud.dns.v1beta2.Policy
	74,  // 140: google.cloud.dns.v1beta2.Policies.DeletePolicy:output_type -> google.cloud.dns.v1beta2.DeletePolicyResponse
	27,  // 141: google.cloud.dns.v1beta2.Policies.GetPolicy:output_type -> google.cloud.dns.v1beta2.Policy
	0,   // 142: google.cloud.dns.v1beta2.Policies.ListPolicies:output_type -> google.cloud.dns.v1beta2.PoliciesListResponse
	10,  // 143: google.cloud.dns.v1beta2.Policies.PatchPolicy:output_type -> google.cloud.dns.v1beta2.PoliciesPatchResponse
	3,   // 144: google.cloud.dns.v1beta2.Policies.UpdatePolicy:output_type -> google.cloud.dns.v1beta2.PoliciesUpdateResponse
	64,  // 145: google.cloud.dns.v1beta2.ResourceRecordSets.ListResourceRecordSets:output_type -> google.cloud.dns.v1beta2.ResourceRecordSetsListResponse
	44,  // 146: google.cloud.dns.v1beta2.ResourceRecordSets.PatchResourceRecordSet:output_type -> google.cloud.dns.v1beta2.ResourceRecordSet
	44,  // 147: google.cloud.dns.v1beta2.ResourceRecordSets.CreateResourceRecordSet:output_type -> google.cloud.dns.v1beta2.ResourceRecordSet
	83,  // 148: google.cloud.dns.v1beta2.ResourceRecordSets.DeleteResourceRecordSet:output_type -> google.cloud.dns.v1beta2.DeleteResourceRecordSetResponse
	44,  // 149: google.cloud.dns.v1beta2.ResourceRecordSets.GetResourceRecordSet:output_type -> google.cloud.dns.v1beta2.ResourceRecordSet
	34,  // 150: google.cloud.dns.v1beta2.ManagedZones.CreateManagedZone:output_type -> google.cloud.dns.v1beta2.ManagedZone
	31,  // 151: google.cloud.dns.v1beta2.ManagedZones.PatchManagedZone:output_type -> google.cloud.dns.v1beta2.Operation
	31,  // 152: google.cloud.dns.v1beta2.ManagedZones.UpdateManagedZone:output_type -> google.cloud.dns.v1beta2.Operation
	89,  // 153: google.cloud.dns.v1beta2.ManagedZones.DeleteManagedZone:output_type -> google.cloud.dns.v1beta2.DeleteManagedZoneResponse
	34,  // 154: google.cloud.dns.v1beta2.ManagedZones.GetManagedZone:output_type -> google.cloud.dns.v1beta2.ManagedZone
	24,  // 155: google.cloud.dns.v1beta2.ManagedZones.ListManagedZones:output_type -> google.cloud.dns.v1beta2.ManagedZonesListResponse
	19,  // 156: google.cloud.dns.v1beta2.Projects.GetProject:output_type -> google.cloud.dns.v1beta2.Project
	15,  // 157: google.cloud.dns.v1beta2.ResponsePolicies.UpdateResponsePolicy:output_type -> google.cloud.dns.v1beta2.ResponsePoliciesUpdateResponse
	28,  // 158: google.cloud.dns.v1beta2.ResponsePolicies.CreateResponsePolicy:output_type -> google.cloud.dns.v1beta2.ResponsePolicy
	96,  // 159: google.cloud.dns.v1beta2.ResponsePolicies.DeleteResponsePolicy:output_type -> google.cloud.dns.v1beta2.DeleteResponsePolicyResponse
	28,  // 160: google.cloud.dns.v1beta2.ResponsePolicies.GetResponsePolicy:output_type -> google.cloud.dns.v1beta2.ResponsePolicy
	40,  // 161: google.cloud.dns.v1beta2.ResponsePolicies.ListResponsePolicies:output_type -> google.cloud.dns.v1beta2.ResponsePoliciesListResponse
	54,  // 162: google.cloud.dns.v1beta2.ResponsePolicies.PatchResponsePolicy:output_type -> google.cloud.dns.v1beta2.ResponsePoliciesPatchResponse
	37,  // 163: google.cloud.dns.v1beta2.ResponsePolicyRules.CreateResponsePolicyRule:output_type -> google.cloud.dns.v1beta2.ResponsePolicyRule
	102, // 164: google.cloud.dns.v1beta2.ResponsePolicyRules.DeleteResponsePolicyRule:output_type -> google.cloud.dns.v1beta2.DeleteResponsePolicyRuleResponse
	37,  // 165: google.cloud.dns.v1beta2.ResponsePolicyRules.GetResponsePolicyRule:output_type -> google.cloud.dns.v1beta2.ResponsePolicyRule
	41,  // 166: google.cloud.dns.v1beta2.ResponsePolicyRules.ListResponsePolicyRules:output_type -> google.cloud.dns.v1beta2.ResponsePolicyRulesListResponse
	55,  // 167: google.cloud.dns.v1beta2.ResponsePolicyRules.PatchResponsePolicyRule:output_type -> google.cloud.dns.v1beta2.ResponsePolicyRulesPatchResponse
	32,  // 168: google.cloud.dns.v1beta2.ResponsePolicyRules.UpdateResponsePolicyRule:output_type -> google.cloud.dns.v1beta2.ResponsePolicyRulesUpdateResponse
	132, // [132:169] is the sub-list for method output_type
	95,  // [95:132] is the sub-list for method input_type
	95,  // [95:95] is the sub-list for extension type_name
	95,  // [95:95] is the sub-list for extension extendee
	0,   // [0:95] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_dns_v1beta2_generated_proto_init() }
func file_mockgcp_cloud_dns_v1beta2_generated_proto_init() {
	if File_mockgcp_cloud_dns_v1beta2_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRuleLocalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKeySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyHealthCheckTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1GetPolicyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePeeringConfigTargetNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesPatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1TestIamPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyAlternativeNameServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePoliciesUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDnsKeyContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePrivateVisibilityConfigGKECluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyAlternativeNameServerConfigTargetNameServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyWrrPolicyWrrPolicyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1TestIamPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneOperationsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePrivateVisibilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneDnsSecConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationManagedZoneContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKeysListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneForwardingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRulesUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneForwardingConfigNameServerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyGeoPolicyGeoPolicyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyLoadBalancerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePoliciesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRulesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1AuditConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyWrrPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecordSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyGKECluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1GetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneCloudLoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneServiceDirectoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneServiceDirectoryConfigNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKeyDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1SetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePoliciesPatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRulesPatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1AuditLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePeeringConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePrivateVisibilityConfigNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyGeoPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyPrimaryBackupPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneReverseLookupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecordSetsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDnsKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagedZoneOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListManagedZoneOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceRecordSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceRecordSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteManagedZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListManagedZonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponsePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponsePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponsePolicyRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponsePolicyRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   109,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_mockgcp_cloud_dns_v1beta2_generated_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_dns_v1beta2_generated_proto_depIdxs,
		MessageInfos:      file_mockgcp_cloud_dns_v1beta2_generated_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_dns_v1beta2_generated_proto = out.File
	file_mockgcp_cloud_dns_v1beta2_generated_proto_rawDesc = nil
	file_mockgcp_cloud_dns_v1beta2_generated_proto_goTypes = nil
	file_mockgcp_cloud_dns_v1beta2_generated_proto_depIdxs = nil
}
