// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/dns/v1beta2/generated.proto

package dnspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChangesClient is the client API for Changes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangesClient interface {
	CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*Change, error)
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*Change, error)
	ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ChangesListResponse, error)
}

type changesClient struct {
	cc grpc.ClientConnInterface
}

func NewChangesClient(cc grpc.ClientConnInterface) ChangesClient {
	return &changesClient{cc}
}

func (c *changesClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Changes/CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Changes/GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesClient) ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ChangesListResponse, error) {
	out := new(ChangesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Changes/ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangesServer is the server API for Changes service.
// All implementations must embed UnimplementedChangesServer
// for forward compatibility
type ChangesServer interface {
	CreateChange(context.Context, *CreateChangeRequest) (*Change, error)
	GetChange(context.Context, *GetChangeRequest) (*Change, error)
	ListChanges(context.Context, *ListChangesRequest) (*ChangesListResponse, error)
	mustEmbedUnimplementedChangesServer()
}

// UnimplementedChangesServer must be embedded to have forward compatible implementations.
type UnimplementedChangesServer struct {
}

func (UnimplementedChangesServer) CreateChange(context.Context, *CreateChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChange not implemented")
}
func (UnimplementedChangesServer) GetChange(context.Context, *GetChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChange not implemented")
}
func (UnimplementedChangesServer) ListChanges(context.Context, *ListChangesRequest) (*ChangesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (UnimplementedChangesServer) mustEmbedUnimplementedChangesServer() {}

// UnsafeChangesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangesServer will
// result in compilation errors.
type UnsafeChangesServer interface {
	mustEmbedUnimplementedChangesServer()
}

func RegisterChangesServer(s grpc.ServiceRegistrar, srv ChangesServer) {
	s.RegisterService(&Changes_ServiceDesc, srv)
}

func _Changes_CreateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesServer).CreateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Changes/CreateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesServer).CreateChange(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Changes_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Changes/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Changes_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Changes/ListChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesServer).ListChanges(ctx, req.(*ListChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Changes_ServiceDesc is the grpc.ServiceDesc for Changes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Changes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.Changes",
	HandlerType: (*ChangesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChange",
			Handler:    _Changes_CreateChange_Handler,
		},
		{
			MethodName: "GetChange",
			Handler:    _Changes_GetChange_Handler,
		},
		{
			MethodName: "ListChanges",
			Handler:    _Changes_ListChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// DnsKeysClient is the client API for DnsKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnsKeysClient interface {
	GetDnsKey(ctx context.Context, in *GetDnsKeyRequest, opts ...grpc.CallOption) (*DnsKey, error)
	ListDnsKeys(ctx context.Context, in *ListDnsKeysRequest, opts ...grpc.CallOption) (*DnsKeysListResponse, error)
}

type dnsKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsKeysClient(cc grpc.ClientConnInterface) DnsKeysClient {
	return &dnsKeysClient{cc}
}

func (c *dnsKeysClient) GetDnsKey(ctx context.Context, in *GetDnsKeyRequest, opts ...grpc.CallOption) (*DnsKey, error) {
	out := new(DnsKey)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.DnsKeys/GetDnsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsKeysClient) ListDnsKeys(ctx context.Context, in *ListDnsKeysRequest, opts ...grpc.CallOption) (*DnsKeysListResponse, error) {
	out := new(DnsKeysListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.DnsKeys/ListDnsKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsKeysServer is the server API for DnsKeys service.
// All implementations must embed UnimplementedDnsKeysServer
// for forward compatibility
type DnsKeysServer interface {
	GetDnsKey(context.Context, *GetDnsKeyRequest) (*DnsKey, error)
	ListDnsKeys(context.Context, *ListDnsKeysRequest) (*DnsKeysListResponse, error)
	mustEmbedUnimplementedDnsKeysServer()
}

// UnimplementedDnsKeysServer must be embedded to have forward compatible implementations.
type UnimplementedDnsKeysServer struct {
}

func (UnimplementedDnsKeysServer) GetDnsKey(context.Context, *GetDnsKeyRequest) (*DnsKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsKey not implemented")
}
func (UnimplementedDnsKeysServer) ListDnsKeys(context.Context, *ListDnsKeysRequest) (*DnsKeysListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDnsKeys not implemented")
}
func (UnimplementedDnsKeysServer) mustEmbedUnimplementedDnsKeysServer() {}

// UnsafeDnsKeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsKeysServer will
// result in compilation errors.
type UnsafeDnsKeysServer interface {
	mustEmbedUnimplementedDnsKeysServer()
}

func RegisterDnsKeysServer(s grpc.ServiceRegistrar, srv DnsKeysServer) {
	s.RegisterService(&DnsKeys_ServiceDesc, srv)
}

func _DnsKeys_GetDnsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsKeysServer).GetDnsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.DnsKeys/GetDnsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsKeysServer).GetDnsKey(ctx, req.(*GetDnsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsKeys_ListDnsKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDnsKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsKeysServer).ListDnsKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.DnsKeys/ListDnsKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsKeysServer).ListDnsKeys(ctx, req.(*ListDnsKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnsKeys_ServiceDesc is the grpc.ServiceDesc for DnsKeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnsKeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.DnsKeys",
	HandlerType: (*DnsKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDnsKey",
			Handler:    _DnsKeys_GetDnsKey_Handler,
		},
		{
			MethodName: "ListDnsKeys",
			Handler:    _DnsKeys_ListDnsKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// ManagedZoneOperationsClient is the client API for ManagedZoneOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedZoneOperationsClient interface {
	GetManagedZoneOperation(ctx context.Context, in *GetManagedZoneOperationRequest, opts ...grpc.CallOption) (*Operation, error)
	ListManagedZoneOperations(ctx context.Context, in *ListManagedZoneOperationsRequest, opts ...grpc.CallOption) (*ManagedZoneOperationsListResponse, error)
}

type managedZoneOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedZoneOperationsClient(cc grpc.ClientConnInterface) ManagedZoneOperationsClient {
	return &managedZoneOperationsClient{cc}
}

func (c *managedZoneOperationsClient) GetManagedZoneOperation(ctx context.Context, in *GetManagedZoneOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZoneOperations/GetManagedZoneOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZoneOperationsClient) ListManagedZoneOperations(ctx context.Context, in *ListManagedZoneOperationsRequest, opts ...grpc.CallOption) (*ManagedZoneOperationsListResponse, error) {
	out := new(ManagedZoneOperationsListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZoneOperations/ListManagedZoneOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedZoneOperationsServer is the server API for ManagedZoneOperations service.
// All implementations must embed UnimplementedManagedZoneOperationsServer
// for forward compatibility
type ManagedZoneOperationsServer interface {
	GetManagedZoneOperation(context.Context, *GetManagedZoneOperationRequest) (*Operation, error)
	ListManagedZoneOperations(context.Context, *ListManagedZoneOperationsRequest) (*ManagedZoneOperationsListResponse, error)
	mustEmbedUnimplementedManagedZoneOperationsServer()
}

// UnimplementedManagedZoneOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedManagedZoneOperationsServer struct {
}

func (UnimplementedManagedZoneOperationsServer) GetManagedZoneOperation(context.Context, *GetManagedZoneOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedZoneOperation not implemented")
}
func (UnimplementedManagedZoneOperationsServer) ListManagedZoneOperations(context.Context, *ListManagedZoneOperationsRequest) (*ManagedZoneOperationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagedZoneOperations not implemented")
}
func (UnimplementedManagedZoneOperationsServer) mustEmbedUnimplementedManagedZoneOperationsServer() {}

// UnsafeManagedZoneOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedZoneOperationsServer will
// result in compilation errors.
type UnsafeManagedZoneOperationsServer interface {
	mustEmbedUnimplementedManagedZoneOperationsServer()
}

func RegisterManagedZoneOperationsServer(s grpc.ServiceRegistrar, srv ManagedZoneOperationsServer) {
	s.RegisterService(&ManagedZoneOperations_ServiceDesc, srv)
}

func _ManagedZoneOperations_GetManagedZoneOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedZoneOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZoneOperationsServer).GetManagedZoneOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZoneOperations/GetManagedZoneOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZoneOperationsServer).GetManagedZoneOperation(ctx, req.(*GetManagedZoneOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZoneOperations_ListManagedZoneOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagedZoneOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZoneOperationsServer).ListManagedZoneOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZoneOperations/ListManagedZoneOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZoneOperationsServer).ListManagedZoneOperations(ctx, req.(*ListManagedZoneOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedZoneOperations_ServiceDesc is the grpc.ServiceDesc for ManagedZoneOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedZoneOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.ManagedZoneOperations",
	HandlerType: (*ManagedZoneOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManagedZoneOperation",
			Handler:    _ManagedZoneOperations_GetManagedZoneOperation_Handler,
		},
		{
			MethodName: "ListManagedZoneOperations",
			Handler:    _ManagedZoneOperations_ListManagedZoneOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// PoliciesClient is the client API for Policies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoliciesClient interface {
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*PoliciesListResponse, error)
	PatchPolicy(ctx context.Context, in *PatchPolicyRequest, opts ...grpc.CallOption) (*PoliciesPatchResponse, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*PoliciesUpdateResponse, error)
}

type policiesClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesClient(cc grpc.ClientConnInterface) PoliciesClient {
	return &policiesClient{cc}
}

func (c *policiesClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Policies/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Policies/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Policies/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*PoliciesListResponse, error) {
	out := new(PoliciesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Policies/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) PatchPolicy(ctx context.Context, in *PatchPolicyRequest, opts ...grpc.CallOption) (*PoliciesPatchResponse, error) {
	out := new(PoliciesPatchResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Policies/PatchPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*PoliciesUpdateResponse, error) {
	out := new(PoliciesUpdateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Policies/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServer is the server API for Policies service.
// All implementations must embed UnimplementedPoliciesServer
// for forward compatibility
type PoliciesServer interface {
	CreatePolicy(context.Context, *CreatePolicyRequest) (*Policy, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*PoliciesListResponse, error)
	PatchPolicy(context.Context, *PatchPolicyRequest) (*PoliciesPatchResponse, error)
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*PoliciesUpdateResponse, error)
	mustEmbedUnimplementedPoliciesServer()
}

// UnimplementedPoliciesServer must be embedded to have forward compatible implementations.
type UnimplementedPoliciesServer struct {
}

func (UnimplementedPoliciesServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedPoliciesServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPoliciesServer) GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPoliciesServer) ListPolicies(context.Context, *ListPoliciesRequest) (*PoliciesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedPoliciesServer) PatchPolicy(context.Context, *PatchPolicyRequest) (*PoliciesPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPolicy not implemented")
}
func (UnimplementedPoliciesServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*PoliciesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedPoliciesServer) mustEmbedUnimplementedPoliciesServer() {}

// UnsafePoliciesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoliciesServer will
// result in compilation errors.
type UnsafePoliciesServer interface {
	mustEmbedUnimplementedPoliciesServer()
}

func RegisterPoliciesServer(s grpc.ServiceRegistrar, srv PoliciesServer) {
	s.RegisterService(&Policies_ServiceDesc, srv)
}

func _Policies_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Policies/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Policies/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Policies/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Policies/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_PatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).PatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Policies/PatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).PatchPolicy(ctx, req.(*PatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policies_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Policies/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Policies_ServiceDesc is the grpc.ServiceDesc for Policies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Policies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.Policies",
	HandlerType: (*PoliciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _Policies_CreatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Policies_DeletePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Policies_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Policies_ListPolicies_Handler,
		},
		{
			MethodName: "PatchPolicy",
			Handler:    _Policies_PatchPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Policies_UpdatePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// ResourceRecordSetsClient is the client API for ResourceRecordSets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceRecordSetsClient interface {
	ListResourceRecordSets(ctx context.Context, in *ListResourceRecordSetsRequest, opts ...grpc.CallOption) (*ResourceRecordSetsListResponse, error)
	PatchResourceRecordSet(ctx context.Context, in *PatchResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error)
	CreateResourceRecordSet(ctx context.Context, in *CreateResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error)
	DeleteResourceRecordSet(ctx context.Context, in *DeleteResourceRecordSetRequest, opts ...grpc.CallOption) (*DeleteResourceRecordSetResponse, error)
	GetResourceRecordSet(ctx context.Context, in *GetResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error)
}

type resourceRecordSetsClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceRecordSetsClient(cc grpc.ClientConnInterface) ResourceRecordSetsClient {
	return &resourceRecordSetsClient{cc}
}

func (c *resourceRecordSetsClient) ListResourceRecordSets(ctx context.Context, in *ListResourceRecordSetsRequest, opts ...grpc.CallOption) (*ResourceRecordSetsListResponse, error) {
	out := new(ResourceRecordSetsListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResourceRecordSets/ListResourceRecordSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsClient) PatchResourceRecordSet(ctx context.Context, in *PatchResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error) {
	out := new(ResourceRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResourceRecordSets/PatchResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsClient) CreateResourceRecordSet(ctx context.Context, in *CreateResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error) {
	out := new(ResourceRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResourceRecordSets/CreateResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsClient) DeleteResourceRecordSet(ctx context.Context, in *DeleteResourceRecordSetRequest, opts ...grpc.CallOption) (*DeleteResourceRecordSetResponse, error) {
	out := new(DeleteResourceRecordSetResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResourceRecordSets/DeleteResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsClient) GetResourceRecordSet(ctx context.Context, in *GetResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error) {
	out := new(ResourceRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResourceRecordSets/GetResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRecordSetsServer is the server API for ResourceRecordSets service.
// All implementations must embed UnimplementedResourceRecordSetsServer
// for forward compatibility
type ResourceRecordSetsServer interface {
	ListResourceRecordSets(context.Context, *ListResourceRecordSetsRequest) (*ResourceRecordSetsListResponse, error)
	PatchResourceRecordSet(context.Context, *PatchResourceRecordSetRequest) (*ResourceRecordSet, error)
	CreateResourceRecordSet(context.Context, *CreateResourceRecordSetRequest) (*ResourceRecordSet, error)
	DeleteResourceRecordSet(context.Context, *DeleteResourceRecordSetRequest) (*DeleteResourceRecordSetResponse, error)
	GetResourceRecordSet(context.Context, *GetResourceRecordSetRequest) (*ResourceRecordSet, error)
	mustEmbedUnimplementedResourceRecordSetsServer()
}

// UnimplementedResourceRecordSetsServer must be embedded to have forward compatible implementations.
type UnimplementedResourceRecordSetsServer struct {
}

func (UnimplementedResourceRecordSetsServer) ListResourceRecordSets(context.Context, *ListResourceRecordSetsRequest) (*ResourceRecordSetsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceRecordSets not implemented")
}
func (UnimplementedResourceRecordSetsServer) PatchResourceRecordSet(context.Context, *PatchResourceRecordSetRequest) (*ResourceRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServer) CreateResourceRecordSet(context.Context, *CreateResourceRecordSetRequest) (*ResourceRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServer) DeleteResourceRecordSet(context.Context, *DeleteResourceRecordSetRequest) (*DeleteResourceRecordSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServer) GetResourceRecordSet(context.Context, *GetResourceRecordSetRequest) (*ResourceRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServer) mustEmbedUnimplementedResourceRecordSetsServer() {}

// UnsafeResourceRecordSetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceRecordSetsServer will
// result in compilation errors.
type UnsafeResourceRecordSetsServer interface {
	mustEmbedUnimplementedResourceRecordSetsServer()
}

func RegisterResourceRecordSetsServer(s grpc.ServiceRegistrar, srv ResourceRecordSetsServer) {
	s.RegisterService(&ResourceRecordSets_ServiceDesc, srv)
}

func _ResourceRecordSets_ListResourceRecordSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRecordSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServer).ListResourceRecordSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResourceRecordSets/ListResourceRecordSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServer).ListResourceRecordSets(ctx, req.(*ListResourceRecordSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSets_PatchResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServer).PatchResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResourceRecordSets/PatchResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServer).PatchResourceRecordSet(ctx, req.(*PatchResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSets_CreateResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServer).CreateResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResourceRecordSets/CreateResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServer).CreateResourceRecordSet(ctx, req.(*CreateResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSets_DeleteResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServer).DeleteResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResourceRecordSets/DeleteResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServer).DeleteResourceRecordSet(ctx, req.(*DeleteResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSets_GetResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServer).GetResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResourceRecordSets/GetResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServer).GetResourceRecordSet(ctx, req.(*GetResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceRecordSets_ServiceDesc is the grpc.ServiceDesc for ResourceRecordSets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceRecordSets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.ResourceRecordSets",
	HandlerType: (*ResourceRecordSetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResourceRecordSets",
			Handler:    _ResourceRecordSets_ListResourceRecordSets_Handler,
		},
		{
			MethodName: "PatchResourceRecordSet",
			Handler:    _ResourceRecordSets_PatchResourceRecordSet_Handler,
		},
		{
			MethodName: "CreateResourceRecordSet",
			Handler:    _ResourceRecordSets_CreateResourceRecordSet_Handler,
		},
		{
			MethodName: "DeleteResourceRecordSet",
			Handler:    _ResourceRecordSets_DeleteResourceRecordSet_Handler,
		},
		{
			MethodName: "GetResourceRecordSet",
			Handler:    _ResourceRecordSets_GetResourceRecordSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// ManagedZonesClient is the client API for ManagedZones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedZonesClient interface {
	CreateManagedZone(ctx context.Context, in *CreateManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error)
	PatchManagedZone(ctx context.Context, in *PatchManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error)
	UpdateManagedZone(ctx context.Context, in *UpdateManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error)
	DeleteManagedZone(ctx context.Context, in *DeleteManagedZoneRequest, opts ...grpc.CallOption) (*DeleteManagedZoneResponse, error)
	GetManagedZone(ctx context.Context, in *GetManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error)
	ListManagedZones(ctx context.Context, in *ListManagedZonesRequest, opts ...grpc.CallOption) (*ManagedZonesListResponse, error)
}

type managedZonesClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedZonesClient(cc grpc.ClientConnInterface) ManagedZonesClient {
	return &managedZonesClient{cc}
}

func (c *managedZonesClient) CreateManagedZone(ctx context.Context, in *CreateManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error) {
	out := new(ManagedZone)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZones/CreateManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesClient) PatchManagedZone(ctx context.Context, in *PatchManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZones/PatchManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesClient) UpdateManagedZone(ctx context.Context, in *UpdateManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZones/UpdateManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesClient) DeleteManagedZone(ctx context.Context, in *DeleteManagedZoneRequest, opts ...grpc.CallOption) (*DeleteManagedZoneResponse, error) {
	out := new(DeleteManagedZoneResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZones/DeleteManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesClient) GetManagedZone(ctx context.Context, in *GetManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error) {
	out := new(ManagedZone)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZones/GetManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesClient) ListManagedZones(ctx context.Context, in *ListManagedZonesRequest, opts ...grpc.CallOption) (*ManagedZonesListResponse, error) {
	out := new(ManagedZonesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ManagedZones/ListManagedZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedZonesServer is the server API for ManagedZones service.
// All implementations must embed UnimplementedManagedZonesServer
// for forward compatibility
type ManagedZonesServer interface {
	CreateManagedZone(context.Context, *CreateManagedZoneRequest) (*ManagedZone, error)
	PatchManagedZone(context.Context, *PatchManagedZoneRequest) (*Operation, error)
	UpdateManagedZone(context.Context, *UpdateManagedZoneRequest) (*Operation, error)
	DeleteManagedZone(context.Context, *DeleteManagedZoneRequest) (*DeleteManagedZoneResponse, error)
	GetManagedZone(context.Context, *GetManagedZoneRequest) (*ManagedZone, error)
	ListManagedZones(context.Context, *ListManagedZonesRequest) (*ManagedZonesListResponse, error)
	mustEmbedUnimplementedManagedZonesServer()
}

// UnimplementedManagedZonesServer must be embedded to have forward compatible implementations.
type UnimplementedManagedZonesServer struct {
}

func (UnimplementedManagedZonesServer) CreateManagedZone(context.Context, *CreateManagedZoneRequest) (*ManagedZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManagedZone not implemented")
}
func (UnimplementedManagedZonesServer) PatchManagedZone(context.Context, *PatchManagedZoneRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchManagedZone not implemented")
}
func (UnimplementedManagedZonesServer) UpdateManagedZone(context.Context, *UpdateManagedZoneRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagedZone not implemented")
}
func (UnimplementedManagedZonesServer) DeleteManagedZone(context.Context, *DeleteManagedZoneRequest) (*DeleteManagedZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManagedZone not implemented")
}
func (UnimplementedManagedZonesServer) GetManagedZone(context.Context, *GetManagedZoneRequest) (*ManagedZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedZone not implemented")
}
func (UnimplementedManagedZonesServer) ListManagedZones(context.Context, *ListManagedZonesRequest) (*ManagedZonesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagedZones not implemented")
}
func (UnimplementedManagedZonesServer) mustEmbedUnimplementedManagedZonesServer() {}

// UnsafeManagedZonesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedZonesServer will
// result in compilation errors.
type UnsafeManagedZonesServer interface {
	mustEmbedUnimplementedManagedZonesServer()
}

func RegisterManagedZonesServer(s grpc.ServiceRegistrar, srv ManagedZonesServer) {
	s.RegisterService(&ManagedZones_ServiceDesc, srv)
}

func _ManagedZones_CreateManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServer).CreateManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZones/CreateManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServer).CreateManagedZone(ctx, req.(*CreateManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZones_PatchManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServer).PatchManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZones/PatchManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServer).PatchManagedZone(ctx, req.(*PatchManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZones_UpdateManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServer).UpdateManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZones/UpdateManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServer).UpdateManagedZone(ctx, req.(*UpdateManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZones_DeleteManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServer).DeleteManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZones/DeleteManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServer).DeleteManagedZone(ctx, req.(*DeleteManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZones_GetManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServer).GetManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZones/GetManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServer).GetManagedZone(ctx, req.(*GetManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZones_ListManagedZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagedZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServer).ListManagedZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ManagedZones/ListManagedZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServer).ListManagedZones(ctx, req.(*ListManagedZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedZones_ServiceDesc is the grpc.ServiceDesc for ManagedZones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedZones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.ManagedZones",
	HandlerType: (*ManagedZonesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManagedZone",
			Handler:    _ManagedZones_CreateManagedZone_Handler,
		},
		{
			MethodName: "PatchManagedZone",
			Handler:    _ManagedZones_PatchManagedZone_Handler,
		},
		{
			MethodName: "UpdateManagedZone",
			Handler:    _ManagedZones_UpdateManagedZone_Handler,
		},
		{
			MethodName: "DeleteManagedZone",
			Handler:    _ManagedZones_DeleteManagedZone_Handler,
		},
		{
			MethodName: "GetManagedZone",
			Handler:    _ManagedZones_GetManagedZone_Handler,
		},
		{
			MethodName: "ListManagedZones",
			Handler:    _ManagedZones_ListManagedZones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// ProjectsClient is the client API for Projects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsClient interface {
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
}

type projectsClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsClient(cc grpc.ClientConnInterface) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.Projects/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServer is the server API for Projects service.
// All implementations must embed UnimplementedProjectsServer
// for forward compatibility
type ProjectsServer interface {
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	mustEmbedUnimplementedProjectsServer()
}

// UnimplementedProjectsServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServer struct {
}

func (UnimplementedProjectsServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectsServer) mustEmbedUnimplementedProjectsServer() {}

// UnsafeProjectsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServer will
// result in compilation errors.
type UnsafeProjectsServer interface {
	mustEmbedUnimplementedProjectsServer()
}

func RegisterProjectsServer(s grpc.ServiceRegistrar, srv ProjectsServer) {
	s.RegisterService(&Projects_ServiceDesc, srv)
}

func _Projects_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.Projects/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Projects_ServiceDesc is the grpc.ServiceDesc for Projects service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Projects_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _Projects_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// ResponsePoliciesClient is the client API for ResponsePolicies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponsePoliciesClient interface {
	UpdateResponsePolicy(ctx context.Context, in *UpdateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesUpdateResponse, error)
	CreateResponsePolicy(ctx context.Context, in *CreateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error)
	DeleteResponsePolicy(ctx context.Context, in *DeleteResponsePolicyRequest, opts ...grpc.CallOption) (*DeleteResponsePolicyResponse, error)
	GetResponsePolicy(ctx context.Context, in *GetResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error)
	ListResponsePolicies(ctx context.Context, in *ListResponsePoliciesRequest, opts ...grpc.CallOption) (*ResponsePoliciesListResponse, error)
	PatchResponsePolicy(ctx context.Context, in *PatchResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesPatchResponse, error)
}

type responsePoliciesClient struct {
	cc grpc.ClientConnInterface
}

func NewResponsePoliciesClient(cc grpc.ClientConnInterface) ResponsePoliciesClient {
	return &responsePoliciesClient{cc}
}

func (c *responsePoliciesClient) UpdateResponsePolicy(ctx context.Context, in *UpdateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesUpdateResponse, error) {
	out := new(ResponsePoliciesUpdateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicies/UpdateResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesClient) CreateResponsePolicy(ctx context.Context, in *CreateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error) {
	out := new(ResponsePolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicies/CreateResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesClient) DeleteResponsePolicy(ctx context.Context, in *DeleteResponsePolicyRequest, opts ...grpc.CallOption) (*DeleteResponsePolicyResponse, error) {
	out := new(DeleteResponsePolicyResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicies/DeleteResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesClient) GetResponsePolicy(ctx context.Context, in *GetResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error) {
	out := new(ResponsePolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicies/GetResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesClient) ListResponsePolicies(ctx context.Context, in *ListResponsePoliciesRequest, opts ...grpc.CallOption) (*ResponsePoliciesListResponse, error) {
	out := new(ResponsePoliciesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicies/ListResponsePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesClient) PatchResponsePolicy(ctx context.Context, in *PatchResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesPatchResponse, error) {
	out := new(ResponsePoliciesPatchResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicies/PatchResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponsePoliciesServer is the server API for ResponsePolicies service.
// All implementations must embed UnimplementedResponsePoliciesServer
// for forward compatibility
type ResponsePoliciesServer interface {
	UpdateResponsePolicy(context.Context, *UpdateResponsePolicyRequest) (*ResponsePoliciesUpdateResponse, error)
	CreateResponsePolicy(context.Context, *CreateResponsePolicyRequest) (*ResponsePolicy, error)
	DeleteResponsePolicy(context.Context, *DeleteResponsePolicyRequest) (*DeleteResponsePolicyResponse, error)
	GetResponsePolicy(context.Context, *GetResponsePolicyRequest) (*ResponsePolicy, error)
	ListResponsePolicies(context.Context, *ListResponsePoliciesRequest) (*ResponsePoliciesListResponse, error)
	PatchResponsePolicy(context.Context, *PatchResponsePolicyRequest) (*ResponsePoliciesPatchResponse, error)
	mustEmbedUnimplementedResponsePoliciesServer()
}

// UnimplementedResponsePoliciesServer must be embedded to have forward compatible implementations.
type UnimplementedResponsePoliciesServer struct {
}

func (UnimplementedResponsePoliciesServer) UpdateResponsePolicy(context.Context, *UpdateResponsePolicyRequest) (*ResponsePoliciesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServer) CreateResponsePolicy(context.Context, *CreateResponsePolicyRequest) (*ResponsePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServer) DeleteResponsePolicy(context.Context, *DeleteResponsePolicyRequest) (*DeleteResponsePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServer) GetResponsePolicy(context.Context, *GetResponsePolicyRequest) (*ResponsePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServer) ListResponsePolicies(context.Context, *ListResponsePoliciesRequest) (*ResponsePoliciesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResponsePolicies not implemented")
}
func (UnimplementedResponsePoliciesServer) PatchResponsePolicy(context.Context, *PatchResponsePolicyRequest) (*ResponsePoliciesPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServer) mustEmbedUnimplementedResponsePoliciesServer() {}

// UnsafeResponsePoliciesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponsePoliciesServer will
// result in compilation errors.
type UnsafeResponsePoliciesServer interface {
	mustEmbedUnimplementedResponsePoliciesServer()
}

func RegisterResponsePoliciesServer(s grpc.ServiceRegistrar, srv ResponsePoliciesServer) {
	s.RegisterService(&ResponsePolicies_ServiceDesc, srv)
}

func _ResponsePolicies_UpdateResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServer).UpdateResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicies/UpdateResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServer).UpdateResponsePolicy(ctx, req.(*UpdateResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicies_CreateResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServer).CreateResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicies/CreateResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServer).CreateResponsePolicy(ctx, req.(*CreateResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicies_DeleteResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServer).DeleteResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicies/DeleteResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServer).DeleteResponsePolicy(ctx, req.(*DeleteResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicies_GetResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServer).GetResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicies/GetResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServer).GetResponsePolicy(ctx, req.(*GetResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicies_ListResponsePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResponsePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServer).ListResponsePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicies/ListResponsePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServer).ListResponsePolicies(ctx, req.(*ListResponsePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicies_PatchResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServer).PatchResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicies/PatchResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServer).PatchResponsePolicy(ctx, req.(*PatchResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResponsePolicies_ServiceDesc is the grpc.ServiceDesc for ResponsePolicies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResponsePolicies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.ResponsePolicies",
	HandlerType: (*ResponsePoliciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateResponsePolicy",
			Handler:    _ResponsePolicies_UpdateResponsePolicy_Handler,
		},
		{
			MethodName: "CreateResponsePolicy",
			Handler:    _ResponsePolicies_CreateResponsePolicy_Handler,
		},
		{
			MethodName: "DeleteResponsePolicy",
			Handler:    _ResponsePolicies_DeleteResponsePolicy_Handler,
		},
		{
			MethodName: "GetResponsePolicy",
			Handler:    _ResponsePolicies_GetResponsePolicy_Handler,
		},
		{
			MethodName: "ListResponsePolicies",
			Handler:    _ResponsePolicies_ListResponsePolicies_Handler,
		},
		{
			MethodName: "PatchResponsePolicy",
			Handler:    _ResponsePolicies_PatchResponsePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}

// ResponsePolicyRulesClient is the client API for ResponsePolicyRules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponsePolicyRulesClient interface {
	CreateResponsePolicyRule(ctx context.Context, in *CreateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error)
	DeleteResponsePolicyRule(ctx context.Context, in *DeleteResponsePolicyRuleRequest, opts ...grpc.CallOption) (*DeleteResponsePolicyRuleResponse, error)
	GetResponsePolicyRule(ctx context.Context, in *GetResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error)
	ListResponsePolicyRules(ctx context.Context, in *ListResponsePolicyRulesRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesListResponse, error)
	PatchResponsePolicyRule(ctx context.Context, in *PatchResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesPatchResponse, error)
	UpdateResponsePolicyRule(ctx context.Context, in *UpdateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesUpdateResponse, error)
}

type responsePolicyRulesClient struct {
	cc grpc.ClientConnInterface
}

func NewResponsePolicyRulesClient(cc grpc.ClientConnInterface) ResponsePolicyRulesClient {
	return &responsePolicyRulesClient{cc}
}

func (c *responsePolicyRulesClient) CreateResponsePolicyRule(ctx context.Context, in *CreateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error) {
	out := new(ResponsePolicyRule)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicyRules/CreateResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesClient) DeleteResponsePolicyRule(ctx context.Context, in *DeleteResponsePolicyRuleRequest, opts ...grpc.CallOption) (*DeleteResponsePolicyRuleResponse, error) {
	out := new(DeleteResponsePolicyRuleResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicyRules/DeleteResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesClient) GetResponsePolicyRule(ctx context.Context, in *GetResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error) {
	out := new(ResponsePolicyRule)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicyRules/GetResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesClient) ListResponsePolicyRules(ctx context.Context, in *ListResponsePolicyRulesRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesListResponse, error) {
	out := new(ResponsePolicyRulesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicyRules/ListResponsePolicyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesClient) PatchResponsePolicyRule(ctx context.Context, in *PatchResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesPatchResponse, error) {
	out := new(ResponsePolicyRulesPatchResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicyRules/PatchResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesClient) UpdateResponsePolicyRule(ctx context.Context, in *UpdateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesUpdateResponse, error) {
	out := new(ResponsePolicyRulesUpdateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1beta2.ResponsePolicyRules/UpdateResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponsePolicyRulesServer is the server API for ResponsePolicyRules service.
// All implementations must embed UnimplementedResponsePolicyRulesServer
// for forward compatibility
type ResponsePolicyRulesServer interface {
	CreateResponsePolicyRule(context.Context, *CreateResponsePolicyRuleRequest) (*ResponsePolicyRule, error)
	DeleteResponsePolicyRule(context.Context, *DeleteResponsePolicyRuleRequest) (*DeleteResponsePolicyRuleResponse, error)
	GetResponsePolicyRule(context.Context, *GetResponsePolicyRuleRequest) (*ResponsePolicyRule, error)
	ListResponsePolicyRules(context.Context, *ListResponsePolicyRulesRequest) (*ResponsePolicyRulesListResponse, error)
	PatchResponsePolicyRule(context.Context, *PatchResponsePolicyRuleRequest) (*ResponsePolicyRulesPatchResponse, error)
	UpdateResponsePolicyRule(context.Context, *UpdateResponsePolicyRuleRequest) (*ResponsePolicyRulesUpdateResponse, error)
	mustEmbedUnimplementedResponsePolicyRulesServer()
}

// UnimplementedResponsePolicyRulesServer must be embedded to have forward compatible implementations.
type UnimplementedResponsePolicyRulesServer struct {
}

func (UnimplementedResponsePolicyRulesServer) CreateResponsePolicyRule(context.Context, *CreateResponsePolicyRuleRequest) (*ResponsePolicyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServer) DeleteResponsePolicyRule(context.Context, *DeleteResponsePolicyRuleRequest) (*DeleteResponsePolicyRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServer) GetResponsePolicyRule(context.Context, *GetResponsePolicyRuleRequest) (*ResponsePolicyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServer) ListResponsePolicyRules(context.Context, *ListResponsePolicyRulesRequest) (*ResponsePolicyRulesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResponsePolicyRules not implemented")
}
func (UnimplementedResponsePolicyRulesServer) PatchResponsePolicyRule(context.Context, *PatchResponsePolicyRuleRequest) (*ResponsePolicyRulesPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServer) UpdateResponsePolicyRule(context.Context, *UpdateResponsePolicyRuleRequest) (*ResponsePolicyRulesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServer) mustEmbedUnimplementedResponsePolicyRulesServer() {}

// UnsafeResponsePolicyRulesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponsePolicyRulesServer will
// result in compilation errors.
type UnsafeResponsePolicyRulesServer interface {
	mustEmbedUnimplementedResponsePolicyRulesServer()
}

func RegisterResponsePolicyRulesServer(s grpc.ServiceRegistrar, srv ResponsePolicyRulesServer) {
	s.RegisterService(&ResponsePolicyRules_ServiceDesc, srv)
}

func _ResponsePolicyRules_CreateResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServer).CreateResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicyRules/CreateResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServer).CreateResponsePolicyRule(ctx, req.(*CreateResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRules_DeleteResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServer).DeleteResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicyRules/DeleteResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServer).DeleteResponsePolicyRule(ctx, req.(*DeleteResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRules_GetResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServer).GetResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicyRules/GetResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServer).GetResponsePolicyRule(ctx, req.(*GetResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRules_ListResponsePolicyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResponsePolicyRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServer).ListResponsePolicyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicyRules/ListResponsePolicyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServer).ListResponsePolicyRules(ctx, req.(*ListResponsePolicyRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRules_PatchResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServer).PatchResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicyRules/PatchResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServer).PatchResponsePolicyRule(ctx, req.(*PatchResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRules_UpdateResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServer).UpdateResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1beta2.ResponsePolicyRules/UpdateResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServer).UpdateResponsePolicyRule(ctx, req.(*UpdateResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResponsePolicyRules_ServiceDesc is the grpc.ServiceDesc for ResponsePolicyRules service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResponsePolicyRules_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1beta2.ResponsePolicyRules",
	HandlerType: (*ResponsePolicyRulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResponsePolicyRule",
			Handler:    _ResponsePolicyRules_CreateResponsePolicyRule_Handler,
		},
		{
			MethodName: "DeleteResponsePolicyRule",
			Handler:    _ResponsePolicyRules_DeleteResponsePolicyRule_Handler,
		},
		{
			MethodName: "GetResponsePolicyRule",
			Handler:    _ResponsePolicyRules_GetResponsePolicyRule_Handler,
		},
		{
			MethodName: "ListResponsePolicyRules",
			Handler:    _ResponsePolicyRules_ListResponsePolicyRules_Handler,
		},
		{
			MethodName: "PatchResponsePolicyRule",
			Handler:    _ResponsePolicyRules_PatchResponsePolicyRule_Handler,
		},
		{
			MethodName: "UpdateResponsePolicyRule",
			Handler:    _ResponsePolicyRules_UpdateResponsePolicyRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/dns/v1beta2/generated.proto",
}
