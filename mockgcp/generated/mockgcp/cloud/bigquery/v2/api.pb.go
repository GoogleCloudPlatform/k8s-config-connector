// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/bigquery/v2/api.proto

package bigquerypb

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AggregateClassificationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy  *float64 `protobuf:"fixed64,1,opt,name=accuracy" json:"accuracy,omitempty"`
	F1Score   *float64 `protobuf:"fixed64,2,opt,name=f1_score,json=f1Score" json:"f1_score,omitempty"`
	LogLoss   *float64 `protobuf:"fixed64,3,opt,name=log_loss,json=logLoss" json:"log_loss,omitempty"`
	Precision *float64 `protobuf:"fixed64,4,opt,name=precision" json:"precision,omitempty"`
	Recall    *float64 `protobuf:"fixed64,5,opt,name=recall" json:"recall,omitempty"`
	RocAuc    *float64 `protobuf:"fixed64,6,opt,name=roc_auc,json=rocAuc" json:"roc_auc,omitempty"`
	Threshold *float64 `protobuf:"fixed64,7,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *AggregateClassificationMetrics) Reset() {
	*x = AggregateClassificationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateClassificationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateClassificationMetrics) ProtoMessage() {}

func (x *AggregateClassificationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateClassificationMetrics.ProtoReflect.Descriptor instead.
func (*AggregateClassificationMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{0}
}

func (x *AggregateClassificationMetrics) GetAccuracy() float64 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *AggregateClassificationMetrics) GetF1Score() float64 {
	if x != nil && x.F1Score != nil {
		return *x.F1Score
	}
	return 0
}

func (x *AggregateClassificationMetrics) GetLogLoss() float64 {
	if x != nil && x.LogLoss != nil {
		return *x.LogLoss
	}
	return 0
}

func (x *AggregateClassificationMetrics) GetPrecision() float64 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *AggregateClassificationMetrics) GetRecall() float64 {
	if x != nil && x.Recall != nil {
		return *x.Recall
	}
	return 0
}

func (x *AggregateClassificationMetrics) GetRocAuc() float64 {
	if x != nil && x.RocAuc != nil {
		return *x.RocAuc
	}
	return 0
}

func (x *AggregateClassificationMetrics) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type AggregationThresholdPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacyUnitColumns []string `protobuf:"bytes,1,rep,name=privacy_unit_columns,json=privacyUnitColumns" json:"privacy_unit_columns,omitempty"`
	Threshold          *int64   `protobuf:"varint,2,opt,name=threshold" json:"threshold,omitempty"`
}

func (x *AggregationThresholdPolicy) Reset() {
	*x = AggregationThresholdPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationThresholdPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationThresholdPolicy) ProtoMessage() {}

func (x *AggregationThresholdPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationThresholdPolicy.ProtoReflect.Descriptor instead.
func (*AggregationThresholdPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{1}
}

func (x *AggregationThresholdPolicy) GetPrivacyUnitColumns() []string {
	if x != nil {
		return x.PrivacyUnitColumns
	}
	return nil
}

func (x *AggregationThresholdPolicy) GetThreshold() int64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgumentKind *string              `protobuf:"bytes,1,opt,name=argument_kind,json=argumentKind" json:"argument_kind,omitempty"`
	DataType     *StandardSqlDataType `protobuf:"bytes,2,opt,name=data_type,json=dataType" json:"data_type,omitempty"`
	IsAggregate  *bool                `protobuf:"varint,3,opt,name=is_aggregate,json=isAggregate" json:"is_aggregate,omitempty"`
	Mode         *string              `protobuf:"bytes,4,opt,name=mode" json:"mode,omitempty"`
	Name         *string              `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{2}
}

func (x *Argument) GetArgumentKind() string {
	if x != nil && x.ArgumentKind != nil {
		return *x.ArgumentKind
	}
	return ""
}

func (x *Argument) GetDataType() *StandardSqlDataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *Argument) GetIsAggregate() bool {
	if x != nil && x.IsAggregate != nil {
		return *x.IsAggregate
	}
	return false
}

func (x *Argument) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

func (x *Argument) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ArimaCoefficients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoRegressiveCoefficients []float64 `protobuf:"fixed64,1,rep,name=auto_regressive_coefficients,json=autoRegressiveCoefficients" json:"auto_regressive_coefficients,omitempty"`
	InterceptCoefficient       *float64  `protobuf:"fixed64,2,opt,name=intercept_coefficient,json=interceptCoefficient" json:"intercept_coefficient,omitempty"`
	MovingAverageCoefficients  []float64 `protobuf:"fixed64,3,rep,name=moving_average_coefficients,json=movingAverageCoefficients" json:"moving_average_coefficients,omitempty"`
}

func (x *ArimaCoefficients) Reset() {
	*x = ArimaCoefficients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaCoefficients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaCoefficients) ProtoMessage() {}

func (x *ArimaCoefficients) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaCoefficients.ProtoReflect.Descriptor instead.
func (*ArimaCoefficients) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{3}
}

func (x *ArimaCoefficients) GetAutoRegressiveCoefficients() []float64 {
	if x != nil {
		return x.AutoRegressiveCoefficients
	}
	return nil
}

func (x *ArimaCoefficients) GetInterceptCoefficient() float64 {
	if x != nil && x.InterceptCoefficient != nil {
		return *x.InterceptCoefficient
	}
	return 0
}

func (x *ArimaCoefficients) GetMovingAverageCoefficients() []float64 {
	if x != nil {
		return x.MovingAverageCoefficients
	}
	return nil
}

type ArimaFittingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aic           *float64 `protobuf:"fixed64,1,opt,name=aic" json:"aic,omitempty"`
	LogLikelihood *float64 `protobuf:"fixed64,2,opt,name=log_likelihood,json=logLikelihood" json:"log_likelihood,omitempty"`
	Variance      *float64 `protobuf:"fixed64,3,opt,name=variance" json:"variance,omitempty"`
}

func (x *ArimaFittingMetrics) Reset() {
	*x = ArimaFittingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaFittingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaFittingMetrics) ProtoMessage() {}

func (x *ArimaFittingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaFittingMetrics.ProtoReflect.Descriptor instead.
func (*ArimaFittingMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{4}
}

func (x *ArimaFittingMetrics) GetAic() float64 {
	if x != nil && x.Aic != nil {
		return *x.Aic
	}
	return 0
}

func (x *ArimaFittingMetrics) GetLogLikelihood() float64 {
	if x != nil && x.LogLikelihood != nil {
		return *x.LogLikelihood
	}
	return 0
}

func (x *ArimaFittingMetrics) GetVariance() float64 {
	if x != nil && x.Variance != nil {
		return *x.Variance
	}
	return 0
}

type ArimaForecastingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArimaFittingMetrics                []*ArimaFittingMetrics                `protobuf:"bytes,1,rep,name=arima_fitting_metrics,json=arimaFittingMetrics" json:"arima_fitting_metrics,omitempty"`
	ArimaSingleModelForecastingMetrics []*ArimaSingleModelForecastingMetrics `protobuf:"bytes,2,rep,name=arima_single_model_forecasting_metrics,json=arimaSingleModelForecastingMetrics" json:"arima_single_model_forecasting_metrics,omitempty"`
	HasDrift                           []bool                                `protobuf:"varint,3,rep,name=has_drift,json=hasDrift" json:"has_drift,omitempty"`
	NonSeasonalOrder                   []*ArimaOrder                         `protobuf:"bytes,4,rep,name=non_seasonal_order,json=nonSeasonalOrder" json:"non_seasonal_order,omitempty"`
	SeasonalPeriods                    []string                              `protobuf:"bytes,5,rep,name=seasonal_periods,json=seasonalPeriods" json:"seasonal_periods,omitempty"`
	TimeSeriesId                       []string                              `protobuf:"bytes,6,rep,name=time_series_id,json=timeSeriesId" json:"time_series_id,omitempty"`
}

func (x *ArimaForecastingMetrics) Reset() {
	*x = ArimaForecastingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaForecastingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaForecastingMetrics) ProtoMessage() {}

func (x *ArimaForecastingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaForecastingMetrics.ProtoReflect.Descriptor instead.
func (*ArimaForecastingMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{5}
}

func (x *ArimaForecastingMetrics) GetArimaFittingMetrics() []*ArimaFittingMetrics {
	if x != nil {
		return x.ArimaFittingMetrics
	}
	return nil
}

func (x *ArimaForecastingMetrics) GetArimaSingleModelForecastingMetrics() []*ArimaSingleModelForecastingMetrics {
	if x != nil {
		return x.ArimaSingleModelForecastingMetrics
	}
	return nil
}

func (x *ArimaForecastingMetrics) GetHasDrift() []bool {
	if x != nil {
		return x.HasDrift
	}
	return nil
}

func (x *ArimaForecastingMetrics) GetNonSeasonalOrder() []*ArimaOrder {
	if x != nil {
		return x.NonSeasonalOrder
	}
	return nil
}

func (x *ArimaForecastingMetrics) GetSeasonalPeriods() []string {
	if x != nil {
		return x.SeasonalPeriods
	}
	return nil
}

func (x *ArimaForecastingMetrics) GetTimeSeriesId() []string {
	if x != nil {
		return x.TimeSeriesId
	}
	return nil
}

type ArimaModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArimaCoefficients   *ArimaCoefficients   `protobuf:"bytes,1,opt,name=arima_coefficients,json=arimaCoefficients" json:"arima_coefficients,omitempty"`
	ArimaFittingMetrics *ArimaFittingMetrics `protobuf:"bytes,2,opt,name=arima_fitting_metrics,json=arimaFittingMetrics" json:"arima_fitting_metrics,omitempty"`
	HasDrift            *bool                `protobuf:"varint,3,opt,name=has_drift,json=hasDrift" json:"has_drift,omitempty"`
	HasHolidayEffect    *bool                `protobuf:"varint,4,opt,name=has_holiday_effect,json=hasHolidayEffect" json:"has_holiday_effect,omitempty"`
	HasSpikesAndDips    *bool                `protobuf:"varint,5,opt,name=has_spikes_and_dips,json=hasSpikesAndDips" json:"has_spikes_and_dips,omitempty"`
	HasStepChanges      *bool                `protobuf:"varint,6,opt,name=has_step_changes,json=hasStepChanges" json:"has_step_changes,omitempty"`
	NonSeasonalOrder    *ArimaOrder          `protobuf:"bytes,7,opt,name=non_seasonal_order,json=nonSeasonalOrder" json:"non_seasonal_order,omitempty"`
	SeasonalPeriods     []string             `protobuf:"bytes,8,rep,name=seasonal_periods,json=seasonalPeriods" json:"seasonal_periods,omitempty"`
	TimeSeriesId        *string              `protobuf:"bytes,9,opt,name=time_series_id,json=timeSeriesId" json:"time_series_id,omitempty"`
	TimeSeriesIds       []string             `protobuf:"bytes,10,rep,name=time_series_ids,json=timeSeriesIds" json:"time_series_ids,omitempty"`
}

func (x *ArimaModelInfo) Reset() {
	*x = ArimaModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaModelInfo) ProtoMessage() {}

func (x *ArimaModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaModelInfo.ProtoReflect.Descriptor instead.
func (*ArimaModelInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{6}
}

func (x *ArimaModelInfo) GetArimaCoefficients() *ArimaCoefficients {
	if x != nil {
		return x.ArimaCoefficients
	}
	return nil
}

func (x *ArimaModelInfo) GetArimaFittingMetrics() *ArimaFittingMetrics {
	if x != nil {
		return x.ArimaFittingMetrics
	}
	return nil
}

func (x *ArimaModelInfo) GetHasDrift() bool {
	if x != nil && x.HasDrift != nil {
		return *x.HasDrift
	}
	return false
}

func (x *ArimaModelInfo) GetHasHolidayEffect() bool {
	if x != nil && x.HasHolidayEffect != nil {
		return *x.HasHolidayEffect
	}
	return false
}

func (x *ArimaModelInfo) GetHasSpikesAndDips() bool {
	if x != nil && x.HasSpikesAndDips != nil {
		return *x.HasSpikesAndDips
	}
	return false
}

func (x *ArimaModelInfo) GetHasStepChanges() bool {
	if x != nil && x.HasStepChanges != nil {
		return *x.HasStepChanges
	}
	return false
}

func (x *ArimaModelInfo) GetNonSeasonalOrder() *ArimaOrder {
	if x != nil {
		return x.NonSeasonalOrder
	}
	return nil
}

func (x *ArimaModelInfo) GetSeasonalPeriods() []string {
	if x != nil {
		return x.SeasonalPeriods
	}
	return nil
}

func (x *ArimaModelInfo) GetTimeSeriesId() string {
	if x != nil && x.TimeSeriesId != nil {
		return *x.TimeSeriesId
	}
	return ""
}

func (x *ArimaModelInfo) GetTimeSeriesIds() []string {
	if x != nil {
		return x.TimeSeriesIds
	}
	return nil
}

type ArimaOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D *int64 `protobuf:"varint,1,opt,name=d" json:"d,omitempty"`
	P *int64 `protobuf:"varint,2,opt,name=p" json:"p,omitempty"`
	Q *int64 `protobuf:"varint,3,opt,name=q" json:"q,omitempty"`
}

func (x *ArimaOrder) Reset() {
	*x = ArimaOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaOrder) ProtoMessage() {}

func (x *ArimaOrder) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaOrder.ProtoReflect.Descriptor instead.
func (*ArimaOrder) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{7}
}

func (x *ArimaOrder) GetD() int64 {
	if x != nil && x.D != nil {
		return *x.D
	}
	return 0
}

func (x *ArimaOrder) GetP() int64 {
	if x != nil && x.P != nil {
		return *x.P
	}
	return 0
}

func (x *ArimaOrder) GetQ() int64 {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return 0
}

type ArimaResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArimaModelInfo  []*ArimaModelInfo `protobuf:"bytes,1,rep,name=arima_model_info,json=arimaModelInfo" json:"arima_model_info,omitempty"`
	SeasonalPeriods []string          `protobuf:"bytes,2,rep,name=seasonal_periods,json=seasonalPeriods" json:"seasonal_periods,omitempty"`
}

func (x *ArimaResult) Reset() {
	*x = ArimaResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaResult) ProtoMessage() {}

func (x *ArimaResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaResult.ProtoReflect.Descriptor instead.
func (*ArimaResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{8}
}

func (x *ArimaResult) GetArimaModelInfo() []*ArimaModelInfo {
	if x != nil {
		return x.ArimaModelInfo
	}
	return nil
}

func (x *ArimaResult) GetSeasonalPeriods() []string {
	if x != nil {
		return x.SeasonalPeriods
	}
	return nil
}

type ArimaSingleModelForecastingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArimaFittingMetrics *ArimaFittingMetrics `protobuf:"bytes,1,opt,name=arima_fitting_metrics,json=arimaFittingMetrics" json:"arima_fitting_metrics,omitempty"`
	HasDrift            *bool                `protobuf:"varint,2,opt,name=has_drift,json=hasDrift" json:"has_drift,omitempty"`
	HasHolidayEffect    *bool                `protobuf:"varint,3,opt,name=has_holiday_effect,json=hasHolidayEffect" json:"has_holiday_effect,omitempty"`
	HasSpikesAndDips    *bool                `protobuf:"varint,4,opt,name=has_spikes_and_dips,json=hasSpikesAndDips" json:"has_spikes_and_dips,omitempty"`
	HasStepChanges      *bool                `protobuf:"varint,5,opt,name=has_step_changes,json=hasStepChanges" json:"has_step_changes,omitempty"`
	NonSeasonalOrder    *ArimaOrder          `protobuf:"bytes,6,opt,name=non_seasonal_order,json=nonSeasonalOrder" json:"non_seasonal_order,omitempty"`
	SeasonalPeriods     []string             `protobuf:"bytes,7,rep,name=seasonal_periods,json=seasonalPeriods" json:"seasonal_periods,omitempty"`
	TimeSeriesId        *string              `protobuf:"bytes,8,opt,name=time_series_id,json=timeSeriesId" json:"time_series_id,omitempty"`
	TimeSeriesIds       []string             `protobuf:"bytes,9,rep,name=time_series_ids,json=timeSeriesIds" json:"time_series_ids,omitempty"`
}

func (x *ArimaSingleModelForecastingMetrics) Reset() {
	*x = ArimaSingleModelForecastingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArimaSingleModelForecastingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArimaSingleModelForecastingMetrics) ProtoMessage() {}

func (x *ArimaSingleModelForecastingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArimaSingleModelForecastingMetrics.ProtoReflect.Descriptor instead.
func (*ArimaSingleModelForecastingMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{9}
}

func (x *ArimaSingleModelForecastingMetrics) GetArimaFittingMetrics() *ArimaFittingMetrics {
	if x != nil {
		return x.ArimaFittingMetrics
	}
	return nil
}

func (x *ArimaSingleModelForecastingMetrics) GetHasDrift() bool {
	if x != nil && x.HasDrift != nil {
		return *x.HasDrift
	}
	return false
}

func (x *ArimaSingleModelForecastingMetrics) GetHasHolidayEffect() bool {
	if x != nil && x.HasHolidayEffect != nil {
		return *x.HasHolidayEffect
	}
	return false
}

func (x *ArimaSingleModelForecastingMetrics) GetHasSpikesAndDips() bool {
	if x != nil && x.HasSpikesAndDips != nil {
		return *x.HasSpikesAndDips
	}
	return false
}

func (x *ArimaSingleModelForecastingMetrics) GetHasStepChanges() bool {
	if x != nil && x.HasStepChanges != nil {
		return *x.HasStepChanges
	}
	return false
}

func (x *ArimaSingleModelForecastingMetrics) GetNonSeasonalOrder() *ArimaOrder {
	if x != nil {
		return x.NonSeasonalOrder
	}
	return nil
}

func (x *ArimaSingleModelForecastingMetrics) GetSeasonalPeriods() []string {
	if x != nil {
		return x.SeasonalPeriods
	}
	return nil
}

func (x *ArimaSingleModelForecastingMetrics) GetTimeSeriesId() string {
	if x != nil && x.TimeSeriesId != nil {
		return *x.TimeSeriesId
	}
	return ""
}

func (x *ArimaSingleModelForecastingMetrics) GetTimeSeriesIds() []string {
	if x != nil {
		return x.TimeSeriesIds
	}
	return nil
}

type AuditConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditLogConfigs []*AuditLogConfig `protobuf:"bytes,1,rep,name=audit_log_configs,json=auditLogConfigs" json:"audit_log_configs,omitempty"`
	Service         *string           `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
}

func (x *AuditConfig) Reset() {
	*x = AuditConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditConfig) ProtoMessage() {}

func (x *AuditConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditConfig.ProtoReflect.Descriptor instead.
func (*AuditConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{10}
}

func (x *AuditConfig) GetAuditLogConfigs() []*AuditLogConfig {
	if x != nil {
		return x.AuditLogConfigs
	}
	return nil
}

func (x *AuditConfig) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

type AuditLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExemptedMembers []string `protobuf:"bytes,1,rep,name=exempted_members,json=exemptedMembers" json:"exempted_members,omitempty"`
	LogType         *string  `protobuf:"bytes,2,opt,name=log_type,json=logType" json:"log_type,omitempty"`
}

func (x *AuditLogConfig) Reset() {
	*x = AuditLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogConfig) ProtoMessage() {}

func (x *AuditLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogConfig.ProtoReflect.Descriptor instead.
func (*AuditLogConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{11}
}

func (x *AuditLogConfig) GetExemptedMembers() []string {
	if x != nil {
		return x.ExemptedMembers
	}
	return nil
}

func (x *AuditLogConfig) GetLogType() string {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return ""
}

type AvroOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseAvroLogicalTypes *bool `protobuf:"varint,1,opt,name=use_avro_logical_types,json=useAvroLogicalTypes" json:"use_avro_logical_types,omitempty"`
}

func (x *AvroOptions) Reset() {
	*x = AvroOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvroOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroOptions) ProtoMessage() {}

func (x *AvroOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroOptions.ProtoReflect.Descriptor instead.
func (*AvroOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{12}
}

func (x *AvroOptions) GetUseAvroLogicalTypes() bool {
	if x != nil && x.UseAvroLogicalTypes != nil {
		return *x.UseAvroLogicalTypes
	}
	return false
}

type BiEngineReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *BiEngineReason) Reset() {
	*x = BiEngineReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiEngineReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiEngineReason) ProtoMessage() {}

func (x *BiEngineReason) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiEngineReason.ProtoReflect.Descriptor instead.
func (*BiEngineReason) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{13}
}

func (x *BiEngineReason) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *BiEngineReason) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type BiEngineStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccelerationMode *string           `protobuf:"bytes,1,opt,name=acceleration_mode,json=accelerationMode" json:"acceleration_mode,omitempty"`
	BiEngineMode     *string           `protobuf:"bytes,2,opt,name=bi_engine_mode,json=biEngineMode" json:"bi_engine_mode,omitempty"`
	BiEngineReasons  []*BiEngineReason `protobuf:"bytes,3,rep,name=bi_engine_reasons,json=biEngineReasons" json:"bi_engine_reasons,omitempty"`
}

func (x *BiEngineStatistics) Reset() {
	*x = BiEngineStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiEngineStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiEngineStatistics) ProtoMessage() {}

func (x *BiEngineStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiEngineStatistics.ProtoReflect.Descriptor instead.
func (*BiEngineStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{14}
}

func (x *BiEngineStatistics) GetAccelerationMode() string {
	if x != nil && x.AccelerationMode != nil {
		return *x.AccelerationMode
	}
	return ""
}

func (x *BiEngineStatistics) GetBiEngineMode() string {
	if x != nil && x.BiEngineMode != nil {
		return *x.BiEngineMode
	}
	return ""
}

func (x *BiEngineStatistics) GetBiEngineReasons() []*BiEngineReason {
	if x != nil {
		return x.BiEngineReasons
	}
	return nil
}

type BigLakeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId *string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FileFormat   *string `protobuf:"bytes,2,opt,name=file_format,json=fileFormat" json:"file_format,omitempty"`
	StorageUri   *string `protobuf:"bytes,3,opt,name=storage_uri,json=storageUri" json:"storage_uri,omitempty"`
	TableFormat  *string `protobuf:"bytes,4,opt,name=table_format,json=tableFormat" json:"table_format,omitempty"`
}

func (x *BigLakeConfiguration) Reset() {
	*x = BigLakeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigLakeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigLakeConfiguration) ProtoMessage() {}

func (x *BigLakeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigLakeConfiguration.ProtoReflect.Descriptor instead.
func (*BigLakeConfiguration) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{15}
}

func (x *BigLakeConfiguration) GetConnectionId() string {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return ""
}

func (x *BigLakeConfiguration) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *BigLakeConfiguration) GetStorageUri() string {
	if x != nil && x.StorageUri != nil {
		return *x.StorageUri
	}
	return ""
}

func (x *BigLakeConfiguration) GetTableFormat() string {
	if x != nil && x.TableFormat != nil {
		return *x.TableFormat
	}
	return ""
}

type BigQueryModelTraining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIteration        *int32 `protobuf:"varint,1,opt,name=current_iteration,json=currentIteration" json:"current_iteration,omitempty"`
	ExpectedTotalIterations *int64 `protobuf:"varint,2,opt,name=expected_total_iterations,json=expectedTotalIterations" json:"expected_total_iterations,omitempty"`
}

func (x *BigQueryModelTraining) Reset() {
	*x = BigQueryModelTraining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQueryModelTraining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryModelTraining) ProtoMessage() {}

func (x *BigQueryModelTraining) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryModelTraining.ProtoReflect.Descriptor instead.
func (*BigQueryModelTraining) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{16}
}

func (x *BigQueryModelTraining) GetCurrentIteration() int32 {
	if x != nil && x.CurrentIteration != nil {
		return *x.CurrentIteration
	}
	return 0
}

func (x *BigQueryModelTraining) GetExpectedTotalIterations() int64 {
	if x != nil && x.ExpectedTotalIterations != nil {
		return *x.ExpectedTotalIterations
	}
	return 0
}

type BigtableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoding         *string `protobuf:"bytes,1,opt,name=encoding" json:"encoding,omitempty"`
	FieldName        *string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	OnlyReadLatest   *bool   `protobuf:"varint,3,opt,name=only_read_latest,json=onlyReadLatest" json:"only_read_latest,omitempty"`
	QualifierEncoded []byte  `protobuf:"bytes,4,opt,name=qualifier_encoded,json=qualifierEncoded" json:"qualifier_encoded,omitempty"`
	QualifierString  *string `protobuf:"bytes,5,opt,name=qualifier_string,json=qualifierString" json:"qualifier_string,omitempty"`
	Type             *string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

func (x *BigtableColumn) Reset() {
	*x = BigtableColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigtableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigtableColumn) ProtoMessage() {}

func (x *BigtableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigtableColumn.ProtoReflect.Descriptor instead.
func (*BigtableColumn) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{17}
}

func (x *BigtableColumn) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *BigtableColumn) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *BigtableColumn) GetOnlyReadLatest() bool {
	if x != nil && x.OnlyReadLatest != nil {
		return *x.OnlyReadLatest
	}
	return false
}

func (x *BigtableColumn) GetQualifierEncoded() []byte {
	if x != nil {
		return x.QualifierEncoded
	}
	return nil
}

func (x *BigtableColumn) GetQualifierString() string {
	if x != nil && x.QualifierString != nil {
		return *x.QualifierString
	}
	return ""
}

func (x *BigtableColumn) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type BigtableColumnFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns        []*BigtableColumn `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Encoding       *string           `protobuf:"bytes,2,opt,name=encoding" json:"encoding,omitempty"`
	FamilyId       *string           `protobuf:"bytes,3,opt,name=family_id,json=familyId" json:"family_id,omitempty"`
	OnlyReadLatest *bool             `protobuf:"varint,4,opt,name=only_read_latest,json=onlyReadLatest" json:"only_read_latest,omitempty"`
	Type           *string           `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
}

func (x *BigtableColumnFamily) Reset() {
	*x = BigtableColumnFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigtableColumnFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigtableColumnFamily) ProtoMessage() {}

func (x *BigtableColumnFamily) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigtableColumnFamily.ProtoReflect.Descriptor instead.
func (*BigtableColumnFamily) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{18}
}

func (x *BigtableColumnFamily) GetColumns() []*BigtableColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *BigtableColumnFamily) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *BigtableColumnFamily) GetFamilyId() string {
	if x != nil && x.FamilyId != nil {
		return *x.FamilyId
	}
	return ""
}

func (x *BigtableColumnFamily) GetOnlyReadLatest() bool {
	if x != nil && x.OnlyReadLatest != nil {
		return *x.OnlyReadLatest
	}
	return false
}

func (x *BigtableColumnFamily) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type BigtableOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnFamilies                  []*BigtableColumnFamily `protobuf:"bytes,1,rep,name=column_families,json=columnFamilies" json:"column_families,omitempty"`
	IgnoreUnspecifiedColumnFamilies *bool                   `protobuf:"varint,2,opt,name=ignore_unspecified_column_families,json=ignoreUnspecifiedColumnFamilies" json:"ignore_unspecified_column_families,omitempty"`
	OutputColumnFamiliesAsJson      *bool                   `protobuf:"varint,3,opt,name=output_column_families_as_json,json=outputColumnFamiliesAsJson" json:"output_column_families_as_json,omitempty"`
	ReadRowkeyAsString              *bool                   `protobuf:"varint,4,opt,name=read_rowkey_as_string,json=readRowkeyAsString" json:"read_rowkey_as_string,omitempty"`
}

func (x *BigtableOptions) Reset() {
	*x = BigtableOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigtableOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigtableOptions) ProtoMessage() {}

func (x *BigtableOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigtableOptions.ProtoReflect.Descriptor instead.
func (*BigtableOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{19}
}

func (x *BigtableOptions) GetColumnFamilies() []*BigtableColumnFamily {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *BigtableOptions) GetIgnoreUnspecifiedColumnFamilies() bool {
	if x != nil && x.IgnoreUnspecifiedColumnFamilies != nil {
		return *x.IgnoreUnspecifiedColumnFamilies
	}
	return false
}

func (x *BigtableOptions) GetOutputColumnFamiliesAsJson() bool {
	if x != nil && x.OutputColumnFamiliesAsJson != nil {
		return *x.OutputColumnFamiliesAsJson
	}
	return false
}

func (x *BigtableOptions) GetReadRowkeyAsString() bool {
	if x != nil && x.ReadRowkeyAsString != nil {
		return *x.ReadRowkeyAsString
	}
	return false
}

type BinaryClassificationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateClassificationMetrics *AggregateClassificationMetrics `protobuf:"bytes,1,opt,name=aggregate_classification_metrics,json=aggregateClassificationMetrics" json:"aggregate_classification_metrics,omitempty"`
	BinaryConfusionMatrixList      []*BinaryConfusionMatrix        `protobuf:"bytes,2,rep,name=binary_confusion_matrix_list,json=binaryConfusionMatrixList" json:"binary_confusion_matrix_list,omitempty"`
	NegativeLabel                  *string                         `protobuf:"bytes,3,opt,name=negative_label,json=negativeLabel" json:"negative_label,omitempty"`
	PositiveLabel                  *string                         `protobuf:"bytes,4,opt,name=positive_label,json=positiveLabel" json:"positive_label,omitempty"`
}

func (x *BinaryClassificationMetrics) Reset() {
	*x = BinaryClassificationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryClassificationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryClassificationMetrics) ProtoMessage() {}

func (x *BinaryClassificationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryClassificationMetrics.ProtoReflect.Descriptor instead.
func (*BinaryClassificationMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{20}
}

func (x *BinaryClassificationMetrics) GetAggregateClassificationMetrics() *AggregateClassificationMetrics {
	if x != nil {
		return x.AggregateClassificationMetrics
	}
	return nil
}

func (x *BinaryClassificationMetrics) GetBinaryConfusionMatrixList() []*BinaryConfusionMatrix {
	if x != nil {
		return x.BinaryConfusionMatrixList
	}
	return nil
}

func (x *BinaryClassificationMetrics) GetNegativeLabel() string {
	if x != nil && x.NegativeLabel != nil {
		return *x.NegativeLabel
	}
	return ""
}

func (x *BinaryClassificationMetrics) GetPositiveLabel() string {
	if x != nil && x.PositiveLabel != nil {
		return *x.PositiveLabel
	}
	return ""
}

type BinaryConfusionMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy               *float64 `protobuf:"fixed64,1,opt,name=accuracy" json:"accuracy,omitempty"`
	F1Score                *float64 `protobuf:"fixed64,2,opt,name=f1_score,json=f1Score" json:"f1_score,omitempty"`
	FalseNegatives         *int64   `protobuf:"varint,3,opt,name=false_negatives,json=falseNegatives" json:"false_negatives,omitempty"`
	FalsePositives         *int64   `protobuf:"varint,4,opt,name=false_positives,json=falsePositives" json:"false_positives,omitempty"`
	PositiveClassThreshold *float64 `protobuf:"fixed64,5,opt,name=positive_class_threshold,json=positiveClassThreshold" json:"positive_class_threshold,omitempty"`
	Precision              *float64 `protobuf:"fixed64,6,opt,name=precision" json:"precision,omitempty"`
	Recall                 *float64 `protobuf:"fixed64,7,opt,name=recall" json:"recall,omitempty"`
	TrueNegatives          *int64   `protobuf:"varint,8,opt,name=true_negatives,json=trueNegatives" json:"true_negatives,omitempty"`
	TruePositives          *int64   `protobuf:"varint,9,opt,name=true_positives,json=truePositives" json:"true_positives,omitempty"`
}

func (x *BinaryConfusionMatrix) Reset() {
	*x = BinaryConfusionMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryConfusionMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryConfusionMatrix) ProtoMessage() {}

func (x *BinaryConfusionMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryConfusionMatrix.ProtoReflect.Descriptor instead.
func (*BinaryConfusionMatrix) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{21}
}

func (x *BinaryConfusionMatrix) GetAccuracy() float64 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetF1Score() float64 {
	if x != nil && x.F1Score != nil {
		return *x.F1Score
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetFalseNegatives() int64 {
	if x != nil && x.FalseNegatives != nil {
		return *x.FalseNegatives
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetFalsePositives() int64 {
	if x != nil && x.FalsePositives != nil {
		return *x.FalsePositives
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetPositiveClassThreshold() float64 {
	if x != nil && x.PositiveClassThreshold != nil {
		return *x.PositiveClassThreshold
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetPrecision() float64 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetRecall() float64 {
	if x != nil && x.Recall != nil {
		return *x.Recall
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetTrueNegatives() int64 {
	if x != nil && x.TrueNegatives != nil {
		return *x.TrueNegatives
	}
	return 0
}

func (x *BinaryConfusionMatrix) GetTruePositives() int64 {
	if x != nil && x.TruePositives != nil {
		return *x.TruePositives
	}
	return 0
}

type Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Expr    `protobuf:"bytes,1,opt,name=condition" json:"condition,omitempty"`
	Members   []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	Role      *string  `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
}

func (x *Binding) Reset() {
	*x = Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{22}
}

func (x *Binding) GetCondition() *Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Binding) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Binding) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

type BqmlIterationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationMs   *int64   `protobuf:"varint,1,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	EvalLoss     *float64 `protobuf:"fixed64,2,opt,name=eval_loss,json=evalLoss" json:"eval_loss,omitempty"`
	Index        *int32   `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	LearnRate    *float64 `protobuf:"fixed64,4,opt,name=learn_rate,json=learnRate" json:"learn_rate,omitempty"`
	TrainingLoss *float64 `protobuf:"fixed64,5,opt,name=training_loss,json=trainingLoss" json:"training_loss,omitempty"`
}

func (x *BqmlIterationResult) Reset() {
	*x = BqmlIterationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BqmlIterationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BqmlIterationResult) ProtoMessage() {}

func (x *BqmlIterationResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BqmlIterationResult.ProtoReflect.Descriptor instead.
func (*BqmlIterationResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{23}
}

func (x *BqmlIterationResult) GetDurationMs() int64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *BqmlIterationResult) GetEvalLoss() float64 {
	if x != nil && x.EvalLoss != nil {
		return *x.EvalLoss
	}
	return 0
}

func (x *BqmlIterationResult) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *BqmlIterationResult) GetLearnRate() float64 {
	if x != nil && x.LearnRate != nil {
		return *x.LearnRate
	}
	return 0
}

func (x *BqmlIterationResult) GetTrainingLoss() float64 {
	if x != nil && x.TrainingLoss != nil {
		return *x.TrainingLoss
	}
	return 0
}

type BqmlTrainingRunTrainingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarlyStop               *bool    `protobuf:"varint,1,opt,name=early_stop,json=earlyStop" json:"early_stop,omitempty"`
	L1Reg                   *float64 `protobuf:"fixed64,2,opt,name=l1_reg,json=l1Reg" json:"l1_reg,omitempty"`
	L2Reg                   *float64 `protobuf:"fixed64,3,opt,name=l2_reg,json=l2Reg" json:"l2_reg,omitempty"`
	LearnRate               *float64 `protobuf:"fixed64,4,opt,name=learn_rate,json=learnRate" json:"learn_rate,omitempty"`
	LearnRateStrategy       *string  `protobuf:"bytes,5,opt,name=learn_rate_strategy,json=learnRateStrategy" json:"learn_rate_strategy,omitempty"`
	LineSearchInitLearnRate *float64 `protobuf:"fixed64,6,opt,name=line_search_init_learn_rate,json=lineSearchInitLearnRate" json:"line_search_init_learn_rate,omitempty"`
	MaxIteration            *int64   `protobuf:"varint,7,opt,name=max_iteration,json=maxIteration" json:"max_iteration,omitempty"`
	MinRelProgress          *float64 `protobuf:"fixed64,8,opt,name=min_rel_progress,json=minRelProgress" json:"min_rel_progress,omitempty"`
	WarmStart               *bool    `protobuf:"varint,9,opt,name=warm_start,json=warmStart" json:"warm_start,omitempty"`
}

func (x *BqmlTrainingRunTrainingOptions) Reset() {
	*x = BqmlTrainingRunTrainingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BqmlTrainingRunTrainingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BqmlTrainingRunTrainingOptions) ProtoMessage() {}

func (x *BqmlTrainingRunTrainingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BqmlTrainingRunTrainingOptions.ProtoReflect.Descriptor instead.
func (*BqmlTrainingRunTrainingOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{24}
}

func (x *BqmlTrainingRunTrainingOptions) GetEarlyStop() bool {
	if x != nil && x.EarlyStop != nil {
		return *x.EarlyStop
	}
	return false
}

func (x *BqmlTrainingRunTrainingOptions) GetL1Reg() float64 {
	if x != nil && x.L1Reg != nil {
		return *x.L1Reg
	}
	return 0
}

func (x *BqmlTrainingRunTrainingOptions) GetL2Reg() float64 {
	if x != nil && x.L2Reg != nil {
		return *x.L2Reg
	}
	return 0
}

func (x *BqmlTrainingRunTrainingOptions) GetLearnRate() float64 {
	if x != nil && x.LearnRate != nil {
		return *x.LearnRate
	}
	return 0
}

func (x *BqmlTrainingRunTrainingOptions) GetLearnRateStrategy() string {
	if x != nil && x.LearnRateStrategy != nil {
		return *x.LearnRateStrategy
	}
	return ""
}

func (x *BqmlTrainingRunTrainingOptions) GetLineSearchInitLearnRate() float64 {
	if x != nil && x.LineSearchInitLearnRate != nil {
		return *x.LineSearchInitLearnRate
	}
	return 0
}

func (x *BqmlTrainingRunTrainingOptions) GetMaxIteration() int64 {
	if x != nil && x.MaxIteration != nil {
		return *x.MaxIteration
	}
	return 0
}

func (x *BqmlTrainingRunTrainingOptions) GetMinRelProgress() float64 {
	if x != nil && x.MinRelProgress != nil {
		return *x.MinRelProgress
	}
	return 0
}

func (x *BqmlTrainingRunTrainingOptions) GetWarmStart() bool {
	if x != nil && x.WarmStart != nil {
		return *x.WarmStart
	}
	return false
}

type BqmlTrainingRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationResults []*BqmlIterationResult          `protobuf:"bytes,1,rep,name=iteration_results,json=iterationResults" json:"iteration_results,omitempty"`
	StartTime        *timestamp.Timestamp            `protobuf:"bytes,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	State            *string                         `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	TrainingOptions  *BqmlTrainingRunTrainingOptions `protobuf:"bytes,4,opt,name=training_options,json=trainingOptions" json:"training_options,omitempty"`
}

func (x *BqmlTrainingRun) Reset() {
	*x = BqmlTrainingRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BqmlTrainingRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BqmlTrainingRun) ProtoMessage() {}

func (x *BqmlTrainingRun) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BqmlTrainingRun.ProtoReflect.Descriptor instead.
func (*BqmlTrainingRun) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{25}
}

func (x *BqmlTrainingRun) GetIterationResults() []*BqmlIterationResult {
	if x != nil {
		return x.IterationResults
	}
	return nil
}

func (x *BqmlTrainingRun) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BqmlTrainingRun) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *BqmlTrainingRun) GetTrainingOptions() *BqmlTrainingRunTrainingOptions {
	if x != nil {
		return x.TrainingOptions
	}
	return nil
}

type CategoricalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryCounts []*CategoryCount `protobuf:"bytes,1,rep,name=category_counts,json=categoryCounts" json:"category_counts,omitempty"`
}

func (x *CategoricalValue) Reset() {
	*x = CategoricalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoricalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoricalValue) ProtoMessage() {}

func (x *CategoricalValue) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoricalValue.ProtoReflect.Descriptor instead.
func (*CategoricalValue) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{26}
}

func (x *CategoricalValue) GetCategoryCounts() []*CategoryCount {
	if x != nil {
		return x.CategoryCounts
	}
	return nil
}

type CategoryCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *string `protobuf:"bytes,1,opt,name=category" json:"category,omitempty"`
	Count    *int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *CategoryCount) Reset() {
	*x = CategoryCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryCount) ProtoMessage() {}

func (x *CategoryCount) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryCount.ProtoReflect.Descriptor instead.
func (*CategoryCount) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{27}
}

func (x *CategoryCount) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *CategoryCount) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CloneDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseTableReference *TableReference      `protobuf:"bytes,1,opt,name=base_table_reference,json=baseTableReference" json:"base_table_reference,omitempty"`
	CloneTime          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=clone_time,json=cloneTime" json:"clone_time,omitempty"`
}

func (x *CloneDefinition) Reset() {
	*x = CloneDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneDefinition) ProtoMessage() {}

func (x *CloneDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneDefinition.ProtoReflect.Descriptor instead.
func (*CloneDefinition) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{28}
}

func (x *CloneDefinition) GetBaseTableReference() *TableReference {
	if x != nil {
		return x.BaseTableReference
	}
	return nil
}

func (x *CloneDefinition) GetCloneTime() *timestamp.Timestamp {
	if x != nil {
		return x.CloneTime
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CentroidId    *int64          `protobuf:"varint,1,opt,name=centroid_id,json=centroidId" json:"centroid_id,omitempty"`
	Count         *int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	FeatureValues []*FeatureValue `protobuf:"bytes,3,rep,name=feature_values,json=featureValues" json:"feature_values,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{29}
}

func (x *Cluster) GetCentroidId() int64 {
	if x != nil && x.CentroidId != nil {
		return *x.CentroidId
	}
	return 0
}

func (x *Cluster) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Cluster) GetFeatureValues() []*FeatureValue {
	if x != nil {
		return x.FeatureValues
	}
	return nil
}

type ClusterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CentroidId    *int64   `protobuf:"varint,1,opt,name=centroid_id,json=centroidId" json:"centroid_id,omitempty"`
	ClusterRadius *float64 `protobuf:"fixed64,2,opt,name=cluster_radius,json=clusterRadius" json:"cluster_radius,omitempty"`
	ClusterSize   *int64   `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
}

func (x *ClusterInfo) Reset() {
	*x = ClusterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterInfo) ProtoMessage() {}

func (x *ClusterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterInfo.ProtoReflect.Descriptor instead.
func (*ClusterInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{30}
}

func (x *ClusterInfo) GetCentroidId() int64 {
	if x != nil && x.CentroidId != nil {
		return *x.CentroidId
	}
	return 0
}

func (x *ClusterInfo) GetClusterRadius() float64 {
	if x != nil && x.ClusterRadius != nil {
		return *x.ClusterRadius
	}
	return 0
}

func (x *ClusterInfo) GetClusterSize() int64 {
	if x != nil && x.ClusterSize != nil {
		return *x.ClusterSize
	}
	return 0
}

type Clustering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (x *Clustering) Reset() {
	*x = Clustering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clustering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clustering) ProtoMessage() {}

func (x *Clustering) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clustering.ProtoReflect.Descriptor instead.
func (*Clustering) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{31}
}

func (x *Clustering) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ClusteringMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters            []*Cluster `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
	DaviesBouldinIndex  *float64   `protobuf:"fixed64,2,opt,name=davies_bouldin_index,json=daviesBouldinIndex" json:"davies_bouldin_index,omitempty"`
	MeanSquaredDistance *float64   `protobuf:"fixed64,3,opt,name=mean_squared_distance,json=meanSquaredDistance" json:"mean_squared_distance,omitempty"`
}

func (x *ClusteringMetrics) Reset() {
	*x = ClusteringMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusteringMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteringMetrics) ProtoMessage() {}

func (x *ClusteringMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteringMetrics.ProtoReflect.Descriptor instead.
func (*ClusteringMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{32}
}

func (x *ClusteringMetrics) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ClusteringMetrics) GetDaviesBouldinIndex() float64 {
	if x != nil && x.DaviesBouldinIndex != nil {
		return *x.DaviesBouldinIndex
	}
	return 0
}

func (x *ClusteringMetrics) GetMeanSquaredDistance() float64 {
	if x != nil && x.MeanSquaredDistance != nil {
		return *x.MeanSquaredDistance
	}
	return 0
}

type ConfusionMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfidenceThreshold *float64 `protobuf:"fixed64,1,opt,name=confidence_threshold,json=confidenceThreshold" json:"confidence_threshold,omitempty"`
	Rows                []*Row   `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (x *ConfusionMatrix) Reset() {
	*x = ConfusionMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfusionMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfusionMatrix) ProtoMessage() {}

func (x *ConfusionMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfusionMatrix.ProtoReflect.Descriptor instead.
func (*ConfusionMatrix) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{33}
}

func (x *ConfusionMatrix) GetConfidenceThreshold() float64 {
	if x != nil && x.ConfidenceThreshold != nil {
		return *x.ConfidenceThreshold
	}
	return 0
}

func (x *ConfusionMatrix) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ConnectionProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ConnectionProperty) Reset() {
	*x = ConnectionProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionProperty) ProtoMessage() {}

func (x *ConnectionProperty) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionProperty.ProtoReflect.Descriptor instead.
func (*ConnectionProperty) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{34}
}

func (x *ConnectionProperty) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ConnectionProperty) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CsvOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowJaggedRows                *bool   `protobuf:"varint,1,opt,name=allow_jagged_rows,json=allowJaggedRows" json:"allow_jagged_rows,omitempty"`
	AllowQuotedNewlines            *bool   `protobuf:"varint,2,opt,name=allow_quoted_newlines,json=allowQuotedNewlines" json:"allow_quoted_newlines,omitempty"`
	Encoding                       *string `protobuf:"bytes,3,opt,name=encoding" json:"encoding,omitempty"`
	FieldDelimiter                 *string `protobuf:"bytes,4,opt,name=field_delimiter,json=fieldDelimiter" json:"field_delimiter,omitempty"`
	NullMarker                     *string `protobuf:"bytes,5,opt,name=null_marker,json=nullMarker" json:"null_marker,omitempty"`
	PreserveAsciiControlCharacters *bool   `protobuf:"varint,6,opt,name=preserve_ascii_control_characters,json=preserveAsciiControlCharacters" json:"preserve_ascii_control_characters,omitempty"`
	Quote                          *string `protobuf:"bytes,7,opt,name=quote" json:"quote,omitempty"`
	SkipLeadingRows                *int64  `protobuf:"varint,8,opt,name=skip_leading_rows,json=skipLeadingRows" json:"skip_leading_rows,omitempty"`
}

func (x *CsvOptions) Reset() {
	*x = CsvOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvOptions) ProtoMessage() {}

func (x *CsvOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvOptions.ProtoReflect.Descriptor instead.
func (*CsvOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{35}
}

func (x *CsvOptions) GetAllowJaggedRows() bool {
	if x != nil && x.AllowJaggedRows != nil {
		return *x.AllowJaggedRows
	}
	return false
}

func (x *CsvOptions) GetAllowQuotedNewlines() bool {
	if x != nil && x.AllowQuotedNewlines != nil {
		return *x.AllowQuotedNewlines
	}
	return false
}

func (x *CsvOptions) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *CsvOptions) GetFieldDelimiter() string {
	if x != nil && x.FieldDelimiter != nil {
		return *x.FieldDelimiter
	}
	return ""
}

func (x *CsvOptions) GetNullMarker() string {
	if x != nil && x.NullMarker != nil {
		return *x.NullMarker
	}
	return ""
}

func (x *CsvOptions) GetPreserveAsciiControlCharacters() bool {
	if x != nil && x.PreserveAsciiControlCharacters != nil {
		return *x.PreserveAsciiControlCharacters
	}
	return false
}

func (x *CsvOptions) GetQuote() string {
	if x != nil && x.Quote != nil {
		return *x.Quote
	}
	return ""
}

func (x *CsvOptions) GetSkipLeadingRows() int64 {
	if x != nil && x.SkipLeadingRows != nil {
		return *x.SkipLeadingRows
	}
	return 0
}

type DataFormatOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UseInt64Timestamp *bool `protobuf:"varint,1,opt,name=use_int64_timestamp,json=useInt64Timestamp" json:"use_int64_timestamp,omitempty"`
}

func (x *DataFormatOptions) Reset() {
	*x = DataFormatOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFormatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFormatOptions) ProtoMessage() {}

func (x *DataFormatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFormatOptions.ProtoReflect.Descriptor instead.
func (*DataFormatOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{36}
}

func (x *DataFormatOptions) GetUseInt64Timestamp() bool {
	if x != nil && x.UseInt64Timestamp != nil {
		return *x.UseInt64Timestamp
	}
	return false
}

type DataMaskingStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataMaskingApplied *bool `protobuf:"varint,1,opt,name=data_masking_applied,json=dataMaskingApplied" json:"data_masking_applied,omitempty"`
}

func (x *DataMaskingStatistics) Reset() {
	*x = DataMaskingStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMaskingStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMaskingStatistics) ProtoMessage() {}

func (x *DataMaskingStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMaskingStatistics.ProtoReflect.Descriptor instead.
func (*DataMaskingStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{37}
}

func (x *DataMaskingStatistics) GetDataMaskingApplied() bool {
	if x != nil && x.DataMaskingApplied != nil {
		return *x.DataMaskingApplied
	}
	return false
}

type DataSplitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluationTable *TableReference `protobuf:"bytes,1,opt,name=evaluation_table,json=evaluationTable" json:"evaluation_table,omitempty"`
	TestTable       *TableReference `protobuf:"bytes,2,opt,name=test_table,json=testTable" json:"test_table,omitempty"`
	TrainingTable   *TableReference `protobuf:"bytes,3,opt,name=training_table,json=trainingTable" json:"training_table,omitempty"`
}

func (x *DataSplitResult) Reset() {
	*x = DataSplitResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSplitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSplitResult) ProtoMessage() {}

func (x *DataSplitResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSplitResult.ProtoReflect.Descriptor instead.
func (*DataSplitResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{38}
}

func (x *DataSplitResult) GetEvaluationTable() *TableReference {
	if x != nil {
		return x.EvaluationTable
	}
	return nil
}

func (x *DataSplitResult) GetTestTable() *TableReference {
	if x != nil {
		return x.TestTable
	}
	return nil
}

func (x *DataSplitResult) GetTrainingTable() *TableReference {
	if x != nil {
		return x.TrainingTable
	}
	return nil
}

type DatasetAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset      *DatasetAccessEntry `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
	Domain       *string             `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	GroupByEmail *string             `protobuf:"bytes,3,opt,name=group_by_email,json=groupByEmail" json:"group_by_email,omitempty"`
	IamMember    *string             `protobuf:"bytes,4,opt,name=iam_member,json=iamMember" json:"iam_member,omitempty"`
	Role         *string             `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	Routine      *RoutineReference   `protobuf:"bytes,6,opt,name=routine" json:"routine,omitempty"`
	SpecialGroup *string             `protobuf:"bytes,7,opt,name=special_group,json=specialGroup" json:"special_group,omitempty"`
	UserByEmail  *string             `protobuf:"bytes,8,opt,name=user_by_email,json=userByEmail" json:"user_by_email,omitempty"`
	View         *TableReference     `protobuf:"bytes,9,opt,name=view" json:"view,omitempty"`
}

func (x *DatasetAccess) Reset() {
	*x = DatasetAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetAccess) ProtoMessage() {}

func (x *DatasetAccess) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetAccess.ProtoReflect.Descriptor instead.
func (*DatasetAccess) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{39}
}

func (x *DatasetAccess) GetDataset() *DatasetAccessEntry {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *DatasetAccess) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *DatasetAccess) GetGroupByEmail() string {
	if x != nil && x.GroupByEmail != nil {
		return *x.GroupByEmail
	}
	return ""
}

func (x *DatasetAccess) GetIamMember() string {
	if x != nil && x.IamMember != nil {
		return *x.IamMember
	}
	return ""
}

func (x *DatasetAccess) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *DatasetAccess) GetRoutine() *RoutineReference {
	if x != nil {
		return x.Routine
	}
	return nil
}

func (x *DatasetAccess) GetSpecialGroup() string {
	if x != nil && x.SpecialGroup != nil {
		return *x.SpecialGroup
	}
	return ""
}

func (x *DatasetAccess) GetUserByEmail() string {
	if x != nil && x.UserByEmail != nil {
		return *x.UserByEmail
	}
	return ""
}

func (x *DatasetAccess) GetView() *TableReference {
	if x != nil {
		return x.View
	}
	return nil
}

type DatasetTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagKey   *string `protobuf:"bytes,1,opt,name=tag_key,json=tagKey" json:"tag_key,omitempty"`
	TagValue *string `protobuf:"bytes,2,opt,name=tag_value,json=tagValue" json:"tag_value,omitempty"`
}

func (x *DatasetTags) Reset() {
	*x = DatasetTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetTags) ProtoMessage() {}

func (x *DatasetTags) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetTags.ProtoReflect.Descriptor instead.
func (*DatasetTags) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{40}
}

func (x *DatasetTags) GetTagKey() string {
	if x != nil && x.TagKey != nil {
		return *x.TagKey
	}
	return ""
}

func (x *DatasetTags) GetTagValue() string {
	if x != nil && x.TagValue != nil {
		return *x.TagValue
	}
	return ""
}

type Dataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access                         []*DatasetAccess               `protobuf:"bytes,1,rep,name=access" json:"access,omitempty"`
	CreationTime                   *int64                         `protobuf:"varint,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	DatasetReference               *DatasetReference              `protobuf:"bytes,3,opt,name=dataset_reference,json=datasetReference" json:"dataset_reference,omitempty"`
	DefaultCollation               *string                        `protobuf:"bytes,4,opt,name=default_collation,json=defaultCollation" json:"default_collation,omitempty"`
	DefaultEncryptionConfiguration *EncryptionConfiguration       `protobuf:"bytes,5,opt,name=default_encryption_configuration,json=defaultEncryptionConfiguration" json:"default_encryption_configuration,omitempty"`
	DefaultPartitionExpirationMs   *int64                         `protobuf:"varint,6,opt,name=default_partition_expiration_ms,json=defaultPartitionExpirationMs" json:"default_partition_expiration_ms,omitempty"`
	DefaultRoundingMode            *string                        `protobuf:"bytes,7,opt,name=default_rounding_mode,json=defaultRoundingMode" json:"default_rounding_mode,omitempty"`
	DefaultTableExpirationMs       *int64                         `protobuf:"varint,8,opt,name=default_table_expiration_ms,json=defaultTableExpirationMs" json:"default_table_expiration_ms,omitempty"`
	Description                    *string                        `protobuf:"bytes,9,opt,name=description" json:"description,omitempty"`
	Etag                           *string                        `protobuf:"bytes,10,opt,name=etag" json:"etag,omitempty"`
	ExternalCatalogDatasetOptions  *ExternalCatalogDatasetOptions `protobuf:"bytes,11,opt,name=external_catalog_dataset_options,json=externalCatalogDatasetOptions" json:"external_catalog_dataset_options,omitempty"`
	ExternalDatasetReference       *ExternalDatasetReference      `protobuf:"bytes,12,opt,name=external_dataset_reference,json=externalDatasetReference" json:"external_dataset_reference,omitempty"`
	FriendlyName                   *string                        `protobuf:"bytes,13,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Id                             *string                        `protobuf:"bytes,14,opt,name=id" json:"id,omitempty"`
	IsCaseInsensitive              *bool                          `protobuf:"varint,15,opt,name=is_case_insensitive,json=isCaseInsensitive" json:"is_case_insensitive,omitempty"`
	Kind                           *string                        `protobuf:"bytes,16,opt,name=kind" json:"kind,omitempty"`
	Labels                         map[string]string              `protobuf:"bytes,17,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastModifiedTime               *int64                         `protobuf:"varint,18,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	LinkedDatasetMetadata          *LinkedDatasetMetadata         `protobuf:"bytes,19,opt,name=linked_dataset_metadata,json=linkedDatasetMetadata" json:"linked_dataset_metadata,omitempty"`
	LinkedDatasetSource            *LinkedDatasetSource           `protobuf:"bytes,20,opt,name=linked_dataset_source,json=linkedDatasetSource" json:"linked_dataset_source,omitempty"`
	Location                       *string                        `protobuf:"bytes,21,opt,name=location" json:"location,omitempty"`
	MaxTimeTravelHours             *int64                         `protobuf:"varint,22,opt,name=max_time_travel_hours,json=maxTimeTravelHours" json:"max_time_travel_hours,omitempty"`
	SatisfiesPzi                   *bool                          `protobuf:"varint,23,opt,name=satisfies_pzi,json=satisfiesPzi" json:"satisfies_pzi,omitempty"`
	SatisfiesPzs                   *bool                          `protobuf:"varint,24,opt,name=satisfies_pzs,json=satisfiesPzs" json:"satisfies_pzs,omitempty"`
	SelfLink                       *string                        `protobuf:"bytes,25,opt,name=self_link,json=selfLink" json:"self_link,omitempty"`
	StorageBillingModel            *string                        `protobuf:"bytes,26,opt,name=storage_billing_model,json=storageBillingModel" json:"storage_billing_model,omitempty"`
	Tags                           []*DatasetTags                 `protobuf:"bytes,27,rep,name=tags" json:"tags,omitempty"`
	Type                           *string                        `protobuf:"bytes,28,opt,name=type" json:"type,omitempty"`
}

func (x *Dataset) Reset() {
	*x = Dataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataset) ProtoMessage() {}

func (x *Dataset) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataset.ProtoReflect.Descriptor instead.
func (*Dataset) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{41}
}

func (x *Dataset) GetAccess() []*DatasetAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *Dataset) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Dataset) GetDatasetReference() *DatasetReference {
	if x != nil {
		return x.DatasetReference
	}
	return nil
}

func (x *Dataset) GetDefaultCollation() string {
	if x != nil && x.DefaultCollation != nil {
		return *x.DefaultCollation
	}
	return ""
}

func (x *Dataset) GetDefaultEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DefaultEncryptionConfiguration
	}
	return nil
}

func (x *Dataset) GetDefaultPartitionExpirationMs() int64 {
	if x != nil && x.DefaultPartitionExpirationMs != nil {
		return *x.DefaultPartitionExpirationMs
	}
	return 0
}

func (x *Dataset) GetDefaultRoundingMode() string {
	if x != nil && x.DefaultRoundingMode != nil {
		return *x.DefaultRoundingMode
	}
	return ""
}

func (x *Dataset) GetDefaultTableExpirationMs() int64 {
	if x != nil && x.DefaultTableExpirationMs != nil {
		return *x.DefaultTableExpirationMs
	}
	return 0
}

func (x *Dataset) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Dataset) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *Dataset) GetExternalCatalogDatasetOptions() *ExternalCatalogDatasetOptions {
	if x != nil {
		return x.ExternalCatalogDatasetOptions
	}
	return nil
}

func (x *Dataset) GetExternalDatasetReference() *ExternalDatasetReference {
	if x != nil {
		return x.ExternalDatasetReference
	}
	return nil
}

func (x *Dataset) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *Dataset) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Dataset) GetIsCaseInsensitive() bool {
	if x != nil && x.IsCaseInsensitive != nil {
		return *x.IsCaseInsensitive
	}
	return false
}

func (x *Dataset) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Dataset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Dataset) GetLastModifiedTime() int64 {
	if x != nil && x.LastModifiedTime != nil {
		return *x.LastModifiedTime
	}
	return 0
}

func (x *Dataset) GetLinkedDatasetMetadata() *LinkedDatasetMetadata {
	if x != nil {
		return x.LinkedDatasetMetadata
	}
	return nil
}

func (x *Dataset) GetLinkedDatasetSource() *LinkedDatasetSource {
	if x != nil {
		return x.LinkedDatasetSource
	}
	return nil
}

func (x *Dataset) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Dataset) GetMaxTimeTravelHours() int64 {
	if x != nil && x.MaxTimeTravelHours != nil {
		return *x.MaxTimeTravelHours
	}
	return 0
}

func (x *Dataset) GetSatisfiesPzi() bool {
	if x != nil && x.SatisfiesPzi != nil {
		return *x.SatisfiesPzi
	}
	return false
}

func (x *Dataset) GetSatisfiesPzs() bool {
	if x != nil && x.SatisfiesPzs != nil {
		return *x.SatisfiesPzs
	}
	return false
}

func (x *Dataset) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *Dataset) GetStorageBillingModel() string {
	if x != nil && x.StorageBillingModel != nil {
		return *x.StorageBillingModel
	}
	return ""
}

func (x *Dataset) GetTags() []*DatasetTags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Dataset) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type DatasetAccessEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset     *DatasetReference `protobuf:"bytes,1,opt,name=dataset" json:"dataset,omitempty"`
	TargetTypes []string          `protobuf:"bytes,2,rep,name=target_types,json=targetTypes" json:"target_types,omitempty"`
}

func (x *DatasetAccessEntry) Reset() {
	*x = DatasetAccessEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetAccessEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetAccessEntry) ProtoMessage() {}

func (x *DatasetAccessEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetAccessEntry.ProtoReflect.Descriptor instead.
func (*DatasetAccessEntry) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{42}
}

func (x *DatasetAccessEntry) GetDataset() *DatasetReference {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *DatasetAccessEntry) GetTargetTypes() []string {
	if x != nil {
		return x.TargetTypes
	}
	return nil
}

type DatasetListDatasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetReference *DatasetReference `protobuf:"bytes,1,opt,name=dataset_reference,json=datasetReference" json:"dataset_reference,omitempty"`
	FriendlyName     *string           `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Id               *string           `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Kind             *string           `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
	Labels           map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Location         *string           `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
}

func (x *DatasetListDatasets) Reset() {
	*x = DatasetListDatasets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetListDatasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetListDatasets) ProtoMessage() {}

func (x *DatasetListDatasets) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetListDatasets.ProtoReflect.Descriptor instead.
func (*DatasetListDatasets) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{43}
}

func (x *DatasetListDatasets) GetDatasetReference() *DatasetReference {
	if x != nil {
		return x.DatasetReference
	}
	return nil
}

func (x *DatasetListDatasets) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *DatasetListDatasets) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DatasetListDatasets) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *DatasetListDatasets) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DatasetListDatasets) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

type DatasetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasets      []*DatasetListDatasets `protobuf:"bytes,1,rep,name=datasets" json:"datasets,omitempty"`
	Etag          *string                `protobuf:"bytes,2,opt,name=etag" json:"etag,omitempty"`
	Kind          *string                `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	NextPageToken *string                `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	Unreachable   []string               `protobuf:"bytes,5,rep,name=unreachable" json:"unreachable,omitempty"`
}

func (x *DatasetList) Reset() {
	*x = DatasetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetList) ProtoMessage() {}

func (x *DatasetList) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetList.ProtoReflect.Descriptor instead.
func (*DatasetList) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{44}
}

func (x *DatasetList) GetDatasets() []*DatasetListDatasets {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *DatasetList) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *DatasetList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *DatasetList) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *DatasetList) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

type DatasetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *DatasetReference) Reset() {
	*x = DatasetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetReference) ProtoMessage() {}

func (x *DatasetReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetReference.ProtoReflect.Descriptor instead.
func (*DatasetReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{45}
}

func (x *DatasetReference) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DatasetReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type DestinationTableProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description    *string              `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	ExpirationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	FriendlyName   *string              `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Labels         map[string]string    `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *DestinationTableProperties) Reset() {
	*x = DestinationTableProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationTableProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationTableProperties) ProtoMessage() {}

func (x *DestinationTableProperties) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationTableProperties.ProtoReflect.Descriptor instead.
func (*DestinationTableProperties) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{46}
}

func (x *DestinationTableProperties) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DestinationTableProperties) GetExpirationTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *DestinationTableProperties) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *DestinationTableProperties) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type DifferentialPrivacyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeltaBudget          *float64 `protobuf:"fixed64,1,opt,name=delta_budget,json=deltaBudget" json:"delta_budget,omitempty"`
	DeltaPerQuery        *float64 `protobuf:"fixed64,2,opt,name=delta_per_query,json=deltaPerQuery" json:"delta_per_query,omitempty"`
	EpsilonBudget        *float64 `protobuf:"fixed64,3,opt,name=epsilon_budget,json=epsilonBudget" json:"epsilon_budget,omitempty"`
	MaxEpsilonPerQuery   *float64 `protobuf:"fixed64,4,opt,name=max_epsilon_per_query,json=maxEpsilonPerQuery" json:"max_epsilon_per_query,omitempty"`
	MaxGroupsContributed *int64   `protobuf:"varint,5,opt,name=max_groups_contributed,json=maxGroupsContributed" json:"max_groups_contributed,omitempty"`
	PrivacyUnitColumn    *string  `protobuf:"bytes,6,opt,name=privacy_unit_column,json=privacyUnitColumn" json:"privacy_unit_column,omitempty"`
}

func (x *DifferentialPrivacyPolicy) Reset() {
	*x = DifferentialPrivacyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DifferentialPrivacyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DifferentialPrivacyPolicy) ProtoMessage() {}

func (x *DifferentialPrivacyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DifferentialPrivacyPolicy.ProtoReflect.Descriptor instead.
func (*DifferentialPrivacyPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{47}
}

func (x *DifferentialPrivacyPolicy) GetDeltaBudget() float64 {
	if x != nil && x.DeltaBudget != nil {
		return *x.DeltaBudget
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetDeltaPerQuery() float64 {
	if x != nil && x.DeltaPerQuery != nil {
		return *x.DeltaPerQuery
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetEpsilonBudget() float64 {
	if x != nil && x.EpsilonBudget != nil {
		return *x.EpsilonBudget
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetMaxEpsilonPerQuery() float64 {
	if x != nil && x.MaxEpsilonPerQuery != nil {
		return *x.MaxEpsilonPerQuery
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetMaxGroupsContributed() int64 {
	if x != nil && x.MaxGroupsContributed != nil {
		return *x.MaxGroupsContributed
	}
	return 0
}

func (x *DifferentialPrivacyPolicy) GetPrivacyUnitColumn() string {
	if x != nil && x.PrivacyUnitColumn != nil {
		return *x.PrivacyUnitColumn
	}
	return ""
}

type DimensionalityReductionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalExplainedVarianceRatio *float64 `protobuf:"fixed64,1,opt,name=total_explained_variance_ratio,json=totalExplainedVarianceRatio" json:"total_explained_variance_ratio,omitempty"`
}

func (x *DimensionalityReductionMetrics) Reset() {
	*x = DimensionalityReductionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionalityReductionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionalityReductionMetrics) ProtoMessage() {}

func (x *DimensionalityReductionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionalityReductionMetrics.ProtoReflect.Descriptor instead.
func (*DimensionalityReductionMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{48}
}

func (x *DimensionalityReductionMetrics) GetTotalExplainedVarianceRatio() float64 {
	if x != nil && x.TotalExplainedVarianceRatio != nil {
		return *x.TotalExplainedVarianceRatio
	}
	return 0
}

type DmlStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedRowCount  *int64 `protobuf:"varint,1,opt,name=deleted_row_count,json=deletedRowCount" json:"deleted_row_count,omitempty"`
	InsertedRowCount *int64 `protobuf:"varint,2,opt,name=inserted_row_count,json=insertedRowCount" json:"inserted_row_count,omitempty"`
	UpdatedRowCount  *int64 `protobuf:"varint,3,opt,name=updated_row_count,json=updatedRowCount" json:"updated_row_count,omitempty"`
}

func (x *DmlStatistics) Reset() {
	*x = DmlStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmlStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmlStatistics) ProtoMessage() {}

func (x *DmlStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmlStatistics.ProtoReflect.Descriptor instead.
func (*DmlStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{49}
}

func (x *DmlStatistics) GetDeletedRowCount() int64 {
	if x != nil && x.DeletedRowCount != nil {
		return *x.DeletedRowCount
	}
	return 0
}

func (x *DmlStatistics) GetInsertedRowCount() int64 {
	if x != nil && x.InsertedRowCount != nil {
		return *x.InsertedRowCount
	}
	return 0
}

func (x *DmlStatistics) GetUpdatedRowCount() int64 {
	if x != nil && x.UpdatedRowCount != nil {
		return *x.UpdatedRowCount
	}
	return 0
}

type DoubleCandidates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates []float64 `protobuf:"fixed64,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (x *DoubleCandidates) Reset() {
	*x = DoubleCandidates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleCandidates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleCandidates) ProtoMessage() {}

func (x *DoubleCandidates) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleCandidates.ProtoReflect.Descriptor instead.
func (*DoubleCandidates) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{50}
}

func (x *DoubleCandidates) GetCandidates() []float64 {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type DoubleHparamSearchSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates *DoubleCandidates `protobuf:"bytes,1,opt,name=candidates" json:"candidates,omitempty"`
	Range      *DoubleRange      `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (x *DoubleHparamSearchSpace) Reset() {
	*x = DoubleHparamSearchSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleHparamSearchSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleHparamSearchSpace) ProtoMessage() {}

func (x *DoubleHparamSearchSpace) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleHparamSearchSpace.ProtoReflect.Descriptor instead.
func (*DoubleHparamSearchSpace) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{51}
}

func (x *DoubleHparamSearchSpace) GetCandidates() *DoubleCandidates {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *DoubleHparamSearchSpace) GetRange() *DoubleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type DoubleRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max *float64 `protobuf:"fixed64,1,opt,name=max" json:"max,omitempty"`
	Min *float64 `protobuf:"fixed64,2,opt,name=min" json:"min,omitempty"`
}

func (x *DoubleRange) Reset() {
	*x = DoubleRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRange) ProtoMessage() {}

func (x *DoubleRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRange.ProtoReflect.Descriptor instead.
func (*DoubleRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{52}
}

func (x *DoubleRange) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *DoubleRange) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

type EncryptionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KmsKeyName *string `protobuf:"bytes,1,opt,name=kms_key_name,json=kmsKeyName" json:"kms_key_name,omitempty"`
}

func (x *EncryptionConfiguration) Reset() {
	*x = EncryptionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionConfiguration) ProtoMessage() {}

func (x *EncryptionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionConfiguration.ProtoReflect.Descriptor instead.
func (*EncryptionConfiguration) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{53}
}

func (x *EncryptionConfiguration) GetKmsKeyName() string {
	if x != nil && x.KmsKeyName != nil {
		return *x.KmsKeyName
	}
	return ""
}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemCount      *int64  `protobuf:"varint,1,opt,name=item_count,json=itemCount" json:"item_count,omitempty"`
	PredictedLabel *string `protobuf:"bytes,2,opt,name=predicted_label,json=predictedLabel" json:"predicted_label,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{54}
}

func (x *Entry) GetItemCount() int64 {
	if x != nil && x.ItemCount != nil {
		return *x.ItemCount
	}
	return 0
}

func (x *Entry) GetPredictedLabel() string {
	if x != nil && x.PredictedLabel != nil {
		return *x.PredictedLabel
	}
	return ""
}

type ErrorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugInfo *string `protobuf:"bytes,1,opt,name=debug_info,json=debugInfo" json:"debug_info,omitempty"`
	Location  *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Message   *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Reason    *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (x *ErrorProto) Reset() {
	*x = ErrorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorProto) ProtoMessage() {}

func (x *ErrorProto) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorProto.ProtoReflect.Descriptor instead.
func (*ErrorProto) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{55}
}

func (x *ErrorProto) GetDebugInfo() string {
	if x != nil && x.DebugInfo != nil {
		return *x.DebugInfo
	}
	return ""
}

func (x *ErrorProto) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *ErrorProto) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ErrorProto) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type EvaluationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArimaForecastingMetrics         *ArimaForecastingMetrics         `protobuf:"bytes,1,opt,name=arima_forecasting_metrics,json=arimaForecastingMetrics" json:"arima_forecasting_metrics,omitempty"`
	BinaryClassificationMetrics     *BinaryClassificationMetrics     `protobuf:"bytes,2,opt,name=binary_classification_metrics,json=binaryClassificationMetrics" json:"binary_classification_metrics,omitempty"`
	ClusteringMetrics               *ClusteringMetrics               `protobuf:"bytes,3,opt,name=clustering_metrics,json=clusteringMetrics" json:"clustering_metrics,omitempty"`
	DimensionalityReductionMetrics  *DimensionalityReductionMetrics  `protobuf:"bytes,4,opt,name=dimensionality_reduction_metrics,json=dimensionalityReductionMetrics" json:"dimensionality_reduction_metrics,omitempty"`
	MultiClassClassificationMetrics *MultiClassClassificationMetrics `protobuf:"bytes,5,opt,name=multi_class_classification_metrics,json=multiClassClassificationMetrics" json:"multi_class_classification_metrics,omitempty"`
	RankingMetrics                  *RankingMetrics                  `protobuf:"bytes,6,opt,name=ranking_metrics,json=rankingMetrics" json:"ranking_metrics,omitempty"`
	RegressionMetrics               *RegressionMetrics               `protobuf:"bytes,7,opt,name=regression_metrics,json=regressionMetrics" json:"regression_metrics,omitempty"`
}

func (x *EvaluationMetrics) Reset() {
	*x = EvaluationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluationMetrics) ProtoMessage() {}

func (x *EvaluationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluationMetrics.ProtoReflect.Descriptor instead.
func (*EvaluationMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{56}
}

func (x *EvaluationMetrics) GetArimaForecastingMetrics() *ArimaForecastingMetrics {
	if x != nil {
		return x.ArimaForecastingMetrics
	}
	return nil
}

func (x *EvaluationMetrics) GetBinaryClassificationMetrics() *BinaryClassificationMetrics {
	if x != nil {
		return x.BinaryClassificationMetrics
	}
	return nil
}

func (x *EvaluationMetrics) GetClusteringMetrics() *ClusteringMetrics {
	if x != nil {
		return x.ClusteringMetrics
	}
	return nil
}

func (x *EvaluationMetrics) GetDimensionalityReductionMetrics() *DimensionalityReductionMetrics {
	if x != nil {
		return x.DimensionalityReductionMetrics
	}
	return nil
}

func (x *EvaluationMetrics) GetMultiClassClassificationMetrics() *MultiClassClassificationMetrics {
	if x != nil {
		return x.MultiClassClassificationMetrics
	}
	return nil
}

func (x *EvaluationMetrics) GetRankingMetrics() *RankingMetrics {
	if x != nil {
		return x.RankingMetrics
	}
	return nil
}

func (x *EvaluationMetrics) GetRegressionMetrics() *RegressionMetrics {
	if x != nil {
		return x.RegressionMetrics
	}
	return nil
}

type ExplainQueryStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletedParallelInputs   *int64              `protobuf:"varint,1,opt,name=completed_parallel_inputs,json=completedParallelInputs" json:"completed_parallel_inputs,omitempty"`
	ComputeMode               *string             `protobuf:"bytes,2,opt,name=compute_mode,json=computeMode" json:"compute_mode,omitempty"`
	ComputeMsAvg              *int64              `protobuf:"varint,3,opt,name=compute_ms_avg,json=computeMsAvg" json:"compute_ms_avg,omitempty"`
	ComputeMsMax              *int64              `protobuf:"varint,4,opt,name=compute_ms_max,json=computeMsMax" json:"compute_ms_max,omitempty"`
	ComputeRatioAvg           *float64            `protobuf:"fixed64,5,opt,name=compute_ratio_avg,json=computeRatioAvg" json:"compute_ratio_avg,omitempty"`
	ComputeRatioMax           *float64            `protobuf:"fixed64,6,opt,name=compute_ratio_max,json=computeRatioMax" json:"compute_ratio_max,omitempty"`
	EndMs                     *int64              `protobuf:"varint,7,opt,name=end_ms,json=endMs" json:"end_ms,omitempty"`
	Id                        *int64              `protobuf:"varint,8,opt,name=id" json:"id,omitempty"`
	InputStages               []int64             `protobuf:"varint,9,rep,name=input_stages,json=inputStages" json:"input_stages,omitempty"`
	Name                      *string             `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	ParallelInputs            *int64              `protobuf:"varint,11,opt,name=parallel_inputs,json=parallelInputs" json:"parallel_inputs,omitempty"`
	ReadMsAvg                 *int64              `protobuf:"varint,12,opt,name=read_ms_avg,json=readMsAvg" json:"read_ms_avg,omitempty"`
	ReadMsMax                 *int64              `protobuf:"varint,13,opt,name=read_ms_max,json=readMsMax" json:"read_ms_max,omitempty"`
	ReadRatioAvg              *float64            `protobuf:"fixed64,14,opt,name=read_ratio_avg,json=readRatioAvg" json:"read_ratio_avg,omitempty"`
	ReadRatioMax              *float64            `protobuf:"fixed64,15,opt,name=read_ratio_max,json=readRatioMax" json:"read_ratio_max,omitempty"`
	RecordsRead               *int64              `protobuf:"varint,16,opt,name=records_read,json=recordsRead" json:"records_read,omitempty"`
	RecordsWritten            *int64              `protobuf:"varint,17,opt,name=records_written,json=recordsWritten" json:"records_written,omitempty"`
	ShuffleOutputBytes        *int64              `protobuf:"varint,18,opt,name=shuffle_output_bytes,json=shuffleOutputBytes" json:"shuffle_output_bytes,omitempty"`
	ShuffleOutputBytesSpilled *int64              `protobuf:"varint,19,opt,name=shuffle_output_bytes_spilled,json=shuffleOutputBytesSpilled" json:"shuffle_output_bytes_spilled,omitempty"`
	SlotMs                    *int64              `protobuf:"varint,20,opt,name=slot_ms,json=slotMs" json:"slot_ms,omitempty"`
	StartMs                   *int64              `protobuf:"varint,21,opt,name=start_ms,json=startMs" json:"start_ms,omitempty"`
	Status                    *string             `protobuf:"bytes,22,opt,name=status" json:"status,omitempty"`
	Steps                     []*ExplainQueryStep `protobuf:"bytes,23,rep,name=steps" json:"steps,omitempty"`
	WaitMsAvg                 *int64              `protobuf:"varint,24,opt,name=wait_ms_avg,json=waitMsAvg" json:"wait_ms_avg,omitempty"`
	WaitMsMax                 *int64              `protobuf:"varint,25,opt,name=wait_ms_max,json=waitMsMax" json:"wait_ms_max,omitempty"`
	WaitRatioAvg              *float64            `protobuf:"fixed64,26,opt,name=wait_ratio_avg,json=waitRatioAvg" json:"wait_ratio_avg,omitempty"`
	WaitRatioMax              *float64            `protobuf:"fixed64,27,opt,name=wait_ratio_max,json=waitRatioMax" json:"wait_ratio_max,omitempty"`
	WriteMsAvg                *int64              `protobuf:"varint,28,opt,name=write_ms_avg,json=writeMsAvg" json:"write_ms_avg,omitempty"`
	WriteMsMax                *int64              `protobuf:"varint,29,opt,name=write_ms_max,json=writeMsMax" json:"write_ms_max,omitempty"`
	WriteRatioAvg             *float64            `protobuf:"fixed64,30,opt,name=write_ratio_avg,json=writeRatioAvg" json:"write_ratio_avg,omitempty"`
	WriteRatioMax             *float64            `protobuf:"fixed64,31,opt,name=write_ratio_max,json=writeRatioMax" json:"write_ratio_max,omitempty"`
}

func (x *ExplainQueryStage) Reset() {
	*x = ExplainQueryStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainQueryStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryStage) ProtoMessage() {}

func (x *ExplainQueryStage) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryStage.ProtoReflect.Descriptor instead.
func (*ExplainQueryStage) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{57}
}

func (x *ExplainQueryStage) GetCompletedParallelInputs() int64 {
	if x != nil && x.CompletedParallelInputs != nil {
		return *x.CompletedParallelInputs
	}
	return 0
}

func (x *ExplainQueryStage) GetComputeMode() string {
	if x != nil && x.ComputeMode != nil {
		return *x.ComputeMode
	}
	return ""
}

func (x *ExplainQueryStage) GetComputeMsAvg() int64 {
	if x != nil && x.ComputeMsAvg != nil {
		return *x.ComputeMsAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetComputeMsMax() int64 {
	if x != nil && x.ComputeMsMax != nil {
		return *x.ComputeMsMax
	}
	return 0
}

func (x *ExplainQueryStage) GetComputeRatioAvg() float64 {
	if x != nil && x.ComputeRatioAvg != nil {
		return *x.ComputeRatioAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetComputeRatioMax() float64 {
	if x != nil && x.ComputeRatioMax != nil {
		return *x.ComputeRatioMax
	}
	return 0
}

func (x *ExplainQueryStage) GetEndMs() int64 {
	if x != nil && x.EndMs != nil {
		return *x.EndMs
	}
	return 0
}

func (x *ExplainQueryStage) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ExplainQueryStage) GetInputStages() []int64 {
	if x != nil {
		return x.InputStages
	}
	return nil
}

func (x *ExplainQueryStage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExplainQueryStage) GetParallelInputs() int64 {
	if x != nil && x.ParallelInputs != nil {
		return *x.ParallelInputs
	}
	return 0
}

func (x *ExplainQueryStage) GetReadMsAvg() int64 {
	if x != nil && x.ReadMsAvg != nil {
		return *x.ReadMsAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetReadMsMax() int64 {
	if x != nil && x.ReadMsMax != nil {
		return *x.ReadMsMax
	}
	return 0
}

func (x *ExplainQueryStage) GetReadRatioAvg() float64 {
	if x != nil && x.ReadRatioAvg != nil {
		return *x.ReadRatioAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetReadRatioMax() float64 {
	if x != nil && x.ReadRatioMax != nil {
		return *x.ReadRatioMax
	}
	return 0
}

func (x *ExplainQueryStage) GetRecordsRead() int64 {
	if x != nil && x.RecordsRead != nil {
		return *x.RecordsRead
	}
	return 0
}

func (x *ExplainQueryStage) GetRecordsWritten() int64 {
	if x != nil && x.RecordsWritten != nil {
		return *x.RecordsWritten
	}
	return 0
}

func (x *ExplainQueryStage) GetShuffleOutputBytes() int64 {
	if x != nil && x.ShuffleOutputBytes != nil {
		return *x.ShuffleOutputBytes
	}
	return 0
}

func (x *ExplainQueryStage) GetShuffleOutputBytesSpilled() int64 {
	if x != nil && x.ShuffleOutputBytesSpilled != nil {
		return *x.ShuffleOutputBytesSpilled
	}
	return 0
}

func (x *ExplainQueryStage) GetSlotMs() int64 {
	if x != nil && x.SlotMs != nil {
		return *x.SlotMs
	}
	return 0
}

func (x *ExplainQueryStage) GetStartMs() int64 {
	if x != nil && x.StartMs != nil {
		return *x.StartMs
	}
	return 0
}

func (x *ExplainQueryStage) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *ExplainQueryStage) GetSteps() []*ExplainQueryStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ExplainQueryStage) GetWaitMsAvg() int64 {
	if x != nil && x.WaitMsAvg != nil {
		return *x.WaitMsAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetWaitMsMax() int64 {
	if x != nil && x.WaitMsMax != nil {
		return *x.WaitMsMax
	}
	return 0
}

func (x *ExplainQueryStage) GetWaitRatioAvg() float64 {
	if x != nil && x.WaitRatioAvg != nil {
		return *x.WaitRatioAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetWaitRatioMax() float64 {
	if x != nil && x.WaitRatioMax != nil {
		return *x.WaitRatioMax
	}
	return 0
}

func (x *ExplainQueryStage) GetWriteMsAvg() int64 {
	if x != nil && x.WriteMsAvg != nil {
		return *x.WriteMsAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetWriteMsMax() int64 {
	if x != nil && x.WriteMsMax != nil {
		return *x.WriteMsMax
	}
	return 0
}

func (x *ExplainQueryStage) GetWriteRatioAvg() float64 {
	if x != nil && x.WriteRatioAvg != nil {
		return *x.WriteRatioAvg
	}
	return 0
}

func (x *ExplainQueryStage) GetWriteRatioMax() float64 {
	if x != nil && x.WriteRatioMax != nil {
		return *x.WriteRatioMax
	}
	return 0
}

type ExplainQueryStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     *string  `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Substeps []string `protobuf:"bytes,2,rep,name=substeps" json:"substeps,omitempty"`
}

func (x *ExplainQueryStep) Reset() {
	*x = ExplainQueryStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainQueryStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryStep) ProtoMessage() {}

func (x *ExplainQueryStep) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryStep.ProtoReflect.Descriptor instead.
func (*ExplainQueryStep) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{58}
}

func (x *ExplainQueryStep) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ExplainQueryStep) GetSubsteps() []string {
	if x != nil {
		return x.Substeps
	}
	return nil
}

type Explanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribution *float64 `protobuf:"fixed64,1,opt,name=attribution" json:"attribution,omitempty"`
	FeatureName *string  `protobuf:"bytes,2,opt,name=feature_name,json=featureName" json:"feature_name,omitempty"`
}

func (x *Explanation) Reset() {
	*x = Explanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Explanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Explanation) ProtoMessage() {}

func (x *Explanation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Explanation.ProtoReflect.Descriptor instead.
func (*Explanation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{59}
}

func (x *Explanation) GetAttribution() float64 {
	if x != nil && x.Attribution != nil {
		return *x.Attribution
	}
	return 0
}

func (x *Explanation) GetFeatureName() string {
	if x != nil && x.FeatureName != nil {
		return *x.FeatureName
	}
	return ""
}

type ExportDataStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCount *int64 `protobuf:"varint,1,opt,name=file_count,json=fileCount" json:"file_count,omitempty"`
	RowCount  *int64 `protobuf:"varint,2,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
}

func (x *ExportDataStatistics) Reset() {
	*x = ExportDataStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDataStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataStatistics) ProtoMessage() {}

func (x *ExportDataStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataStatistics.ProtoReflect.Descriptor instead.
func (*ExportDataStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{60}
}

func (x *ExportDataStatistics) GetFileCount() int64 {
	if x != nil && x.FileCount != nil {
		return *x.FileCount
	}
	return 0
}

func (x *ExportDataStatistics) GetRowCount() int64 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Expression  *string `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
	Location    *string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Title       *string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{61}
}

func (x *Expr) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Expr) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *Expr) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Expr) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type ExternalCatalogDatasetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultStorageLocationUri *string           `protobuf:"bytes,1,opt,name=default_storage_location_uri,json=defaultStorageLocationUri" json:"default_storage_location_uri,omitempty"`
	Parameters                map[string]string `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *ExternalCatalogDatasetOptions) Reset() {
	*x = ExternalCatalogDatasetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalCatalogDatasetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalCatalogDatasetOptions) ProtoMessage() {}

func (x *ExternalCatalogDatasetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalCatalogDatasetOptions.ProtoReflect.Descriptor instead.
func (*ExternalCatalogDatasetOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{62}
}

func (x *ExternalCatalogDatasetOptions) GetDefaultStorageLocationUri() string {
	if x != nil && x.DefaultStorageLocationUri != nil {
		return *x.DefaultStorageLocationUri
	}
	return ""
}

func (x *ExternalCatalogDatasetOptions) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ExternalCatalogTableOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId      *string            `protobuf:"bytes,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	Parameters        map[string]string  `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StorageDescriptor *StorageDescriptor `protobuf:"bytes,3,opt,name=storage_descriptor,json=storageDescriptor" json:"storage_descriptor,omitempty"`
}

func (x *ExternalCatalogTableOptions) Reset() {
	*x = ExternalCatalogTableOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalCatalogTableOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalCatalogTableOptions) ProtoMessage() {}

func (x *ExternalCatalogTableOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalCatalogTableOptions.ProtoReflect.Descriptor instead.
func (*ExternalCatalogTableOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{63}
}

func (x *ExternalCatalogTableOptions) GetConnectionId() string {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return ""
}

func (x *ExternalCatalogTableOptions) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExternalCatalogTableOptions) GetStorageDescriptor() *StorageDescriptor {
	if x != nil {
		return x.StorageDescriptor
	}
	return nil
}

type ExternalDataConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Autodetect              *bool                    `protobuf:"varint,1,opt,name=autodetect" json:"autodetect,omitempty"`
	AvroOptions             *AvroOptions             `protobuf:"bytes,2,opt,name=avro_options,json=avroOptions" json:"avro_options,omitempty"`
	BigtableOptions         *BigtableOptions         `protobuf:"bytes,3,opt,name=bigtable_options,json=bigtableOptions" json:"bigtable_options,omitempty"`
	Compression             *string                  `protobuf:"bytes,4,opt,name=compression" json:"compression,omitempty"`
	ConnectionId            *string                  `protobuf:"bytes,5,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	CsvOptions              *CsvOptions              `protobuf:"bytes,6,opt,name=csv_options,json=csvOptions" json:"csv_options,omitempty"`
	DecimalTargetTypes      []string                 `protobuf:"bytes,7,rep,name=decimal_target_types,json=decimalTargetTypes" json:"decimal_target_types,omitempty"`
	FileSetSpecType         *string                  `protobuf:"bytes,8,opt,name=file_set_spec_type,json=fileSetSpecType" json:"file_set_spec_type,omitempty"`
	GoogleSheetsOptions     *GoogleSheetsOptions     `protobuf:"bytes,9,opt,name=google_sheets_options,json=googleSheetsOptions" json:"google_sheets_options,omitempty"`
	HivePartitioningOptions *HivePartitioningOptions `protobuf:"bytes,10,opt,name=hive_partitioning_options,json=hivePartitioningOptions" json:"hive_partitioning_options,omitempty"`
	IgnoreUnknownValues     *bool                    `protobuf:"varint,11,opt,name=ignore_unknown_values,json=ignoreUnknownValues" json:"ignore_unknown_values,omitempty"`
	JsonExtension           *string                  `protobuf:"bytes,12,opt,name=json_extension,json=jsonExtension" json:"json_extension,omitempty"`
	JsonOptions             *JsonOptions             `protobuf:"bytes,13,opt,name=json_options,json=jsonOptions" json:"json_options,omitempty"`
	MaxBadRecords           *int32                   `protobuf:"varint,14,opt,name=max_bad_records,json=maxBadRecords" json:"max_bad_records,omitempty"`
	MetadataCacheMode       *string                  `protobuf:"bytes,15,opt,name=metadata_cache_mode,json=metadataCacheMode" json:"metadata_cache_mode,omitempty"`
	ObjectMetadata          *string                  `protobuf:"bytes,16,opt,name=object_metadata,json=objectMetadata" json:"object_metadata,omitempty"`
	ParquetOptions          *ParquetOptions          `protobuf:"bytes,17,opt,name=parquet_options,json=parquetOptions" json:"parquet_options,omitempty"`
	ReferenceFileSchemaUri  *string                  `protobuf:"bytes,18,opt,name=reference_file_schema_uri,json=referenceFileSchemaUri" json:"reference_file_schema_uri,omitempty"`
	Schema                  *TableSchema             `protobuf:"bytes,19,opt,name=schema" json:"schema,omitempty"`
	SourceFormat            *string                  `protobuf:"bytes,20,opt,name=source_format,json=sourceFormat" json:"source_format,omitempty"`
	SourceUris              []string                 `protobuf:"bytes,21,rep,name=source_uris,json=sourceUris" json:"source_uris,omitempty"`
}

func (x *ExternalDataConfiguration) Reset() {
	*x = ExternalDataConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalDataConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDataConfiguration) ProtoMessage() {}

func (x *ExternalDataConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDataConfiguration.ProtoReflect.Descriptor instead.
func (*ExternalDataConfiguration) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{64}
}

func (x *ExternalDataConfiguration) GetAutodetect() bool {
	if x != nil && x.Autodetect != nil {
		return *x.Autodetect
	}
	return false
}

func (x *ExternalDataConfiguration) GetAvroOptions() *AvroOptions {
	if x != nil {
		return x.AvroOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetBigtableOptions() *BigtableOptions {
	if x != nil {
		return x.BigtableOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetCompression() string {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return ""
}

func (x *ExternalDataConfiguration) GetConnectionId() string {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return ""
}

func (x *ExternalDataConfiguration) GetCsvOptions() *CsvOptions {
	if x != nil {
		return x.CsvOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetDecimalTargetTypes() []string {
	if x != nil {
		return x.DecimalTargetTypes
	}
	return nil
}

func (x *ExternalDataConfiguration) GetFileSetSpecType() string {
	if x != nil && x.FileSetSpecType != nil {
		return *x.FileSetSpecType
	}
	return ""
}

func (x *ExternalDataConfiguration) GetGoogleSheetsOptions() *GoogleSheetsOptions {
	if x != nil {
		return x.GoogleSheetsOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetHivePartitioningOptions() *HivePartitioningOptions {
	if x != nil {
		return x.HivePartitioningOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetIgnoreUnknownValues() bool {
	if x != nil && x.IgnoreUnknownValues != nil {
		return *x.IgnoreUnknownValues
	}
	return false
}

func (x *ExternalDataConfiguration) GetJsonExtension() string {
	if x != nil && x.JsonExtension != nil {
		return *x.JsonExtension
	}
	return ""
}

func (x *ExternalDataConfiguration) GetJsonOptions() *JsonOptions {
	if x != nil {
		return x.JsonOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetMaxBadRecords() int32 {
	if x != nil && x.MaxBadRecords != nil {
		return *x.MaxBadRecords
	}
	return 0
}

func (x *ExternalDataConfiguration) GetMetadataCacheMode() string {
	if x != nil && x.MetadataCacheMode != nil {
		return *x.MetadataCacheMode
	}
	return ""
}

func (x *ExternalDataConfiguration) GetObjectMetadata() string {
	if x != nil && x.ObjectMetadata != nil {
		return *x.ObjectMetadata
	}
	return ""
}

func (x *ExternalDataConfiguration) GetParquetOptions() *ParquetOptions {
	if x != nil {
		return x.ParquetOptions
	}
	return nil
}

func (x *ExternalDataConfiguration) GetReferenceFileSchemaUri() string {
	if x != nil && x.ReferenceFileSchemaUri != nil {
		return *x.ReferenceFileSchemaUri
	}
	return ""
}

func (x *ExternalDataConfiguration) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ExternalDataConfiguration) GetSourceFormat() string {
	if x != nil && x.SourceFormat != nil {
		return *x.SourceFormat
	}
	return ""
}

func (x *ExternalDataConfiguration) GetSourceUris() []string {
	if x != nil {
		return x.SourceUris
	}
	return nil
}

type ExternalDatasetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection     *string `protobuf:"bytes,1,opt,name=connection" json:"connection,omitempty"`
	ExternalSource *string `protobuf:"bytes,2,opt,name=external_source,json=externalSource" json:"external_source,omitempty"`
}

func (x *ExternalDatasetReference) Reset() {
	*x = ExternalDatasetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalDatasetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDatasetReference) ProtoMessage() {}

func (x *ExternalDatasetReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDatasetReference.ProtoReflect.Descriptor instead.
func (*ExternalDatasetReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{65}
}

func (x *ExternalDatasetReference) GetConnection() string {
	if x != nil && x.Connection != nil {
		return *x.Connection
	}
	return ""
}

func (x *ExternalDatasetReference) GetExternalSource() string {
	if x != nil && x.ExternalSource != nil {
		return *x.ExternalSource
	}
	return ""
}

type ExternalServiceCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesBilled       *int64  `protobuf:"varint,1,opt,name=bytes_billed,json=bytesBilled" json:"bytes_billed,omitempty"`
	BytesProcessed    *int64  `protobuf:"varint,2,opt,name=bytes_processed,json=bytesProcessed" json:"bytes_processed,omitempty"`
	ExternalService   *string `protobuf:"bytes,3,opt,name=external_service,json=externalService" json:"external_service,omitempty"`
	ReservedSlotCount *int64  `protobuf:"varint,4,opt,name=reserved_slot_count,json=reservedSlotCount" json:"reserved_slot_count,omitempty"`
	SlotMs            *int64  `protobuf:"varint,5,opt,name=slot_ms,json=slotMs" json:"slot_ms,omitempty"`
}

func (x *ExternalServiceCost) Reset() {
	*x = ExternalServiceCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalServiceCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalServiceCost) ProtoMessage() {}

func (x *ExternalServiceCost) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalServiceCost.ProtoReflect.Descriptor instead.
func (*ExternalServiceCost) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{66}
}

func (x *ExternalServiceCost) GetBytesBilled() int64 {
	if x != nil && x.BytesBilled != nil {
		return *x.BytesBilled
	}
	return 0
}

func (x *ExternalServiceCost) GetBytesProcessed() int64 {
	if x != nil && x.BytesProcessed != nil {
		return *x.BytesProcessed
	}
	return 0
}

func (x *ExternalServiceCost) GetExternalService() string {
	if x != nil && x.ExternalService != nil {
		return *x.ExternalService
	}
	return ""
}

func (x *ExternalServiceCost) GetReservedSlotCount() int64 {
	if x != nil && x.ReservedSlotCount != nil {
		return *x.ReservedSlotCount
	}
	return 0
}

func (x *ExternalServiceCost) GetSlotMs() int64 {
	if x != nil && x.SlotMs != nil {
		return *x.SlotMs
	}
	return 0
}

type FeatureValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoricalValue *CategoricalValue `protobuf:"bytes,1,opt,name=categorical_value,json=categoricalValue" json:"categorical_value,omitempty"`
	FeatureColumn    *string           `protobuf:"bytes,2,opt,name=feature_column,json=featureColumn" json:"feature_column,omitempty"`
	NumericalValue   *float64          `protobuf:"fixed64,3,opt,name=numerical_value,json=numericalValue" json:"numerical_value,omitempty"`
}

func (x *FeatureValue) Reset() {
	*x = FeatureValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureValue) ProtoMessage() {}

func (x *FeatureValue) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureValue.ProtoReflect.Descriptor instead.
func (*FeatureValue) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{67}
}

func (x *FeatureValue) GetCategoricalValue() *CategoricalValue {
	if x != nil {
		return x.CategoricalValue
	}
	return nil
}

func (x *FeatureValue) GetFeatureColumn() string {
	if x != nil && x.FeatureColumn != nil {
		return *x.FeatureColumn
	}
	return ""
}

func (x *FeatureValue) GetNumericalValue() float64 {
	if x != nil && x.NumericalValue != nil {
		return *x.NumericalValue
	}
	return 0
}

type GetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *GetPolicyOptions `protobuf:"bytes,1,opt,name=options" json:"options,omitempty"`
}

func (x *GetIamPolicyRequest) Reset() {
	*x = GetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIamPolicyRequest) ProtoMessage() {}

func (x *GetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{68}
}

func (x *GetIamPolicyRequest) GetOptions() *GetPolicyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type GetPolicyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedPolicyVersion *int32 `protobuf:"varint,1,opt,name=requested_policy_version,json=requestedPolicyVersion" json:"requested_policy_version,omitempty"`
}

func (x *GetPolicyOptions) Reset() {
	*x = GetPolicyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyOptions) ProtoMessage() {}

func (x *GetPolicyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyOptions.ProtoReflect.Descriptor instead.
func (*GetPolicyOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{69}
}

func (x *GetPolicyOptions) GetRequestedPolicyVersion() int32 {
	if x != nil && x.RequestedPolicyVersion != nil {
		return *x.RequestedPolicyVersion
	}
	return 0
}

type GetQueryResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheHit            *bool         `protobuf:"varint,1,opt,name=cache_hit,json=cacheHit" json:"cache_hit,omitempty"`
	Errors              []*ErrorProto `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	Etag                *string       `protobuf:"bytes,3,opt,name=etag" json:"etag,omitempty"`
	JobComplete         *bool         `protobuf:"varint,4,opt,name=job_complete,json=jobComplete" json:"job_complete,omitempty"`
	JobReference        *JobReference `protobuf:"bytes,5,opt,name=job_reference,json=jobReference" json:"job_reference,omitempty"`
	Kind                *string       `protobuf:"bytes,6,opt,name=kind" json:"kind,omitempty"`
	NumDmlAffectedRows  *int64        `protobuf:"varint,7,opt,name=num_dml_affected_rows,json=numDmlAffectedRows" json:"num_dml_affected_rows,omitempty"`
	PageToken           *string       `protobuf:"bytes,8,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Rows                []*TableRow   `protobuf:"bytes,9,rep,name=rows" json:"rows,omitempty"`
	Schema              *TableSchema  `protobuf:"bytes,10,opt,name=schema" json:"schema,omitempty"`
	TotalBytesProcessed *int64        `protobuf:"varint,11,opt,name=total_bytes_processed,json=totalBytesProcessed" json:"total_bytes_processed,omitempty"`
	TotalRows           *uint64       `protobuf:"varint,12,opt,name=total_rows,json=totalRows" json:"total_rows,omitempty"`
}

func (x *GetQueryResultsResponse) Reset() {
	*x = GetQueryResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResultsResponse) ProtoMessage() {}

func (x *GetQueryResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResultsResponse.ProtoReflect.Descriptor instead.
func (*GetQueryResultsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{70}
}

func (x *GetQueryResultsResponse) GetCacheHit() bool {
	if x != nil && x.CacheHit != nil {
		return *x.CacheHit
	}
	return false
}

func (x *GetQueryResultsResponse) GetErrors() []*ErrorProto {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetQueryResultsResponse) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *GetQueryResultsResponse) GetJobComplete() bool {
	if x != nil && x.JobComplete != nil {
		return *x.JobComplete
	}
	return false
}

func (x *GetQueryResultsResponse) GetJobReference() *JobReference {
	if x != nil {
		return x.JobReference
	}
	return nil
}

func (x *GetQueryResultsResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *GetQueryResultsResponse) GetNumDmlAffectedRows() int64 {
	if x != nil && x.NumDmlAffectedRows != nil {
		return *x.NumDmlAffectedRows
	}
	return 0
}

func (x *GetQueryResultsResponse) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *GetQueryResultsResponse) GetRows() []*TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GetQueryResultsResponse) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetQueryResultsResponse) GetTotalBytesProcessed() int64 {
	if x != nil && x.TotalBytesProcessed != nil {
		return *x.TotalBytesProcessed
	}
	return 0
}

func (x *GetQueryResultsResponse) GetTotalRows() uint64 {
	if x != nil && x.TotalRows != nil {
		return *x.TotalRows
	}
	return 0
}

type GetServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email *string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Kind  *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *GetServiceAccountResponse) Reset() {
	*x = GetServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAccountResponse) ProtoMessage() {}

func (x *GetServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*GetServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{71}
}

func (x *GetServiceAccountResponse) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *GetServiceAccountResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type GlobalExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassLabel   *string        `protobuf:"bytes,1,opt,name=class_label,json=classLabel" json:"class_label,omitempty"`
	Explanations []*Explanation `protobuf:"bytes,2,rep,name=explanations" json:"explanations,omitempty"`
}

func (x *GlobalExplanation) Reset() {
	*x = GlobalExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalExplanation) ProtoMessage() {}

func (x *GlobalExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalExplanation.ProtoReflect.Descriptor instead.
func (*GlobalExplanation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{72}
}

func (x *GlobalExplanation) GetClassLabel() string {
	if x != nil && x.ClassLabel != nil {
		return *x.ClassLabel
	}
	return ""
}

func (x *GlobalExplanation) GetExplanations() []*Explanation {
	if x != nil {
		return x.Explanations
	}
	return nil
}

type GoogleSheetsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range           *string `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	SkipLeadingRows *int64  `protobuf:"varint,2,opt,name=skip_leading_rows,json=skipLeadingRows" json:"skip_leading_rows,omitempty"`
}

func (x *GoogleSheetsOptions) Reset() {
	*x = GoogleSheetsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleSheetsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleSheetsOptions) ProtoMessage() {}

func (x *GoogleSheetsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleSheetsOptions.ProtoReflect.Descriptor instead.
func (*GoogleSheetsOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{73}
}

func (x *GoogleSheetsOptions) GetRange() string {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return ""
}

func (x *GoogleSheetsOptions) GetSkipLeadingRows() int64 {
	if x != nil && x.SkipLeadingRows != nil {
		return *x.SkipLeadingRows
	}
	return 0
}

type HighCardinalityJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftRows   *int64 `protobuf:"varint,1,opt,name=left_rows,json=leftRows" json:"left_rows,omitempty"`
	OutputRows *int64 `protobuf:"varint,2,opt,name=output_rows,json=outputRows" json:"output_rows,omitempty"`
	RightRows  *int64 `protobuf:"varint,3,opt,name=right_rows,json=rightRows" json:"right_rows,omitempty"`
	StepIndex  *int32 `protobuf:"varint,4,opt,name=step_index,json=stepIndex" json:"step_index,omitempty"`
}

func (x *HighCardinalityJoin) Reset() {
	*x = HighCardinalityJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighCardinalityJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighCardinalityJoin) ProtoMessage() {}

func (x *HighCardinalityJoin) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighCardinalityJoin.ProtoReflect.Descriptor instead.
func (*HighCardinalityJoin) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{74}
}

func (x *HighCardinalityJoin) GetLeftRows() int64 {
	if x != nil && x.LeftRows != nil {
		return *x.LeftRows
	}
	return 0
}

func (x *HighCardinalityJoin) GetOutputRows() int64 {
	if x != nil && x.OutputRows != nil {
		return *x.OutputRows
	}
	return 0
}

func (x *HighCardinalityJoin) GetRightRows() int64 {
	if x != nil && x.RightRows != nil {
		return *x.RightRows
	}
	return 0
}

func (x *HighCardinalityJoin) GetStepIndex() int32 {
	if x != nil && x.StepIndex != nil {
		return *x.StepIndex
	}
	return 0
}

type HivePartitioningOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields                 []string `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Mode                   *string  `protobuf:"bytes,2,opt,name=mode" json:"mode,omitempty"`
	RequirePartitionFilter *bool    `protobuf:"varint,3,opt,name=require_partition_filter,json=requirePartitionFilter" json:"require_partition_filter,omitempty"`
	SourceUriPrefix        *string  `protobuf:"bytes,4,opt,name=source_uri_prefix,json=sourceUriPrefix" json:"source_uri_prefix,omitempty"`
}

func (x *HivePartitioningOptions) Reset() {
	*x = HivePartitioningOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HivePartitioningOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HivePartitioningOptions) ProtoMessage() {}

func (x *HivePartitioningOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HivePartitioningOptions.ProtoReflect.Descriptor instead.
func (*HivePartitioningOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{75}
}

func (x *HivePartitioningOptions) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *HivePartitioningOptions) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

func (x *HivePartitioningOptions) GetRequirePartitionFilter() bool {
	if x != nil && x.RequirePartitionFilter != nil {
		return *x.RequirePartitionFilter
	}
	return false
}

func (x *HivePartitioningOptions) GetSourceUriPrefix() string {
	if x != nil && x.SourceUriPrefix != nil {
		return *x.SourceUriPrefix
	}
	return ""
}

type HparamSearchSpaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationFn       *StringHparamSearchSpace   `protobuf:"bytes,1,opt,name=activation_fn,json=activationFn" json:"activation_fn,omitempty"`
	BatchSize          *IntHparamSearchSpace      `protobuf:"bytes,2,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	BoosterType        *StringHparamSearchSpace   `protobuf:"bytes,3,opt,name=booster_type,json=boosterType" json:"booster_type,omitempty"`
	ColsampleBylevel   *DoubleHparamSearchSpace   `protobuf:"bytes,4,opt,name=colsample_bylevel,json=colsampleBylevel" json:"colsample_bylevel,omitempty"`
	ColsampleBynode    *DoubleHparamSearchSpace   `protobuf:"bytes,5,opt,name=colsample_bynode,json=colsampleBynode" json:"colsample_bynode,omitempty"`
	ColsampleBytree    *DoubleHparamSearchSpace   `protobuf:"bytes,6,opt,name=colsample_bytree,json=colsampleBytree" json:"colsample_bytree,omitempty"`
	DartNormalizeType  *StringHparamSearchSpace   `protobuf:"bytes,7,opt,name=dart_normalize_type,json=dartNormalizeType" json:"dart_normalize_type,omitempty"`
	Dropout            *DoubleHparamSearchSpace   `protobuf:"bytes,8,opt,name=dropout" json:"dropout,omitempty"`
	HiddenUnits        *IntArrayHparamSearchSpace `protobuf:"bytes,9,opt,name=hidden_units,json=hiddenUnits" json:"hidden_units,omitempty"`
	L1Reg              *DoubleHparamSearchSpace   `protobuf:"bytes,10,opt,name=l1_reg,json=l1Reg" json:"l1_reg,omitempty"`
	L2Reg              *DoubleHparamSearchSpace   `protobuf:"bytes,11,opt,name=l2_reg,json=l2Reg" json:"l2_reg,omitempty"`
	LearnRate          *DoubleHparamSearchSpace   `protobuf:"bytes,12,opt,name=learn_rate,json=learnRate" json:"learn_rate,omitempty"`
	MaxTreeDepth       *IntHparamSearchSpace      `protobuf:"bytes,13,opt,name=max_tree_depth,json=maxTreeDepth" json:"max_tree_depth,omitempty"`
	MinSplitLoss       *DoubleHparamSearchSpace   `protobuf:"bytes,14,opt,name=min_split_loss,json=minSplitLoss" json:"min_split_loss,omitempty"`
	MinTreeChildWeight *IntHparamSearchSpace      `protobuf:"bytes,15,opt,name=min_tree_child_weight,json=minTreeChildWeight" json:"min_tree_child_weight,omitempty"`
	NumClusters        *IntHparamSearchSpace      `protobuf:"bytes,16,opt,name=num_clusters,json=numClusters" json:"num_clusters,omitempty"`
	NumFactors         *IntHparamSearchSpace      `protobuf:"bytes,17,opt,name=num_factors,json=numFactors" json:"num_factors,omitempty"`
	NumParallelTree    *IntHparamSearchSpace      `protobuf:"bytes,18,opt,name=num_parallel_tree,json=numParallelTree" json:"num_parallel_tree,omitempty"`
	Optimizer          *StringHparamSearchSpace   `protobuf:"bytes,19,opt,name=optimizer" json:"optimizer,omitempty"`
	Subsample          *DoubleHparamSearchSpace   `protobuf:"bytes,20,opt,name=subsample" json:"subsample,omitempty"`
	TreeMethod         *StringHparamSearchSpace   `protobuf:"bytes,21,opt,name=tree_method,json=treeMethod" json:"tree_method,omitempty"`
	WalsAlpha          *DoubleHparamSearchSpace   `protobuf:"bytes,22,opt,name=wals_alpha,json=walsAlpha" json:"wals_alpha,omitempty"`
}

func (x *HparamSearchSpaces) Reset() {
	*x = HparamSearchSpaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HparamSearchSpaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HparamSearchSpaces) ProtoMessage() {}

func (x *HparamSearchSpaces) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HparamSearchSpaces.ProtoReflect.Descriptor instead.
func (*HparamSearchSpaces) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{76}
}

func (x *HparamSearchSpaces) GetActivationFn() *StringHparamSearchSpace {
	if x != nil {
		return x.ActivationFn
	}
	return nil
}

func (x *HparamSearchSpaces) GetBatchSize() *IntHparamSearchSpace {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *HparamSearchSpaces) GetBoosterType() *StringHparamSearchSpace {
	if x != nil {
		return x.BoosterType
	}
	return nil
}

func (x *HparamSearchSpaces) GetColsampleBylevel() *DoubleHparamSearchSpace {
	if x != nil {
		return x.ColsampleBylevel
	}
	return nil
}

func (x *HparamSearchSpaces) GetColsampleBynode() *DoubleHparamSearchSpace {
	if x != nil {
		return x.ColsampleBynode
	}
	return nil
}

func (x *HparamSearchSpaces) GetColsampleBytree() *DoubleHparamSearchSpace {
	if x != nil {
		return x.ColsampleBytree
	}
	return nil
}

func (x *HparamSearchSpaces) GetDartNormalizeType() *StringHparamSearchSpace {
	if x != nil {
		return x.DartNormalizeType
	}
	return nil
}

func (x *HparamSearchSpaces) GetDropout() *DoubleHparamSearchSpace {
	if x != nil {
		return x.Dropout
	}
	return nil
}

func (x *HparamSearchSpaces) GetHiddenUnits() *IntArrayHparamSearchSpace {
	if x != nil {
		return x.HiddenUnits
	}
	return nil
}

func (x *HparamSearchSpaces) GetL1Reg() *DoubleHparamSearchSpace {
	if x != nil {
		return x.L1Reg
	}
	return nil
}

func (x *HparamSearchSpaces) GetL2Reg() *DoubleHparamSearchSpace {
	if x != nil {
		return x.L2Reg
	}
	return nil
}

func (x *HparamSearchSpaces) GetLearnRate() *DoubleHparamSearchSpace {
	if x != nil {
		return x.LearnRate
	}
	return nil
}

func (x *HparamSearchSpaces) GetMaxTreeDepth() *IntHparamSearchSpace {
	if x != nil {
		return x.MaxTreeDepth
	}
	return nil
}

func (x *HparamSearchSpaces) GetMinSplitLoss() *DoubleHparamSearchSpace {
	if x != nil {
		return x.MinSplitLoss
	}
	return nil
}

func (x *HparamSearchSpaces) GetMinTreeChildWeight() *IntHparamSearchSpace {
	if x != nil {
		return x.MinTreeChildWeight
	}
	return nil
}

func (x *HparamSearchSpaces) GetNumClusters() *IntHparamSearchSpace {
	if x != nil {
		return x.NumClusters
	}
	return nil
}

func (x *HparamSearchSpaces) GetNumFactors() *IntHparamSearchSpace {
	if x != nil {
		return x.NumFactors
	}
	return nil
}

func (x *HparamSearchSpaces) GetNumParallelTree() *IntHparamSearchSpace {
	if x != nil {
		return x.NumParallelTree
	}
	return nil
}

func (x *HparamSearchSpaces) GetOptimizer() *StringHparamSearchSpace {
	if x != nil {
		return x.Optimizer
	}
	return nil
}

func (x *HparamSearchSpaces) GetSubsample() *DoubleHparamSearchSpace {
	if x != nil {
		return x.Subsample
	}
	return nil
}

func (x *HparamSearchSpaces) GetTreeMethod() *StringHparamSearchSpace {
	if x != nil {
		return x.TreeMethod
	}
	return nil
}

func (x *HparamSearchSpaces) GetWalsAlpha() *DoubleHparamSearchSpace {
	if x != nil {
		return x.WalsAlpha
	}
	return nil
}

type HparamTuningTrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTimeMs                     *int64             `protobuf:"varint,1,opt,name=end_time_ms,json=endTimeMs" json:"end_time_ms,omitempty"`
	ErrorMessage                  *string            `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	EvalLoss                      *float64           `protobuf:"fixed64,3,opt,name=eval_loss,json=evalLoss" json:"eval_loss,omitempty"`
	EvaluationMetrics             *EvaluationMetrics `protobuf:"bytes,4,opt,name=evaluation_metrics,json=evaluationMetrics" json:"evaluation_metrics,omitempty"`
	HparamTuningEvaluationMetrics *EvaluationMetrics `protobuf:"bytes,5,opt,name=hparam_tuning_evaluation_metrics,json=hparamTuningEvaluationMetrics" json:"hparam_tuning_evaluation_metrics,omitempty"`
	Hparams                       *TrainingOptions   `protobuf:"bytes,6,opt,name=hparams" json:"hparams,omitempty"`
	StartTimeMs                   *int64             `protobuf:"varint,7,opt,name=start_time_ms,json=startTimeMs" json:"start_time_ms,omitempty"`
	Status                        *string            `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	TrainingLoss                  *float64           `protobuf:"fixed64,9,opt,name=training_loss,json=trainingLoss" json:"training_loss,omitempty"`
	TrialId                       *int64             `protobuf:"varint,10,opt,name=trial_id,json=trialId" json:"trial_id,omitempty"`
}

func (x *HparamTuningTrial) Reset() {
	*x = HparamTuningTrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HparamTuningTrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HparamTuningTrial) ProtoMessage() {}

func (x *HparamTuningTrial) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HparamTuningTrial.ProtoReflect.Descriptor instead.
func (*HparamTuningTrial) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{77}
}

func (x *HparamTuningTrial) GetEndTimeMs() int64 {
	if x != nil && x.EndTimeMs != nil {
		return *x.EndTimeMs
	}
	return 0
}

func (x *HparamTuningTrial) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *HparamTuningTrial) GetEvalLoss() float64 {
	if x != nil && x.EvalLoss != nil {
		return *x.EvalLoss
	}
	return 0
}

func (x *HparamTuningTrial) GetEvaluationMetrics() *EvaluationMetrics {
	if x != nil {
		return x.EvaluationMetrics
	}
	return nil
}

func (x *HparamTuningTrial) GetHparamTuningEvaluationMetrics() *EvaluationMetrics {
	if x != nil {
		return x.HparamTuningEvaluationMetrics
	}
	return nil
}

func (x *HparamTuningTrial) GetHparams() *TrainingOptions {
	if x != nil {
		return x.Hparams
	}
	return nil
}

func (x *HparamTuningTrial) GetStartTimeMs() int64 {
	if x != nil && x.StartTimeMs != nil {
		return *x.StartTimeMs
	}
	return 0
}

func (x *HparamTuningTrial) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *HparamTuningTrial) GetTrainingLoss() float64 {
	if x != nil && x.TrainingLoss != nil {
		return *x.TrainingLoss
	}
	return 0
}

func (x *HparamTuningTrial) GetTrialId() int64 {
	if x != nil && x.TrialId != nil {
		return *x.TrialId
	}
	return 0
}

type IndexUnusedReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseTable *TableReference `protobuf:"bytes,1,opt,name=base_table,json=baseTable" json:"base_table,omitempty"`
	Code      *string         `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	IndexName *string         `protobuf:"bytes,3,opt,name=index_name,json=indexName" json:"index_name,omitempty"`
	Message   *string         `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (x *IndexUnusedReason) Reset() {
	*x = IndexUnusedReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexUnusedReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexUnusedReason) ProtoMessage() {}

func (x *IndexUnusedReason) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexUnusedReason.ProtoReflect.Descriptor instead.
func (*IndexUnusedReason) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{78}
}

func (x *IndexUnusedReason) GetBaseTable() *TableReference {
	if x != nil {
		return x.BaseTable
	}
	return nil
}

func (x *IndexUnusedReason) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *IndexUnusedReason) GetIndexName() string {
	if x != nil && x.IndexName != nil {
		return *x.IndexName
	}
	return ""
}

func (x *IndexUnusedReason) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type InputDataChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordsReadDiffPercentage *float32 `protobuf:"fixed32,1,opt,name=records_read_diff_percentage,json=recordsReadDiffPercentage" json:"records_read_diff_percentage,omitempty"`
}

func (x *InputDataChange) Reset() {
	*x = InputDataChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDataChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDataChange) ProtoMessage() {}

func (x *InputDataChange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDataChange.ProtoReflect.Descriptor instead.
func (*InputDataChange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{79}
}

func (x *InputDataChange) GetRecordsReadDiffPercentage() float32 {
	if x != nil && x.RecordsReadDiffPercentage != nil {
		return *x.RecordsReadDiffPercentage
	}
	return 0
}

type IntArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []int64 `protobuf:"varint,1,rep,name=elements" json:"elements,omitempty"`
}

func (x *IntArray) Reset() {
	*x = IntArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArray) ProtoMessage() {}

func (x *IntArray) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArray.ProtoReflect.Descriptor instead.
func (*IntArray) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{80}
}

func (x *IntArray) GetElements() []int64 {
	if x != nil {
		return x.Elements
	}
	return nil
}

type IntArrayHparamSearchSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates []*IntArray `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (x *IntArrayHparamSearchSpace) Reset() {
	*x = IntArrayHparamSearchSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntArrayHparamSearchSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArrayHparamSearchSpace) ProtoMessage() {}

func (x *IntArrayHparamSearchSpace) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArrayHparamSearchSpace.ProtoReflect.Descriptor instead.
func (*IntArrayHparamSearchSpace) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{81}
}

func (x *IntArrayHparamSearchSpace) GetCandidates() []*IntArray {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type IntCandidates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates []int64 `protobuf:"varint,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (x *IntCandidates) Reset() {
	*x = IntCandidates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntCandidates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntCandidates) ProtoMessage() {}

func (x *IntCandidates) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntCandidates.ProtoReflect.Descriptor instead.
func (*IntCandidates) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{82}
}

func (x *IntCandidates) GetCandidates() []int64 {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type IntHparamSearchSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates *IntCandidates `protobuf:"bytes,1,opt,name=candidates" json:"candidates,omitempty"`
	Range      *IntRange      `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (x *IntHparamSearchSpace) Reset() {
	*x = IntHparamSearchSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntHparamSearchSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntHparamSearchSpace) ProtoMessage() {}

func (x *IntHparamSearchSpace) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntHparamSearchSpace.ProtoReflect.Descriptor instead.
func (*IntHparamSearchSpace) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{83}
}

func (x *IntHparamSearchSpace) GetCandidates() *IntCandidates {
	if x != nil {
		return x.Candidates
	}
	return nil
}

func (x *IntHparamSearchSpace) GetRange() *IntRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type IntRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Max *int64 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Min *int64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
}

func (x *IntRange) Reset() {
	*x = IntRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntRange) ProtoMessage() {}

func (x *IntRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntRange.ProtoReflect.Descriptor instead.
func (*IntRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{84}
}

func (x *IntRange) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *IntRange) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

type IterationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArimaResult             *ArimaResult              `protobuf:"bytes,1,opt,name=arima_result,json=arimaResult" json:"arima_result,omitempty"`
	ClusterInfos            []*ClusterInfo            `protobuf:"bytes,2,rep,name=cluster_infos,json=clusterInfos" json:"cluster_infos,omitempty"`
	DurationMs              *int64                    `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	EvalLoss                *float64                  `protobuf:"fixed64,4,opt,name=eval_loss,json=evalLoss" json:"eval_loss,omitempty"`
	Index                   *int32                    `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	LearnRate               *float64                  `protobuf:"fixed64,6,opt,name=learn_rate,json=learnRate" json:"learn_rate,omitempty"`
	PrincipalComponentInfos []*PrincipalComponentInfo `protobuf:"bytes,7,rep,name=principal_component_infos,json=principalComponentInfos" json:"principal_component_infos,omitempty"`
	TrainingLoss            *float64                  `protobuf:"fixed64,8,opt,name=training_loss,json=trainingLoss" json:"training_loss,omitempty"`
}

func (x *IterationResult) Reset() {
	*x = IterationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IterationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IterationResult) ProtoMessage() {}

func (x *IterationResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IterationResult.ProtoReflect.Descriptor instead.
func (*IterationResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{85}
}

func (x *IterationResult) GetArimaResult() *ArimaResult {
	if x != nil {
		return x.ArimaResult
	}
	return nil
}

func (x *IterationResult) GetClusterInfos() []*ClusterInfo {
	if x != nil {
		return x.ClusterInfos
	}
	return nil
}

func (x *IterationResult) GetDurationMs() int64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *IterationResult) GetEvalLoss() float64 {
	if x != nil && x.EvalLoss != nil {
		return *x.EvalLoss
	}
	return 0
}

func (x *IterationResult) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *IterationResult) GetLearnRate() float64 {
	if x != nil && x.LearnRate != nil {
		return *x.LearnRate
	}
	return 0
}

func (x *IterationResult) GetPrincipalComponentInfos() []*PrincipalComponentInfo {
	if x != nil {
		return x.PrincipalComponentInfos
	}
	return nil
}

func (x *IterationResult) GetTrainingLoss() float64 {
	if x != nil && x.TrainingLoss != nil {
		return *x.TrainingLoss
	}
	return 0
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration     *JobConfiguration  `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
	Etag              *string            `protobuf:"bytes,2,opt,name=etag" json:"etag,omitempty"`
	Id                *string            `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	JobCreationReason *JobCreationReason `protobuf:"bytes,4,opt,name=job_creation_reason,json=jobCreationReason" json:"job_creation_reason,omitempty"`
	JobReference      *JobReference      `protobuf:"bytes,5,opt,name=job_reference,json=jobReference" json:"job_reference,omitempty"`
	Kind              *string            `protobuf:"bytes,6,opt,name=kind" json:"kind,omitempty"`
	PrincipalSubject  *string            `protobuf:"bytes,7,opt,name=principal_subject" json:"principal_subject,omitempty"`
	SelfLink          *string            `protobuf:"bytes,8,opt,name=self_link,json=selfLink" json:"self_link,omitempty"`
	Statistics        *JobStatistics     `protobuf:"bytes,9,opt,name=statistics" json:"statistics,omitempty"`
	Status            *JobStatus         `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	UserEmail         *string            `protobuf:"bytes,11,opt,name=user_email" json:"user_email,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{86}
}

func (x *Job) GetConfiguration() *JobConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Job) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *Job) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Job) GetJobCreationReason() *JobCreationReason {
	if x != nil {
		return x.JobCreationReason
	}
	return nil
}

func (x *Job) GetJobReference() *JobReference {
	if x != nil {
		return x.JobReference
	}
	return nil
}

func (x *Job) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Job) GetPrincipalSubject() string {
	if x != nil && x.PrincipalSubject != nil {
		return *x.PrincipalSubject
	}
	return ""
}

func (x *Job) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *Job) GetStatistics() *JobStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Job) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Job) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

type JobCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job  *Job    `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *JobCancelResponse) Reset() {
	*x = JobCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCancelResponse) ProtoMessage() {}

func (x *JobCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCancelResponse.ProtoReflect.Descriptor instead.
func (*JobCancelResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{87}
}

func (x *JobCancelResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobCancelResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type JobConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Copy         *JobConfigurationTableCopy `protobuf:"bytes,1,opt,name=copy" json:"copy,omitempty"`
	DryRun       *bool                      `protobuf:"varint,2,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	Extract      *JobConfigurationExtract   `protobuf:"bytes,3,opt,name=extract" json:"extract,omitempty"`
	JobTimeoutMs *int64                     `protobuf:"varint,4,opt,name=job_timeout_ms,json=jobTimeoutMs" json:"job_timeout_ms,omitempty"`
	JobType      *string                    `protobuf:"bytes,5,opt,name=job_type,json=jobType" json:"job_type,omitempty"`
	Labels       map[string]string          `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Load         *JobConfigurationLoad      `protobuf:"bytes,7,opt,name=load" json:"load,omitempty"`
	Query        *JobConfigurationQuery     `protobuf:"bytes,8,opt,name=query" json:"query,omitempty"`
}

func (x *JobConfiguration) Reset() {
	*x = JobConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfiguration) ProtoMessage() {}

func (x *JobConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfiguration.ProtoReflect.Descriptor instead.
func (*JobConfiguration) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{88}
}

func (x *JobConfiguration) GetCopy() *JobConfigurationTableCopy {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *JobConfiguration) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *JobConfiguration) GetExtract() *JobConfigurationExtract {
	if x != nil {
		return x.Extract
	}
	return nil
}

func (x *JobConfiguration) GetJobTimeoutMs() int64 {
	if x != nil && x.JobTimeoutMs != nil {
		return *x.JobTimeoutMs
	}
	return 0
}

func (x *JobConfiguration) GetJobType() string {
	if x != nil && x.JobType != nil {
		return *x.JobType
	}
	return ""
}

func (x *JobConfiguration) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *JobConfiguration) GetLoad() *JobConfigurationLoad {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *JobConfiguration) GetQuery() *JobConfigurationQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type JobConfigurationExtract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compression         *string              `protobuf:"bytes,1,opt,name=compression" json:"compression,omitempty"`
	DestinationFormat   *string              `protobuf:"bytes,2,opt,name=destination_format,json=destinationFormat" json:"destination_format,omitempty"`
	DestinationUri      *string              `protobuf:"bytes,3,opt,name=destination_uri,json=destinationUri" json:"destination_uri,omitempty"`
	DestinationUris     []string             `protobuf:"bytes,4,rep,name=destination_uris,json=destinationUris" json:"destination_uris,omitempty"`
	FieldDelimiter      *string              `protobuf:"bytes,5,opt,name=field_delimiter,json=fieldDelimiter" json:"field_delimiter,omitempty"`
	ModelExtractOptions *ModelExtractOptions `protobuf:"bytes,6,opt,name=model_extract_options,json=modelExtractOptions" json:"model_extract_options,omitempty"`
	PrintHeader         *bool                `protobuf:"varint,7,opt,name=print_header,json=printHeader" json:"print_header,omitempty"`
	SourceModel         *ModelReference      `protobuf:"bytes,8,opt,name=source_model,json=sourceModel" json:"source_model,omitempty"`
	SourceTable         *TableReference      `protobuf:"bytes,9,opt,name=source_table,json=sourceTable" json:"source_table,omitempty"`
	UseAvroLogicalTypes *bool                `protobuf:"varint,10,opt,name=use_avro_logical_types,json=useAvroLogicalTypes" json:"use_avro_logical_types,omitempty"`
}

func (x *JobConfigurationExtract) Reset() {
	*x = JobConfigurationExtract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfigurationExtract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationExtract) ProtoMessage() {}

func (x *JobConfigurationExtract) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationExtract.ProtoReflect.Descriptor instead.
func (*JobConfigurationExtract) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{89}
}

func (x *JobConfigurationExtract) GetCompression() string {
	if x != nil && x.Compression != nil {
		return *x.Compression
	}
	return ""
}

func (x *JobConfigurationExtract) GetDestinationFormat() string {
	if x != nil && x.DestinationFormat != nil {
		return *x.DestinationFormat
	}
	return ""
}

func (x *JobConfigurationExtract) GetDestinationUri() string {
	if x != nil && x.DestinationUri != nil {
		return *x.DestinationUri
	}
	return ""
}

func (x *JobConfigurationExtract) GetDestinationUris() []string {
	if x != nil {
		return x.DestinationUris
	}
	return nil
}

func (x *JobConfigurationExtract) GetFieldDelimiter() string {
	if x != nil && x.FieldDelimiter != nil {
		return *x.FieldDelimiter
	}
	return ""
}

func (x *JobConfigurationExtract) GetModelExtractOptions() *ModelExtractOptions {
	if x != nil {
		return x.ModelExtractOptions
	}
	return nil
}

func (x *JobConfigurationExtract) GetPrintHeader() bool {
	if x != nil && x.PrintHeader != nil {
		return *x.PrintHeader
	}
	return false
}

func (x *JobConfigurationExtract) GetSourceModel() *ModelReference {
	if x != nil {
		return x.SourceModel
	}
	return nil
}

func (x *JobConfigurationExtract) GetSourceTable() *TableReference {
	if x != nil {
		return x.SourceTable
	}
	return nil
}

func (x *JobConfigurationExtract) GetUseAvroLogicalTypes() bool {
	if x != nil && x.UseAvroLogicalTypes != nil {
		return *x.UseAvroLogicalTypes
	}
	return false
}

type JobConfigurationLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowJaggedRows                    *bool                       `protobuf:"varint,1,opt,name=allow_jagged_rows,json=allowJaggedRows" json:"allow_jagged_rows,omitempty"`
	AllowQuotedNewlines                *bool                       `protobuf:"varint,2,opt,name=allow_quoted_newlines,json=allowQuotedNewlines" json:"allow_quoted_newlines,omitempty"`
	Autodetect                         *bool                       `protobuf:"varint,3,opt,name=autodetect" json:"autodetect,omitempty"`
	Clustering                         *Clustering                 `protobuf:"bytes,4,opt,name=clustering" json:"clustering,omitempty"`
	ConnectionProperties               []*ConnectionProperty       `protobuf:"bytes,5,rep,name=connection_properties,json=connectionProperties" json:"connection_properties,omitempty"`
	CopyFilesOnly                      *bool                       `protobuf:"varint,6,opt,name=copy_files_only,json=copyFilesOnly" json:"copy_files_only,omitempty"`
	CreateDisposition                  *string                     `protobuf:"bytes,7,opt,name=create_disposition,json=createDisposition" json:"create_disposition,omitempty"`
	CreateSession                      *bool                       `protobuf:"varint,8,opt,name=create_session,json=createSession" json:"create_session,omitempty"`
	DecimalTargetTypes                 []string                    `protobuf:"bytes,9,rep,name=decimal_target_types,json=decimalTargetTypes" json:"decimal_target_types,omitempty"`
	DestinationEncryptionConfiguration *EncryptionConfiguration    `protobuf:"bytes,10,opt,name=destination_encryption_configuration,json=destinationEncryptionConfiguration" json:"destination_encryption_configuration,omitempty"`
	DestinationTable                   *TableReference             `protobuf:"bytes,11,opt,name=destination_table,json=destinationTable" json:"destination_table,omitempty"`
	DestinationTableProperties         *DestinationTableProperties `protobuf:"bytes,12,opt,name=destination_table_properties,json=destinationTableProperties" json:"destination_table_properties,omitempty"`
	Encoding                           *string                     `protobuf:"bytes,13,opt,name=encoding" json:"encoding,omitempty"`
	FieldDelimiter                     *string                     `protobuf:"bytes,14,opt,name=field_delimiter,json=fieldDelimiter" json:"field_delimiter,omitempty"`
	FileSetSpecType                    *string                     `protobuf:"bytes,15,opt,name=file_set_spec_type,json=fileSetSpecType" json:"file_set_spec_type,omitempty"`
	HivePartitioningOptions            *HivePartitioningOptions    `protobuf:"bytes,16,opt,name=hive_partitioning_options,json=hivePartitioningOptions" json:"hive_partitioning_options,omitempty"`
	IgnoreUnknownValues                *bool                       `protobuf:"varint,17,opt,name=ignore_unknown_values,json=ignoreUnknownValues" json:"ignore_unknown_values,omitempty"`
	JsonExtension                      *string                     `protobuf:"bytes,18,opt,name=json_extension,json=jsonExtension" json:"json_extension,omitempty"`
	MaxBadRecords                      *int32                      `protobuf:"varint,19,opt,name=max_bad_records,json=maxBadRecords" json:"max_bad_records,omitempty"`
	NullMarker                         *string                     `protobuf:"bytes,20,opt,name=null_marker,json=nullMarker" json:"null_marker,omitempty"`
	ParquetOptions                     *ParquetOptions             `protobuf:"bytes,21,opt,name=parquet_options,json=parquetOptions" json:"parquet_options,omitempty"`
	PreserveAsciiControlCharacters     *bool                       `protobuf:"varint,22,opt,name=preserve_ascii_control_characters,json=preserveAsciiControlCharacters" json:"preserve_ascii_control_characters,omitempty"`
	ProjectionFields                   []string                    `protobuf:"bytes,23,rep,name=projection_fields,json=projectionFields" json:"projection_fields,omitempty"`
	Quote                              *string                     `protobuf:"bytes,24,opt,name=quote" json:"quote,omitempty"`
	RangePartitioning                  *RangePartitioning          `protobuf:"bytes,25,opt,name=range_partitioning,json=rangePartitioning" json:"range_partitioning,omitempty"`
	ReferenceFileSchemaUri             *string                     `protobuf:"bytes,26,opt,name=reference_file_schema_uri,json=referenceFileSchemaUri" json:"reference_file_schema_uri,omitempty"`
	Schema                             *TableSchema                `protobuf:"bytes,27,opt,name=schema" json:"schema,omitempty"`
	SchemaInline                       *string                     `protobuf:"bytes,28,opt,name=schema_inline,json=schemaInline" json:"schema_inline,omitempty"`
	SchemaInlineFormat                 *string                     `protobuf:"bytes,29,opt,name=schema_inline_format,json=schemaInlineFormat" json:"schema_inline_format,omitempty"`
	SchemaUpdateOptions                []string                    `protobuf:"bytes,30,rep,name=schema_update_options,json=schemaUpdateOptions" json:"schema_update_options,omitempty"`
	SkipLeadingRows                    *int32                      `protobuf:"varint,31,opt,name=skip_leading_rows,json=skipLeadingRows" json:"skip_leading_rows,omitempty"`
	SourceFormat                       *string                     `protobuf:"bytes,32,opt,name=source_format,json=sourceFormat" json:"source_format,omitempty"`
	SourceUris                         []string                    `protobuf:"bytes,33,rep,name=source_uris,json=sourceUris" json:"source_uris,omitempty"`
	TimePartitioning                   *TimePartitioning           `protobuf:"bytes,34,opt,name=time_partitioning,json=timePartitioning" json:"time_partitioning,omitempty"`
	UseAvroLogicalTypes                *bool                       `protobuf:"varint,35,opt,name=use_avro_logical_types,json=useAvroLogicalTypes" json:"use_avro_logical_types,omitempty"`
	WriteDisposition                   *string                     `protobuf:"bytes,36,opt,name=write_disposition,json=writeDisposition" json:"write_disposition,omitempty"`
}

func (x *JobConfigurationLoad) Reset() {
	*x = JobConfigurationLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfigurationLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationLoad) ProtoMessage() {}

func (x *JobConfigurationLoad) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationLoad.ProtoReflect.Descriptor instead.
func (*JobConfigurationLoad) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{90}
}

func (x *JobConfigurationLoad) GetAllowJaggedRows() bool {
	if x != nil && x.AllowJaggedRows != nil {
		return *x.AllowJaggedRows
	}
	return false
}

func (x *JobConfigurationLoad) GetAllowQuotedNewlines() bool {
	if x != nil && x.AllowQuotedNewlines != nil {
		return *x.AllowQuotedNewlines
	}
	return false
}

func (x *JobConfigurationLoad) GetAutodetect() bool {
	if x != nil && x.Autodetect != nil {
		return *x.Autodetect
	}
	return false
}

func (x *JobConfigurationLoad) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *JobConfigurationLoad) GetConnectionProperties() []*ConnectionProperty {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *JobConfigurationLoad) GetCopyFilesOnly() bool {
	if x != nil && x.CopyFilesOnly != nil {
		return *x.CopyFilesOnly
	}
	return false
}

func (x *JobConfigurationLoad) GetCreateDisposition() string {
	if x != nil && x.CreateDisposition != nil {
		return *x.CreateDisposition
	}
	return ""
}

func (x *JobConfigurationLoad) GetCreateSession() bool {
	if x != nil && x.CreateSession != nil {
		return *x.CreateSession
	}
	return false
}

func (x *JobConfigurationLoad) GetDecimalTargetTypes() []string {
	if x != nil {
		return x.DecimalTargetTypes
	}
	return nil
}

func (x *JobConfigurationLoad) GetDestinationEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DestinationEncryptionConfiguration
	}
	return nil
}

func (x *JobConfigurationLoad) GetDestinationTable() *TableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *JobConfigurationLoad) GetDestinationTableProperties() *DestinationTableProperties {
	if x != nil {
		return x.DestinationTableProperties
	}
	return nil
}

func (x *JobConfigurationLoad) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *JobConfigurationLoad) GetFieldDelimiter() string {
	if x != nil && x.FieldDelimiter != nil {
		return *x.FieldDelimiter
	}
	return ""
}

func (x *JobConfigurationLoad) GetFileSetSpecType() string {
	if x != nil && x.FileSetSpecType != nil {
		return *x.FileSetSpecType
	}
	return ""
}

func (x *JobConfigurationLoad) GetHivePartitioningOptions() *HivePartitioningOptions {
	if x != nil {
		return x.HivePartitioningOptions
	}
	return nil
}

func (x *JobConfigurationLoad) GetIgnoreUnknownValues() bool {
	if x != nil && x.IgnoreUnknownValues != nil {
		return *x.IgnoreUnknownValues
	}
	return false
}

func (x *JobConfigurationLoad) GetJsonExtension() string {
	if x != nil && x.JsonExtension != nil {
		return *x.JsonExtension
	}
	return ""
}

func (x *JobConfigurationLoad) GetMaxBadRecords() int32 {
	if x != nil && x.MaxBadRecords != nil {
		return *x.MaxBadRecords
	}
	return 0
}

func (x *JobConfigurationLoad) GetNullMarker() string {
	if x != nil && x.NullMarker != nil {
		return *x.NullMarker
	}
	return ""
}

func (x *JobConfigurationLoad) GetParquetOptions() *ParquetOptions {
	if x != nil {
		return x.ParquetOptions
	}
	return nil
}

func (x *JobConfigurationLoad) GetPreserveAsciiControlCharacters() bool {
	if x != nil && x.PreserveAsciiControlCharacters != nil {
		return *x.PreserveAsciiControlCharacters
	}
	return false
}

func (x *JobConfigurationLoad) GetProjectionFields() []string {
	if x != nil {
		return x.ProjectionFields
	}
	return nil
}

func (x *JobConfigurationLoad) GetQuote() string {
	if x != nil && x.Quote != nil {
		return *x.Quote
	}
	return ""
}

func (x *JobConfigurationLoad) GetRangePartitioning() *RangePartitioning {
	if x != nil {
		return x.RangePartitioning
	}
	return nil
}

func (x *JobConfigurationLoad) GetReferenceFileSchemaUri() string {
	if x != nil && x.ReferenceFileSchemaUri != nil {
		return *x.ReferenceFileSchemaUri
	}
	return ""
}

func (x *JobConfigurationLoad) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *JobConfigurationLoad) GetSchemaInline() string {
	if x != nil && x.SchemaInline != nil {
		return *x.SchemaInline
	}
	return ""
}

func (x *JobConfigurationLoad) GetSchemaInlineFormat() string {
	if x != nil && x.SchemaInlineFormat != nil {
		return *x.SchemaInlineFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetSchemaUpdateOptions() []string {
	if x != nil {
		return x.SchemaUpdateOptions
	}
	return nil
}

func (x *JobConfigurationLoad) GetSkipLeadingRows() int32 {
	if x != nil && x.SkipLeadingRows != nil {
		return *x.SkipLeadingRows
	}
	return 0
}

func (x *JobConfigurationLoad) GetSourceFormat() string {
	if x != nil && x.SourceFormat != nil {
		return *x.SourceFormat
	}
	return ""
}

func (x *JobConfigurationLoad) GetSourceUris() []string {
	if x != nil {
		return x.SourceUris
	}
	return nil
}

func (x *JobConfigurationLoad) GetTimePartitioning() *TimePartitioning {
	if x != nil {
		return x.TimePartitioning
	}
	return nil
}

func (x *JobConfigurationLoad) GetUseAvroLogicalTypes() bool {
	if x != nil && x.UseAvroLogicalTypes != nil {
		return *x.UseAvroLogicalTypes
	}
	return false
}

func (x *JobConfigurationLoad) GetWriteDisposition() string {
	if x != nil && x.WriteDisposition != nil {
		return *x.WriteDisposition
	}
	return ""
}

type JobConfigurationQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowLargeResults                  *bool                                 `protobuf:"varint,1,opt,name=allow_large_results,json=allowLargeResults" json:"allow_large_results,omitempty"`
	Clustering                         *Clustering                           `protobuf:"bytes,2,opt,name=clustering" json:"clustering,omitempty"`
	ConnectionProperties               []*ConnectionProperty                 `protobuf:"bytes,3,rep,name=connection_properties,json=connectionProperties" json:"connection_properties,omitempty"`
	Continuous                         *bool                                 `protobuf:"varint,4,opt,name=continuous" json:"continuous,omitempty"`
	CreateDisposition                  *string                               `protobuf:"bytes,5,opt,name=create_disposition,json=createDisposition" json:"create_disposition,omitempty"`
	CreateSession                      *bool                                 `protobuf:"varint,6,opt,name=create_session,json=createSession" json:"create_session,omitempty"`
	DefaultDataset                     *DatasetReference                     `protobuf:"bytes,7,opt,name=default_dataset,json=defaultDataset" json:"default_dataset,omitempty"`
	DestinationEncryptionConfiguration *EncryptionConfiguration              `protobuf:"bytes,8,opt,name=destination_encryption_configuration,json=destinationEncryptionConfiguration" json:"destination_encryption_configuration,omitempty"`
	DestinationTable                   *TableReference                       `protobuf:"bytes,9,opt,name=destination_table,json=destinationTable" json:"destination_table,omitempty"`
	FlattenResults                     *bool                                 `protobuf:"varint,10,opt,name=flatten_results,json=flattenResults" json:"flatten_results,omitempty"`
	MaximumBillingTier                 *int32                                `protobuf:"varint,11,opt,name=maximum_billing_tier,json=maximumBillingTier" json:"maximum_billing_tier,omitempty"`
	MaximumBytesBilled                 *int64                                `protobuf:"varint,12,opt,name=maximum_bytes_billed,json=maximumBytesBilled" json:"maximum_bytes_billed,omitempty"`
	ParameterMode                      *string                               `protobuf:"bytes,13,opt,name=parameter_mode,json=parameterMode" json:"parameter_mode,omitempty"`
	PreserveNulls                      *bool                                 `protobuf:"varint,14,opt,name=preserve_nulls,json=preserveNulls" json:"preserve_nulls,omitempty"`
	Priority                           *string                               `protobuf:"bytes,15,opt,name=priority" json:"priority,omitempty"`
	Query                              *string                               `protobuf:"bytes,16,opt,name=query" json:"query,omitempty"`
	QueryParameters                    []*QueryParameter                     `protobuf:"bytes,17,rep,name=query_parameters,json=queryParameters" json:"query_parameters,omitempty"`
	RangePartitioning                  *RangePartitioning                    `protobuf:"bytes,18,opt,name=range_partitioning,json=rangePartitioning" json:"range_partitioning,omitempty"`
	SchemaUpdateOptions                []string                              `protobuf:"bytes,19,rep,name=schema_update_options,json=schemaUpdateOptions" json:"schema_update_options,omitempty"`
	ScriptOptions                      *ScriptOptions                        `protobuf:"bytes,20,opt,name=script_options,json=scriptOptions" json:"script_options,omitempty"`
	SystemVariables                    *SystemVariables                      `protobuf:"bytes,21,opt,name=system_variables,json=systemVariables" json:"system_variables,omitempty"`
	TableDefinitions                   map[string]*ExternalDataConfiguration `protobuf:"bytes,22,rep,name=table_definitions,json=tableDefinitions" json:"table_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TimePartitioning                   *TimePartitioning                     `protobuf:"bytes,23,opt,name=time_partitioning,json=timePartitioning" json:"time_partitioning,omitempty"`
	UseLegacySql                       *bool                                 `protobuf:"varint,24,opt,name=use_legacy_sql,json=useLegacySql" json:"use_legacy_sql,omitempty"`
	UseQueryCache                      *bool                                 `protobuf:"varint,25,opt,name=use_query_cache,json=useQueryCache" json:"use_query_cache,omitempty"`
	UserDefinedFunctionResources       []*UserDefinedFunctionResource        `protobuf:"bytes,26,rep,name=user_defined_function_resources,json=userDefinedFunctionResources" json:"user_defined_function_resources,omitempty"`
	WriteDisposition                   *string                               `protobuf:"bytes,27,opt,name=write_disposition,json=writeDisposition" json:"write_disposition,omitempty"`
}

func (x *JobConfigurationQuery) Reset() {
	*x = JobConfigurationQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfigurationQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationQuery) ProtoMessage() {}

func (x *JobConfigurationQuery) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationQuery.ProtoReflect.Descriptor instead.
func (*JobConfigurationQuery) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{91}
}

func (x *JobConfigurationQuery) GetAllowLargeResults() bool {
	if x != nil && x.AllowLargeResults != nil {
		return *x.AllowLargeResults
	}
	return false
}

func (x *JobConfigurationQuery) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *JobConfigurationQuery) GetConnectionProperties() []*ConnectionProperty {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *JobConfigurationQuery) GetContinuous() bool {
	if x != nil && x.Continuous != nil {
		return *x.Continuous
	}
	return false
}

func (x *JobConfigurationQuery) GetCreateDisposition() string {
	if x != nil && x.CreateDisposition != nil {
		return *x.CreateDisposition
	}
	return ""
}

func (x *JobConfigurationQuery) GetCreateSession() bool {
	if x != nil && x.CreateSession != nil {
		return *x.CreateSession
	}
	return false
}

func (x *JobConfigurationQuery) GetDefaultDataset() *DatasetReference {
	if x != nil {
		return x.DefaultDataset
	}
	return nil
}

func (x *JobConfigurationQuery) GetDestinationEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DestinationEncryptionConfiguration
	}
	return nil
}

func (x *JobConfigurationQuery) GetDestinationTable() *TableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *JobConfigurationQuery) GetFlattenResults() bool {
	if x != nil && x.FlattenResults != nil {
		return *x.FlattenResults
	}
	return false
}

func (x *JobConfigurationQuery) GetMaximumBillingTier() int32 {
	if x != nil && x.MaximumBillingTier != nil {
		return *x.MaximumBillingTier
	}
	return 0
}

func (x *JobConfigurationQuery) GetMaximumBytesBilled() int64 {
	if x != nil && x.MaximumBytesBilled != nil {
		return *x.MaximumBytesBilled
	}
	return 0
}

func (x *JobConfigurationQuery) GetParameterMode() string {
	if x != nil && x.ParameterMode != nil {
		return *x.ParameterMode
	}
	return ""
}

func (x *JobConfigurationQuery) GetPreserveNulls() bool {
	if x != nil && x.PreserveNulls != nil {
		return *x.PreserveNulls
	}
	return false
}

func (x *JobConfigurationQuery) GetPriority() string {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return ""
}

func (x *JobConfigurationQuery) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *JobConfigurationQuery) GetQueryParameters() []*QueryParameter {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *JobConfigurationQuery) GetRangePartitioning() *RangePartitioning {
	if x != nil {
		return x.RangePartitioning
	}
	return nil
}

func (x *JobConfigurationQuery) GetSchemaUpdateOptions() []string {
	if x != nil {
		return x.SchemaUpdateOptions
	}
	return nil
}

func (x *JobConfigurationQuery) GetScriptOptions() *ScriptOptions {
	if x != nil {
		return x.ScriptOptions
	}
	return nil
}

func (x *JobConfigurationQuery) GetSystemVariables() *SystemVariables {
	if x != nil {
		return x.SystemVariables
	}
	return nil
}

func (x *JobConfigurationQuery) GetTableDefinitions() map[string]*ExternalDataConfiguration {
	if x != nil {
		return x.TableDefinitions
	}
	return nil
}

func (x *JobConfigurationQuery) GetTimePartitioning() *TimePartitioning {
	if x != nil {
		return x.TimePartitioning
	}
	return nil
}

func (x *JobConfigurationQuery) GetUseLegacySql() bool {
	if x != nil && x.UseLegacySql != nil {
		return *x.UseLegacySql
	}
	return false
}

func (x *JobConfigurationQuery) GetUseQueryCache() bool {
	if x != nil && x.UseQueryCache != nil {
		return *x.UseQueryCache
	}
	return false
}

func (x *JobConfigurationQuery) GetUserDefinedFunctionResources() []*UserDefinedFunctionResource {
	if x != nil {
		return x.UserDefinedFunctionResources
	}
	return nil
}

func (x *JobConfigurationQuery) GetWriteDisposition() string {
	if x != nil && x.WriteDisposition != nil {
		return *x.WriteDisposition
	}
	return ""
}

type JobConfigurationTableCopy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateDisposition                  *string                  `protobuf:"bytes,1,opt,name=create_disposition,json=createDisposition" json:"create_disposition,omitempty"`
	DestinationEncryptionConfiguration *EncryptionConfiguration `protobuf:"bytes,2,opt,name=destination_encryption_configuration,json=destinationEncryptionConfiguration" json:"destination_encryption_configuration,omitempty"`
	DestinationExpirationTime          *timestamp.Timestamp     `protobuf:"bytes,3,opt,name=destination_expiration_time,json=destinationExpirationTime" json:"destination_expiration_time,omitempty"`
	DestinationTable                   *TableReference          `protobuf:"bytes,4,opt,name=destination_table,json=destinationTable" json:"destination_table,omitempty"`
	OperationType                      *string                  `protobuf:"bytes,5,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	SourceTable                        *TableReference          `protobuf:"bytes,6,opt,name=source_table,json=sourceTable" json:"source_table,omitempty"`
	SourceTables                       []*TableReference        `protobuf:"bytes,7,rep,name=source_tables,json=sourceTables" json:"source_tables,omitempty"`
	WriteDisposition                   *string                  `protobuf:"bytes,8,opt,name=write_disposition,json=writeDisposition" json:"write_disposition,omitempty"`
}

func (x *JobConfigurationTableCopy) Reset() {
	*x = JobConfigurationTableCopy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfigurationTableCopy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfigurationTableCopy) ProtoMessage() {}

func (x *JobConfigurationTableCopy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfigurationTableCopy.ProtoReflect.Descriptor instead.
func (*JobConfigurationTableCopy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{92}
}

func (x *JobConfigurationTableCopy) GetCreateDisposition() string {
	if x != nil && x.CreateDisposition != nil {
		return *x.CreateDisposition
	}
	return ""
}

func (x *JobConfigurationTableCopy) GetDestinationEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.DestinationEncryptionConfiguration
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetDestinationExpirationTime() *timestamp.Timestamp {
	if x != nil {
		return x.DestinationExpirationTime
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetDestinationTable() *TableReference {
	if x != nil {
		return x.DestinationTable
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetOperationType() string {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return ""
}

func (x *JobConfigurationTableCopy) GetSourceTable() *TableReference {
	if x != nil {
		return x.SourceTable
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetSourceTables() []*TableReference {
	if x != nil {
		return x.SourceTables
	}
	return nil
}

func (x *JobConfigurationTableCopy) GetWriteDisposition() string {
	if x != nil && x.WriteDisposition != nil {
		return *x.WriteDisposition
	}
	return ""
}

type JobCreationReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (x *JobCreationReason) Reset() {
	*x = JobCreationReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCreationReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCreationReason) ProtoMessage() {}

func (x *JobCreationReason) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCreationReason.ProtoReflect.Descriptor instead.
func (*JobCreationReason) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{93}
}

func (x *JobCreationReason) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type JobListJobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration    *JobConfiguration `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
	ErrorResult      *ErrorProto       `protobuf:"bytes,2,opt,name=error_result,json=errorResult" json:"error_result,omitempty"`
	Id               *string           `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	JobReference     *JobReference     `protobuf:"bytes,4,opt,name=job_reference,json=jobReference" json:"job_reference,omitempty"`
	Kind             *string           `protobuf:"bytes,5,opt,name=kind" json:"kind,omitempty"`
	PrincipalSubject *string           `protobuf:"bytes,6,opt,name=principal_subject" json:"principal_subject,omitempty"`
	State            *string           `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	Statistics       *JobStatistics    `protobuf:"bytes,8,opt,name=statistics" json:"statistics,omitempty"`
	Status           *JobStatus        `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	UserEmail        *string           `protobuf:"bytes,10,opt,name=user_email" json:"user_email,omitempty"`
}

func (x *JobListJobs) Reset() {
	*x = JobListJobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobListJobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobListJobs) ProtoMessage() {}

func (x *JobListJobs) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobListJobs.ProtoReflect.Descriptor instead.
func (*JobListJobs) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{94}
}

func (x *JobListJobs) GetConfiguration() *JobConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *JobListJobs) GetErrorResult() *ErrorProto {
	if x != nil {
		return x.ErrorResult
	}
	return nil
}

func (x *JobListJobs) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *JobListJobs) GetJobReference() *JobReference {
	if x != nil {
		return x.JobReference
	}
	return nil
}

func (x *JobListJobs) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *JobListJobs) GetPrincipalSubject() string {
	if x != nil && x.PrincipalSubject != nil {
		return *x.PrincipalSubject
	}
	return ""
}

func (x *JobListJobs) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *JobListJobs) GetStatistics() *JobStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *JobListJobs) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *JobListJobs) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

type JobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag          *string        `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	Jobs          []*JobListJobs `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
	Kind          *string        `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	NextPageToken *string        `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	Unreachable   []string       `protobuf:"bytes,5,rep,name=unreachable" json:"unreachable,omitempty"`
}

func (x *JobList) Reset() {
	*x = JobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobList) ProtoMessage() {}

func (x *JobList) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobList.ProtoReflect.Descriptor instead.
func (*JobList) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{95}
}

func (x *JobList) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *JobList) GetJobs() []*JobListJobs {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *JobList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *JobList) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *JobList) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

type JobReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     *string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Location  *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *JobReference) Reset() {
	*x = JobReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReference) ProtoMessage() {}

func (x *JobReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReference.ProtoReflect.Descriptor instead.
func (*JobReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{96}
}

func (x *JobReference) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *JobReference) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *JobReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type JobStatisticsReservationUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SlotMs *int64  `protobuf:"varint,2,opt,name=slot_ms,json=slotMs" json:"slot_ms,omitempty"`
}

func (x *JobStatisticsReservationUsage) Reset() {
	*x = JobStatisticsReservationUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatisticsReservationUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatisticsReservationUsage) ProtoMessage() {}

func (x *JobStatisticsReservationUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatisticsReservationUsage.ProtoReflect.Descriptor instead.
func (*JobStatisticsReservationUsage) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{97}
}

func (x *JobStatisticsReservationUsage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *JobStatisticsReservationUsage) GetSlotMs() int64 {
	if x != nil && x.SlotMs != nil {
		return *x.SlotMs
	}
	return 0
}

type JobStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionRatio            *float64                         `protobuf:"fixed64,1,opt,name=completion_ratio,json=completionRatio" json:"completion_ratio,omitempty"`
	Copy                       *JobStatistics5                  `protobuf:"bytes,2,opt,name=copy" json:"copy,omitempty"`
	CreationTime               *int64                           `protobuf:"varint,3,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	DataMaskingStatistics      *DataMaskingStatistics           `protobuf:"bytes,4,opt,name=data_masking_statistics,json=dataMaskingStatistics" json:"data_masking_statistics,omitempty"`
	EndTime                    *int64                           `protobuf:"varint,5,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Extract                    *JobStatistics4                  `protobuf:"bytes,6,opt,name=extract" json:"extract,omitempty"`
	FinalExecutionDurationMs   *int64                           `protobuf:"varint,7,opt,name=final_execution_duration_ms,json=finalExecutionDurationMs" json:"final_execution_duration_ms,omitempty"`
	Load                       *JobStatistics3                  `protobuf:"bytes,8,opt,name=load" json:"load,omitempty"`
	NumChildJobs               *int64                           `protobuf:"varint,9,opt,name=num_child_jobs,json=numChildJobs" json:"num_child_jobs,omitempty"`
	ParentJobId                *string                          `protobuf:"bytes,10,opt,name=parent_job_id,json=parentJobId" json:"parent_job_id,omitempty"`
	Query                      *JobStatistics2                  `protobuf:"bytes,11,opt,name=query" json:"query,omitempty"`
	QuotaDeferments            []string                         `protobuf:"bytes,12,rep,name=quota_deferments,json=quotaDeferments" json:"quota_deferments,omitempty"`
	ReservationUsage           []*JobStatisticsReservationUsage `protobuf:"bytes,13,rep,name=reservation_usage,json=reservationUsage" json:"reservation_usage,omitempty"`
	ReservationId              *string                          `protobuf:"bytes,14,opt,name=reservation_id" json:"reservation_id,omitempty"`
	RowLevelSecurityStatistics *RowLevelSecurityStatistics      `protobuf:"bytes,15,opt,name=row_level_security_statistics,json=rowLevelSecurityStatistics" json:"row_level_security_statistics,omitempty"`
	ScriptStatistics           *ScriptStatistics                `protobuf:"bytes,16,opt,name=script_statistics,json=scriptStatistics" json:"script_statistics,omitempty"`
	SessionInfo                *SessionInfo                     `protobuf:"bytes,17,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`
	StartTime                  *int64                           `protobuf:"varint,18,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TotalBytesProcessed        *int64                           `protobuf:"varint,19,opt,name=total_bytes_processed,json=totalBytesProcessed" json:"total_bytes_processed,omitempty"`
	TotalSlotMs                *int64                           `protobuf:"varint,20,opt,name=total_slot_ms,json=totalSlotMs" json:"total_slot_ms,omitempty"`
	TransactionInfo            *TransactionInfo                 `protobuf:"bytes,21,opt,name=transaction_info,json=transactionInfo" json:"transaction_info,omitempty"`
}

func (x *JobStatistics) Reset() {
	*x = JobStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics) ProtoMessage() {}

func (x *JobStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics.ProtoReflect.Descriptor instead.
func (*JobStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{98}
}

func (x *JobStatistics) GetCompletionRatio() float64 {
	if x != nil && x.CompletionRatio != nil {
		return *x.CompletionRatio
	}
	return 0
}

func (x *JobStatistics) GetCopy() *JobStatistics5 {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *JobStatistics) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *JobStatistics) GetDataMaskingStatistics() *DataMaskingStatistics {
	if x != nil {
		return x.DataMaskingStatistics
	}
	return nil
}

func (x *JobStatistics) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *JobStatistics) GetExtract() *JobStatistics4 {
	if x != nil {
		return x.Extract
	}
	return nil
}

func (x *JobStatistics) GetFinalExecutionDurationMs() int64 {
	if x != nil && x.FinalExecutionDurationMs != nil {
		return *x.FinalExecutionDurationMs
	}
	return 0
}

func (x *JobStatistics) GetLoad() *JobStatistics3 {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *JobStatistics) GetNumChildJobs() int64 {
	if x != nil && x.NumChildJobs != nil {
		return *x.NumChildJobs
	}
	return 0
}

func (x *JobStatistics) GetParentJobId() string {
	if x != nil && x.ParentJobId != nil {
		return *x.ParentJobId
	}
	return ""
}

func (x *JobStatistics) GetQuery() *JobStatistics2 {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *JobStatistics) GetQuotaDeferments() []string {
	if x != nil {
		return x.QuotaDeferments
	}
	return nil
}

func (x *JobStatistics) GetReservationUsage() []*JobStatisticsReservationUsage {
	if x != nil {
		return x.ReservationUsage
	}
	return nil
}

func (x *JobStatistics) GetReservationId() string {
	if x != nil && x.ReservationId != nil {
		return *x.ReservationId
	}
	return ""
}

func (x *JobStatistics) GetRowLevelSecurityStatistics() *RowLevelSecurityStatistics {
	if x != nil {
		return x.RowLevelSecurityStatistics
	}
	return nil
}

func (x *JobStatistics) GetScriptStatistics() *ScriptStatistics {
	if x != nil {
		return x.ScriptStatistics
	}
	return nil
}

func (x *JobStatistics) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *JobStatistics) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *JobStatistics) GetTotalBytesProcessed() int64 {
	if x != nil && x.TotalBytesProcessed != nil {
		return *x.TotalBytesProcessed
	}
	return 0
}

func (x *JobStatistics) GetTotalSlotMs() int64 {
	if x != nil && x.TotalSlotMs != nil {
		return *x.TotalSlotMs
	}
	return 0
}

func (x *JobStatistics) GetTransactionInfo() *TransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

type JobStatistics2ReservationUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SlotMs *int64  `protobuf:"varint,2,opt,name=slot_ms,json=slotMs" json:"slot_ms,omitempty"`
}

func (x *JobStatistics2ReservationUsage) Reset() {
	*x = JobStatistics2ReservationUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatistics2ReservationUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics2ReservationUsage) ProtoMessage() {}

func (x *JobStatistics2ReservationUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics2ReservationUsage.ProtoReflect.Descriptor instead.
func (*JobStatistics2ReservationUsage) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{99}
}

func (x *JobStatistics2ReservationUsage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *JobStatistics2ReservationUsage) GetSlotMs() int64 {
	if x != nil && x.SlotMs != nil {
		return *x.SlotMs
	}
	return 0
}

type JobStatistics2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiEngineStatistics                  *BiEngineStatistics               `protobuf:"bytes,1,opt,name=bi_engine_statistics,json=biEngineStatistics" json:"bi_engine_statistics,omitempty"`
	BillingTier                         *int32                            `protobuf:"varint,2,opt,name=billing_tier,json=billingTier" json:"billing_tier,omitempty"`
	CacheHit                            *bool                             `protobuf:"varint,3,opt,name=cache_hit,json=cacheHit" json:"cache_hit,omitempty"`
	DclTargetDataset                    *DatasetReference                 `protobuf:"bytes,4,opt,name=dcl_target_dataset,json=dclTargetDataset" json:"dcl_target_dataset,omitempty"`
	DclTargetTable                      *TableReference                   `protobuf:"bytes,5,opt,name=dcl_target_table,json=dclTargetTable" json:"dcl_target_table,omitempty"`
	DclTargetView                       *TableReference                   `protobuf:"bytes,6,opt,name=dcl_target_view,json=dclTargetView" json:"dcl_target_view,omitempty"`
	DdlAffectedRowAccessPolicyCount     *int64                            `protobuf:"varint,7,opt,name=ddl_affected_row_access_policy_count,json=ddlAffectedRowAccessPolicyCount" json:"ddl_affected_row_access_policy_count,omitempty"`
	DdlDestinationTable                 *TableReference                   `protobuf:"bytes,8,opt,name=ddl_destination_table,json=ddlDestinationTable" json:"ddl_destination_table,omitempty"`
	DdlOperationPerformed               *string                           `protobuf:"bytes,9,opt,name=ddl_operation_performed,json=ddlOperationPerformed" json:"ddl_operation_performed,omitempty"`
	DdlTargetDataset                    *DatasetReference                 `protobuf:"bytes,10,opt,name=ddl_target_dataset,json=ddlTargetDataset" json:"ddl_target_dataset,omitempty"`
	DdlTargetRoutine                    *RoutineReference                 `protobuf:"bytes,11,opt,name=ddl_target_routine,json=ddlTargetRoutine" json:"ddl_target_routine,omitempty"`
	DdlTargetRowAccessPolicy            *RowAccessPolicyReference         `protobuf:"bytes,12,opt,name=ddl_target_row_access_policy,json=ddlTargetRowAccessPolicy" json:"ddl_target_row_access_policy,omitempty"`
	DdlTargetTable                      *TableReference                   `protobuf:"bytes,13,opt,name=ddl_target_table,json=ddlTargetTable" json:"ddl_target_table,omitempty"`
	DmlStats                            *DmlStatistics                    `protobuf:"bytes,14,opt,name=dml_stats,json=dmlStats" json:"dml_stats,omitempty"`
	EstimatedBytesProcessed             *int64                            `protobuf:"varint,15,opt,name=estimated_bytes_processed,json=estimatedBytesProcessed" json:"estimated_bytes_processed,omitempty"`
	ExportDataStatistics                *ExportDataStatistics             `protobuf:"bytes,16,opt,name=export_data_statistics,json=exportDataStatistics" json:"export_data_statistics,omitempty"`
	ExternalServiceCosts                []*ExternalServiceCost            `protobuf:"bytes,17,rep,name=external_service_costs,json=externalServiceCosts" json:"external_service_costs,omitempty"`
	LoadQueryStatistics                 *LoadQueryStatistics              `protobuf:"bytes,18,opt,name=load_query_statistics,json=loadQueryStatistics" json:"load_query_statistics,omitempty"`
	MaterializedViewStatistics          *MaterializedViewStatistics       `protobuf:"bytes,19,opt,name=materialized_view_statistics,json=materializedViewStatistics" json:"materialized_view_statistics,omitempty"`
	MetadataCacheStatistics             *MetadataCacheStatistics          `protobuf:"bytes,20,opt,name=metadata_cache_statistics,json=metadataCacheStatistics" json:"metadata_cache_statistics,omitempty"`
	MlStatistics                        *MlStatistics                     `protobuf:"bytes,21,opt,name=ml_statistics,json=mlStatistics" json:"ml_statistics,omitempty"`
	ModelTraining                       *BigQueryModelTraining            `protobuf:"bytes,22,opt,name=model_training,json=modelTraining" json:"model_training,omitempty"`
	ModelTrainingCurrentIteration       *int32                            `protobuf:"varint,23,opt,name=model_training_current_iteration,json=modelTrainingCurrentIteration" json:"model_training_current_iteration,omitempty"`
	ModelTrainingExpectedTotalIteration *int64                            `protobuf:"varint,24,opt,name=model_training_expected_total_iteration,json=modelTrainingExpectedTotalIteration" json:"model_training_expected_total_iteration,omitempty"`
	NumDmlAffectedRows                  *int64                            `protobuf:"varint,25,opt,name=num_dml_affected_rows,json=numDmlAffectedRows" json:"num_dml_affected_rows,omitempty"`
	PerformanceInsights                 *PerformanceInsights              `protobuf:"bytes,26,opt,name=performance_insights,json=performanceInsights" json:"performance_insights,omitempty"`
	QueryInfo                           *QueryInfo                        `protobuf:"bytes,27,opt,name=query_info,json=queryInfo" json:"query_info,omitempty"`
	QueryPlan                           []*ExplainQueryStage              `protobuf:"bytes,28,rep,name=query_plan,json=queryPlan" json:"query_plan,omitempty"`
	ReferencedRoutines                  []*RoutineReference               `protobuf:"bytes,29,rep,name=referenced_routines,json=referencedRoutines" json:"referenced_routines,omitempty"`
	ReferencedTables                    []*TableReference                 `protobuf:"bytes,30,rep,name=referenced_tables,json=referencedTables" json:"referenced_tables,omitempty"`
	ReservationUsage                    []*JobStatistics2ReservationUsage `protobuf:"bytes,31,rep,name=reservation_usage,json=reservationUsage" json:"reservation_usage,omitempty"`
	Schema                              *TableSchema                      `protobuf:"bytes,32,opt,name=schema" json:"schema,omitempty"`
	SearchStatistics                    *SearchStatistics                 `protobuf:"bytes,33,opt,name=search_statistics,json=searchStatistics" json:"search_statistics,omitempty"`
	SparkStatistics                     *SparkStatistics                  `protobuf:"bytes,34,opt,name=spark_statistics,json=sparkStatistics" json:"spark_statistics,omitempty"`
	StatementType                       *string                           `protobuf:"bytes,35,opt,name=statement_type,json=statementType" json:"statement_type,omitempty"`
	Timeline                            []*QueryTimelineSample            `protobuf:"bytes,36,rep,name=timeline" json:"timeline,omitempty"`
	TotalBytesBilled                    *int64                            `protobuf:"varint,37,opt,name=total_bytes_billed,json=totalBytesBilled" json:"total_bytes_billed,omitempty"`
	TotalBytesProcessed                 *int64                            `protobuf:"varint,38,opt,name=total_bytes_processed,json=totalBytesProcessed" json:"total_bytes_processed,omitempty"`
	TotalBytesProcessedAccuracy         *string                           `protobuf:"bytes,39,opt,name=total_bytes_processed_accuracy,json=totalBytesProcessedAccuracy" json:"total_bytes_processed_accuracy,omitempty"`
	TotalPartitionsProcessed            *int64                            `protobuf:"varint,40,opt,name=total_partitions_processed,json=totalPartitionsProcessed" json:"total_partitions_processed,omitempty"`
	TotalSlotMs                         *int64                            `protobuf:"varint,41,opt,name=total_slot_ms,json=totalSlotMs" json:"total_slot_ms,omitempty"`
	TransferredBytes                    *int64                            `protobuf:"varint,42,opt,name=transferred_bytes,json=transferredBytes" json:"transferred_bytes,omitempty"`
	UndeclaredQueryParameters           []*QueryParameter                 `protobuf:"bytes,43,rep,name=undeclared_query_parameters,json=undeclaredQueryParameters" json:"undeclared_query_parameters,omitempty"`
	VectorSearchStatistics              *VectorSearchStatistics           `protobuf:"bytes,44,opt,name=vector_search_statistics,json=vectorSearchStatistics" json:"vector_search_statistics,omitempty"`
}

func (x *JobStatistics2) Reset() {
	*x = JobStatistics2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatistics2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics2) ProtoMessage() {}

func (x *JobStatistics2) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics2.ProtoReflect.Descriptor instead.
func (*JobStatistics2) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{100}
}

func (x *JobStatistics2) GetBiEngineStatistics() *BiEngineStatistics {
	if x != nil {
		return x.BiEngineStatistics
	}
	return nil
}

func (x *JobStatistics2) GetBillingTier() int32 {
	if x != nil && x.BillingTier != nil {
		return *x.BillingTier
	}
	return 0
}

func (x *JobStatistics2) GetCacheHit() bool {
	if x != nil && x.CacheHit != nil {
		return *x.CacheHit
	}
	return false
}

func (x *JobStatistics2) GetDclTargetDataset() *DatasetReference {
	if x != nil {
		return x.DclTargetDataset
	}
	return nil
}

func (x *JobStatistics2) GetDclTargetTable() *TableReference {
	if x != nil {
		return x.DclTargetTable
	}
	return nil
}

func (x *JobStatistics2) GetDclTargetView() *TableReference {
	if x != nil {
		return x.DclTargetView
	}
	return nil
}

func (x *JobStatistics2) GetDdlAffectedRowAccessPolicyCount() int64 {
	if x != nil && x.DdlAffectedRowAccessPolicyCount != nil {
		return *x.DdlAffectedRowAccessPolicyCount
	}
	return 0
}

func (x *JobStatistics2) GetDdlDestinationTable() *TableReference {
	if x != nil {
		return x.DdlDestinationTable
	}
	return nil
}

func (x *JobStatistics2) GetDdlOperationPerformed() string {
	if x != nil && x.DdlOperationPerformed != nil {
		return *x.DdlOperationPerformed
	}
	return ""
}

func (x *JobStatistics2) GetDdlTargetDataset() *DatasetReference {
	if x != nil {
		return x.DdlTargetDataset
	}
	return nil
}

func (x *JobStatistics2) GetDdlTargetRoutine() *RoutineReference {
	if x != nil {
		return x.DdlTargetRoutine
	}
	return nil
}

func (x *JobStatistics2) GetDdlTargetRowAccessPolicy() *RowAccessPolicyReference {
	if x != nil {
		return x.DdlTargetRowAccessPolicy
	}
	return nil
}

func (x *JobStatistics2) GetDdlTargetTable() *TableReference {
	if x != nil {
		return x.DdlTargetTable
	}
	return nil
}

func (x *JobStatistics2) GetDmlStats() *DmlStatistics {
	if x != nil {
		return x.DmlStats
	}
	return nil
}

func (x *JobStatistics2) GetEstimatedBytesProcessed() int64 {
	if x != nil && x.EstimatedBytesProcessed != nil {
		return *x.EstimatedBytesProcessed
	}
	return 0
}

func (x *JobStatistics2) GetExportDataStatistics() *ExportDataStatistics {
	if x != nil {
		return x.ExportDataStatistics
	}
	return nil
}

func (x *JobStatistics2) GetExternalServiceCosts() []*ExternalServiceCost {
	if x != nil {
		return x.ExternalServiceCosts
	}
	return nil
}

func (x *JobStatistics2) GetLoadQueryStatistics() *LoadQueryStatistics {
	if x != nil {
		return x.LoadQueryStatistics
	}
	return nil
}

func (x *JobStatistics2) GetMaterializedViewStatistics() *MaterializedViewStatistics {
	if x != nil {
		return x.MaterializedViewStatistics
	}
	return nil
}

func (x *JobStatistics2) GetMetadataCacheStatistics() *MetadataCacheStatistics {
	if x != nil {
		return x.MetadataCacheStatistics
	}
	return nil
}

func (x *JobStatistics2) GetMlStatistics() *MlStatistics {
	if x != nil {
		return x.MlStatistics
	}
	return nil
}

func (x *JobStatistics2) GetModelTraining() *BigQueryModelTraining {
	if x != nil {
		return x.ModelTraining
	}
	return nil
}

func (x *JobStatistics2) GetModelTrainingCurrentIteration() int32 {
	if x != nil && x.ModelTrainingCurrentIteration != nil {
		return *x.ModelTrainingCurrentIteration
	}
	return 0
}

func (x *JobStatistics2) GetModelTrainingExpectedTotalIteration() int64 {
	if x != nil && x.ModelTrainingExpectedTotalIteration != nil {
		return *x.ModelTrainingExpectedTotalIteration
	}
	return 0
}

func (x *JobStatistics2) GetNumDmlAffectedRows() int64 {
	if x != nil && x.NumDmlAffectedRows != nil {
		return *x.NumDmlAffectedRows
	}
	return 0
}

func (x *JobStatistics2) GetPerformanceInsights() *PerformanceInsights {
	if x != nil {
		return x.PerformanceInsights
	}
	return nil
}

func (x *JobStatistics2) GetQueryInfo() *QueryInfo {
	if x != nil {
		return x.QueryInfo
	}
	return nil
}

func (x *JobStatistics2) GetQueryPlan() []*ExplainQueryStage {
	if x != nil {
		return x.QueryPlan
	}
	return nil
}

func (x *JobStatistics2) GetReferencedRoutines() []*RoutineReference {
	if x != nil {
		return x.ReferencedRoutines
	}
	return nil
}

func (x *JobStatistics2) GetReferencedTables() []*TableReference {
	if x != nil {
		return x.ReferencedTables
	}
	return nil
}

func (x *JobStatistics2) GetReservationUsage() []*JobStatistics2ReservationUsage {
	if x != nil {
		return x.ReservationUsage
	}
	return nil
}

func (x *JobStatistics2) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *JobStatistics2) GetSearchStatistics() *SearchStatistics {
	if x != nil {
		return x.SearchStatistics
	}
	return nil
}

func (x *JobStatistics2) GetSparkStatistics() *SparkStatistics {
	if x != nil {
		return x.SparkStatistics
	}
	return nil
}

func (x *JobStatistics2) GetStatementType() string {
	if x != nil && x.StatementType != nil {
		return *x.StatementType
	}
	return ""
}

func (x *JobStatistics2) GetTimeline() []*QueryTimelineSample {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *JobStatistics2) GetTotalBytesBilled() int64 {
	if x != nil && x.TotalBytesBilled != nil {
		return *x.TotalBytesBilled
	}
	return 0
}

func (x *JobStatistics2) GetTotalBytesProcessed() int64 {
	if x != nil && x.TotalBytesProcessed != nil {
		return *x.TotalBytesProcessed
	}
	return 0
}

func (x *JobStatistics2) GetTotalBytesProcessedAccuracy() string {
	if x != nil && x.TotalBytesProcessedAccuracy != nil {
		return *x.TotalBytesProcessedAccuracy
	}
	return ""
}

func (x *JobStatistics2) GetTotalPartitionsProcessed() int64 {
	if x != nil && x.TotalPartitionsProcessed != nil {
		return *x.TotalPartitionsProcessed
	}
	return 0
}

func (x *JobStatistics2) GetTotalSlotMs() int64 {
	if x != nil && x.TotalSlotMs != nil {
		return *x.TotalSlotMs
	}
	return 0
}

func (x *JobStatistics2) GetTransferredBytes() int64 {
	if x != nil && x.TransferredBytes != nil {
		return *x.TransferredBytes
	}
	return 0
}

func (x *JobStatistics2) GetUndeclaredQueryParameters() []*QueryParameter {
	if x != nil {
		return x.UndeclaredQueryParameters
	}
	return nil
}

func (x *JobStatistics2) GetVectorSearchStatistics() *VectorSearchStatistics {
	if x != nil {
		return x.VectorSearchStatistics
	}
	return nil
}

type JobStatistics3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BadRecords     *int64                 `protobuf:"varint,1,opt,name=bad_records,json=badRecords" json:"bad_records,omitempty"`
	InputFileBytes *int64                 `protobuf:"varint,2,opt,name=input_file_bytes,json=inputFileBytes" json:"input_file_bytes,omitempty"`
	InputFiles     *int64                 `protobuf:"varint,3,opt,name=input_files,json=inputFiles" json:"input_files,omitempty"`
	OutputBytes    *int64                 `protobuf:"varint,4,opt,name=output_bytes,json=outputBytes" json:"output_bytes,omitempty"`
	OutputRows     *int64                 `protobuf:"varint,5,opt,name=output_rows,json=outputRows" json:"output_rows,omitempty"`
	Timeline       []*QueryTimelineSample `protobuf:"bytes,6,rep,name=timeline" json:"timeline,omitempty"`
}

func (x *JobStatistics3) Reset() {
	*x = JobStatistics3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatistics3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics3) ProtoMessage() {}

func (x *JobStatistics3) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics3.ProtoReflect.Descriptor instead.
func (*JobStatistics3) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{101}
}

func (x *JobStatistics3) GetBadRecords() int64 {
	if x != nil && x.BadRecords != nil {
		return *x.BadRecords
	}
	return 0
}

func (x *JobStatistics3) GetInputFileBytes() int64 {
	if x != nil && x.InputFileBytes != nil {
		return *x.InputFileBytes
	}
	return 0
}

func (x *JobStatistics3) GetInputFiles() int64 {
	if x != nil && x.InputFiles != nil {
		return *x.InputFiles
	}
	return 0
}

func (x *JobStatistics3) GetOutputBytes() int64 {
	if x != nil && x.OutputBytes != nil {
		return *x.OutputBytes
	}
	return 0
}

func (x *JobStatistics3) GetOutputRows() int64 {
	if x != nil && x.OutputRows != nil {
		return *x.OutputRows
	}
	return 0
}

func (x *JobStatistics3) GetTimeline() []*QueryTimelineSample {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type JobStatistics4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationUriFileCounts []int64                `protobuf:"varint,1,rep,name=destination_uri_file_counts,json=destinationUriFileCounts" json:"destination_uri_file_counts,omitempty"`
	InputBytes               *int64                 `protobuf:"varint,2,opt,name=input_bytes,json=inputBytes" json:"input_bytes,omitempty"`
	Timeline                 []*QueryTimelineSample `protobuf:"bytes,3,rep,name=timeline" json:"timeline,omitempty"`
}

func (x *JobStatistics4) Reset() {
	*x = JobStatistics4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatistics4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics4) ProtoMessage() {}

func (x *JobStatistics4) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics4.ProtoReflect.Descriptor instead.
func (*JobStatistics4) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{102}
}

func (x *JobStatistics4) GetDestinationUriFileCounts() []int64 {
	if x != nil {
		return x.DestinationUriFileCounts
	}
	return nil
}

func (x *JobStatistics4) GetInputBytes() int64 {
	if x != nil && x.InputBytes != nil {
		return *x.InputBytes
	}
	return 0
}

func (x *JobStatistics4) GetTimeline() []*QueryTimelineSample {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type JobStatistics5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopiedLogicalBytes *int64 `protobuf:"varint,1,opt,name=copied_logical_bytes,json=copiedLogicalBytes" json:"copied_logical_bytes,omitempty"`
	CopiedRows         *int64 `protobuf:"varint,2,opt,name=copied_rows,json=copiedRows" json:"copied_rows,omitempty"`
}

func (x *JobStatistics5) Reset() {
	*x = JobStatistics5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatistics5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatistics5) ProtoMessage() {}

func (x *JobStatistics5) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatistics5.ProtoReflect.Descriptor instead.
func (*JobStatistics5) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{103}
}

func (x *JobStatistics5) GetCopiedLogicalBytes() int64 {
	if x != nil && x.CopiedLogicalBytes != nil {
		return *x.CopiedLogicalBytes
	}
	return 0
}

func (x *JobStatistics5) GetCopiedRows() int64 {
	if x != nil && x.CopiedRows != nil {
		return *x.CopiedRows
	}
	return 0
}

type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorResult *ErrorProto   `protobuf:"bytes,1,opt,name=error_result,json=errorResult" json:"error_result,omitempty"`
	Errors      []*ErrorProto `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	State       *string       `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{104}
}

func (x *JobStatus) GetErrorResult() *ErrorProto {
	if x != nil {
		return x.ErrorResult
	}
	return nil
}

func (x *JobStatus) GetErrors() []*ErrorProto {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *JobStatus) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type JoinRestrictionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinAllowedColumns []string `protobuf:"bytes,1,rep,name=join_allowed_columns,json=joinAllowedColumns" json:"join_allowed_columns,omitempty"`
	JoinCondition      *string  `protobuf:"bytes,2,opt,name=join_condition,json=joinCondition" json:"join_condition,omitempty"`
}

func (x *JoinRestrictionPolicy) Reset() {
	*x = JoinRestrictionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRestrictionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRestrictionPolicy) ProtoMessage() {}

func (x *JoinRestrictionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRestrictionPolicy.ProtoReflect.Descriptor instead.
func (*JoinRestrictionPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{105}
}

func (x *JoinRestrictionPolicy) GetJoinAllowedColumns() []string {
	if x != nil {
		return x.JoinAllowedColumns
	}
	return nil
}

func (x *JoinRestrictionPolicy) GetJoinCondition() string {
	if x != nil && x.JoinCondition != nil {
		return *x.JoinCondition
	}
	return ""
}

type JsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JsonObject) Reset() {
	*x = JsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonObject) ProtoMessage() {}

func (x *JsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonObject.ProtoReflect.Descriptor instead.
func (*JsonObject) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{106}
}

type JsonOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoding *string `protobuf:"bytes,1,opt,name=encoding" json:"encoding,omitempty"`
}

func (x *JsonOptions) Reset() {
	*x = JsonOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonOptions) ProtoMessage() {}

func (x *JsonOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonOptions.ProtoReflect.Descriptor instead.
func (*JsonOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{107}
}

func (x *JsonOptions) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

type LinkedDatasetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkState *string `protobuf:"bytes,1,opt,name=link_state,json=linkState" json:"link_state,omitempty"`
}

func (x *LinkedDatasetMetadata) Reset() {
	*x = LinkedDatasetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedDatasetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedDatasetMetadata) ProtoMessage() {}

func (x *LinkedDatasetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedDatasetMetadata.ProtoReflect.Descriptor instead.
func (*LinkedDatasetMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{108}
}

func (x *LinkedDatasetMetadata) GetLinkState() string {
	if x != nil && x.LinkState != nil {
		return *x.LinkState
	}
	return ""
}

type LinkedDatasetSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceDataset *DatasetReference `protobuf:"bytes,1,opt,name=source_dataset,json=sourceDataset" json:"source_dataset,omitempty"`
}

func (x *LinkedDatasetSource) Reset() {
	*x = LinkedDatasetSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedDatasetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedDatasetSource) ProtoMessage() {}

func (x *LinkedDatasetSource) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedDatasetSource.ProtoReflect.Descriptor instead.
func (*LinkedDatasetSource) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{109}
}

func (x *LinkedDatasetSource) GetSourceDataset() *DatasetReference {
	if x != nil {
		return x.SourceDataset
	}
	return nil
}

type ListModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models        []*Model `protobuf:"bytes,1,rep,name=models" json:"models,omitempty"`
	NextPageToken *string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{110}
}

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *ListModelsResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type ListRoutinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken *string    `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	Routines      []*Routine `protobuf:"bytes,2,rep,name=routines" json:"routines,omitempty"`
}

func (x *ListRoutinesResponse) Reset() {
	*x = ListRoutinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutinesResponse) ProtoMessage() {}

func (x *ListRoutinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutinesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutinesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{111}
}

func (x *ListRoutinesResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ListRoutinesResponse) GetRoutines() []*Routine {
	if x != nil {
		return x.Routines
	}
	return nil
}

type ListRowAccessPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken     *string            `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	RowAccessPolicies []*RowAccessPolicy `protobuf:"bytes,2,rep,name=row_access_policies,json=rowAccessPolicies" json:"row_access_policies,omitempty"`
}

func (x *ListRowAccessPoliciesResponse) Reset() {
	*x = ListRowAccessPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowAccessPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowAccessPoliciesResponse) ProtoMessage() {}

func (x *ListRowAccessPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowAccessPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListRowAccessPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{112}
}

func (x *ListRowAccessPoliciesResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ListRowAccessPoliciesResponse) GetRowAccessPolicies() []*RowAccessPolicy {
	if x != nil {
		return x.RowAccessPolicies
	}
	return nil
}

type LoadQueryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BadRecords       *int64 `protobuf:"varint,1,opt,name=bad_records,json=badRecords" json:"bad_records,omitempty"`
	BytesTransferred *int64 `protobuf:"varint,2,opt,name=bytes_transferred,json=bytesTransferred" json:"bytes_transferred,omitempty"`
	InputFileBytes   *int64 `protobuf:"varint,3,opt,name=input_file_bytes,json=inputFileBytes" json:"input_file_bytes,omitempty"`
	InputFiles       *int64 `protobuf:"varint,4,opt,name=input_files,json=inputFiles" json:"input_files,omitempty"`
	OutputBytes      *int64 `protobuf:"varint,5,opt,name=output_bytes,json=outputBytes" json:"output_bytes,omitempty"`
	OutputRows       *int64 `protobuf:"varint,6,opt,name=output_rows,json=outputRows" json:"output_rows,omitempty"`
}

func (x *LoadQueryStatistics) Reset() {
	*x = LoadQueryStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadQueryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadQueryStatistics) ProtoMessage() {}

func (x *LoadQueryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadQueryStatistics.ProtoReflect.Descriptor instead.
func (*LoadQueryStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{113}
}

func (x *LoadQueryStatistics) GetBadRecords() int64 {
	if x != nil && x.BadRecords != nil {
		return *x.BadRecords
	}
	return 0
}

func (x *LoadQueryStatistics) GetBytesTransferred() int64 {
	if x != nil && x.BytesTransferred != nil {
		return *x.BytesTransferred
	}
	return 0
}

func (x *LoadQueryStatistics) GetInputFileBytes() int64 {
	if x != nil && x.InputFileBytes != nil {
		return *x.InputFileBytes
	}
	return 0
}

func (x *LoadQueryStatistics) GetInputFiles() int64 {
	if x != nil && x.InputFiles != nil {
		return *x.InputFiles
	}
	return 0
}

func (x *LoadQueryStatistics) GetOutputBytes() int64 {
	if x != nil && x.OutputBytes != nil {
		return *x.OutputBytes
	}
	return 0
}

func (x *LoadQueryStatistics) GetOutputRows() int64 {
	if x != nil && x.OutputRows != nil {
		return *x.OutputRows
	}
	return 0
}

type LocationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyLocationId *string `protobuf:"bytes,1,opt,name=legacy_location_id,json=legacyLocationId" json:"legacy_location_id,omitempty"`
}

func (x *LocationMetadata) Reset() {
	*x = LocationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMetadata) ProtoMessage() {}

func (x *LocationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMetadata.ProtoReflect.Descriptor instead.
func (*LocationMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{114}
}

func (x *LocationMetadata) GetLegacyLocationId() string {
	if x != nil && x.LegacyLocationId != nil {
		return *x.LegacyLocationId
	}
	return ""
}

type MaterializedView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chosen              *bool           `protobuf:"varint,1,opt,name=chosen" json:"chosen,omitempty"`
	EstimatedBytesSaved *int64          `protobuf:"varint,2,opt,name=estimated_bytes_saved,json=estimatedBytesSaved" json:"estimated_bytes_saved,omitempty"`
	RejectedReason      *string         `protobuf:"bytes,3,opt,name=rejected_reason,json=rejectedReason" json:"rejected_reason,omitempty"`
	TableReference      *TableReference `protobuf:"bytes,4,opt,name=table_reference,json=tableReference" json:"table_reference,omitempty"`
}

func (x *MaterializedView) Reset() {
	*x = MaterializedView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterializedView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedView) ProtoMessage() {}

func (x *MaterializedView) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedView.ProtoReflect.Descriptor instead.
func (*MaterializedView) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{115}
}

func (x *MaterializedView) GetChosen() bool {
	if x != nil && x.Chosen != nil {
		return *x.Chosen
	}
	return false
}

func (x *MaterializedView) GetEstimatedBytesSaved() int64 {
	if x != nil && x.EstimatedBytesSaved != nil {
		return *x.EstimatedBytesSaved
	}
	return 0
}

func (x *MaterializedView) GetRejectedReason() string {
	if x != nil && x.RejectedReason != nil {
		return *x.RejectedReason
	}
	return ""
}

func (x *MaterializedView) GetTableReference() *TableReference {
	if x != nil {
		return x.TableReference
	}
	return nil
}

type MaterializedViewDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowNonIncrementalDefinition *bool   `protobuf:"varint,1,opt,name=allow_non_incremental_definition,json=allowNonIncrementalDefinition" json:"allow_non_incremental_definition,omitempty"`
	EnableRefresh                 *bool   `protobuf:"varint,2,opt,name=enable_refresh,json=enableRefresh" json:"enable_refresh,omitempty"`
	LastRefreshTime               *int64  `protobuf:"varint,3,opt,name=last_refresh_time,json=lastRefreshTime" json:"last_refresh_time,omitempty"`
	MaxStaleness                  []byte  `protobuf:"bytes,4,opt,name=max_staleness,json=maxStaleness" json:"max_staleness,omitempty"`
	Query                         *string `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	RefreshIntervalMs             *int64  `protobuf:"varint,6,opt,name=refresh_interval_ms,json=refreshIntervalMs" json:"refresh_interval_ms,omitempty"`
}

func (x *MaterializedViewDefinition) Reset() {
	*x = MaterializedViewDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterializedViewDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedViewDefinition) ProtoMessage() {}

func (x *MaterializedViewDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedViewDefinition.ProtoReflect.Descriptor instead.
func (*MaterializedViewDefinition) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{116}
}

func (x *MaterializedViewDefinition) GetAllowNonIncrementalDefinition() bool {
	if x != nil && x.AllowNonIncrementalDefinition != nil {
		return *x.AllowNonIncrementalDefinition
	}
	return false
}

func (x *MaterializedViewDefinition) GetEnableRefresh() bool {
	if x != nil && x.EnableRefresh != nil {
		return *x.EnableRefresh
	}
	return false
}

func (x *MaterializedViewDefinition) GetLastRefreshTime() int64 {
	if x != nil && x.LastRefreshTime != nil {
		return *x.LastRefreshTime
	}
	return 0
}

func (x *MaterializedViewDefinition) GetMaxStaleness() []byte {
	if x != nil {
		return x.MaxStaleness
	}
	return nil
}

func (x *MaterializedViewDefinition) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *MaterializedViewDefinition) GetRefreshIntervalMs() int64 {
	if x != nil && x.RefreshIntervalMs != nil {
		return *x.RefreshIntervalMs
	}
	return 0
}

type MaterializedViewStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaterializedView []*MaterializedView `protobuf:"bytes,1,rep,name=materialized_view,json=materializedView" json:"materialized_view,omitempty"`
}

func (x *MaterializedViewStatistics) Reset() {
	*x = MaterializedViewStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterializedViewStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedViewStatistics) ProtoMessage() {}

func (x *MaterializedViewStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedViewStatistics.ProtoReflect.Descriptor instead.
func (*MaterializedViewStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{117}
}

func (x *MaterializedViewStatistics) GetMaterializedView() []*MaterializedView {
	if x != nil {
		return x.MaterializedView
	}
	return nil
}

type MaterializedViewStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastRefreshStatus *ErrorProto          `protobuf:"bytes,1,opt,name=last_refresh_status,json=lastRefreshStatus" json:"last_refresh_status,omitempty"`
	RefreshWatermark  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=refresh_watermark,json=refreshWatermark" json:"refresh_watermark,omitempty"`
}

func (x *MaterializedViewStatus) Reset() {
	*x = MaterializedViewStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterializedViewStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedViewStatus) ProtoMessage() {}

func (x *MaterializedViewStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedViewStatus.ProtoReflect.Descriptor instead.
func (*MaterializedViewStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{118}
}

func (x *MaterializedViewStatus) GetLastRefreshStatus() *ErrorProto {
	if x != nil {
		return x.LastRefreshStatus
	}
	return nil
}

func (x *MaterializedViewStatus) GetRefreshWatermark() *timestamp.Timestamp {
	if x != nil {
		return x.RefreshWatermark
	}
	return nil
}

type MetadataCacheStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableMetadataCacheUsage []*TableMetadataCacheUsage `protobuf:"bytes,1,rep,name=table_metadata_cache_usage,json=tableMetadataCacheUsage" json:"table_metadata_cache_usage,omitempty"`
}

func (x *MetadataCacheStatistics) Reset() {
	*x = MetadataCacheStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataCacheStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataCacheStatistics) ProtoMessage() {}

func (x *MetadataCacheStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataCacheStatistics.ProtoReflect.Descriptor instead.
func (*MetadataCacheStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{119}
}

func (x *MetadataCacheStatistics) GetTableMetadataCacheUsage() []*TableMetadataCacheUsage {
	if x != nil {
		return x.TableMetadataCacheUsage
	}
	return nil
}

type MlStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HparamTrials     []*HparamTuningTrial `protobuf:"bytes,1,rep,name=hparam_trials,json=hparamTrials" json:"hparam_trials,omitempty"`
	IterationResults []*IterationResult   `protobuf:"bytes,2,rep,name=iteration_results,json=iterationResults" json:"iteration_results,omitempty"`
	MaxIterations    *int64               `protobuf:"varint,3,opt,name=max_iterations,json=maxIterations" json:"max_iterations,omitempty"`
	ModelType        *string              `protobuf:"bytes,4,opt,name=model_type,json=modelType" json:"model_type,omitempty"`
	TrainingType     *string              `protobuf:"bytes,5,opt,name=training_type,json=trainingType" json:"training_type,omitempty"`
}

func (x *MlStatistics) Reset() {
	*x = MlStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MlStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MlStatistics) ProtoMessage() {}

func (x *MlStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MlStatistics.ProtoReflect.Descriptor instead.
func (*MlStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{120}
}

func (x *MlStatistics) GetHparamTrials() []*HparamTuningTrial {
	if x != nil {
		return x.HparamTrials
	}
	return nil
}

func (x *MlStatistics) GetIterationResults() []*IterationResult {
	if x != nil {
		return x.IterationResults
	}
	return nil
}

func (x *MlStatistics) GetMaxIterations() int64 {
	if x != nil && x.MaxIterations != nil {
		return *x.MaxIterations
	}
	return 0
}

func (x *MlStatistics) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

func (x *MlStatistics) GetTrainingType() string {
	if x != nil && x.TrainingType != nil {
		return *x.TrainingType
	}
	return ""
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestTrialId             *int64                   `protobuf:"varint,1,opt,name=best_trial_id,json=bestTrialId" json:"best_trial_id,omitempty"`
	CreationTime            *int64                   `protobuf:"varint,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	DefaultTrialId          *int64                   `protobuf:"varint,3,opt,name=default_trial_id,json=defaultTrialId" json:"default_trial_id,omitempty"`
	Description             *string                  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	EncryptionConfiguration *EncryptionConfiguration `protobuf:"bytes,5,opt,name=encryption_configuration,json=encryptionConfiguration" json:"encryption_configuration,omitempty"`
	Etag                    *string                  `protobuf:"bytes,6,opt,name=etag" json:"etag,omitempty"`
	ExpirationTime          *int64                   `protobuf:"varint,7,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	FeatureColumns          []*StandardSqlField      `protobuf:"bytes,8,rep,name=feature_columns,json=featureColumns" json:"feature_columns,omitempty"`
	FriendlyName            *string                  `protobuf:"bytes,9,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	HparamSearchSpaces      *HparamSearchSpaces      `protobuf:"bytes,10,opt,name=hparam_search_spaces,json=hparamSearchSpaces" json:"hparam_search_spaces,omitempty"`
	HparamTrials            []*HparamTuningTrial     `protobuf:"bytes,11,rep,name=hparam_trials,json=hparamTrials" json:"hparam_trials,omitempty"`
	LabelColumns            []*StandardSqlField      `protobuf:"bytes,12,rep,name=label_columns,json=labelColumns" json:"label_columns,omitempty"`
	Labels                  map[string]string        `protobuf:"bytes,13,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastModifiedTime        *int64                   `protobuf:"varint,14,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	Location                *string                  `protobuf:"bytes,15,opt,name=location" json:"location,omitempty"`
	ModelReference          *ModelReference          `protobuf:"bytes,16,opt,name=model_reference,json=modelReference" json:"model_reference,omitempty"`
	ModelType               *string                  `protobuf:"bytes,17,opt,name=model_type,json=modelType" json:"model_type,omitempty"`
	OptimalTrialIds         []int64                  `protobuf:"varint,18,rep,name=optimal_trial_ids,json=optimalTrialIds" json:"optimal_trial_ids,omitempty"`
	RemoteModelInfo         *RemoteModelInfo         `protobuf:"bytes,19,opt,name=remote_model_info,json=remoteModelInfo" json:"remote_model_info,omitempty"`
	TrainingRuns            []*TrainingRun           `protobuf:"bytes,20,rep,name=training_runs,json=trainingRuns" json:"training_runs,omitempty"`
	TransformColumns        []*TransformColumn       `protobuf:"bytes,21,rep,name=transform_columns,json=transformColumns" json:"transform_columns,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{121}
}

func (x *Model) GetBestTrialId() int64 {
	if x != nil && x.BestTrialId != nil {
		return *x.BestTrialId
	}
	return 0
}

func (x *Model) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Model) GetDefaultTrialId() int64 {
	if x != nil && x.DefaultTrialId != nil {
		return *x.DefaultTrialId
	}
	return 0
}

func (x *Model) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Model) GetEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.EncryptionConfiguration
	}
	return nil
}

func (x *Model) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *Model) GetExpirationTime() int64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *Model) GetFeatureColumns() []*StandardSqlField {
	if x != nil {
		return x.FeatureColumns
	}
	return nil
}

func (x *Model) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *Model) GetHparamSearchSpaces() *HparamSearchSpaces {
	if x != nil {
		return x.HparamSearchSpaces
	}
	return nil
}

func (x *Model) GetHparamTrials() []*HparamTuningTrial {
	if x != nil {
		return x.HparamTrials
	}
	return nil
}

func (x *Model) GetLabelColumns() []*StandardSqlField {
	if x != nil {
		return x.LabelColumns
	}
	return nil
}

func (x *Model) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Model) GetLastModifiedTime() int64 {
	if x != nil && x.LastModifiedTime != nil {
		return *x.LastModifiedTime
	}
	return 0
}

func (x *Model) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Model) GetModelReference() *ModelReference {
	if x != nil {
		return x.ModelReference
	}
	return nil
}

func (x *Model) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

func (x *Model) GetOptimalTrialIds() []int64 {
	if x != nil {
		return x.OptimalTrialIds
	}
	return nil
}

func (x *Model) GetRemoteModelInfo() *RemoteModelInfo {
	if x != nil {
		return x.RemoteModelInfo
	}
	return nil
}

func (x *Model) GetTrainingRuns() []*TrainingRun {
	if x != nil {
		return x.TrainingRuns
	}
	return nil
}

func (x *Model) GetTransformColumns() []*TransformColumn {
	if x != nil {
		return x.TransformColumns
	}
	return nil
}

type ModelDefinitionModelOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels    []string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
	LossType  *string  `protobuf:"bytes,2,opt,name=loss_type,json=lossType" json:"loss_type,omitempty"`
	ModelType *string  `protobuf:"bytes,3,opt,name=model_type,json=modelType" json:"model_type,omitempty"`
}

func (x *ModelDefinitionModelOptions) Reset() {
	*x = ModelDefinitionModelOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelDefinitionModelOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelDefinitionModelOptions) ProtoMessage() {}

func (x *ModelDefinitionModelOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelDefinitionModelOptions.ProtoReflect.Descriptor instead.
func (*ModelDefinitionModelOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{122}
}

func (x *ModelDefinitionModelOptions) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ModelDefinitionModelOptions) GetLossType() string {
	if x != nil && x.LossType != nil {
		return *x.LossType
	}
	return ""
}

func (x *ModelDefinitionModelOptions) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

type ModelDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelOptions *ModelDefinitionModelOptions `protobuf:"bytes,1,opt,name=model_options,json=modelOptions" json:"model_options,omitempty"`
	TrainingRuns []*BqmlTrainingRun           `protobuf:"bytes,2,rep,name=training_runs,json=trainingRuns" json:"training_runs,omitempty"`
}

func (x *ModelDefinition) Reset() {
	*x = ModelDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelDefinition) ProtoMessage() {}

func (x *ModelDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelDefinition.ProtoReflect.Descriptor instead.
func (*ModelDefinition) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{123}
}

func (x *ModelDefinition) GetModelOptions() *ModelDefinitionModelOptions {
	if x != nil {
		return x.ModelOptions
	}
	return nil
}

func (x *ModelDefinition) GetTrainingRuns() []*BqmlTrainingRun {
	if x != nil {
		return x.TrainingRuns
	}
	return nil
}

type ModelExtractOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrialId *int64 `protobuf:"varint,1,opt,name=trial_id,json=trialId" json:"trial_id,omitempty"`
}

func (x *ModelExtractOptions) Reset() {
	*x = ModelExtractOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelExtractOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelExtractOptions) ProtoMessage() {}

func (x *ModelExtractOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelExtractOptions.ProtoReflect.Descriptor instead.
func (*ModelExtractOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{124}
}

func (x *ModelExtractOptions) GetTrialId() int64 {
	if x != nil && x.TrialId != nil {
		return *x.TrialId
	}
	return 0
}

type ModelReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ModelId   *string `protobuf:"bytes,2,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *ModelReference) Reset() {
	*x = ModelReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelReference) ProtoMessage() {}

func (x *ModelReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelReference.ProtoReflect.Descriptor instead.
func (*ModelReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{125}
}

func (x *ModelReference) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ModelReference) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *ModelReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type MultiClassClassificationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateClassificationMetrics *AggregateClassificationMetrics `protobuf:"bytes,1,opt,name=aggregate_classification_metrics,json=aggregateClassificationMetrics" json:"aggregate_classification_metrics,omitempty"`
	ConfusionMatrixList            []*ConfusionMatrix              `protobuf:"bytes,2,rep,name=confusion_matrix_list,json=confusionMatrixList" json:"confusion_matrix_list,omitempty"`
}

func (x *MultiClassClassificationMetrics) Reset() {
	*x = MultiClassClassificationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiClassClassificationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiClassClassificationMetrics) ProtoMessage() {}

func (x *MultiClassClassificationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiClassClassificationMetrics.ProtoReflect.Descriptor instead.
func (*MultiClassClassificationMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{126}
}

func (x *MultiClassClassificationMetrics) GetAggregateClassificationMetrics() *AggregateClassificationMetrics {
	if x != nil {
		return x.AggregateClassificationMetrics
	}
	return nil
}

func (x *MultiClassClassificationMetrics) GetConfusionMatrixList() []*ConfusionMatrix {
	if x != nil {
		return x.ConfusionMatrixList
	}
	return nil
}

type ParquetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableListInference *bool `protobuf:"varint,1,opt,name=enable_list_inference,json=enableListInference" json:"enable_list_inference,omitempty"`
	EnumAsString        *bool `protobuf:"varint,2,opt,name=enum_as_string,json=enumAsString" json:"enum_as_string,omitempty"`
}

func (x *ParquetOptions) Reset() {
	*x = ParquetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetOptions) ProtoMessage() {}

func (x *ParquetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetOptions.ProtoReflect.Descriptor instead.
func (*ParquetOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{127}
}

func (x *ParquetOptions) GetEnableListInference() bool {
	if x != nil && x.EnableListInference != nil {
		return *x.EnableListInference
	}
	return false
}

func (x *ParquetOptions) GetEnumAsString() bool {
	if x != nil && x.EnumAsString != nil {
		return *x.EnumAsString
	}
	return false
}

type PartitionSkew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkewSources []*SkewSource `protobuf:"bytes,1,rep,name=skew_sources,json=skewSources" json:"skew_sources,omitempty"`
}

func (x *PartitionSkew) Reset() {
	*x = PartitionSkew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSkew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSkew) ProtoMessage() {}

func (x *PartitionSkew) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSkew.ProtoReflect.Descriptor instead.
func (*PartitionSkew) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{128}
}

func (x *PartitionSkew) GetSkewSources() []*SkewSource {
	if x != nil {
		return x.SkewSources
	}
	return nil
}

type PartitionedColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (x *PartitionedColumn) Reset() {
	*x = PartitionedColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionedColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionedColumn) ProtoMessage() {}

func (x *PartitionedColumn) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionedColumn.ProtoReflect.Descriptor instead.
func (*PartitionedColumn) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{129}
}

func (x *PartitionedColumn) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

type PartitioningDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionedColumn []*PartitionedColumn `protobuf:"bytes,1,rep,name=partitioned_column,json=partitionedColumn" json:"partitioned_column,omitempty"`
}

func (x *PartitioningDefinition) Reset() {
	*x = PartitioningDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitioningDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitioningDefinition) ProtoMessage() {}

func (x *PartitioningDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitioningDefinition.ProtoReflect.Descriptor instead.
func (*PartitioningDefinition) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{130}
}

func (x *PartitioningDefinition) GetPartitionedColumn() []*PartitionedColumn {
	if x != nil {
		return x.PartitionedColumn
	}
	return nil
}

type PerformanceInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgPreviousExecutionMs             *int64                               `protobuf:"varint,1,opt,name=avg_previous_execution_ms,json=avgPreviousExecutionMs" json:"avg_previous_execution_ms,omitempty"`
	StagePerformanceChangeInsights     []*StagePerformanceChangeInsight     `protobuf:"bytes,2,rep,name=stage_performance_change_insights,json=stagePerformanceChangeInsights" json:"stage_performance_change_insights,omitempty"`
	StagePerformanceStandaloneInsights []*StagePerformanceStandaloneInsight `protobuf:"bytes,3,rep,name=stage_performance_standalone_insights,json=stagePerformanceStandaloneInsights" json:"stage_performance_standalone_insights,omitempty"`
}

func (x *PerformanceInsights) Reset() {
	*x = PerformanceInsights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceInsights) ProtoMessage() {}

func (x *PerformanceInsights) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceInsights.ProtoReflect.Descriptor instead.
func (*PerformanceInsights) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{131}
}

func (x *PerformanceInsights) GetAvgPreviousExecutionMs() int64 {
	if x != nil && x.AvgPreviousExecutionMs != nil {
		return *x.AvgPreviousExecutionMs
	}
	return 0
}

func (x *PerformanceInsights) GetStagePerformanceChangeInsights() []*StagePerformanceChangeInsight {
	if x != nil {
		return x.StagePerformanceChangeInsights
	}
	return nil
}

func (x *PerformanceInsights) GetStagePerformanceStandaloneInsights() []*StagePerformanceStandaloneInsight {
	if x != nil {
		return x.StagePerformanceStandaloneInsights
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditConfigs []*AuditConfig `protobuf:"bytes,1,rep,name=audit_configs,json=auditConfigs" json:"audit_configs,omitempty"`
	Bindings     []*Binding     `protobuf:"bytes,2,rep,name=bindings" json:"bindings,omitempty"`
	Etag         []byte         `protobuf:"bytes,3,opt,name=etag" json:"etag,omitempty"`
	Version      *int32         `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{132}
}

func (x *Policy) GetAuditConfigs() []*AuditConfig {
	if x != nil {
		return x.AuditConfigs
	}
	return nil
}

func (x *Policy) GetBindings() []*Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *Policy) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *Policy) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type PrincipalComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CumulativeExplainedVarianceRatio *float64 `protobuf:"fixed64,1,opt,name=cumulative_explained_variance_ratio,json=cumulativeExplainedVarianceRatio" json:"cumulative_explained_variance_ratio,omitempty"`
	ExplainedVariance                *float64 `protobuf:"fixed64,2,opt,name=explained_variance,json=explainedVariance" json:"explained_variance,omitempty"`
	ExplainedVarianceRatio           *float64 `protobuf:"fixed64,3,opt,name=explained_variance_ratio,json=explainedVarianceRatio" json:"explained_variance_ratio,omitempty"`
	PrincipalComponentId             *int64   `protobuf:"varint,4,opt,name=principal_component_id,json=principalComponentId" json:"principal_component_id,omitempty"`
}

func (x *PrincipalComponentInfo) Reset() {
	*x = PrincipalComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrincipalComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrincipalComponentInfo) ProtoMessage() {}

func (x *PrincipalComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrincipalComponentInfo.ProtoReflect.Descriptor instead.
func (*PrincipalComponentInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{133}
}

func (x *PrincipalComponentInfo) GetCumulativeExplainedVarianceRatio() float64 {
	if x != nil && x.CumulativeExplainedVarianceRatio != nil {
		return *x.CumulativeExplainedVarianceRatio
	}
	return 0
}

func (x *PrincipalComponentInfo) GetExplainedVariance() float64 {
	if x != nil && x.ExplainedVariance != nil {
		return *x.ExplainedVariance
	}
	return 0
}

func (x *PrincipalComponentInfo) GetExplainedVarianceRatio() float64 {
	if x != nil && x.ExplainedVarianceRatio != nil {
		return *x.ExplainedVarianceRatio
	}
	return 0
}

func (x *PrincipalComponentInfo) GetPrincipalComponentId() int64 {
	if x != nil && x.PrincipalComponentId != nil {
		return *x.PrincipalComponentId
	}
	return 0
}

type PrivacyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationThresholdPolicy *AggregationThresholdPolicy `protobuf:"bytes,1,opt,name=aggregation_threshold_policy,json=aggregationThresholdPolicy" json:"aggregation_threshold_policy,omitempty"`
	DifferentialPrivacyPolicy  *DifferentialPrivacyPolicy  `protobuf:"bytes,2,opt,name=differential_privacy_policy,json=differentialPrivacyPolicy" json:"differential_privacy_policy,omitempty"`
	JoinRestrictionPolicy      *JoinRestrictionPolicy      `protobuf:"bytes,3,opt,name=join_restriction_policy,json=joinRestrictionPolicy" json:"join_restriction_policy,omitempty"`
}

func (x *PrivacyPolicy) Reset() {
	*x = PrivacyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivacyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacyPolicy) ProtoMessage() {}

func (x *PrivacyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacyPolicy.ProtoReflect.Descriptor instead.
func (*PrivacyPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{134}
}

func (x *PrivacyPolicy) GetAggregationThresholdPolicy() *AggregationThresholdPolicy {
	if x != nil {
		return x.AggregationThresholdPolicy
	}
	return nil
}

func (x *PrivacyPolicy) GetDifferentialPrivacyPolicy() *DifferentialPrivacyPolicy {
	if x != nil {
		return x.DifferentialPrivacyPolicy
	}
	return nil
}

func (x *PrivacyPolicy) GetJoinRestrictionPolicy() *JoinRestrictionPolicy {
	if x != nil {
		return x.JoinRestrictionPolicy
	}
	return nil
}

type ProjectListProjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendlyName     *string           `protobuf:"bytes,1,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Id               *string           `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Kind             *string           `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	NumericId        *uint64           `protobuf:"varint,4,opt,name=numeric_id,json=numericId" json:"numeric_id,omitempty"`
	ProjectReference *ProjectReference `protobuf:"bytes,5,opt,name=project_reference,json=projectReference" json:"project_reference,omitempty"`
}

func (x *ProjectListProjects) Reset() {
	*x = ProjectListProjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectListProjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListProjects) ProtoMessage() {}

func (x *ProjectListProjects) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListProjects.ProtoReflect.Descriptor instead.
func (*ProjectListProjects) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{135}
}

func (x *ProjectListProjects) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *ProjectListProjects) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ProjectListProjects) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ProjectListProjects) GetNumericId() uint64 {
	if x != nil && x.NumericId != nil {
		return *x.NumericId
	}
	return 0
}

func (x *ProjectListProjects) GetProjectReference() *ProjectReference {
	if x != nil {
		return x.ProjectReference
	}
	return nil
}

type ProjectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag          *string                `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	Kind          *string                `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	NextPageToken *string                `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	Projects      []*ProjectListProjects `protobuf:"bytes,4,rep,name=projects" json:"projects,omitempty"`
	TotalItems    *int32                 `protobuf:"varint,5,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
}

func (x *ProjectList) Reset() {
	*x = ProjectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectList) ProtoMessage() {}

func (x *ProjectList) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectList.ProtoReflect.Descriptor instead.
func (*ProjectList) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{136}
}

func (x *ProjectList) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *ProjectList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ProjectList) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ProjectList) GetProjects() []*ProjectListProjects {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ProjectList) GetTotalItems() int32 {
	if x != nil && x.TotalItems != nil {
		return *x.TotalItems
	}
	return 0
}

type ProjectReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *ProjectReference) Reset() {
	*x = ProjectReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectReference) ProtoMessage() {}

func (x *ProjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectReference.ProtoReflect.Descriptor instead.
func (*ProjectReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{137}
}

func (x *ProjectReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptimizationDetails map[string]*any1.Any `protobuf:"bytes,1,rep,name=optimization_details,json=optimizationDetails" json:"optimization_details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{138}
}

func (x *QueryInfo) GetOptimizationDetails() map[string]*any1.Any {
	if x != nil {
		return x.OptimizationDetails
	}
	return nil
}

type QueryParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           *string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType  *QueryParameterType  `protobuf:"bytes,2,opt,name=parameter_type,json=parameterType" json:"parameter_type,omitempty"`
	ParameterValue *QueryParameterValue `protobuf:"bytes,3,opt,name=parameter_value,json=parameterValue" json:"parameter_value,omitempty"`
}

func (x *QueryParameter) Reset() {
	*x = QueryParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameter) ProtoMessage() {}

func (x *QueryParameter) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameter.ProtoReflect.Descriptor instead.
func (*QueryParameter) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{139}
}

func (x *QueryParameter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QueryParameter) GetParameterType() *QueryParameterType {
	if x != nil {
		return x.ParameterType
	}
	return nil
}

func (x *QueryParameter) GetParameterValue() *QueryParameterValue {
	if x != nil {
		return x.ParameterValue
	}
	return nil
}

type QueryParameterTypeStructTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string             `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Name        *string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type        *QueryParameterType `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (x *QueryParameterTypeStructTypes) Reset() {
	*x = QueryParameterTypeStructTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameterTypeStructTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterTypeStructTypes) ProtoMessage() {}

func (x *QueryParameterTypeStructTypes) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterTypeStructTypes.ProtoReflect.Descriptor instead.
func (*QueryParameterTypeStructTypes) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{140}
}

func (x *QueryParameterTypeStructTypes) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *QueryParameterTypeStructTypes) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QueryParameterTypeStructTypes) GetType() *QueryParameterType {
	if x != nil {
		return x.Type
	}
	return nil
}

type QueryParameterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrayType        *QueryParameterType              `protobuf:"bytes,1,opt,name=array_type,json=arrayType" json:"array_type,omitempty"`
	RangeElementType *QueryParameterType              `protobuf:"bytes,2,opt,name=range_element_type,json=rangeElementType" json:"range_element_type,omitempty"`
	StructTypes      []*QueryParameterTypeStructTypes `protobuf:"bytes,3,rep,name=struct_types,json=structTypes" json:"struct_types,omitempty"`
	Type             *string                          `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
}

func (x *QueryParameterType) Reset() {
	*x = QueryParameterType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterType) ProtoMessage() {}

func (x *QueryParameterType) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterType.ProtoReflect.Descriptor instead.
func (*QueryParameterType) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{141}
}

func (x *QueryParameterType) GetArrayType() *QueryParameterType {
	if x != nil {
		return x.ArrayType
	}
	return nil
}

func (x *QueryParameterType) GetRangeElementType() *QueryParameterType {
	if x != nil {
		return x.RangeElementType
	}
	return nil
}

func (x *QueryParameterType) GetStructTypes() []*QueryParameterTypeStructTypes {
	if x != nil {
		return x.StructTypes
	}
	return nil
}

func (x *QueryParameterType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type QueryParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrayValues  []*QueryParameterValue          `protobuf:"bytes,1,rep,name=array_values,json=arrayValues" json:"array_values,omitempty"`
	RangeValue   *RangeValue                     `protobuf:"bytes,2,opt,name=range_value,json=rangeValue" json:"range_value,omitempty"`
	StructValues map[string]*QueryParameterValue `protobuf:"bytes,3,rep,name=struct_values,json=structValues" json:"struct_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Value        *string                         `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (x *QueryParameterValue) Reset() {
	*x = QueryParameterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterValue) ProtoMessage() {}

func (x *QueryParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterValue.ProtoReflect.Descriptor instead.
func (*QueryParameterValue) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{142}
}

func (x *QueryParameterValue) GetArrayValues() []*QueryParameterValue {
	if x != nil {
		return x.ArrayValues
	}
	return nil
}

func (x *QueryParameterValue) GetRangeValue() *RangeValue {
	if x != nil {
		return x.RangeValue
	}
	return nil
}

func (x *QueryParameterValue) GetStructValues() map[string]*QueryParameterValue {
	if x != nil {
		return x.StructValues
	}
	return nil
}

func (x *QueryParameterValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionProperties []*ConnectionProperty `protobuf:"bytes,1,rep,name=connection_properties,json=connectionProperties" json:"connection_properties,omitempty"`
	Continuous           *bool                 `protobuf:"varint,2,opt,name=continuous" json:"continuous,omitempty"`
	CreateSession        *bool                 `protobuf:"varint,3,opt,name=create_session,json=createSession" json:"create_session,omitempty"`
	DefaultDataset       *DatasetReference     `protobuf:"bytes,4,opt,name=default_dataset,json=defaultDataset" json:"default_dataset,omitempty"`
	DryRun               *bool                 `protobuf:"varint,5,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	FormatOptions        *DataFormatOptions    `protobuf:"bytes,6,opt,name=format_options,json=formatOptions" json:"format_options,omitempty"`
	JobCreationMode      *string               `protobuf:"bytes,7,opt,name=job_creation_mode,json=jobCreationMode" json:"job_creation_mode,omitempty"`
	Kind                 *string               `protobuf:"bytes,8,opt,name=kind" json:"kind,omitempty"`
	Labels               map[string]string     `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Location             *string               `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"`
	MaxResults           *uint32               `protobuf:"varint,11,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	MaximumBytesBilled   *int64                `protobuf:"varint,12,opt,name=maximum_bytes_billed,json=maximumBytesBilled" json:"maximum_bytes_billed,omitempty"`
	ParameterMode        *string               `protobuf:"bytes,13,opt,name=parameter_mode,json=parameterMode" json:"parameter_mode,omitempty"`
	PreserveNulls        *bool                 `protobuf:"varint,14,opt,name=preserve_nulls,json=preserveNulls" json:"preserve_nulls,omitempty"`
	Query                *string               `protobuf:"bytes,15,opt,name=query" json:"query,omitempty"`
	QueryParameters      []*QueryParameter     `protobuf:"bytes,16,rep,name=query_parameters,json=queryParameters" json:"query_parameters,omitempty"`
	RequestId            *string               `protobuf:"bytes,17,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	TimeoutMs            *uint32               `protobuf:"varint,18,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
	UseLegacySql         *bool                 `protobuf:"varint,19,opt,name=use_legacy_sql,json=useLegacySql" json:"use_legacy_sql,omitempty"`
	UseQueryCache        *bool                 `protobuf:"varint,20,opt,name=use_query_cache,json=useQueryCache" json:"use_query_cache,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{143}
}

func (x *QueryRequest) GetConnectionProperties() []*ConnectionProperty {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

func (x *QueryRequest) GetContinuous() bool {
	if x != nil && x.Continuous != nil {
		return *x.Continuous
	}
	return false
}

func (x *QueryRequest) GetCreateSession() bool {
	if x != nil && x.CreateSession != nil {
		return *x.CreateSession
	}
	return false
}

func (x *QueryRequest) GetDefaultDataset() *DatasetReference {
	if x != nil {
		return x.DefaultDataset
	}
	return nil
}

func (x *QueryRequest) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *QueryRequest) GetFormatOptions() *DataFormatOptions {
	if x != nil {
		return x.FormatOptions
	}
	return nil
}

func (x *QueryRequest) GetJobCreationMode() string {
	if x != nil && x.JobCreationMode != nil {
		return *x.JobCreationMode
	}
	return ""
}

func (x *QueryRequest) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *QueryRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *QueryRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *QueryRequest) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *QueryRequest) GetMaximumBytesBilled() int64 {
	if x != nil && x.MaximumBytesBilled != nil {
		return *x.MaximumBytesBilled
	}
	return 0
}

func (x *QueryRequest) GetParameterMode() string {
	if x != nil && x.ParameterMode != nil {
		return *x.ParameterMode
	}
	return ""
}

func (x *QueryRequest) GetPreserveNulls() bool {
	if x != nil && x.PreserveNulls != nil {
		return *x.PreserveNulls
	}
	return false
}

func (x *QueryRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *QueryRequest) GetQueryParameters() []*QueryParameter {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *QueryRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *QueryRequest) GetTimeoutMs() uint32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

func (x *QueryRequest) GetUseLegacySql() bool {
	if x != nil && x.UseLegacySql != nil {
		return *x.UseLegacySql
	}
	return false
}

func (x *QueryRequest) GetUseQueryCache() bool {
	if x != nil && x.UseQueryCache != nil {
		return *x.UseQueryCache
	}
	return false
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheHit            *bool              `protobuf:"varint,1,opt,name=cache_hit,json=cacheHit" json:"cache_hit,omitempty"`
	DmlStats            *DmlStatistics     `protobuf:"bytes,2,opt,name=dml_stats,json=dmlStats" json:"dml_stats,omitempty"`
	Errors              []*ErrorProto      `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
	JobComplete         *bool              `protobuf:"varint,4,opt,name=job_complete,json=jobComplete" json:"job_complete,omitempty"`
	JobCreationReason   *JobCreationReason `protobuf:"bytes,5,opt,name=job_creation_reason,json=jobCreationReason" json:"job_creation_reason,omitempty"`
	JobReference        *JobReference      `protobuf:"bytes,6,opt,name=job_reference,json=jobReference" json:"job_reference,omitempty"`
	Kind                *string            `protobuf:"bytes,7,opt,name=kind" json:"kind,omitempty"`
	NumDmlAffectedRows  *int64             `protobuf:"varint,8,opt,name=num_dml_affected_rows,json=numDmlAffectedRows" json:"num_dml_affected_rows,omitempty"`
	PageToken           *string            `protobuf:"bytes,9,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	QueryId             *string            `protobuf:"bytes,10,opt,name=query_id,json=queryId" json:"query_id,omitempty"`
	Rows                []*TableRow        `protobuf:"bytes,11,rep,name=rows" json:"rows,omitempty"`
	Schema              *TableSchema       `protobuf:"bytes,12,opt,name=schema" json:"schema,omitempty"`
	SessionInfo         *SessionInfo       `protobuf:"bytes,13,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`
	TotalBytesProcessed *int64             `protobuf:"varint,14,opt,name=total_bytes_processed,json=totalBytesProcessed" json:"total_bytes_processed,omitempty"`
	TotalRows           *uint64            `protobuf:"varint,15,opt,name=total_rows,json=totalRows" json:"total_rows,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{144}
}

func (x *QueryResponse) GetCacheHit() bool {
	if x != nil && x.CacheHit != nil {
		return *x.CacheHit
	}
	return false
}

func (x *QueryResponse) GetDmlStats() *DmlStatistics {
	if x != nil {
		return x.DmlStats
	}
	return nil
}

func (x *QueryResponse) GetErrors() []*ErrorProto {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *QueryResponse) GetJobComplete() bool {
	if x != nil && x.JobComplete != nil {
		return *x.JobComplete
	}
	return false
}

func (x *QueryResponse) GetJobCreationReason() *JobCreationReason {
	if x != nil {
		return x.JobCreationReason
	}
	return nil
}

func (x *QueryResponse) GetJobReference() *JobReference {
	if x != nil {
		return x.JobReference
	}
	return nil
}

func (x *QueryResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *QueryResponse) GetNumDmlAffectedRows() int64 {
	if x != nil && x.NumDmlAffectedRows != nil {
		return *x.NumDmlAffectedRows
	}
	return 0
}

func (x *QueryResponse) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *QueryResponse) GetQueryId() string {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return ""
}

func (x *QueryResponse) GetRows() []*TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QueryResponse) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *QueryResponse) GetSessionInfo() *SessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *QueryResponse) GetTotalBytesProcessed() int64 {
	if x != nil && x.TotalBytesProcessed != nil {
		return *x.TotalBytesProcessed
	}
	return 0
}

func (x *QueryResponse) GetTotalRows() uint64 {
	if x != nil && x.TotalRows != nil {
		return *x.TotalRows
	}
	return 0
}

type QueryTimelineSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveUnits            *int64 `protobuf:"varint,1,opt,name=active_units,json=activeUnits" json:"active_units,omitempty"`
	CompletedUnits         *int64 `protobuf:"varint,2,opt,name=completed_units,json=completedUnits" json:"completed_units,omitempty"`
	ElapsedMs              *int64 `protobuf:"varint,3,opt,name=elapsed_ms,json=elapsedMs" json:"elapsed_ms,omitempty"`
	EstimatedRunnableUnits *int64 `protobuf:"varint,4,opt,name=estimated_runnable_units,json=estimatedRunnableUnits" json:"estimated_runnable_units,omitempty"`
	PendingUnits           *int64 `protobuf:"varint,5,opt,name=pending_units,json=pendingUnits" json:"pending_units,omitempty"`
	TotalSlotMs            *int64 `protobuf:"varint,6,opt,name=total_slot_ms,json=totalSlotMs" json:"total_slot_ms,omitempty"`
}

func (x *QueryTimelineSample) Reset() {
	*x = QueryTimelineSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimelineSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimelineSample) ProtoMessage() {}

func (x *QueryTimelineSample) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimelineSample.ProtoReflect.Descriptor instead.
func (*QueryTimelineSample) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{145}
}

func (x *QueryTimelineSample) GetActiveUnits() int64 {
	if x != nil && x.ActiveUnits != nil {
		return *x.ActiveUnits
	}
	return 0
}

func (x *QueryTimelineSample) GetCompletedUnits() int64 {
	if x != nil && x.CompletedUnits != nil {
		return *x.CompletedUnits
	}
	return 0
}

func (x *QueryTimelineSample) GetElapsedMs() int64 {
	if x != nil && x.ElapsedMs != nil {
		return *x.ElapsedMs
	}
	return 0
}

func (x *QueryTimelineSample) GetEstimatedRunnableUnits() int64 {
	if x != nil && x.EstimatedRunnableUnits != nil {
		return *x.EstimatedRunnableUnits
	}
	return 0
}

func (x *QueryTimelineSample) GetPendingUnits() int64 {
	if x != nil && x.PendingUnits != nil {
		return *x.PendingUnits
	}
	return 0
}

func (x *QueryTimelineSample) GetTotalSlotMs() int64 {
	if x != nil && x.TotalSlotMs != nil {
		return *x.TotalSlotMs
	}
	return 0
}

type RangePartitioningRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	End      *int64 `protobuf:"varint,1,opt,name=end" json:"end,omitempty"`
	Interval *int64 `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	Start    *int64 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
}

func (x *RangePartitioningRange) Reset() {
	*x = RangePartitioningRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangePartitioningRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangePartitioningRange) ProtoMessage() {}

func (x *RangePartitioningRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangePartitioningRange.ProtoReflect.Descriptor instead.
func (*RangePartitioningRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{146}
}

func (x *RangePartitioningRange) GetEnd() int64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *RangePartitioningRange) GetInterval() int64 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

func (x *RangePartitioningRange) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

type RangePartitioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field *string                 `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Range *RangePartitioningRange `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
}

func (x *RangePartitioning) Reset() {
	*x = RangePartitioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangePartitioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangePartitioning) ProtoMessage() {}

func (x *RangePartitioning) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangePartitioning.ProtoReflect.Descriptor instead.
func (*RangePartitioning) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{147}
}

func (x *RangePartitioning) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *RangePartitioning) GetRange() *RangePartitioningRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type RangeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	End   *QueryParameterValue `protobuf:"bytes,1,opt,name=end" json:"end,omitempty"`
	Start *QueryParameterValue `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
}

func (x *RangeValue) Reset() {
	*x = RangeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeValue) ProtoMessage() {}

func (x *RangeValue) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeValue.ProtoReflect.Descriptor instead.
func (*RangeValue) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{148}
}

func (x *RangeValue) GetEnd() *QueryParameterValue {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *RangeValue) GetStart() *QueryParameterValue {
	if x != nil {
		return x.Start
	}
	return nil
}

type RankingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AverageRank                        *float64 `protobuf:"fixed64,1,opt,name=average_rank,json=averageRank" json:"average_rank,omitempty"`
	MeanAveragePrecision               *float64 `protobuf:"fixed64,2,opt,name=mean_average_precision,json=meanAveragePrecision" json:"mean_average_precision,omitempty"`
	MeanSquaredError                   *float64 `protobuf:"fixed64,3,opt,name=mean_squared_error,json=meanSquaredError" json:"mean_squared_error,omitempty"`
	NormalizedDiscountedCumulativeGain *float64 `protobuf:"fixed64,4,opt,name=normalized_discounted_cumulative_gain,json=normalizedDiscountedCumulativeGain" json:"normalized_discounted_cumulative_gain,omitempty"`
}

func (x *RankingMetrics) Reset() {
	*x = RankingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingMetrics) ProtoMessage() {}

func (x *RankingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingMetrics.ProtoReflect.Descriptor instead.
func (*RankingMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{149}
}

func (x *RankingMetrics) GetAverageRank() float64 {
	if x != nil && x.AverageRank != nil {
		return *x.AverageRank
	}
	return 0
}

func (x *RankingMetrics) GetMeanAveragePrecision() float64 {
	if x != nil && x.MeanAveragePrecision != nil {
		return *x.MeanAveragePrecision
	}
	return 0
}

func (x *RankingMetrics) GetMeanSquaredError() float64 {
	if x != nil && x.MeanSquaredError != nil {
		return *x.MeanSquaredError
	}
	return 0
}

func (x *RankingMetrics) GetNormalizedDiscountedCumulativeGain() float64 {
	if x != nil && x.NormalizedDiscountedCumulativeGain != nil {
		return *x.NormalizedDiscountedCumulativeGain
	}
	return 0
}

type RegressionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeanAbsoluteError   *float64 `protobuf:"fixed64,1,opt,name=mean_absolute_error,json=meanAbsoluteError" json:"mean_absolute_error,omitempty"`
	MeanSquaredError    *float64 `protobuf:"fixed64,2,opt,name=mean_squared_error,json=meanSquaredError" json:"mean_squared_error,omitempty"`
	MeanSquaredLogError *float64 `protobuf:"fixed64,3,opt,name=mean_squared_log_error,json=meanSquaredLogError" json:"mean_squared_log_error,omitempty"`
	MedianAbsoluteError *float64 `protobuf:"fixed64,4,opt,name=median_absolute_error,json=medianAbsoluteError" json:"median_absolute_error,omitempty"`
	RSquared            *float64 `protobuf:"fixed64,5,opt,name=r_squared,json=rSquared" json:"r_squared,omitempty"`
}

func (x *RegressionMetrics) Reset() {
	*x = RegressionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegressionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionMetrics) ProtoMessage() {}

func (x *RegressionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionMetrics.ProtoReflect.Descriptor instead.
func (*RegressionMetrics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{150}
}

func (x *RegressionMetrics) GetMeanAbsoluteError() float64 {
	if x != nil && x.MeanAbsoluteError != nil {
		return *x.MeanAbsoluteError
	}
	return 0
}

func (x *RegressionMetrics) GetMeanSquaredError() float64 {
	if x != nil && x.MeanSquaredError != nil {
		return *x.MeanSquaredError
	}
	return 0
}

func (x *RegressionMetrics) GetMeanSquaredLogError() float64 {
	if x != nil && x.MeanSquaredLogError != nil {
		return *x.MeanSquaredLogError
	}
	return 0
}

func (x *RegressionMetrics) GetMedianAbsoluteError() float64 {
	if x != nil && x.MedianAbsoluteError != nil {
		return *x.MedianAbsoluteError
	}
	return 0
}

func (x *RegressionMetrics) GetRSquared() float64 {
	if x != nil && x.RSquared != nil {
		return *x.RSquared
	}
	return 0
}

type RemoteFunctionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection         *string           `protobuf:"bytes,1,opt,name=connection" json:"connection,omitempty"`
	Endpoint           *string           `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	MaxBatchingRows    *int64            `protobuf:"varint,3,opt,name=max_batching_rows,json=maxBatchingRows" json:"max_batching_rows,omitempty"`
	UserDefinedContext map[string]string `protobuf:"bytes,4,rep,name=user_defined_context,json=userDefinedContext" json:"user_defined_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *RemoteFunctionOptions) Reset() {
	*x = RemoteFunctionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteFunctionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteFunctionOptions) ProtoMessage() {}

func (x *RemoteFunctionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteFunctionOptions.ProtoReflect.Descriptor instead.
func (*RemoteFunctionOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{151}
}

func (x *RemoteFunctionOptions) GetConnection() string {
	if x != nil && x.Connection != nil {
		return *x.Connection
	}
	return ""
}

func (x *RemoteFunctionOptions) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *RemoteFunctionOptions) GetMaxBatchingRows() int64 {
	if x != nil && x.MaxBatchingRows != nil {
		return *x.MaxBatchingRows
	}
	return 0
}

func (x *RemoteFunctionOptions) GetUserDefinedContext() map[string]string {
	if x != nil {
		return x.UserDefinedContext
	}
	return nil
}

type RemoteModelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection         *string `protobuf:"bytes,1,opt,name=connection" json:"connection,omitempty"`
	Endpoint           *string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	MaxBatchingRows    *int64  `protobuf:"varint,3,opt,name=max_batching_rows,json=maxBatchingRows" json:"max_batching_rows,omitempty"`
	RemoteModelVersion *string `protobuf:"bytes,4,opt,name=remote_model_version,json=remoteModelVersion" json:"remote_model_version,omitempty"`
	RemoteServiceType  *string `protobuf:"bytes,5,opt,name=remote_service_type,json=remoteServiceType" json:"remote_service_type,omitempty"`
	SpeechRecognizer   *string `protobuf:"bytes,6,opt,name=speech_recognizer,json=speechRecognizer" json:"speech_recognizer,omitempty"`
}

func (x *RemoteModelInfo) Reset() {
	*x = RemoteModelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteModelInfo) ProtoMessage() {}

func (x *RemoteModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteModelInfo.ProtoReflect.Descriptor instead.
func (*RemoteModelInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{152}
}

func (x *RemoteModelInfo) GetConnection() string {
	if x != nil && x.Connection != nil {
		return *x.Connection
	}
	return ""
}

func (x *RemoteModelInfo) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

func (x *RemoteModelInfo) GetMaxBatchingRows() int64 {
	if x != nil && x.MaxBatchingRows != nil {
		return *x.MaxBatchingRows
	}
	return 0
}

func (x *RemoteModelInfo) GetRemoteModelVersion() string {
	if x != nil && x.RemoteModelVersion != nil {
		return *x.RemoteModelVersion
	}
	return ""
}

func (x *RemoteModelInfo) GetRemoteServiceType() string {
	if x != nil && x.RemoteServiceType != nil {
		return *x.RemoteServiceType
	}
	return ""
}

func (x *RemoteModelInfo) GetSpeechRecognizer() string {
	if x != nil && x.SpeechRecognizer != nil {
		return *x.SpeechRecognizer
	}
	return ""
}

type Routine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arguments             []*Argument            `protobuf:"bytes,1,rep,name=arguments" json:"arguments,omitempty"`
	CreationTime          *int64                 `protobuf:"varint,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	DataGovernanceType    *string                `protobuf:"bytes,3,opt,name=data_governance_type,json=dataGovernanceType" json:"data_governance_type,omitempty"`
	DefinitionBody        *string                `protobuf:"bytes,4,opt,name=definition_body,json=definitionBody" json:"definition_body,omitempty"`
	Description           *string                `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	DeterminismLevel      *string                `protobuf:"bytes,6,opt,name=determinism_level,json=determinismLevel" json:"determinism_level,omitempty"`
	Etag                  *string                `protobuf:"bytes,7,opt,name=etag" json:"etag,omitempty"`
	ImportedLibraries     []string               `protobuf:"bytes,8,rep,name=imported_libraries,json=importedLibraries" json:"imported_libraries,omitempty"`
	Language              *string                `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	LastModifiedTime      *int64                 `protobuf:"varint,10,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	RemoteFunctionOptions *RemoteFunctionOptions `protobuf:"bytes,11,opt,name=remote_function_options,json=remoteFunctionOptions" json:"remote_function_options,omitempty"`
	ReturnTableType       *StandardSqlTableType  `protobuf:"bytes,12,opt,name=return_table_type,json=returnTableType" json:"return_table_type,omitempty"`
	ReturnType            *StandardSqlDataType   `protobuf:"bytes,13,opt,name=return_type,json=returnType" json:"return_type,omitempty"`
	RoutineReference      *RoutineReference      `protobuf:"bytes,14,opt,name=routine_reference,json=routineReference" json:"routine_reference,omitempty"`
	RoutineType           *string                `protobuf:"bytes,15,opt,name=routine_type,json=routineType" json:"routine_type,omitempty"`
	SecurityMode          *string                `protobuf:"bytes,16,opt,name=security_mode,json=securityMode" json:"security_mode,omitempty"`
	SparkOptions          *SparkOptions          `protobuf:"bytes,17,opt,name=spark_options,json=sparkOptions" json:"spark_options,omitempty"`
	StrictMode            *bool                  `protobuf:"varint,18,opt,name=strict_mode,json=strictMode" json:"strict_mode,omitempty"`
}

func (x *Routine) Reset() {
	*x = Routine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routine) ProtoMessage() {}

func (x *Routine) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routine.ProtoReflect.Descriptor instead.
func (*Routine) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{153}
}

func (x *Routine) GetArguments() []*Argument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Routine) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Routine) GetDataGovernanceType() string {
	if x != nil && x.DataGovernanceType != nil {
		return *x.DataGovernanceType
	}
	return ""
}

func (x *Routine) GetDefinitionBody() string {
	if x != nil && x.DefinitionBody != nil {
		return *x.DefinitionBody
	}
	return ""
}

func (x *Routine) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Routine) GetDeterminismLevel() string {
	if x != nil && x.DeterminismLevel != nil {
		return *x.DeterminismLevel
	}
	return ""
}

func (x *Routine) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *Routine) GetImportedLibraries() []string {
	if x != nil {
		return x.ImportedLibraries
	}
	return nil
}

func (x *Routine) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *Routine) GetLastModifiedTime() int64 {
	if x != nil && x.LastModifiedTime != nil {
		return *x.LastModifiedTime
	}
	return 0
}

func (x *Routine) GetRemoteFunctionOptions() *RemoteFunctionOptions {
	if x != nil {
		return x.RemoteFunctionOptions
	}
	return nil
}

func (x *Routine) GetReturnTableType() *StandardSqlTableType {
	if x != nil {
		return x.ReturnTableType
	}
	return nil
}

func (x *Routine) GetReturnType() *StandardSqlDataType {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *Routine) GetRoutineReference() *RoutineReference {
	if x != nil {
		return x.RoutineReference
	}
	return nil
}

func (x *Routine) GetRoutineType() string {
	if x != nil && x.RoutineType != nil {
		return *x.RoutineType
	}
	return ""
}

func (x *Routine) GetSecurityMode() string {
	if x != nil && x.SecurityMode != nil {
		return *x.SecurityMode
	}
	return ""
}

func (x *Routine) GetSparkOptions() *SparkOptions {
	if x != nil {
		return x.SparkOptions
	}
	return nil
}

func (x *Routine) GetStrictMode() bool {
	if x != nil && x.StrictMode != nil {
		return *x.StrictMode
	}
	return false
}

type RoutineReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	RoutineId *string `protobuf:"bytes,3,opt,name=routine_id,json=routineId" json:"routine_id,omitempty"`
}

func (x *RoutineReference) Reset() {
	*x = RoutineReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutineReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutineReference) ProtoMessage() {}

func (x *RoutineReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutineReference.ProtoReflect.Descriptor instead.
func (*RoutineReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{154}
}

func (x *RoutineReference) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *RoutineReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *RoutineReference) GetRoutineId() string {
	if x != nil && x.RoutineId != nil {
		return *x.RoutineId
	}
	return ""
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualLabel *string  `protobuf:"bytes,1,opt,name=actual_label,json=actualLabel" json:"actual_label,omitempty"`
	Entries     []*Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{155}
}

func (x *Row) GetActualLabel() string {
	if x != nil && x.ActualLabel != nil {
		return *x.ActualLabel
	}
	return ""
}

func (x *Row) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type RowAccessPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime             *timestamp.Timestamp      `protobuf:"bytes,1,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Etag                     *string                   `protobuf:"bytes,2,opt,name=etag" json:"etag,omitempty"`
	FilterPredicate          *string                   `protobuf:"bytes,3,opt,name=filter_predicate,json=filterPredicate" json:"filter_predicate,omitempty"`
	LastModifiedTime         *timestamp.Timestamp      `protobuf:"bytes,4,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	RowAccessPolicyReference *RowAccessPolicyReference `protobuf:"bytes,5,opt,name=row_access_policy_reference,json=rowAccessPolicyReference" json:"row_access_policy_reference,omitempty"`
}

func (x *RowAccessPolicy) Reset() {
	*x = RowAccessPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowAccessPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowAccessPolicy) ProtoMessage() {}

func (x *RowAccessPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowAccessPolicy.ProtoReflect.Descriptor instead.
func (*RowAccessPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{156}
}

func (x *RowAccessPolicy) GetCreationTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RowAccessPolicy) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *RowAccessPolicy) GetFilterPredicate() string {
	if x != nil && x.FilterPredicate != nil {
		return *x.FilterPredicate
	}
	return ""
}

func (x *RowAccessPolicy) GetLastModifiedTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastModifiedTime
	}
	return nil
}

func (x *RowAccessPolicy) GetRowAccessPolicyReference() *RowAccessPolicyReference {
	if x != nil {
		return x.RowAccessPolicyReference
	}
	return nil
}

type RowAccessPolicyReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	PolicyId  *string `protobuf:"bytes,2,opt,name=policy_id,json=policyId" json:"policy_id,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId   *string `protobuf:"bytes,4,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *RowAccessPolicyReference) Reset() {
	*x = RowAccessPolicyReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowAccessPolicyReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowAccessPolicyReference) ProtoMessage() {}

func (x *RowAccessPolicyReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowAccessPolicyReference.ProtoReflect.Descriptor instead.
func (*RowAccessPolicyReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{157}
}

func (x *RowAccessPolicyReference) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *RowAccessPolicyReference) GetPolicyId() string {
	if x != nil && x.PolicyId != nil {
		return *x.PolicyId
	}
	return ""
}

func (x *RowAccessPolicyReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *RowAccessPolicyReference) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type RowLevelSecurityStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowLevelSecurityApplied *bool `protobuf:"varint,1,opt,name=row_level_security_applied,json=rowLevelSecurityApplied" json:"row_level_security_applied,omitempty"`
}

func (x *RowLevelSecurityStatistics) Reset() {
	*x = RowLevelSecurityStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowLevelSecurityStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowLevelSecurityStatistics) ProtoMessage() {}

func (x *RowLevelSecurityStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowLevelSecurityStatistics.ProtoReflect.Descriptor instead.
func (*RowLevelSecurityStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{158}
}

func (x *RowLevelSecurityStatistics) GetRowLevelSecurityApplied() bool {
	if x != nil && x.RowLevelSecurityApplied != nil {
		return *x.RowLevelSecurityApplied
	}
	return false
}

type ScriptOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyResultStatement  *string `protobuf:"bytes,1,opt,name=key_result_statement,json=keyResultStatement" json:"key_result_statement,omitempty"`
	StatementByteBudget *int64  `protobuf:"varint,2,opt,name=statement_byte_budget,json=statementByteBudget" json:"statement_byte_budget,omitempty"`
	StatementTimeoutMs  *int64  `protobuf:"varint,3,opt,name=statement_timeout_ms,json=statementTimeoutMs" json:"statement_timeout_ms,omitempty"`
}

func (x *ScriptOptions) Reset() {
	*x = ScriptOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptOptions) ProtoMessage() {}

func (x *ScriptOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptOptions.ProtoReflect.Descriptor instead.
func (*ScriptOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{159}
}

func (x *ScriptOptions) GetKeyResultStatement() string {
	if x != nil && x.KeyResultStatement != nil {
		return *x.KeyResultStatement
	}
	return ""
}

func (x *ScriptOptions) GetStatementByteBudget() int64 {
	if x != nil && x.StatementByteBudget != nil {
		return *x.StatementByteBudget
	}
	return 0
}

func (x *ScriptOptions) GetStatementTimeoutMs() int64 {
	if x != nil && x.StatementTimeoutMs != nil {
		return *x.StatementTimeoutMs
	}
	return 0
}

type ScriptStackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndColumn   *int32  `protobuf:"varint,1,opt,name=end_column,json=endColumn" json:"end_column,omitempty"`
	EndLine     *int32  `protobuf:"varint,2,opt,name=end_line,json=endLine" json:"end_line,omitempty"`
	ProcedureId *string `protobuf:"bytes,3,opt,name=procedure_id,json=procedureId" json:"procedure_id,omitempty"`
	StartColumn *int32  `protobuf:"varint,4,opt,name=start_column,json=startColumn" json:"start_column,omitempty"`
	StartLine   *int32  `protobuf:"varint,5,opt,name=start_line,json=startLine" json:"start_line,omitempty"`
	Text        *string `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
}

func (x *ScriptStackFrame) Reset() {
	*x = ScriptStackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptStackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptStackFrame) ProtoMessage() {}

func (x *ScriptStackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptStackFrame.ProtoReflect.Descriptor instead.
func (*ScriptStackFrame) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{160}
}

func (x *ScriptStackFrame) GetEndColumn() int32 {
	if x != nil && x.EndColumn != nil {
		return *x.EndColumn
	}
	return 0
}

func (x *ScriptStackFrame) GetEndLine() int32 {
	if x != nil && x.EndLine != nil {
		return *x.EndLine
	}
	return 0
}

func (x *ScriptStackFrame) GetProcedureId() string {
	if x != nil && x.ProcedureId != nil {
		return *x.ProcedureId
	}
	return ""
}

func (x *ScriptStackFrame) GetStartColumn() int32 {
	if x != nil && x.StartColumn != nil {
		return *x.StartColumn
	}
	return 0
}

func (x *ScriptStackFrame) GetStartLine() int32 {
	if x != nil && x.StartLine != nil {
		return *x.StartLine
	}
	return 0
}

func (x *ScriptStackFrame) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type ScriptStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvaluationKind *string             `protobuf:"bytes,1,opt,name=evaluation_kind,json=evaluationKind" json:"evaluation_kind,omitempty"`
	StackFrames    []*ScriptStackFrame `protobuf:"bytes,2,rep,name=stack_frames,json=stackFrames" json:"stack_frames,omitempty"`
}

func (x *ScriptStatistics) Reset() {
	*x = ScriptStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptStatistics) ProtoMessage() {}

func (x *ScriptStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptStatistics.ProtoReflect.Descriptor instead.
func (*ScriptStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{161}
}

func (x *ScriptStatistics) GetEvaluationKind() string {
	if x != nil && x.EvaluationKind != nil {
		return *x.EvaluationKind
	}
	return ""
}

func (x *ScriptStatistics) GetStackFrames() []*ScriptStackFrame {
	if x != nil {
		return x.StackFrames
	}
	return nil
}

type SearchStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexUnusedReasons []*IndexUnusedReason `protobuf:"bytes,1,rep,name=index_unused_reasons,json=indexUnusedReasons" json:"index_unused_reasons,omitempty"`
	IndexUsageMode     *string              `protobuf:"bytes,2,opt,name=index_usage_mode,json=indexUsageMode" json:"index_usage_mode,omitempty"`
}

func (x *SearchStatistics) Reset() {
	*x = SearchStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchStatistics) ProtoMessage() {}

func (x *SearchStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchStatistics.ProtoReflect.Descriptor instead.
func (*SearchStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{162}
}

func (x *SearchStatistics) GetIndexUnusedReasons() []*IndexUnusedReason {
	if x != nil {
		return x.IndexUnusedReasons
	}
	return nil
}

func (x *SearchStatistics) GetIndexUsageMode() string {
	if x != nil && x.IndexUsageMode != nil {
		return *x.IndexUsageMode
	}
	return ""
}

type SerDeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parameters           map[string]string `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SerializationLibrary *string           `protobuf:"bytes,3,opt,name=serialization_library,json=serializationLibrary" json:"serialization_library,omitempty"`
}

func (x *SerDeInfo) Reset() {
	*x = SerDeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerDeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerDeInfo) ProtoMessage() {}

func (x *SerDeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerDeInfo.ProtoReflect.Descriptor instead.
func (*SerDeInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{163}
}

func (x *SerDeInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SerDeInfo) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SerDeInfo) GetSerializationLibrary() string {
	if x != nil && x.SerializationLibrary != nil {
		return *x.SerializationLibrary
	}
	return ""
}

type SessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{164}
}

func (x *SessionInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type SetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy     *Policy `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
	UpdateMask *string `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (x *SetIamPolicyRequest) Reset() {
	*x = SetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIamPolicyRequest) ProtoMessage() {}

func (x *SetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*SetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{165}
}

func (x *SetIamPolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *SetIamPolicyRequest) GetUpdateMask() string {
	if x != nil && x.UpdateMask != nil {
		return *x.UpdateMask
	}
	return ""
}

type SkewSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageId *int64 `protobuf:"varint,1,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
}

func (x *SkewSource) Reset() {
	*x = SkewSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkewSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkewSource) ProtoMessage() {}

func (x *SkewSource) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkewSource.ProtoReflect.Descriptor instead.
func (*SkewSource) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{166}
}

func (x *SkewSource) GetStageId() int64 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

type SnapshotDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseTableReference *TableReference      `protobuf:"bytes,1,opt,name=base_table_reference,json=baseTableReference" json:"base_table_reference,omitempty"`
	SnapshotTime       *timestamp.Timestamp `protobuf:"bytes,2,opt,name=snapshot_time,json=snapshotTime" json:"snapshot_time,omitempty"`
}

func (x *SnapshotDefinition) Reset() {
	*x = SnapshotDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDefinition) ProtoMessage() {}

func (x *SnapshotDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDefinition.ProtoReflect.Descriptor instead.
func (*SnapshotDefinition) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{167}
}

func (x *SnapshotDefinition) GetBaseTableReference() *TableReference {
	if x != nil {
		return x.BaseTableReference
	}
	return nil
}

func (x *SnapshotDefinition) GetSnapshotTime() *timestamp.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

type SparkLoggingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    *string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	ResourceType *string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
}

func (x *SparkLoggingInfo) Reset() {
	*x = SparkLoggingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparkLoggingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkLoggingInfo) ProtoMessage() {}

func (x *SparkLoggingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkLoggingInfo.ProtoReflect.Descriptor instead.
func (*SparkLoggingInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{168}
}

func (x *SparkLoggingInfo) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *SparkLoggingInfo) GetResourceType() string {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return ""
}

type SparkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchiveUris    []string          `protobuf:"bytes,1,rep,name=archive_uris,json=archiveUris" json:"archive_uris,omitempty"`
	Connection     *string           `protobuf:"bytes,2,opt,name=connection" json:"connection,omitempty"`
	ContainerImage *string           `protobuf:"bytes,3,opt,name=container_image,json=containerImage" json:"container_image,omitempty"`
	FileUris       []string          `protobuf:"bytes,4,rep,name=file_uris,json=fileUris" json:"file_uris,omitempty"`
	JarUris        []string          `protobuf:"bytes,5,rep,name=jar_uris,json=jarUris" json:"jar_uris,omitempty"`
	MainClass      *string           `protobuf:"bytes,6,opt,name=main_class,json=mainClass" json:"main_class,omitempty"`
	MainFileUri    *string           `protobuf:"bytes,7,opt,name=main_file_uri,json=mainFileUri" json:"main_file_uri,omitempty"`
	Properties     map[string]string `protobuf:"bytes,8,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PyFileUris     []string          `protobuf:"bytes,9,rep,name=py_file_uris,json=pyFileUris" json:"py_file_uris,omitempty"`
	RuntimeVersion *string           `protobuf:"bytes,10,opt,name=runtime_version,json=runtimeVersion" json:"runtime_version,omitempty"`
}

func (x *SparkOptions) Reset() {
	*x = SparkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkOptions) ProtoMessage() {}

func (x *SparkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkOptions.ProtoReflect.Descriptor instead.
func (*SparkOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{169}
}

func (x *SparkOptions) GetArchiveUris() []string {
	if x != nil {
		return x.ArchiveUris
	}
	return nil
}

func (x *SparkOptions) GetConnection() string {
	if x != nil && x.Connection != nil {
		return *x.Connection
	}
	return ""
}

func (x *SparkOptions) GetContainerImage() string {
	if x != nil && x.ContainerImage != nil {
		return *x.ContainerImage
	}
	return ""
}

func (x *SparkOptions) GetFileUris() []string {
	if x != nil {
		return x.FileUris
	}
	return nil
}

func (x *SparkOptions) GetJarUris() []string {
	if x != nil {
		return x.JarUris
	}
	return nil
}

func (x *SparkOptions) GetMainClass() string {
	if x != nil && x.MainClass != nil {
		return *x.MainClass
	}
	return ""
}

func (x *SparkOptions) GetMainFileUri() string {
	if x != nil && x.MainFileUri != nil {
		return *x.MainFileUri
	}
	return ""
}

func (x *SparkOptions) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SparkOptions) GetPyFileUris() []string {
	if x != nil {
		return x.PyFileUris
	}
	return nil
}

func (x *SparkOptions) GetRuntimeVersion() string {
	if x != nil && x.RuntimeVersion != nil {
		return *x.RuntimeVersion
	}
	return ""
}

type SparkStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints        map[string]string `protobuf:"bytes,1,rep,name=endpoints" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GcsStagingBucket *string           `protobuf:"bytes,2,opt,name=gcs_staging_bucket,json=gcsStagingBucket" json:"gcs_staging_bucket,omitempty"`
	KmsKeyName       *string           `protobuf:"bytes,3,opt,name=kms_key_name,json=kmsKeyName" json:"kms_key_name,omitempty"`
	LoggingInfo      *SparkLoggingInfo `protobuf:"bytes,4,opt,name=logging_info,json=loggingInfo" json:"logging_info,omitempty"`
	SparkJobId       *string           `protobuf:"bytes,5,opt,name=spark_job_id,json=sparkJobId" json:"spark_job_id,omitempty"`
	SparkJobLocation *string           `protobuf:"bytes,6,opt,name=spark_job_location,json=sparkJobLocation" json:"spark_job_location,omitempty"`
}

func (x *SparkStatistics) Reset() {
	*x = SparkStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparkStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkStatistics) ProtoMessage() {}

func (x *SparkStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkStatistics.ProtoReflect.Descriptor instead.
func (*SparkStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{170}
}

func (x *SparkStatistics) GetEndpoints() map[string]string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *SparkStatistics) GetGcsStagingBucket() string {
	if x != nil && x.GcsStagingBucket != nil {
		return *x.GcsStagingBucket
	}
	return ""
}

func (x *SparkStatistics) GetKmsKeyName() string {
	if x != nil && x.KmsKeyName != nil {
		return *x.KmsKeyName
	}
	return ""
}

func (x *SparkStatistics) GetLoggingInfo() *SparkLoggingInfo {
	if x != nil {
		return x.LoggingInfo
	}
	return nil
}

func (x *SparkStatistics) GetSparkJobId() string {
	if x != nil && x.SparkJobId != nil {
		return *x.SparkJobId
	}
	return ""
}

func (x *SparkStatistics) GetSparkJobLocation() string {
	if x != nil && x.SparkJobLocation != nil {
		return *x.SparkJobLocation
	}
	return ""
}

type StagePerformanceChangeInsight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputDataChange *InputDataChange `protobuf:"bytes,1,opt,name=input_data_change,json=inputDataChange" json:"input_data_change,omitempty"`
	StageId         *int64           `protobuf:"varint,2,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
}

func (x *StagePerformanceChangeInsight) Reset() {
	*x = StagePerformanceChangeInsight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StagePerformanceChangeInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagePerformanceChangeInsight) ProtoMessage() {}

func (x *StagePerformanceChangeInsight) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagePerformanceChangeInsight.ProtoReflect.Descriptor instead.
func (*StagePerformanceChangeInsight) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{171}
}

func (x *StagePerformanceChangeInsight) GetInputDataChange() *InputDataChange {
	if x != nil {
		return x.InputDataChange
	}
	return nil
}

func (x *StagePerformanceChangeInsight) GetStageId() int64 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

type StagePerformanceStandaloneInsight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiEngineReasons          []*BiEngineReason      `protobuf:"bytes,1,rep,name=bi_engine_reasons,json=biEngineReasons" json:"bi_engine_reasons,omitempty"`
	HighCardinalityJoins     []*HighCardinalityJoin `protobuf:"bytes,2,rep,name=high_cardinality_joins,json=highCardinalityJoins" json:"high_cardinality_joins,omitempty"`
	InsufficientShuffleQuota *bool                  `protobuf:"varint,3,opt,name=insufficient_shuffle_quota,json=insufficientShuffleQuota" json:"insufficient_shuffle_quota,omitempty"`
	PartitionSkew            *PartitionSkew         `protobuf:"bytes,4,opt,name=partition_skew,json=partitionSkew" json:"partition_skew,omitempty"`
	SlotContention           *bool                  `protobuf:"varint,5,opt,name=slot_contention,json=slotContention" json:"slot_contention,omitempty"`
	StageId                  *int64                 `protobuf:"varint,6,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
}

func (x *StagePerformanceStandaloneInsight) Reset() {
	*x = StagePerformanceStandaloneInsight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StagePerformanceStandaloneInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StagePerformanceStandaloneInsight) ProtoMessage() {}

func (x *StagePerformanceStandaloneInsight) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StagePerformanceStandaloneInsight.ProtoReflect.Descriptor instead.
func (*StagePerformanceStandaloneInsight) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{172}
}

func (x *StagePerformanceStandaloneInsight) GetBiEngineReasons() []*BiEngineReason {
	if x != nil {
		return x.BiEngineReasons
	}
	return nil
}

func (x *StagePerformanceStandaloneInsight) GetHighCardinalityJoins() []*HighCardinalityJoin {
	if x != nil {
		return x.HighCardinalityJoins
	}
	return nil
}

func (x *StagePerformanceStandaloneInsight) GetInsufficientShuffleQuota() bool {
	if x != nil && x.InsufficientShuffleQuota != nil {
		return *x.InsufficientShuffleQuota
	}
	return false
}

func (x *StagePerformanceStandaloneInsight) GetPartitionSkew() *PartitionSkew {
	if x != nil {
		return x.PartitionSkew
	}
	return nil
}

func (x *StagePerformanceStandaloneInsight) GetSlotContention() bool {
	if x != nil && x.SlotContention != nil {
		return *x.SlotContention
	}
	return false
}

func (x *StagePerformanceStandaloneInsight) GetStageId() int64 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

type StandardSqlDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrayElementType *StandardSqlDataType   `protobuf:"bytes,1,opt,name=array_element_type,json=arrayElementType" json:"array_element_type,omitempty"`
	RangeElementType *StandardSqlDataType   `protobuf:"bytes,2,opt,name=range_element_type,json=rangeElementType" json:"range_element_type,omitempty"`
	StructType       *StandardSqlStructType `protobuf:"bytes,3,opt,name=struct_type,json=structType" json:"struct_type,omitempty"`
	TypeKind         *string                `protobuf:"bytes,4,opt,name=type_kind,json=typeKind" json:"type_kind,omitempty"`
}

func (x *StandardSqlDataType) Reset() {
	*x = StandardSqlDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardSqlDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardSqlDataType) ProtoMessage() {}

func (x *StandardSqlDataType) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardSqlDataType.ProtoReflect.Descriptor instead.
func (*StandardSqlDataType) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{173}
}

func (x *StandardSqlDataType) GetArrayElementType() *StandardSqlDataType {
	if x != nil {
		return x.ArrayElementType
	}
	return nil
}

func (x *StandardSqlDataType) GetRangeElementType() *StandardSqlDataType {
	if x != nil {
		return x.RangeElementType
	}
	return nil
}

func (x *StandardSqlDataType) GetStructType() *StandardSqlStructType {
	if x != nil {
		return x.StructType
	}
	return nil
}

func (x *StandardSqlDataType) GetTypeKind() string {
	if x != nil && x.TypeKind != nil {
		return *x.TypeKind
	}
	return ""
}

type StandardSqlField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *StandardSqlDataType `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (x *StandardSqlField) Reset() {
	*x = StandardSqlField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardSqlField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardSqlField) ProtoMessage() {}

func (x *StandardSqlField) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardSqlField.ProtoReflect.Descriptor instead.
func (*StandardSqlField) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{174}
}

func (x *StandardSqlField) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StandardSqlField) GetType() *StandardSqlDataType {
	if x != nil {
		return x.Type
	}
	return nil
}

type StandardSqlStructType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*StandardSqlField `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (x *StandardSqlStructType) Reset() {
	*x = StandardSqlStructType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardSqlStructType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardSqlStructType) ProtoMessage() {}

func (x *StandardSqlStructType) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardSqlStructType.ProtoReflect.Descriptor instead.
func (*StandardSqlStructType) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{175}
}

func (x *StandardSqlStructType) GetFields() []*StandardSqlField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type StandardSqlTableType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []*StandardSqlField `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (x *StandardSqlTableType) Reset() {
	*x = StandardSqlTableType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardSqlTableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardSqlTableType) ProtoMessage() {}

func (x *StandardSqlTableType) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardSqlTableType.ProtoReflect.Descriptor instead.
func (*StandardSqlTableType) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{176}
}

func (x *StandardSqlTableType) GetColumns() []*StandardSqlField {
	if x != nil {
		return x.Columns
	}
	return nil
}

type StorageDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputFormat  *string    `protobuf:"bytes,1,opt,name=input_format,json=inputFormat" json:"input_format,omitempty"`
	LocationUri  *string    `protobuf:"bytes,2,opt,name=location_uri,json=locationUri" json:"location_uri,omitempty"`
	OutputFormat *string    `protobuf:"bytes,3,opt,name=output_format,json=outputFormat" json:"output_format,omitempty"`
	SerdeInfo    *SerDeInfo `protobuf:"bytes,4,opt,name=serde_info,json=serdeInfo" json:"serde_info,omitempty"`
}

func (x *StorageDescriptor) Reset() {
	*x = StorageDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDescriptor) ProtoMessage() {}

func (x *StorageDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDescriptor.ProtoReflect.Descriptor instead.
func (*StorageDescriptor) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{177}
}

func (x *StorageDescriptor) GetInputFormat() string {
	if x != nil && x.InputFormat != nil {
		return *x.InputFormat
	}
	return ""
}

func (x *StorageDescriptor) GetLocationUri() string {
	if x != nil && x.LocationUri != nil {
		return *x.LocationUri
	}
	return ""
}

func (x *StorageDescriptor) GetOutputFormat() string {
	if x != nil && x.OutputFormat != nil {
		return *x.OutputFormat
	}
	return ""
}

func (x *StorageDescriptor) GetSerdeInfo() *SerDeInfo {
	if x != nil {
		return x.SerdeInfo
	}
	return nil
}

type Streamingbuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatedBytes  *uint64 `protobuf:"varint,1,opt,name=estimated_bytes,json=estimatedBytes" json:"estimated_bytes,omitempty"`
	EstimatedRows   *uint64 `protobuf:"varint,2,opt,name=estimated_rows,json=estimatedRows" json:"estimated_rows,omitempty"`
	OldestEntryTime *uint64 `protobuf:"varint,3,opt,name=oldest_entry_time,json=oldestEntryTime" json:"oldest_entry_time,omitempty"`
}

func (x *Streamingbuffer) Reset() {
	*x = Streamingbuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Streamingbuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Streamingbuffer) ProtoMessage() {}

func (x *Streamingbuffer) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Streamingbuffer.ProtoReflect.Descriptor instead.
func (*Streamingbuffer) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{178}
}

func (x *Streamingbuffer) GetEstimatedBytes() uint64 {
	if x != nil && x.EstimatedBytes != nil {
		return *x.EstimatedBytes
	}
	return 0
}

func (x *Streamingbuffer) GetEstimatedRows() uint64 {
	if x != nil && x.EstimatedRows != nil {
		return *x.EstimatedRows
	}
	return 0
}

func (x *Streamingbuffer) GetOldestEntryTime() uint64 {
	if x != nil && x.OldestEntryTime != nil {
		return *x.OldestEntryTime
	}
	return 0
}

type StringHparamSearchSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candidates []string `protobuf:"bytes,1,rep,name=candidates" json:"candidates,omitempty"`
}

func (x *StringHparamSearchSpace) Reset() {
	*x = StringHparamSearchSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringHparamSearchSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringHparamSearchSpace) ProtoMessage() {}

func (x *StringHparamSearchSpace) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringHparamSearchSpace.ProtoReflect.Descriptor instead.
func (*StringHparamSearchSpace) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{179}
}

func (x *StringHparamSearchSpace) GetCandidates() []string {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type SystemVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types  map[string]*StandardSqlDataType `protobuf:"bytes,1,rep,name=types" json:"types,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Values map[string]*any1.Any            `protobuf:"bytes,2,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *SystemVariables) Reset() {
	*x = SystemVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemVariables) ProtoMessage() {}

func (x *SystemVariables) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemVariables.ProtoReflect.Descriptor instead.
func (*SystemVariables) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{180}
}

func (x *SystemVariables) GetTypes() map[string]*StandardSqlDataType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *SystemVariables) GetValues() map[string]*any1.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BiglakeConfiguration        *BigLakeConfiguration        `protobuf:"bytes,1,opt,name=biglake_configuration,json=biglakeConfiguration" json:"biglake_configuration,omitempty"`
	CloneDefinition             *CloneDefinition             `protobuf:"bytes,2,opt,name=clone_definition,json=cloneDefinition" json:"clone_definition,omitempty"`
	Clustering                  *Clustering                  `protobuf:"bytes,3,opt,name=clustering" json:"clustering,omitempty"`
	CreationTime                *int64                       `protobuf:"varint,4,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	DefaultCollation            *string                      `protobuf:"bytes,5,opt,name=default_collation,json=defaultCollation" json:"default_collation,omitempty"`
	DefaultRoundingMode         *string                      `protobuf:"bytes,6,opt,name=default_rounding_mode,json=defaultRoundingMode" json:"default_rounding_mode,omitempty"`
	Description                 *string                      `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	EncryptionConfiguration     *EncryptionConfiguration     `protobuf:"bytes,8,opt,name=encryption_configuration,json=encryptionConfiguration" json:"encryption_configuration,omitempty"`
	Etag                        *string                      `protobuf:"bytes,9,opt,name=etag" json:"etag,omitempty"`
	ExpirationTime              *int64                       `protobuf:"varint,10,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	ExternalCatalogTableOptions *ExternalCatalogTableOptions `protobuf:"bytes,11,opt,name=external_catalog_table_options,json=externalCatalogTableOptions" json:"external_catalog_table_options,omitempty"`
	ExternalDataConfiguration   *ExternalDataConfiguration   `protobuf:"bytes,12,opt,name=external_data_configuration,json=externalDataConfiguration" json:"external_data_configuration,omitempty"`
	FriendlyName                *string                      `protobuf:"bytes,13,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Id                          *string                      `protobuf:"bytes,14,opt,name=id" json:"id,omitempty"`
	Kind                        *string                      `protobuf:"bytes,15,opt,name=kind" json:"kind,omitempty"`
	Labels                      map[string]string            `protobuf:"bytes,16,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastModifiedTime            *uint64                      `protobuf:"varint,17,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
	Location                    *string                      `protobuf:"bytes,18,opt,name=location" json:"location,omitempty"`
	MaterializedView            *MaterializedViewDefinition  `protobuf:"bytes,19,opt,name=materialized_view,json=materializedView" json:"materialized_view,omitempty"`
	MaterializedViewStatus      *MaterializedViewStatus      `protobuf:"bytes,20,opt,name=materialized_view_status,json=materializedViewStatus" json:"materialized_view_status,omitempty"`
	MaxStaleness                *string                      `protobuf:"bytes,21,opt,name=max_staleness,json=maxStaleness" json:"max_staleness,omitempty"`
	Model                       *ModelDefinition             `protobuf:"bytes,22,opt,name=model" json:"model,omitempty"`
	NumActiveLogicalBytes       *int64                       `protobuf:"varint,23,opt,name=num_active_logical_bytes,json=numActiveLogicalBytes" json:"num_active_logical_bytes,omitempty"`
	NumActivePhysicalBytes      *int64                       `protobuf:"varint,24,opt,name=num_active_physical_bytes,json=numActivePhysicalBytes" json:"num_active_physical_bytes,omitempty"`
	NumBytes                    *int64                       `protobuf:"varint,25,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	NumLongTermBytes            *int64                       `protobuf:"varint,26,opt,name=num_long_term_bytes,json=numLongTermBytes" json:"num_long_term_bytes,omitempty"`
	NumLongTermLogicalBytes     *int64                       `protobuf:"varint,27,opt,name=num_long_term_logical_bytes,json=numLongTermLogicalBytes" json:"num_long_term_logical_bytes,omitempty"`
	NumLongTermPhysicalBytes    *int64                       `protobuf:"varint,28,opt,name=num_long_term_physical_bytes,json=numLongTermPhysicalBytes" json:"num_long_term_physical_bytes,omitempty"`
	NumPartitions               *int64                       `protobuf:"varint,29,opt,name=num_partitions,json=numPartitions" json:"num_partitions,omitempty"`
	NumPhysicalBytes            *int64                       `protobuf:"varint,30,opt,name=num_physical_bytes,json=numPhysicalBytes" json:"num_physical_bytes,omitempty"`
	NumRows                     *uint64                      `protobuf:"varint,31,opt,name=num_rows,json=numRows" json:"num_rows,omitempty"`
	NumTimeTravelPhysicalBytes  *int64                       `protobuf:"varint,32,opt,name=num_time_travel_physical_bytes,json=numTimeTravelPhysicalBytes" json:"num_time_travel_physical_bytes,omitempty"`
	NumTotalLogicalBytes        *int64                       `protobuf:"varint,33,opt,name=num_total_logical_bytes,json=numTotalLogicalBytes" json:"num_total_logical_bytes,omitempty"`
	NumTotalPhysicalBytes       *int64                       `protobuf:"varint,34,opt,name=num_total_physical_bytes,json=numTotalPhysicalBytes" json:"num_total_physical_bytes,omitempty"`
	PartitionDefinition         *PartitioningDefinition      `protobuf:"bytes,35,opt,name=partition_definition,json=partitionDefinition" json:"partition_definition,omitempty"`
	RangePartitioning           *RangePartitioning           `protobuf:"bytes,36,opt,name=range_partitioning,json=rangePartitioning" json:"range_partitioning,omitempty"`
	Replicas                    []*TableReference            `protobuf:"bytes,37,rep,name=replicas" json:"replicas,omitempty"`
	RequirePartitionFilter      *bool                        `protobuf:"varint,38,opt,name=require_partition_filter,json=requirePartitionFilter" json:"require_partition_filter,omitempty"`
	ResourceTags                map[string]string            `protobuf:"bytes,39,rep,name=resource_tags,json=resourceTags" json:"resource_tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Schema                      *TableSchema                 `protobuf:"bytes,40,opt,name=schema" json:"schema,omitempty"`
	SelfLink                    *string                      `protobuf:"bytes,41,opt,name=self_link,json=selfLink" json:"self_link,omitempty"`
	SnapshotDefinition          *SnapshotDefinition          `protobuf:"bytes,42,opt,name=snapshot_definition,json=snapshotDefinition" json:"snapshot_definition,omitempty"`
	StreamingBuffer             *Streamingbuffer             `protobuf:"bytes,43,opt,name=streaming_buffer,json=streamingBuffer" json:"streaming_buffer,omitempty"`
	TableConstraints            *TableConstraints            `protobuf:"bytes,44,opt,name=table_constraints,json=tableConstraints" json:"table_constraints,omitempty"`
	TableReference              *TableReference              `protobuf:"bytes,45,opt,name=table_reference,json=tableReference" json:"table_reference,omitempty"`
	TableReplicationInfo        *TableReplicationInfo        `protobuf:"bytes,46,opt,name=table_replication_info,json=tableReplicationInfo" json:"table_replication_info,omitempty"`
	TimePartitioning            *TimePartitioning            `protobuf:"bytes,47,opt,name=time_partitioning,json=timePartitioning" json:"time_partitioning,omitempty"`
	Type                        *string                      `protobuf:"bytes,48,opt,name=type" json:"type,omitempty"`
	View                        *ViewDefinition              `protobuf:"bytes,49,opt,name=view" json:"view,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{181}
}

func (x *Table) GetBiglakeConfiguration() *BigLakeConfiguration {
	if x != nil {
		return x.BiglakeConfiguration
	}
	return nil
}

func (x *Table) GetCloneDefinition() *CloneDefinition {
	if x != nil {
		return x.CloneDefinition
	}
	return nil
}

func (x *Table) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *Table) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *Table) GetDefaultCollation() string {
	if x != nil && x.DefaultCollation != nil {
		return *x.DefaultCollation
	}
	return ""
}

func (x *Table) GetDefaultRoundingMode() string {
	if x != nil && x.DefaultRoundingMode != nil {
		return *x.DefaultRoundingMode
	}
	return ""
}

func (x *Table) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Table) GetEncryptionConfiguration() *EncryptionConfiguration {
	if x != nil {
		return x.EncryptionConfiguration
	}
	return nil
}

func (x *Table) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *Table) GetExpirationTime() int64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *Table) GetExternalCatalogTableOptions() *ExternalCatalogTableOptions {
	if x != nil {
		return x.ExternalCatalogTableOptions
	}
	return nil
}

func (x *Table) GetExternalDataConfiguration() *ExternalDataConfiguration {
	if x != nil {
		return x.ExternalDataConfiguration
	}
	return nil
}

func (x *Table) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *Table) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Table) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Table) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Table) GetLastModifiedTime() uint64 {
	if x != nil && x.LastModifiedTime != nil {
		return *x.LastModifiedTime
	}
	return 0
}

func (x *Table) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Table) GetMaterializedView() *MaterializedViewDefinition {
	if x != nil {
		return x.MaterializedView
	}
	return nil
}

func (x *Table) GetMaterializedViewStatus() *MaterializedViewStatus {
	if x != nil {
		return x.MaterializedViewStatus
	}
	return nil
}

func (x *Table) GetMaxStaleness() string {
	if x != nil && x.MaxStaleness != nil {
		return *x.MaxStaleness
	}
	return ""
}

func (x *Table) GetModel() *ModelDefinition {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Table) GetNumActiveLogicalBytes() int64 {
	if x != nil && x.NumActiveLogicalBytes != nil {
		return *x.NumActiveLogicalBytes
	}
	return 0
}

func (x *Table) GetNumActivePhysicalBytes() int64 {
	if x != nil && x.NumActivePhysicalBytes != nil {
		return *x.NumActivePhysicalBytes
	}
	return 0
}

func (x *Table) GetNumBytes() int64 {
	if x != nil && x.NumBytes != nil {
		return *x.NumBytes
	}
	return 0
}

func (x *Table) GetNumLongTermBytes() int64 {
	if x != nil && x.NumLongTermBytes != nil {
		return *x.NumLongTermBytes
	}
	return 0
}

func (x *Table) GetNumLongTermLogicalBytes() int64 {
	if x != nil && x.NumLongTermLogicalBytes != nil {
		return *x.NumLongTermLogicalBytes
	}
	return 0
}

func (x *Table) GetNumLongTermPhysicalBytes() int64 {
	if x != nil && x.NumLongTermPhysicalBytes != nil {
		return *x.NumLongTermPhysicalBytes
	}
	return 0
}

func (x *Table) GetNumPartitions() int64 {
	if x != nil && x.NumPartitions != nil {
		return *x.NumPartitions
	}
	return 0
}

func (x *Table) GetNumPhysicalBytes() int64 {
	if x != nil && x.NumPhysicalBytes != nil {
		return *x.NumPhysicalBytes
	}
	return 0
}

func (x *Table) GetNumRows() uint64 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

func (x *Table) GetNumTimeTravelPhysicalBytes() int64 {
	if x != nil && x.NumTimeTravelPhysicalBytes != nil {
		return *x.NumTimeTravelPhysicalBytes
	}
	return 0
}

func (x *Table) GetNumTotalLogicalBytes() int64 {
	if x != nil && x.NumTotalLogicalBytes != nil {
		return *x.NumTotalLogicalBytes
	}
	return 0
}

func (x *Table) GetNumTotalPhysicalBytes() int64 {
	if x != nil && x.NumTotalPhysicalBytes != nil {
		return *x.NumTotalPhysicalBytes
	}
	return 0
}

func (x *Table) GetPartitionDefinition() *PartitioningDefinition {
	if x != nil {
		return x.PartitionDefinition
	}
	return nil
}

func (x *Table) GetRangePartitioning() *RangePartitioning {
	if x != nil {
		return x.RangePartitioning
	}
	return nil
}

func (x *Table) GetReplicas() []*TableReference {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *Table) GetRequirePartitionFilter() bool {
	if x != nil && x.RequirePartitionFilter != nil {
		return *x.RequirePartitionFilter
	}
	return false
}

func (x *Table) GetResourceTags() map[string]string {
	if x != nil {
		return x.ResourceTags
	}
	return nil
}

func (x *Table) GetSchema() *TableSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Table) GetSelfLink() string {
	if x != nil && x.SelfLink != nil {
		return *x.SelfLink
	}
	return ""
}

func (x *Table) GetSnapshotDefinition() *SnapshotDefinition {
	if x != nil {
		return x.SnapshotDefinition
	}
	return nil
}

func (x *Table) GetStreamingBuffer() *Streamingbuffer {
	if x != nil {
		return x.StreamingBuffer
	}
	return nil
}

func (x *Table) GetTableConstraints() *TableConstraints {
	if x != nil {
		return x.TableConstraints
	}
	return nil
}

func (x *Table) GetTableReference() *TableReference {
	if x != nil {
		return x.TableReference
	}
	return nil
}

func (x *Table) GetTableReplicationInfo() *TableReplicationInfo {
	if x != nil {
		return x.TableReplicationInfo
	}
	return nil
}

func (x *Table) GetTimePartitioning() *TimePartitioning {
	if x != nil {
		return x.TimePartitioning
	}
	return nil
}

func (x *Table) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Table) GetView() *ViewDefinition {
	if x != nil {
		return x.View
	}
	return nil
}

type TableCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V *any1.Any `protobuf:"bytes,1,opt,name=v" json:"v,omitempty"`
}

func (x *TableCell) Reset() {
	*x = TableCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCell) ProtoMessage() {}

func (x *TableCell) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCell.ProtoReflect.Descriptor instead.
func (*TableCell) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{182}
}

func (x *TableCell) GetV() *any1.Any {
	if x != nil {
		return x.V
	}
	return nil
}

type ColumnReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferencedColumn  *string `protobuf:"bytes,1,opt,name=referenced_column,json=referencedColumn" json:"referenced_column,omitempty"`
	ReferencingColumn *string `protobuf:"bytes,2,opt,name=referencing_column,json=referencingColumn" json:"referencing_column,omitempty"`
}

func (x *ColumnReferences) Reset() {
	*x = ColumnReferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnReferences) ProtoMessage() {}

func (x *ColumnReferences) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnReferences.ProtoReflect.Descriptor instead.
func (*ColumnReferences) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{183}
}

func (x *ColumnReferences) GetReferencedColumn() string {
	if x != nil && x.ReferencedColumn != nil {
		return *x.ReferencedColumn
	}
	return ""
}

func (x *ColumnReferences) GetReferencingColumn() string {
	if x != nil && x.ReferencingColumn != nil {
		return *x.ReferencingColumn
	}
	return ""
}

type ReferencedTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId   *string `protobuf:"bytes,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *ReferencedTable) Reset() {
	*x = ReferencedTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencedTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencedTable) ProtoMessage() {}

func (x *ReferencedTable) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencedTable.ProtoReflect.Descriptor instead.
func (*ReferencedTable) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{184}
}

func (x *ReferencedTable) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ReferencedTable) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ReferencedTable) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type TableConstraintsForeignKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnReferences []*ColumnReferences `protobuf:"bytes,1,rep,name=column_references,json=columnReferences" json:"column_references,omitempty"`
	Name             *string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ReferencedTable  *ReferencedTable    `protobuf:"bytes,3,opt,name=referenced_table,json=referencedTable" json:"referenced_table,omitempty"`
}

func (x *TableConstraintsForeignKeys) Reset() {
	*x = TableConstraintsForeignKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableConstraintsForeignKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableConstraintsForeignKeys) ProtoMessage() {}

func (x *TableConstraintsForeignKeys) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableConstraintsForeignKeys.ProtoReflect.Descriptor instead.
func (*TableConstraintsForeignKeys) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{185}
}

func (x *TableConstraintsForeignKeys) GetColumnReferences() []*ColumnReferences {
	if x != nil {
		return x.ColumnReferences
	}
	return nil
}

func (x *TableConstraintsForeignKeys) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TableConstraintsForeignKeys) GetReferencedTable() *ReferencedTable {
	if x != nil {
		return x.ReferencedTable
	}
	return nil
}

type TableConstraintsPrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []string `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
}

func (x *TableConstraintsPrimaryKey) Reset() {
	*x = TableConstraintsPrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableConstraintsPrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableConstraintsPrimaryKey) ProtoMessage() {}

func (x *TableConstraintsPrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableConstraintsPrimaryKey.ProtoReflect.Descriptor instead.
func (*TableConstraintsPrimaryKey) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{186}
}

func (x *TableConstraintsPrimaryKey) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type TableConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForeignKeys []*TableConstraintsForeignKeys `protobuf:"bytes,1,rep,name=foreign_keys,json=foreignKeys" json:"foreign_keys,omitempty"`
	PrimaryKey  *TableConstraintsPrimaryKey    `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey" json:"primary_key,omitempty"`
}

func (x *TableConstraints) Reset() {
	*x = TableConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableConstraints) ProtoMessage() {}

func (x *TableConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableConstraints.ProtoReflect.Descriptor instead.
func (*TableConstraints) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{187}
}

func (x *TableConstraints) GetForeignKeys() []*TableConstraintsForeignKeys {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *TableConstraints) GetPrimaryKey() *TableConstraintsPrimaryKey {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

type TableDataInsertAllRequestRows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertId *string     `protobuf:"bytes,1,opt,name=insert_id,json=insertId" json:"insert_id,omitempty"`
	Json     *JsonObject `protobuf:"bytes,2,opt,name=json" json:"json,omitempty"`
}

func (x *TableDataInsertAllRequestRows) Reset() {
	*x = TableDataInsertAllRequestRows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataInsertAllRequestRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataInsertAllRequestRows) ProtoMessage() {}

func (x *TableDataInsertAllRequestRows) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataInsertAllRequestRows.ProtoReflect.Descriptor instead.
func (*TableDataInsertAllRequestRows) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{188}
}

func (x *TableDataInsertAllRequestRows) GetInsertId() string {
	if x != nil && x.InsertId != nil {
		return *x.InsertId
	}
	return ""
}

func (x *TableDataInsertAllRequestRows) GetJson() *JsonObject {
	if x != nil {
		return x.Json
	}
	return nil
}

type TableDataInsertAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreUnknownValues *bool                            `protobuf:"varint,1,opt,name=ignore_unknown_values,json=ignoreUnknownValues" json:"ignore_unknown_values,omitempty"`
	Kind                *string                          `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Rows                []*TableDataInsertAllRequestRows `protobuf:"bytes,3,rep,name=rows" json:"rows,omitempty"`
	SkipInvalidRows     *bool                            `protobuf:"varint,4,opt,name=skip_invalid_rows,json=skipInvalidRows" json:"skip_invalid_rows,omitempty"`
	TemplateSuffix      *string                          `protobuf:"bytes,5,opt,name=template_suffix,json=templateSuffix" json:"template_suffix,omitempty"`
	TraceId             *string                          `protobuf:"bytes,6,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
}

func (x *TableDataInsertAllRequest) Reset() {
	*x = TableDataInsertAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataInsertAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataInsertAllRequest) ProtoMessage() {}

func (x *TableDataInsertAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataInsertAllRequest.ProtoReflect.Descriptor instead.
func (*TableDataInsertAllRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{189}
}

func (x *TableDataInsertAllRequest) GetIgnoreUnknownValues() bool {
	if x != nil && x.IgnoreUnknownValues != nil {
		return *x.IgnoreUnknownValues
	}
	return false
}

func (x *TableDataInsertAllRequest) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *TableDataInsertAllRequest) GetRows() []*TableDataInsertAllRequestRows {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *TableDataInsertAllRequest) GetSkipInvalidRows() bool {
	if x != nil && x.SkipInvalidRows != nil {
		return *x.SkipInvalidRows
	}
	return false
}

func (x *TableDataInsertAllRequest) GetTemplateSuffix() string {
	if x != nil && x.TemplateSuffix != nil {
		return *x.TemplateSuffix
	}
	return ""
}

func (x *TableDataInsertAllRequest) GetTraceId() string {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return ""
}

type TableDataInsertAllResponseInsertErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*ErrorProto `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
	Index  *uint32       `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (x *TableDataInsertAllResponseInsertErrors) Reset() {
	*x = TableDataInsertAllResponseInsertErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataInsertAllResponseInsertErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataInsertAllResponseInsertErrors) ProtoMessage() {}

func (x *TableDataInsertAllResponseInsertErrors) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataInsertAllResponseInsertErrors.ProtoReflect.Descriptor instead.
func (*TableDataInsertAllResponseInsertErrors) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{190}
}

func (x *TableDataInsertAllResponseInsertErrors) GetErrors() []*ErrorProto {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *TableDataInsertAllResponseInsertErrors) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type TableDataInsertAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertErrors []*TableDataInsertAllResponseInsertErrors `protobuf:"bytes,1,rep,name=insert_errors,json=insertErrors" json:"insert_errors,omitempty"`
	Kind         *string                                   `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *TableDataInsertAllResponse) Reset() {
	*x = TableDataInsertAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataInsertAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataInsertAllResponse) ProtoMessage() {}

func (x *TableDataInsertAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataInsertAllResponse.ProtoReflect.Descriptor instead.
func (*TableDataInsertAllResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{191}
}

func (x *TableDataInsertAllResponse) GetInsertErrors() []*TableDataInsertAllResponseInsertErrors {
	if x != nil {
		return x.InsertErrors
	}
	return nil
}

func (x *TableDataInsertAllResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type TableDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag      *string     `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	Kind      *string     `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	PageToken *string     `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Rows      []*TableRow `protobuf:"bytes,4,rep,name=rows" json:"rows,omitempty"`
	TotalRows *int64      `protobuf:"varint,5,opt,name=total_rows,json=totalRows" json:"total_rows,omitempty"`
}

func (x *TableDataList) Reset() {
	*x = TableDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataList) ProtoMessage() {}

func (x *TableDataList) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataList.ProtoReflect.Descriptor instead.
func (*TableDataList) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{192}
}

func (x *TableDataList) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *TableDataList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *TableDataList) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *TableDataList) GetRows() []*TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *TableDataList) GetTotalRows() int64 {
	if x != nil && x.TotalRows != nil {
		return *x.TotalRows
	}
	return 0
}

type TableFieldSchemaCategories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (x *TableFieldSchemaCategories) Reset() {
	*x = TableFieldSchemaCategories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFieldSchemaCategories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchemaCategories) ProtoMessage() {}

func (x *TableFieldSchemaCategories) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchemaCategories.ProtoReflect.Descriptor instead.
func (*TableFieldSchemaCategories) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{193}
}

func (x *TableFieldSchemaCategories) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type TableFieldSchemaPolicyTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (x *TableFieldSchemaPolicyTags) Reset() {
	*x = TableFieldSchemaPolicyTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFieldSchemaPolicyTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchemaPolicyTags) ProtoMessage() {}

func (x *TableFieldSchemaPolicyTags) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchemaPolicyTags.ProtoReflect.Descriptor instead.
func (*TableFieldSchemaPolicyTags) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{194}
}

func (x *TableFieldSchemaPolicyTags) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type TableFieldSchemaRangeElementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (x *TableFieldSchemaRangeElementType) Reset() {
	*x = TableFieldSchemaRangeElementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFieldSchemaRangeElementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchemaRangeElementType) ProtoMessage() {}

func (x *TableFieldSchemaRangeElementType) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchemaRangeElementType.ProtoReflect.Descriptor instead.
func (*TableFieldSchemaRangeElementType) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{195}
}

func (x *TableFieldSchemaRangeElementType) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type TableFieldSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories             *TableFieldSchemaCategories       `protobuf:"bytes,1,opt,name=categories" json:"categories,omitempty"`
	Collation              *string                           `protobuf:"bytes,2,opt,name=collation" json:"collation,omitempty"`
	DefaultValueExpression *string                           `protobuf:"bytes,3,opt,name=default_value_expression,json=defaultValueExpression" json:"default_value_expression,omitempty"`
	Description            *string                           `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Fields                 []*TableFieldSchema               `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
	MaxLength              *int64                            `protobuf:"varint,6,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
	Mode                   *string                           `protobuf:"bytes,7,opt,name=mode" json:"mode,omitempty"`
	Name                   *string                           `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	PolicyTags             *TableFieldSchemaPolicyTags       `protobuf:"bytes,9,opt,name=policy_tags,json=policyTags" json:"policy_tags,omitempty"`
	Precision              *int64                            `protobuf:"varint,10,opt,name=precision" json:"precision,omitempty"`
	RangeElementType       *TableFieldSchemaRangeElementType `protobuf:"bytes,11,opt,name=range_element_type,json=rangeElementType" json:"range_element_type,omitempty"`
	RoundingMode           *string                           `protobuf:"bytes,12,opt,name=rounding_mode,json=roundingMode" json:"rounding_mode,omitempty"`
	Scale                  *int64                            `protobuf:"varint,13,opt,name=scale" json:"scale,omitempty"`
	Type                   *string                           `protobuf:"bytes,14,opt,name=type" json:"type,omitempty"`
}

func (x *TableFieldSchema) Reset() {
	*x = TableFieldSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFieldSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFieldSchema) ProtoMessage() {}

func (x *TableFieldSchema) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFieldSchema.ProtoReflect.Descriptor instead.
func (*TableFieldSchema) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{196}
}

func (x *TableFieldSchema) GetCategories() *TableFieldSchemaCategories {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *TableFieldSchema) GetCollation() string {
	if x != nil && x.Collation != nil {
		return *x.Collation
	}
	return ""
}

func (x *TableFieldSchema) GetDefaultValueExpression() string {
	if x != nil && x.DefaultValueExpression != nil {
		return *x.DefaultValueExpression
	}
	return ""
}

func (x *TableFieldSchema) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TableFieldSchema) GetFields() []*TableFieldSchema {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TableFieldSchema) GetMaxLength() int64 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

func (x *TableFieldSchema) GetMode() string {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return ""
}

func (x *TableFieldSchema) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TableFieldSchema) GetPolicyTags() *TableFieldSchemaPolicyTags {
	if x != nil {
		return x.PolicyTags
	}
	return nil
}

func (x *TableFieldSchema) GetPrecision() int64 {
	if x != nil && x.Precision != nil {
		return *x.Precision
	}
	return 0
}

func (x *TableFieldSchema) GetRangeElementType() *TableFieldSchemaRangeElementType {
	if x != nil {
		return x.RangeElementType
	}
	return nil
}

func (x *TableFieldSchema) GetRoundingMode() string {
	if x != nil && x.RoundingMode != nil {
		return *x.RoundingMode
	}
	return ""
}

func (x *TableFieldSchema) GetScale() int64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *TableFieldSchema) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacyPolicy *PrivacyPolicy `protobuf:"bytes,1,opt,name=privacy_policy,json=privacyPolicy" json:"privacy_policy,omitempty"`
	UseLegacySql  *bool          `protobuf:"varint,2,opt,name=use_legacy_sql,json=useLegacySql" json:"use_legacy_sql,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{197}
}

func (x *View) GetPrivacyPolicy() *PrivacyPolicy {
	if x != nil {
		return x.PrivacyPolicy
	}
	return nil
}

func (x *View) GetUseLegacySql() bool {
	if x != nil && x.UseLegacySql != nil {
		return *x.UseLegacySql
	}
	return false
}

type TableListTables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clustering             *Clustering        `protobuf:"bytes,1,opt,name=clustering" json:"clustering,omitempty"`
	CreationTime           *int64             `protobuf:"varint,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	ExpirationTime         *int64             `protobuf:"varint,3,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	FriendlyName           *string            `protobuf:"bytes,4,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Id                     *string            `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Kind                   *string            `protobuf:"bytes,6,opt,name=kind" json:"kind,omitempty"`
	Labels                 map[string]string  `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RangePartitioning      *RangePartitioning `protobuf:"bytes,8,opt,name=range_partitioning,json=rangePartitioning" json:"range_partitioning,omitempty"`
	RequirePartitionFilter *bool              `protobuf:"varint,9,opt,name=require_partition_filter,json=requirePartitionFilter" json:"require_partition_filter,omitempty"`
	TableReference         *TableReference    `protobuf:"bytes,10,opt,name=table_reference,json=tableReference" json:"table_reference,omitempty"`
	TimePartitioning       *TimePartitioning  `protobuf:"bytes,11,opt,name=time_partitioning,json=timePartitioning" json:"time_partitioning,omitempty"`
	Type                   *string            `protobuf:"bytes,12,opt,name=type" json:"type,omitempty"`
	View                   *View              `protobuf:"bytes,13,opt,name=view" json:"view,omitempty"`
}

func (x *TableListTables) Reset() {
	*x = TableListTables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableListTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableListTables) ProtoMessage() {}

func (x *TableListTables) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableListTables.ProtoReflect.Descriptor instead.
func (*TableListTables) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{198}
}

func (x *TableListTables) GetClustering() *Clustering {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *TableListTables) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *TableListTables) GetExpirationTime() int64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *TableListTables) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *TableListTables) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TableListTables) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *TableListTables) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TableListTables) GetRangePartitioning() *RangePartitioning {
	if x != nil {
		return x.RangePartitioning
	}
	return nil
}

func (x *TableListTables) GetRequirePartitionFilter() bool {
	if x != nil && x.RequirePartitionFilter != nil {
		return *x.RequirePartitionFilter
	}
	return false
}

func (x *TableListTables) GetTableReference() *TableReference {
	if x != nil {
		return x.TableReference
	}
	return nil
}

func (x *TableListTables) GetTimePartitioning() *TimePartitioning {
	if x != nil {
		return x.TimePartitioning
	}
	return nil
}

func (x *TableListTables) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *TableListTables) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

type TableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Etag          *string            `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	Kind          *string            `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	NextPageToken *string            `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	Tables        []*TableListTables `protobuf:"bytes,4,rep,name=tables" json:"tables,omitempty"`
	TotalItems    *int32             `protobuf:"varint,5,opt,name=total_items,json=totalItems" json:"total_items,omitempty"`
}

func (x *TableList) Reset() {
	*x = TableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableList) ProtoMessage() {}

func (x *TableList) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableList.ProtoReflect.Descriptor instead.
func (*TableList) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{199}
}

func (x *TableList) GetEtag() string {
	if x != nil && x.Etag != nil {
		return *x.Etag
	}
	return ""
}

func (x *TableList) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *TableList) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *TableList) GetTables() []*TableListTables {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *TableList) GetTotalItems() int32 {
	if x != nil && x.TotalItems != nil {
		return *x.TotalItems
	}
	return 0
}

type TableMetadataCacheUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Explanation    *string         `protobuf:"bytes,1,opt,name=explanation" json:"explanation,omitempty"`
	TableReference *TableReference `protobuf:"bytes,2,opt,name=table_reference,json=tableReference" json:"table_reference,omitempty"`
	TableType      *string         `protobuf:"bytes,3,opt,name=table_type,json=tableType" json:"table_type,omitempty"`
	UnusedReason   *string         `protobuf:"bytes,4,opt,name=unused_reason,json=unusedReason" json:"unused_reason,omitempty"`
}

func (x *TableMetadataCacheUsage) Reset() {
	*x = TableMetadataCacheUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMetadataCacheUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMetadataCacheUsage) ProtoMessage() {}

func (x *TableMetadataCacheUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMetadataCacheUsage.ProtoReflect.Descriptor instead.
func (*TableMetadataCacheUsage) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{200}
}

func (x *TableMetadataCacheUsage) GetExplanation() string {
	if x != nil && x.Explanation != nil {
		return *x.Explanation
	}
	return ""
}

func (x *TableMetadataCacheUsage) GetTableReference() *TableReference {
	if x != nil {
		return x.TableReference
	}
	return nil
}

func (x *TableMetadataCacheUsage) GetTableType() string {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return ""
}

func (x *TableMetadataCacheUsage) GetUnusedReason() string {
	if x != nil && x.UnusedReason != nil {
		return *x.UnusedReason
	}
	return ""
}

type TableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId   *string `protobuf:"bytes,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *TableReference) Reset() {
	*x = TableReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableReference) ProtoMessage() {}

func (x *TableReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableReference.ProtoReflect.Descriptor instead.
func (*TableReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{201}
}

func (x *TableReference) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *TableReference) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *TableReference) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type TableReplicationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicatedSourceLastRefreshTime *int64          `protobuf:"varint,1,opt,name=replicated_source_last_refresh_time,json=replicatedSourceLastRefreshTime" json:"replicated_source_last_refresh_time,omitempty"`
	ReplicationError                *ErrorProto     `protobuf:"bytes,2,opt,name=replication_error,json=replicationError" json:"replication_error,omitempty"`
	ReplicationIntervalMs           *int64          `protobuf:"varint,3,opt,name=replication_interval_ms,json=replicationIntervalMs" json:"replication_interval_ms,omitempty"`
	ReplicationStatus               *string         `protobuf:"bytes,4,opt,name=replication_status,json=replicationStatus" json:"replication_status,omitempty"`
	SourceTable                     *TableReference `protobuf:"bytes,5,opt,name=source_table,json=sourceTable" json:"source_table,omitempty"`
}

func (x *TableReplicationInfo) Reset() {
	*x = TableReplicationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableReplicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableReplicationInfo) ProtoMessage() {}

func (x *TableReplicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableReplicationInfo.ProtoReflect.Descriptor instead.
func (*TableReplicationInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{202}
}

func (x *TableReplicationInfo) GetReplicatedSourceLastRefreshTime() int64 {
	if x != nil && x.ReplicatedSourceLastRefreshTime != nil {
		return *x.ReplicatedSourceLastRefreshTime
	}
	return 0
}

func (x *TableReplicationInfo) GetReplicationError() *ErrorProto {
	if x != nil {
		return x.ReplicationError
	}
	return nil
}

func (x *TableReplicationInfo) GetReplicationIntervalMs() int64 {
	if x != nil && x.ReplicationIntervalMs != nil {
		return *x.ReplicationIntervalMs
	}
	return 0
}

func (x *TableReplicationInfo) GetReplicationStatus() string {
	if x != nil && x.ReplicationStatus != nil {
		return *x.ReplicationStatus
	}
	return ""
}

func (x *TableReplicationInfo) GetSourceTable() *TableReference {
	if x != nil {
		return x.SourceTable
	}
	return nil
}

type TableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	F []*TableCell `protobuf:"bytes,1,rep,name=f" json:"f,omitempty"`
}

func (x *TableRow) Reset() {
	*x = TableRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRow) ProtoMessage() {}

func (x *TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRow.ProtoReflect.Descriptor instead.
func (*TableRow) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{203}
}

func (x *TableRow) GetF() []*TableCell {
	if x != nil {
		return x.F
	}
	return nil
}

type TableSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*TableFieldSchema `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (x *TableSchema) Reset() {
	*x = TableSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSchema) ProtoMessage() {}

func (x *TableSchema) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSchema.ProtoReflect.Descriptor instead.
func (*TableSchema) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{204}
}

func (x *TableSchema) GetFields() []*TableFieldSchema {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TestIamPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (x *TestIamPermissionsRequest) Reset() {
	*x = TestIamPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestIamPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIamPermissionsRequest) ProtoMessage() {}

func (x *TestIamPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIamPermissionsRequest.ProtoReflect.Descriptor instead.
func (*TestIamPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{205}
}

func (x *TestIamPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type TestIamPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (x *TestIamPermissionsResponse) Reset() {
	*x = TestIamPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestIamPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIamPermissionsResponse) ProtoMessage() {}

func (x *TestIamPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIamPermissionsResponse.ProtoReflect.Descriptor instead.
func (*TestIamPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{206}
}

func (x *TestIamPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type TimePartitioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpirationMs           *int64  `protobuf:"varint,1,opt,name=expiration_ms,json=expirationMs" json:"expiration_ms,omitempty"`
	Field                  *string `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	RequirePartitionFilter *bool   `protobuf:"varint,3,opt,name=require_partition_filter,json=requirePartitionFilter" json:"require_partition_filter,omitempty"`
	Type                   *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
}

func (x *TimePartitioning) Reset() {
	*x = TimePartitioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePartitioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePartitioning) ProtoMessage() {}

func (x *TimePartitioning) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePartitioning.ProtoReflect.Descriptor instead.
func (*TimePartitioning) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{207}
}

func (x *TimePartitioning) GetExpirationMs() int64 {
	if x != nil && x.ExpirationMs != nil {
		return *x.ExpirationMs
	}
	return 0
}

func (x *TimePartitioning) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *TimePartitioning) GetRequirePartitionFilter() bool {
	if x != nil && x.RequirePartitionFilter != nil {
		return *x.RequirePartitionFilter
	}
	return false
}

func (x *TimePartitioning) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type TrainingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivationFn                *string            `protobuf:"bytes,1,opt,name=activation_fn,json=activationFn" json:"activation_fn,omitempty"`
	AdjustStepChanges           *bool              `protobuf:"varint,2,opt,name=adjust_step_changes,json=adjustStepChanges" json:"adjust_step_changes,omitempty"`
	ApproxGlobalFeatureContrib  *bool              `protobuf:"varint,3,opt,name=approx_global_feature_contrib,json=approxGlobalFeatureContrib" json:"approx_global_feature_contrib,omitempty"`
	AutoArima                   *bool              `protobuf:"varint,4,opt,name=auto_arima,json=autoArima" json:"auto_arima,omitempty"`
	AutoArimaMaxOrder           *int64             `protobuf:"varint,5,opt,name=auto_arima_max_order,json=autoArimaMaxOrder" json:"auto_arima_max_order,omitempty"`
	AutoArimaMinOrder           *int64             `protobuf:"varint,6,opt,name=auto_arima_min_order,json=autoArimaMinOrder" json:"auto_arima_min_order,omitempty"`
	AutoClassWeights            *bool              `protobuf:"varint,7,opt,name=auto_class_weights,json=autoClassWeights" json:"auto_class_weights,omitempty"`
	BatchSize                   *int64             `protobuf:"varint,8,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	BoosterType                 *string            `protobuf:"bytes,9,opt,name=booster_type,json=boosterType" json:"booster_type,omitempty"`
	BudgetHours                 *float64           `protobuf:"fixed64,10,opt,name=budget_hours,json=budgetHours" json:"budget_hours,omitempty"`
	CalculatePValues            *bool              `protobuf:"varint,11,opt,name=calculate_p_values,json=calculatePValues" json:"calculate_p_values,omitempty"`
	CategoryEncodingMethod      *string            `protobuf:"bytes,12,opt,name=category_encoding_method,json=categoryEncodingMethod" json:"category_encoding_method,omitempty"`
	CleanSpikesAndDips          *bool              `protobuf:"varint,13,opt,name=clean_spikes_and_dips,json=cleanSpikesAndDips" json:"clean_spikes_and_dips,omitempty"`
	ColorSpace                  *string            `protobuf:"bytes,14,opt,name=color_space,json=colorSpace" json:"color_space,omitempty"`
	ColsampleBylevel            *float64           `protobuf:"fixed64,15,opt,name=colsample_bylevel,json=colsampleBylevel" json:"colsample_bylevel,omitempty"`
	ColsampleBynode             *float64           `protobuf:"fixed64,16,opt,name=colsample_bynode,json=colsampleBynode" json:"colsample_bynode,omitempty"`
	ColsampleBytree             *float64           `protobuf:"fixed64,17,opt,name=colsample_bytree,json=colsampleBytree" json:"colsample_bytree,omitempty"`
	DartNormalizeType           *string            `protobuf:"bytes,18,opt,name=dart_normalize_type,json=dartNormalizeType" json:"dart_normalize_type,omitempty"`
	DataFrequency               *string            `protobuf:"bytes,19,opt,name=data_frequency,json=dataFrequency" json:"data_frequency,omitempty"`
	DataSplitColumn             *string            `protobuf:"bytes,20,opt,name=data_split_column,json=dataSplitColumn" json:"data_split_column,omitempty"`
	DataSplitEvalFraction       *float64           `protobuf:"fixed64,21,opt,name=data_split_eval_fraction,json=dataSplitEvalFraction" json:"data_split_eval_fraction,omitempty"`
	DataSplitMethod             *string            `protobuf:"bytes,22,opt,name=data_split_method,json=dataSplitMethod" json:"data_split_method,omitempty"`
	DecomposeTimeSeries         *bool              `protobuf:"varint,23,opt,name=decompose_time_series,json=decomposeTimeSeries" json:"decompose_time_series,omitempty"`
	DistanceType                *string            `protobuf:"bytes,24,opt,name=distance_type,json=distanceType" json:"distance_type,omitempty"`
	Dropout                     *float64           `protobuf:"fixed64,25,opt,name=dropout" json:"dropout,omitempty"`
	EarlyStop                   *bool              `protobuf:"varint,26,opt,name=early_stop,json=earlyStop" json:"early_stop,omitempty"`
	EnableGlobalExplain         *bool              `protobuf:"varint,27,opt,name=enable_global_explain,json=enableGlobalExplain" json:"enable_global_explain,omitempty"`
	FeedbackType                *string            `protobuf:"bytes,28,opt,name=feedback_type,json=feedbackType" json:"feedback_type,omitempty"`
	FitIntercept                *bool              `protobuf:"varint,29,opt,name=fit_intercept,json=fitIntercept" json:"fit_intercept,omitempty"`
	HiddenUnits                 []int64            `protobuf:"varint,30,rep,name=hidden_units,json=hiddenUnits" json:"hidden_units,omitempty"`
	HolidayRegion               *string            `protobuf:"bytes,31,opt,name=holiday_region,json=holidayRegion" json:"holiday_region,omitempty"`
	HolidayRegions              []string           `protobuf:"bytes,32,rep,name=holiday_regions,json=holidayRegions" json:"holiday_regions,omitempty"`
	Horizon                     *int64             `protobuf:"varint,33,opt,name=horizon" json:"horizon,omitempty"`
	HparamTuningObjectives      []string           `protobuf:"bytes,34,rep,name=hparam_tuning_objectives,json=hparamTuningObjectives" json:"hparam_tuning_objectives,omitempty"`
	IncludeDrift                *bool              `protobuf:"varint,35,opt,name=include_drift,json=includeDrift" json:"include_drift,omitempty"`
	InitialLearnRate            *float64           `protobuf:"fixed64,36,opt,name=initial_learn_rate,json=initialLearnRate" json:"initial_learn_rate,omitempty"`
	InputLabelColumns           []string           `protobuf:"bytes,37,rep,name=input_label_columns,json=inputLabelColumns" json:"input_label_columns,omitempty"`
	InstanceWeightColumn        *string            `protobuf:"bytes,38,opt,name=instance_weight_column,json=instanceWeightColumn" json:"instance_weight_column,omitempty"`
	IntegratedGradientsNumSteps *int64             `protobuf:"varint,39,opt,name=integrated_gradients_num_steps,json=integratedGradientsNumSteps" json:"integrated_gradients_num_steps,omitempty"`
	ItemColumn                  *string            `protobuf:"bytes,40,opt,name=item_column,json=itemColumn" json:"item_column,omitempty"`
	KmeansInitializationColumn  *string            `protobuf:"bytes,41,opt,name=kmeans_initialization_column,json=kmeansInitializationColumn" json:"kmeans_initialization_column,omitempty"`
	KmeansInitializationMethod  *string            `protobuf:"bytes,42,opt,name=kmeans_initialization_method,json=kmeansInitializationMethod" json:"kmeans_initialization_method,omitempty"`
	L1RegActivation             *float64           `protobuf:"fixed64,43,opt,name=l1_reg_activation,json=l1RegActivation" json:"l1_reg_activation,omitempty"`
	L1Regularization            *float64           `protobuf:"fixed64,44,opt,name=l1_regularization,json=l1Regularization" json:"l1_regularization,omitempty"`
	L2Regularization            *float64           `protobuf:"fixed64,45,opt,name=l2_regularization,json=l2Regularization" json:"l2_regularization,omitempty"`
	LabelClassWeights           map[string]float64 `protobuf:"bytes,46,rep,name=label_class_weights,json=labelClassWeights" json:"label_class_weights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	LearnRate                   *float64           `protobuf:"fixed64,47,opt,name=learn_rate,json=learnRate" json:"learn_rate,omitempty"`
	LearnRateStrategy           *string            `protobuf:"bytes,48,opt,name=learn_rate_strategy,json=learnRateStrategy" json:"learn_rate_strategy,omitempty"`
	LossType                    *string            `protobuf:"bytes,49,opt,name=loss_type,json=lossType" json:"loss_type,omitempty"`
	MaxIterations               *int64             `protobuf:"varint,50,opt,name=max_iterations,json=maxIterations" json:"max_iterations,omitempty"`
	MaxParallelTrials           *int64             `protobuf:"varint,51,opt,name=max_parallel_trials,json=maxParallelTrials" json:"max_parallel_trials,omitempty"`
	MaxTimeSeriesLength         *int64             `protobuf:"varint,52,opt,name=max_time_series_length,json=maxTimeSeriesLength" json:"max_time_series_length,omitempty"`
	MaxTreeDepth                *int64             `protobuf:"varint,53,opt,name=max_tree_depth,json=maxTreeDepth" json:"max_tree_depth,omitempty"`
	MinRelativeProgress         *float64           `protobuf:"fixed64,54,opt,name=min_relative_progress,json=minRelativeProgress" json:"min_relative_progress,omitempty"`
	MinSplitLoss                *float64           `protobuf:"fixed64,55,opt,name=min_split_loss,json=minSplitLoss" json:"min_split_loss,omitempty"`
	MinTimeSeriesLength         *int64             `protobuf:"varint,56,opt,name=min_time_series_length,json=minTimeSeriesLength" json:"min_time_series_length,omitempty"`
	MinTreeChildWeight          *int64             `protobuf:"varint,57,opt,name=min_tree_child_weight,json=minTreeChildWeight" json:"min_tree_child_weight,omitempty"`
	ModelRegistry               *string            `protobuf:"bytes,58,opt,name=model_registry,json=modelRegistry" json:"model_registry,omitempty"`
	ModelUri                    *string            `protobuf:"bytes,59,opt,name=model_uri,json=modelUri" json:"model_uri,omitempty"`
	NonSeasonalOrder            *ArimaOrder        `protobuf:"bytes,60,opt,name=non_seasonal_order,json=nonSeasonalOrder" json:"non_seasonal_order,omitempty"`
	NumClusters                 *int64             `protobuf:"varint,61,opt,name=num_clusters,json=numClusters" json:"num_clusters,omitempty"`
	NumFactors                  *int64             `protobuf:"varint,62,opt,name=num_factors,json=numFactors" json:"num_factors,omitempty"`
	NumParallelTree             *int64             `protobuf:"varint,63,opt,name=num_parallel_tree,json=numParallelTree" json:"num_parallel_tree,omitempty"`
	NumPrincipalComponents      *int64             `protobuf:"varint,64,opt,name=num_principal_components,json=numPrincipalComponents" json:"num_principal_components,omitempty"`
	NumTrials                   *int64             `protobuf:"varint,65,opt,name=num_trials,json=numTrials" json:"num_trials,omitempty"`
	OptimizationStrategy        *string            `protobuf:"bytes,66,opt,name=optimization_strategy,json=optimizationStrategy" json:"optimization_strategy,omitempty"`
	Optimizer                   *string            `protobuf:"bytes,67,opt,name=optimizer" json:"optimizer,omitempty"`
	PcaExplainedVarianceRatio   *float64           `protobuf:"fixed64,68,opt,name=pca_explained_variance_ratio,json=pcaExplainedVarianceRatio" json:"pca_explained_variance_ratio,omitempty"`
	PcaSolver                   *string            `protobuf:"bytes,69,opt,name=pca_solver,json=pcaSolver" json:"pca_solver,omitempty"`
	SampledShapleyNumPaths      *int64             `protobuf:"varint,70,opt,name=sampled_shapley_num_paths,json=sampledShapleyNumPaths" json:"sampled_shapley_num_paths,omitempty"`
	ScaleFeatures               *bool              `protobuf:"varint,71,opt,name=scale_features,json=scaleFeatures" json:"scale_features,omitempty"`
	StandardizeFeatures         *bool              `protobuf:"varint,72,opt,name=standardize_features,json=standardizeFeatures" json:"standardize_features,omitempty"`
	Subsample                   *float64           `protobuf:"fixed64,73,opt,name=subsample" json:"subsample,omitempty"`
	TfVersion                   *string            `protobuf:"bytes,74,opt,name=tf_version,json=tfVersion" json:"tf_version,omitempty"`
	TimeSeriesDataColumn        *string            `protobuf:"bytes,75,opt,name=time_series_data_column,json=timeSeriesDataColumn" json:"time_series_data_column,omitempty"`
	TimeSeriesIdColumn          *string            `protobuf:"bytes,76,opt,name=time_series_id_column,json=timeSeriesIdColumn" json:"time_series_id_column,omitempty"`
	TimeSeriesIdColumns         []string           `protobuf:"bytes,77,rep,name=time_series_id_columns,json=timeSeriesIdColumns" json:"time_series_id_columns,omitempty"`
	TimeSeriesLengthFraction    *float64           `protobuf:"fixed64,78,opt,name=time_series_length_fraction,json=timeSeriesLengthFraction" json:"time_series_length_fraction,omitempty"`
	TimeSeriesTimestampColumn   *string            `protobuf:"bytes,79,opt,name=time_series_timestamp_column,json=timeSeriesTimestampColumn" json:"time_series_timestamp_column,omitempty"`
	TreeMethod                  *string            `protobuf:"bytes,80,opt,name=tree_method,json=treeMethod" json:"tree_method,omitempty"`
	TrendSmoothingWindowSize    *int64             `protobuf:"varint,81,opt,name=trend_smoothing_window_size,json=trendSmoothingWindowSize" json:"trend_smoothing_window_size,omitempty"`
	UserColumn                  *string            `protobuf:"bytes,82,opt,name=user_column,json=userColumn" json:"user_column,omitempty"`
	VertexAiModelVersionAliases []string           `protobuf:"bytes,83,rep,name=vertex_ai_model_version_aliases,json=vertexAiModelVersionAliases" json:"vertex_ai_model_version_aliases,omitempty"`
	WalsAlpha                   *float64           `protobuf:"fixed64,84,opt,name=wals_alpha,json=walsAlpha" json:"wals_alpha,omitempty"`
	WarmStart                   *bool              `protobuf:"varint,85,opt,name=warm_start,json=warmStart" json:"warm_start,omitempty"`
	XgboostVersion              *string            `protobuf:"bytes,86,opt,name=xgboost_version,json=xgboostVersion" json:"xgboost_version,omitempty"`
}

func (x *TrainingOptions) Reset() {
	*x = TrainingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingOptions) ProtoMessage() {}

func (x *TrainingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingOptions.ProtoReflect.Descriptor instead.
func (*TrainingOptions) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{208}
}

func (x *TrainingOptions) GetActivationFn() string {
	if x != nil && x.ActivationFn != nil {
		return *x.ActivationFn
	}
	return ""
}

func (x *TrainingOptions) GetAdjustStepChanges() bool {
	if x != nil && x.AdjustStepChanges != nil {
		return *x.AdjustStepChanges
	}
	return false
}

func (x *TrainingOptions) GetApproxGlobalFeatureContrib() bool {
	if x != nil && x.ApproxGlobalFeatureContrib != nil {
		return *x.ApproxGlobalFeatureContrib
	}
	return false
}

func (x *TrainingOptions) GetAutoArima() bool {
	if x != nil && x.AutoArima != nil {
		return *x.AutoArima
	}
	return false
}

func (x *TrainingOptions) GetAutoArimaMaxOrder() int64 {
	if x != nil && x.AutoArimaMaxOrder != nil {
		return *x.AutoArimaMaxOrder
	}
	return 0
}

func (x *TrainingOptions) GetAutoArimaMinOrder() int64 {
	if x != nil && x.AutoArimaMinOrder != nil {
		return *x.AutoArimaMinOrder
	}
	return 0
}

func (x *TrainingOptions) GetAutoClassWeights() bool {
	if x != nil && x.AutoClassWeights != nil {
		return *x.AutoClassWeights
	}
	return false
}

func (x *TrainingOptions) GetBatchSize() int64 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *TrainingOptions) GetBoosterType() string {
	if x != nil && x.BoosterType != nil {
		return *x.BoosterType
	}
	return ""
}

func (x *TrainingOptions) GetBudgetHours() float64 {
	if x != nil && x.BudgetHours != nil {
		return *x.BudgetHours
	}
	return 0
}

func (x *TrainingOptions) GetCalculatePValues() bool {
	if x != nil && x.CalculatePValues != nil {
		return *x.CalculatePValues
	}
	return false
}

func (x *TrainingOptions) GetCategoryEncodingMethod() string {
	if x != nil && x.CategoryEncodingMethod != nil {
		return *x.CategoryEncodingMethod
	}
	return ""
}

func (x *TrainingOptions) GetCleanSpikesAndDips() bool {
	if x != nil && x.CleanSpikesAndDips != nil {
		return *x.CleanSpikesAndDips
	}
	return false
}

func (x *TrainingOptions) GetColorSpace() string {
	if x != nil && x.ColorSpace != nil {
		return *x.ColorSpace
	}
	return ""
}

func (x *TrainingOptions) GetColsampleBylevel() float64 {
	if x != nil && x.ColsampleBylevel != nil {
		return *x.ColsampleBylevel
	}
	return 0
}

func (x *TrainingOptions) GetColsampleBynode() float64 {
	if x != nil && x.ColsampleBynode != nil {
		return *x.ColsampleBynode
	}
	return 0
}

func (x *TrainingOptions) GetColsampleBytree() float64 {
	if x != nil && x.ColsampleBytree != nil {
		return *x.ColsampleBytree
	}
	return 0
}

func (x *TrainingOptions) GetDartNormalizeType() string {
	if x != nil && x.DartNormalizeType != nil {
		return *x.DartNormalizeType
	}
	return ""
}

func (x *TrainingOptions) GetDataFrequency() string {
	if x != nil && x.DataFrequency != nil {
		return *x.DataFrequency
	}
	return ""
}

func (x *TrainingOptions) GetDataSplitColumn() string {
	if x != nil && x.DataSplitColumn != nil {
		return *x.DataSplitColumn
	}
	return ""
}

func (x *TrainingOptions) GetDataSplitEvalFraction() float64 {
	if x != nil && x.DataSplitEvalFraction != nil {
		return *x.DataSplitEvalFraction
	}
	return 0
}

func (x *TrainingOptions) GetDataSplitMethod() string {
	if x != nil && x.DataSplitMethod != nil {
		return *x.DataSplitMethod
	}
	return ""
}

func (x *TrainingOptions) GetDecomposeTimeSeries() bool {
	if x != nil && x.DecomposeTimeSeries != nil {
		return *x.DecomposeTimeSeries
	}
	return false
}

func (x *TrainingOptions) GetDistanceType() string {
	if x != nil && x.DistanceType != nil {
		return *x.DistanceType
	}
	return ""
}

func (x *TrainingOptions) GetDropout() float64 {
	if x != nil && x.Dropout != nil {
		return *x.Dropout
	}
	return 0
}

func (x *TrainingOptions) GetEarlyStop() bool {
	if x != nil && x.EarlyStop != nil {
		return *x.EarlyStop
	}
	return false
}

func (x *TrainingOptions) GetEnableGlobalExplain() bool {
	if x != nil && x.EnableGlobalExplain != nil {
		return *x.EnableGlobalExplain
	}
	return false
}

func (x *TrainingOptions) GetFeedbackType() string {
	if x != nil && x.FeedbackType != nil {
		return *x.FeedbackType
	}
	return ""
}

func (x *TrainingOptions) GetFitIntercept() bool {
	if x != nil && x.FitIntercept != nil {
		return *x.FitIntercept
	}
	return false
}

func (x *TrainingOptions) GetHiddenUnits() []int64 {
	if x != nil {
		return x.HiddenUnits
	}
	return nil
}

func (x *TrainingOptions) GetHolidayRegion() string {
	if x != nil && x.HolidayRegion != nil {
		return *x.HolidayRegion
	}
	return ""
}

func (x *TrainingOptions) GetHolidayRegions() []string {
	if x != nil {
		return x.HolidayRegions
	}
	return nil
}

func (x *TrainingOptions) GetHorizon() int64 {
	if x != nil && x.Horizon != nil {
		return *x.Horizon
	}
	return 0
}

func (x *TrainingOptions) GetHparamTuningObjectives() []string {
	if x != nil {
		return x.HparamTuningObjectives
	}
	return nil
}

func (x *TrainingOptions) GetIncludeDrift() bool {
	if x != nil && x.IncludeDrift != nil {
		return *x.IncludeDrift
	}
	return false
}

func (x *TrainingOptions) GetInitialLearnRate() float64 {
	if x != nil && x.InitialLearnRate != nil {
		return *x.InitialLearnRate
	}
	return 0
}

func (x *TrainingOptions) GetInputLabelColumns() []string {
	if x != nil {
		return x.InputLabelColumns
	}
	return nil
}

func (x *TrainingOptions) GetInstanceWeightColumn() string {
	if x != nil && x.InstanceWeightColumn != nil {
		return *x.InstanceWeightColumn
	}
	return ""
}

func (x *TrainingOptions) GetIntegratedGradientsNumSteps() int64 {
	if x != nil && x.IntegratedGradientsNumSteps != nil {
		return *x.IntegratedGradientsNumSteps
	}
	return 0
}

func (x *TrainingOptions) GetItemColumn() string {
	if x != nil && x.ItemColumn != nil {
		return *x.ItemColumn
	}
	return ""
}

func (x *TrainingOptions) GetKmeansInitializationColumn() string {
	if x != nil && x.KmeansInitializationColumn != nil {
		return *x.KmeansInitializationColumn
	}
	return ""
}

func (x *TrainingOptions) GetKmeansInitializationMethod() string {
	if x != nil && x.KmeansInitializationMethod != nil {
		return *x.KmeansInitializationMethod
	}
	return ""
}

func (x *TrainingOptions) GetL1RegActivation() float64 {
	if x != nil && x.L1RegActivation != nil {
		return *x.L1RegActivation
	}
	return 0
}

func (x *TrainingOptions) GetL1Regularization() float64 {
	if x != nil && x.L1Regularization != nil {
		return *x.L1Regularization
	}
	return 0
}

func (x *TrainingOptions) GetL2Regularization() float64 {
	if x != nil && x.L2Regularization != nil {
		return *x.L2Regularization
	}
	return 0
}

func (x *TrainingOptions) GetLabelClassWeights() map[string]float64 {
	if x != nil {
		return x.LabelClassWeights
	}
	return nil
}

func (x *TrainingOptions) GetLearnRate() float64 {
	if x != nil && x.LearnRate != nil {
		return *x.LearnRate
	}
	return 0
}

func (x *TrainingOptions) GetLearnRateStrategy() string {
	if x != nil && x.LearnRateStrategy != nil {
		return *x.LearnRateStrategy
	}
	return ""
}

func (x *TrainingOptions) GetLossType() string {
	if x != nil && x.LossType != nil {
		return *x.LossType
	}
	return ""
}

func (x *TrainingOptions) GetMaxIterations() int64 {
	if x != nil && x.MaxIterations != nil {
		return *x.MaxIterations
	}
	return 0
}

func (x *TrainingOptions) GetMaxParallelTrials() int64 {
	if x != nil && x.MaxParallelTrials != nil {
		return *x.MaxParallelTrials
	}
	return 0
}

func (x *TrainingOptions) GetMaxTimeSeriesLength() int64 {
	if x != nil && x.MaxTimeSeriesLength != nil {
		return *x.MaxTimeSeriesLength
	}
	return 0
}

func (x *TrainingOptions) GetMaxTreeDepth() int64 {
	if x != nil && x.MaxTreeDepth != nil {
		return *x.MaxTreeDepth
	}
	return 0
}

func (x *TrainingOptions) GetMinRelativeProgress() float64 {
	if x != nil && x.MinRelativeProgress != nil {
		return *x.MinRelativeProgress
	}
	return 0
}

func (x *TrainingOptions) GetMinSplitLoss() float64 {
	if x != nil && x.MinSplitLoss != nil {
		return *x.MinSplitLoss
	}
	return 0
}

func (x *TrainingOptions) GetMinTimeSeriesLength() int64 {
	if x != nil && x.MinTimeSeriesLength != nil {
		return *x.MinTimeSeriesLength
	}
	return 0
}

func (x *TrainingOptions) GetMinTreeChildWeight() int64 {
	if x != nil && x.MinTreeChildWeight != nil {
		return *x.MinTreeChildWeight
	}
	return 0
}

func (x *TrainingOptions) GetModelRegistry() string {
	if x != nil && x.ModelRegistry != nil {
		return *x.ModelRegistry
	}
	return ""
}

func (x *TrainingOptions) GetModelUri() string {
	if x != nil && x.ModelUri != nil {
		return *x.ModelUri
	}
	return ""
}

func (x *TrainingOptions) GetNonSeasonalOrder() *ArimaOrder {
	if x != nil {
		return x.NonSeasonalOrder
	}
	return nil
}

func (x *TrainingOptions) GetNumClusters() int64 {
	if x != nil && x.NumClusters != nil {
		return *x.NumClusters
	}
	return 0
}

func (x *TrainingOptions) GetNumFactors() int64 {
	if x != nil && x.NumFactors != nil {
		return *x.NumFactors
	}
	return 0
}

func (x *TrainingOptions) GetNumParallelTree() int64 {
	if x != nil && x.NumParallelTree != nil {
		return *x.NumParallelTree
	}
	return 0
}

func (x *TrainingOptions) GetNumPrincipalComponents() int64 {
	if x != nil && x.NumPrincipalComponents != nil {
		return *x.NumPrincipalComponents
	}
	return 0
}

func (x *TrainingOptions) GetNumTrials() int64 {
	if x != nil && x.NumTrials != nil {
		return *x.NumTrials
	}
	return 0
}

func (x *TrainingOptions) GetOptimizationStrategy() string {
	if x != nil && x.OptimizationStrategy != nil {
		return *x.OptimizationStrategy
	}
	return ""
}

func (x *TrainingOptions) GetOptimizer() string {
	if x != nil && x.Optimizer != nil {
		return *x.Optimizer
	}
	return ""
}

func (x *TrainingOptions) GetPcaExplainedVarianceRatio() float64 {
	if x != nil && x.PcaExplainedVarianceRatio != nil {
		return *x.PcaExplainedVarianceRatio
	}
	return 0
}

func (x *TrainingOptions) GetPcaSolver() string {
	if x != nil && x.PcaSolver != nil {
		return *x.PcaSolver
	}
	return ""
}

func (x *TrainingOptions) GetSampledShapleyNumPaths() int64 {
	if x != nil && x.SampledShapleyNumPaths != nil {
		return *x.SampledShapleyNumPaths
	}
	return 0
}

func (x *TrainingOptions) GetScaleFeatures() bool {
	if x != nil && x.ScaleFeatures != nil {
		return *x.ScaleFeatures
	}
	return false
}

func (x *TrainingOptions) GetStandardizeFeatures() bool {
	if x != nil && x.StandardizeFeatures != nil {
		return *x.StandardizeFeatures
	}
	return false
}

func (x *TrainingOptions) GetSubsample() float64 {
	if x != nil && x.Subsample != nil {
		return *x.Subsample
	}
	return 0
}

func (x *TrainingOptions) GetTfVersion() string {
	if x != nil && x.TfVersion != nil {
		return *x.TfVersion
	}
	return ""
}

func (x *TrainingOptions) GetTimeSeriesDataColumn() string {
	if x != nil && x.TimeSeriesDataColumn != nil {
		return *x.TimeSeriesDataColumn
	}
	return ""
}

func (x *TrainingOptions) GetTimeSeriesIdColumn() string {
	if x != nil && x.TimeSeriesIdColumn != nil {
		return *x.TimeSeriesIdColumn
	}
	return ""
}

func (x *TrainingOptions) GetTimeSeriesIdColumns() []string {
	if x != nil {
		return x.TimeSeriesIdColumns
	}
	return nil
}

func (x *TrainingOptions) GetTimeSeriesLengthFraction() float64 {
	if x != nil && x.TimeSeriesLengthFraction != nil {
		return *x.TimeSeriesLengthFraction
	}
	return 0
}

func (x *TrainingOptions) GetTimeSeriesTimestampColumn() string {
	if x != nil && x.TimeSeriesTimestampColumn != nil {
		return *x.TimeSeriesTimestampColumn
	}
	return ""
}

func (x *TrainingOptions) GetTreeMethod() string {
	if x != nil && x.TreeMethod != nil {
		return *x.TreeMethod
	}
	return ""
}

func (x *TrainingOptions) GetTrendSmoothingWindowSize() int64 {
	if x != nil && x.TrendSmoothingWindowSize != nil {
		return *x.TrendSmoothingWindowSize
	}
	return 0
}

func (x *TrainingOptions) GetUserColumn() string {
	if x != nil && x.UserColumn != nil {
		return *x.UserColumn
	}
	return ""
}

func (x *TrainingOptions) GetVertexAiModelVersionAliases() []string {
	if x != nil {
		return x.VertexAiModelVersionAliases
	}
	return nil
}

func (x *TrainingOptions) GetWalsAlpha() float64 {
	if x != nil && x.WalsAlpha != nil {
		return *x.WalsAlpha
	}
	return 0
}

func (x *TrainingOptions) GetWarmStart() bool {
	if x != nil && x.WarmStart != nil {
		return *x.WarmStart
	}
	return false
}

func (x *TrainingOptions) GetXgboostVersion() string {
	if x != nil && x.XgboostVersion != nil {
		return *x.XgboostVersion
	}
	return ""
}

type TrainingRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassLevelGlobalExplanations []*GlobalExplanation `protobuf:"bytes,1,rep,name=class_level_global_explanations,json=classLevelGlobalExplanations" json:"class_level_global_explanations,omitempty"`
	DataSplitResult              *DataSplitResult     `protobuf:"bytes,2,opt,name=data_split_result,json=dataSplitResult" json:"data_split_result,omitempty"`
	EvaluationMetrics            *EvaluationMetrics   `protobuf:"bytes,3,opt,name=evaluation_metrics,json=evaluationMetrics" json:"evaluation_metrics,omitempty"`
	ModelLevelGlobalExplanation  *GlobalExplanation   `protobuf:"bytes,4,opt,name=model_level_global_explanation,json=modelLevelGlobalExplanation" json:"model_level_global_explanation,omitempty"`
	Results                      []*IterationResult   `protobuf:"bytes,5,rep,name=results" json:"results,omitempty"`
	StartTime                    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	TrainingOptions              *TrainingOptions     `protobuf:"bytes,7,opt,name=training_options,json=trainingOptions" json:"training_options,omitempty"`
	TrainingStartTime            *int64               `protobuf:"varint,8,opt,name=training_start_time,json=trainingStartTime" json:"training_start_time,omitempty"`
	VertexAiModelId              *string              `protobuf:"bytes,9,opt,name=vertex_ai_model_id,json=vertexAiModelId" json:"vertex_ai_model_id,omitempty"`
	VertexAiModelVersion         *string              `protobuf:"bytes,10,opt,name=vertex_ai_model_version,json=vertexAiModelVersion" json:"vertex_ai_model_version,omitempty"`
}

func (x *TrainingRun) Reset() {
	*x = TrainingRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingRun) ProtoMessage() {}

func (x *TrainingRun) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingRun.ProtoReflect.Descriptor instead.
func (*TrainingRun) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{209}
}

func (x *TrainingRun) GetClassLevelGlobalExplanations() []*GlobalExplanation {
	if x != nil {
		return x.ClassLevelGlobalExplanations
	}
	return nil
}

func (x *TrainingRun) GetDataSplitResult() *DataSplitResult {
	if x != nil {
		return x.DataSplitResult
	}
	return nil
}

func (x *TrainingRun) GetEvaluationMetrics() *EvaluationMetrics {
	if x != nil {
		return x.EvaluationMetrics
	}
	return nil
}

func (x *TrainingRun) GetModelLevelGlobalExplanation() *GlobalExplanation {
	if x != nil {
		return x.ModelLevelGlobalExplanation
	}
	return nil
}

func (x *TrainingRun) GetResults() []*IterationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TrainingRun) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TrainingRun) GetTrainingOptions() *TrainingOptions {
	if x != nil {
		return x.TrainingOptions
	}
	return nil
}

func (x *TrainingRun) GetTrainingStartTime() int64 {
	if x != nil && x.TrainingStartTime != nil {
		return *x.TrainingStartTime
	}
	return 0
}

func (x *TrainingRun) GetVertexAiModelId() string {
	if x != nil && x.VertexAiModelId != nil {
		return *x.VertexAiModelId
	}
	return ""
}

func (x *TrainingRun) GetVertexAiModelVersion() string {
	if x != nil && x.VertexAiModelVersion != nil {
		return *x.VertexAiModelVersion
	}
	return ""
}

type TransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId *string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (x *TransactionInfo) Reset() {
	*x = TransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfo) ProtoMessage() {}

func (x *TransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfo.ProtoReflect.Descriptor instead.
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{210}
}

func (x *TransactionInfo) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

type TransformColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	TransformSql *string              `protobuf:"bytes,2,opt,name=transform_sql,json=transformSql" json:"transform_sql,omitempty"`
	Type         *StandardSqlDataType `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (x *TransformColumn) Reset() {
	*x = TransformColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformColumn) ProtoMessage() {}

func (x *TransformColumn) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformColumn.ProtoReflect.Descriptor instead.
func (*TransformColumn) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{211}
}

func (x *TransformColumn) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TransformColumn) GetTransformSql() string {
	if x != nil && x.TransformSql != nil {
		return *x.TransformSql
	}
	return ""
}

func (x *TransformColumn) GetType() *StandardSqlDataType {
	if x != nil {
		return x.Type
	}
	return nil
}

type UndeleteDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletionTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=deletion_time,json=deletionTime" json:"deletion_time,omitempty"`
}

func (x *UndeleteDatasetRequest) Reset() {
	*x = UndeleteDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeleteDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteDatasetRequest) ProtoMessage() {}

func (x *UndeleteDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteDatasetRequest.ProtoReflect.Descriptor instead.
func (*UndeleteDatasetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{212}
}

func (x *UndeleteDatasetRequest) GetDeletionTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeletionTime
	}
	return nil
}

type UserDefinedFunctionResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InlineCode  *string `protobuf:"bytes,1,opt,name=inline_code,json=inlineCode" json:"inline_code,omitempty"`
	ResourceUri *string `protobuf:"bytes,2,opt,name=resource_uri,json=resourceUri" json:"resource_uri,omitempty"`
}

func (x *UserDefinedFunctionResource) Reset() {
	*x = UserDefinedFunctionResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDefinedFunctionResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDefinedFunctionResource) ProtoMessage() {}

func (x *UserDefinedFunctionResource) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDefinedFunctionResource.ProtoReflect.Descriptor instead.
func (*UserDefinedFunctionResource) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{213}
}

func (x *UserDefinedFunctionResource) GetInlineCode() string {
	if x != nil && x.InlineCode != nil {
		return *x.InlineCode
	}
	return ""
}

func (x *UserDefinedFunctionResource) GetResourceUri() string {
	if x != nil && x.ResourceUri != nil {
		return *x.ResourceUri
	}
	return ""
}

type VectorSearchStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexUnusedReasons []*IndexUnusedReason `protobuf:"bytes,1,rep,name=index_unused_reasons,json=indexUnusedReasons" json:"index_unused_reasons,omitempty"`
	IndexUsageMode     *string              `protobuf:"bytes,2,opt,name=index_usage_mode,json=indexUsageMode" json:"index_usage_mode,omitempty"`
}

func (x *VectorSearchStatistics) Reset() {
	*x = VectorSearchStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorSearchStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorSearchStatistics) ProtoMessage() {}

func (x *VectorSearchStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorSearchStatistics.ProtoReflect.Descriptor instead.
func (*VectorSearchStatistics) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{214}
}

func (x *VectorSearchStatistics) GetIndexUnusedReasons() []*IndexUnusedReason {
	if x != nil {
		return x.IndexUnusedReasons
	}
	return nil
}

func (x *VectorSearchStatistics) GetIndexUsageMode() string {
	if x != nil && x.IndexUsageMode != nil {
		return *x.IndexUsageMode
	}
	return ""
}

type ViewDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacyPolicy                *PrivacyPolicy                 `protobuf:"bytes,1,opt,name=privacy_policy,json=privacyPolicy" json:"privacy_policy,omitempty"`
	Query                        *string                        `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
	UseExplicitColumnNames       *bool                          `protobuf:"varint,3,opt,name=use_explicit_column_names,json=useExplicitColumnNames" json:"use_explicit_column_names,omitempty"`
	UseLegacySql                 *bool                          `protobuf:"varint,4,opt,name=use_legacy_sql,json=useLegacySql" json:"use_legacy_sql,omitempty"`
	UserDefinedFunctionResources []*UserDefinedFunctionResource `protobuf:"bytes,5,rep,name=user_defined_function_resources,json=userDefinedFunctionResources" json:"user_defined_function_resources,omitempty"`
}

func (x *ViewDefinition) Reset() {
	*x = ViewDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewDefinition) ProtoMessage() {}

func (x *ViewDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewDefinition.ProtoReflect.Descriptor instead.
func (*ViewDefinition) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{215}
}

func (x *ViewDefinition) GetPrivacyPolicy() *PrivacyPolicy {
	if x != nil {
		return x.PrivacyPolicy
	}
	return nil
}

func (x *ViewDefinition) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *ViewDefinition) GetUseExplicitColumnNames() bool {
	if x != nil && x.UseExplicitColumnNames != nil {
		return *x.UseExplicitColumnNames
	}
	return false
}

func (x *ViewDefinition) GetUseLegacySql() bool {
	if x != nil && x.UseLegacySql != nil {
		return *x.UseLegacySql
	}
	return false
}

func (x *ViewDefinition) GetUserDefinedFunctionResources() []*UserDefinedFunctionResource {
	if x != nil {
		return x.UserDefinedFunctionResources
	}
	return nil
}

type DeleteDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId      *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	DeleteContents *bool   `protobuf:"varint,2,opt,name=delete_contents,json=deleteContents" json:"delete_contents,omitempty"`
	ProjectId      *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *DeleteDatasetRequest) Reset() {
	*x = DeleteDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatasetRequest) ProtoMessage() {}

func (x *DeleteDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatasetRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatasetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{216}
}

func (x *DeleteDatasetRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DeleteDatasetRequest) GetDeleteContents() bool {
	if x != nil && x.DeleteContents != nil {
		return *x.DeleteContents
	}
	return false
}

func (x *DeleteDatasetRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type GetDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId   *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	DatasetView *string `protobuf:"bytes,2,opt,name=dataset_view,json=datasetView" json:"dataset_view,omitempty"`
	ProjectId   *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *GetDatasetRequest) Reset() {
	*x = GetDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetRequest) ProtoMessage() {}

func (x *GetDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{217}
}

func (x *GetDatasetRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *GetDatasetRequest) GetDatasetView() string {
	if x != nil && x.DatasetView != nil {
		return *x.DatasetView
	}
	return ""
}

func (x *GetDatasetRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type InsertDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *string  `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Dataset   *Dataset `protobuf:"bytes,2,opt,name=dataset" json:"dataset,omitempty"`
}

func (x *InsertDatasetRequest) Reset() {
	*x = InsertDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertDatasetRequest) ProtoMessage() {}

func (x *InsertDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertDatasetRequest.ProtoReflect.Descriptor instead.
func (*InsertDatasetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{218}
}

func (x *InsertDatasetRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *InsertDatasetRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type ListDatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All        *bool   `protobuf:"varint,1,opt,name=all" json:"all,omitempty"`
	Filter     *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	MaxResults *int32  `protobuf:"varint,3,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId  *string `protobuf:"bytes,5,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *ListDatasetsRequest) Reset() {
	*x = ListDatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatasetsRequest) ProtoMessage() {}

func (x *ListDatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatasetsRequest.ProtoReflect.Descriptor instead.
func (*ListDatasetsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{219}
}

func (x *ListDatasetsRequest) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

func (x *ListDatasetsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListDatasetsRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListDatasetsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListDatasetsRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type PatchDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string  `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Dataset   *Dataset `protobuf:"bytes,3,opt,name=dataset" json:"dataset,omitempty"`
}

func (x *PatchDatasetRequest) Reset() {
	*x = PatchDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchDatasetRequest) ProtoMessage() {}

func (x *PatchDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchDatasetRequest.ProtoReflect.Descriptor instead.
func (*PatchDatasetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{220}
}

func (x *PatchDatasetRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *PatchDatasetRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *PatchDatasetRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type UndeleteDatasetServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string                 `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Dataset   *UndeleteDatasetRequest `protobuf:"bytes,3,opt,name=dataset" json:"dataset,omitempty"`
}

func (x *UndeleteDatasetServiceRequest) Reset() {
	*x = UndeleteDatasetServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeleteDatasetServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteDatasetServiceRequest) ProtoMessage() {}

func (x *UndeleteDatasetServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteDatasetServiceRequest.ProtoReflect.Descriptor instead.
func (*UndeleteDatasetServiceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{221}
}

func (x *UndeleteDatasetServiceRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *UndeleteDatasetServiceRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *UndeleteDatasetServiceRequest) GetDataset() *UndeleteDatasetRequest {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type UpdateDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string  `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Dataset   *Dataset `protobuf:"bytes,3,opt,name=dataset" json:"dataset,omitempty"`
}

func (x *UpdateDatasetRequest) Reset() {
	*x = UpdateDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatasetRequest) ProtoMessage() {}

func (x *UpdateDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatasetRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatasetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{222}
}

func (x *UpdateDatasetRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *UpdateDatasetRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *UpdateDatasetRequest) GetDataset() *Dataset {
	if x != nil {
		return x.Dataset
	}
	return nil
}

type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     *string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Location  *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{223}
}

func (x *CancelJobRequest) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *CancelJobRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *CancelJobRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type DeleteJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     *string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Location  *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *DeleteJobRequest) Reset() {
	*x = DeleteJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRequest) ProtoMessage() {}

func (x *DeleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{224}
}

func (x *DeleteJobRequest) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *DeleteJobRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *DeleteJobRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     *string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Location  *string `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{225}
}

func (x *GetJobRequest) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *GetJobRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *GetJobRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type GetQueryResultsJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatOptionsUseInt64Timestamp *bool   `protobuf:"varint,1,opt,name=format_options_use_int64_timestamp,json=formatOptionsUseInt64Timestamp" json:"format_options_use_int64_timestamp,omitempty"`
	JobId                          *string `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	Location                       *string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	MaxResults                     *int32  `protobuf:"varint,4,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken                      *string `protobuf:"bytes,5,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId                      *string `protobuf:"bytes,6,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	StartIndex                     *string `protobuf:"bytes,7,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	TimeoutMs                      *int32  `protobuf:"varint,8,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
}

func (x *GetQueryResultsJobRequest) Reset() {
	*x = GetQueryResultsJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResultsJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResultsJobRequest) ProtoMessage() {}

func (x *GetQueryResultsJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResultsJobRequest.ProtoReflect.Descriptor instead.
func (*GetQueryResultsJobRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{226}
}

func (x *GetQueryResultsJobRequest) GetFormatOptionsUseInt64Timestamp() bool {
	if x != nil && x.FormatOptionsUseInt64Timestamp != nil {
		return *x.FormatOptionsUseInt64Timestamp
	}
	return false
}

func (x *GetQueryResultsJobRequest) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *GetQueryResultsJobRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *GetQueryResultsJobRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *GetQueryResultsJobRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *GetQueryResultsJobRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *GetQueryResultsJobRequest) GetStartIndex() string {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return ""
}

func (x *GetQueryResultsJobRequest) GetTimeoutMs() int32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type InsertJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Job       *Job    `protobuf:"bytes,2,opt,name=job" json:"job,omitempty"`
}

func (x *InsertJobRequest) Reset() {
	*x = InsertJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertJobRequest) ProtoMessage() {}

func (x *InsertJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertJobRequest.ProtoReflect.Descriptor instead.
func (*InsertJobRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{227}
}

func (x *InsertJobRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *InsertJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllUsers        *bool   `protobuf:"varint,1,opt,name=all_users,json=allUsers" json:"all_users,omitempty"`
	MaxCreationTime *string `protobuf:"bytes,2,opt,name=max_creation_time,json=maxCreationTime" json:"max_creation_time,omitempty"`
	MaxResults      *int32  `protobuf:"varint,3,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	MinCreationTime *string `protobuf:"bytes,4,opt,name=min_creation_time,json=minCreationTime" json:"min_creation_time,omitempty"`
	PageToken       *string `protobuf:"bytes,5,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ParentJobId     *string `protobuf:"bytes,6,opt,name=parent_job_id,json=parentJobId" json:"parent_job_id,omitempty"`
	ProjectId       *string `protobuf:"bytes,7,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Projection      *string `protobuf:"bytes,8,opt,name=projection" json:"projection,omitempty"`
	StateFilter     *string `protobuf:"bytes,9,opt,name=state_filter,json=stateFilter" json:"state_filter,omitempty"`
}

func (x *ListJobsRequest) Reset() {
	*x = ListJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsRequest) ProtoMessage() {}

func (x *ListJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsRequest.ProtoReflect.Descriptor instead.
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{228}
}

func (x *ListJobsRequest) GetAllUsers() bool {
	if x != nil && x.AllUsers != nil {
		return *x.AllUsers
	}
	return false
}

func (x *ListJobsRequest) GetMaxCreationTime() string {
	if x != nil && x.MaxCreationTime != nil {
		return *x.MaxCreationTime
	}
	return ""
}

func (x *ListJobsRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListJobsRequest) GetMinCreationTime() string {
	if x != nil && x.MinCreationTime != nil {
		return *x.MinCreationTime
	}
	return ""
}

func (x *ListJobsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListJobsRequest) GetParentJobId() string {
	if x != nil && x.ParentJobId != nil {
		return *x.ParentJobId
	}
	return ""
}

func (x *ListJobsRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ListJobsRequest) GetProjection() string {
	if x != nil && x.Projection != nil {
		return *x.Projection
	}
	return ""
}

func (x *ListJobsRequest) GetStateFilter() string {
	if x != nil && x.StateFilter != nil {
		return *x.StateFilter
	}
	return ""
}

type QueryJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *string       `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Job       *QueryRequest `protobuf:"bytes,2,opt,name=job" json:"job,omitempty"`
}

func (x *QueryJobRequest) Reset() {
	*x = QueryJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobRequest) ProtoMessage() {}

func (x *QueryJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobRequest.ProtoReflect.Descriptor instead.
func (*QueryJobRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{229}
}

func (x *QueryJobRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *QueryJobRequest) GetJob() *QueryRequest {
	if x != nil {
		return x.Job
	}
	return nil
}

type DeleteModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ModelId   *string `protobuf:"bytes,2,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *DeleteModelRequest) Reset() {
	*x = DeleteModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelRequest) ProtoMessage() {}

func (x *DeleteModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelRequest.ProtoReflect.Descriptor instead.
func (*DeleteModelRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{230}
}

func (x *DeleteModelRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DeleteModelRequest) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *DeleteModelRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type GetModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ModelId   *string `protobuf:"bytes,2,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *GetModelRequest) Reset() {
	*x = GetModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelRequest) ProtoMessage() {}

func (x *GetModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelRequest.ProtoReflect.Descriptor instead.
func (*GetModelRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{231}
}

func (x *GetModelRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *GetModelRequest) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *GetModelRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type ListModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId  *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	MaxResults *int32  `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId  *string `protobuf:"bytes,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{232}
}

func (x *ListModelsRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ListModelsRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListModelsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListModelsRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type PatchModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ModelId   *string `protobuf:"bytes,2,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	ProjectId *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Model     *Model  `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
}

func (x *PatchModelRequest) Reset() {
	*x = PatchModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchModelRequest) ProtoMessage() {}

func (x *PatchModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchModelRequest.ProtoReflect.Descriptor instead.
func (*PatchModelRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{233}
}

func (x *PatchModelRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *PatchModelRequest) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *PatchModelRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *PatchModelRequest) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

type GetServiceAccountProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *GetServiceAccountProjectRequest) Reset() {
	*x = GetServiceAccountProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceAccountProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAccountProjectRequest) ProtoMessage() {}

func (x *GetServiceAccountProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAccountProjectRequest.ProtoReflect.Descriptor instead.
func (*GetServiceAccountProjectRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{234}
}

func (x *GetServiceAccountProjectRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxResults *int32  `protobuf:"varint,1,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{235}
}

func (x *ListProjectsRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListProjectsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type DeleteRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	RoutineId *string `protobuf:"bytes,3,opt,name=routine_id,json=routineId" json:"routine_id,omitempty"`
}

func (x *DeleteRoutineRequest) Reset() {
	*x = DeleteRoutineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoutineRequest) ProtoMessage() {}

func (x *DeleteRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoutineRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoutineRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{236}
}

func (x *DeleteRoutineRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DeleteRoutineRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *DeleteRoutineRequest) GetRoutineId() string {
	if x != nil && x.RoutineId != nil {
		return *x.RoutineId
	}
	return ""
}

type GetRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	ReadMask  *string `protobuf:"bytes,3,opt,name=read_mask,json=readMask" json:"read_mask,omitempty"`
	RoutineId *string `protobuf:"bytes,4,opt,name=routine_id,json=routineId" json:"routine_id,omitempty"`
}

func (x *GetRoutineRequest) Reset() {
	*x = GetRoutineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutineRequest) ProtoMessage() {}

func (x *GetRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutineRequest.ProtoReflect.Descriptor instead.
func (*GetRoutineRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{237}
}

func (x *GetRoutineRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *GetRoutineRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *GetRoutineRequest) GetReadMask() string {
	if x != nil && x.ReadMask != nil {
		return *x.ReadMask
	}
	return ""
}

func (x *GetRoutineRequest) GetRoutineId() string {
	if x != nil && x.RoutineId != nil {
		return *x.RoutineId
	}
	return ""
}

type InsertRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string  `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Routine   *Routine `protobuf:"bytes,3,opt,name=routine" json:"routine,omitempty"`
}

func (x *InsertRoutineRequest) Reset() {
	*x = InsertRoutineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRoutineRequest) ProtoMessage() {}

func (x *InsertRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRoutineRequest.ProtoReflect.Descriptor instead.
func (*InsertRoutineRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{238}
}

func (x *InsertRoutineRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *InsertRoutineRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *InsertRoutineRequest) GetRoutine() *Routine {
	if x != nil {
		return x.Routine
	}
	return nil
}

type ListRoutinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId  *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Filter     *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	MaxResults *int32  `protobuf:"varint,3,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId  *string `protobuf:"bytes,5,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	ReadMask   *string `protobuf:"bytes,6,opt,name=read_mask,json=readMask" json:"read_mask,omitempty"`
}

func (x *ListRoutinesRequest) Reset() {
	*x = ListRoutinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutinesRequest) ProtoMessage() {}

func (x *ListRoutinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutinesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutinesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{239}
}

func (x *ListRoutinesRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ListRoutinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListRoutinesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListRoutinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListRoutinesRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ListRoutinesRequest) GetReadMask() string {
	if x != nil && x.ReadMask != nil {
		return *x.ReadMask
	}
	return ""
}

type UpdateRoutineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string  `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	RoutineId *string  `protobuf:"bytes,3,opt,name=routine_id,json=routineId" json:"routine_id,omitempty"`
	Routine   *Routine `protobuf:"bytes,4,opt,name=routine" json:"routine,omitempty"`
}

func (x *UpdateRoutineRequest) Reset() {
	*x = UpdateRoutineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoutineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutineRequest) ProtoMessage() {}

func (x *UpdateRoutineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutineRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoutineRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{240}
}

func (x *UpdateRoutineRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *UpdateRoutineRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *UpdateRoutineRequest) GetRoutineId() string {
	if x != nil && x.RoutineId != nil {
		return *x.RoutineId
	}
	return ""
}

func (x *UpdateRoutineRequest) GetRoutine() *Routine {
	if x != nil {
		return x.Routine
	}
	return nil
}

type ListRowAccessPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	PageSize  *int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId *string `protobuf:"bytes,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId   *string `protobuf:"bytes,5,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *ListRowAccessPoliciesRequest) Reset() {
	*x = ListRowAccessPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowAccessPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowAccessPoliciesRequest) ProtoMessage() {}

func (x *ListRowAccessPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowAccessPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListRowAccessPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{241}
}

func (x *ListRowAccessPoliciesRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListRowAccessPoliciesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ListRowAccessPoliciesRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type InsertAllTabledataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string                    `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string                    `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId   *string                    `protobuf:"bytes,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Tabledata *TableDataInsertAllRequest `protobuf:"bytes,4,opt,name=tabledata" json:"tabledata,omitempty"`
}

func (x *InsertAllTabledataRequest) Reset() {
	*x = InsertAllTabledataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertAllTabledataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertAllTabledataRequest) ProtoMessage() {}

func (x *InsertAllTabledataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertAllTabledataRequest.ProtoReflect.Descriptor instead.
func (*InsertAllTabledataRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{242}
}

func (x *InsertAllTabledataRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *InsertAllTabledataRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *InsertAllTabledataRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *InsertAllTabledataRequest) GetTabledata() *TableDataInsertAllRequest {
	if x != nil {
		return x.Tabledata
	}
	return nil
}

type ListTabledataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                      *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	FormatOptionsUseInt64Timestamp *bool   `protobuf:"varint,2,opt,name=format_options_use_int64_timestamp,json=formatOptionsUseInt64Timestamp" json:"format_options_use_int64_timestamp,omitempty"`
	MaxResults                     *int32  `protobuf:"varint,3,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken                      *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId                      *string `protobuf:"bytes,5,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	SelectedFields                 *string `protobuf:"bytes,6,opt,name=selected_fields,json=selectedFields" json:"selected_fields,omitempty"`
	StartIndex                     *string `protobuf:"bytes,7,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	TableId                        *string `protobuf:"bytes,8,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *ListTabledataRequest) Reset() {
	*x = ListTabledataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabledataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabledataRequest) ProtoMessage() {}

func (x *ListTabledataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabledataRequest.ProtoReflect.Descriptor instead.
func (*ListTabledataRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{243}
}

func (x *ListTabledataRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ListTabledataRequest) GetFormatOptionsUseInt64Timestamp() bool {
	if x != nil && x.FormatOptionsUseInt64Timestamp != nil {
		return *x.FormatOptionsUseInt64Timestamp
	}
	return false
}

func (x *ListTabledataRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListTabledataRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListTabledataRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ListTabledataRequest) GetSelectedFields() string {
	if x != nil && x.SelectedFields != nil {
		return *x.SelectedFields
	}
	return ""
}

func (x *ListTabledataRequest) GetStartIndex() string {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return ""
}

func (x *ListTabledataRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type DeleteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId   *string `protobuf:"bytes,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *DeleteTableRequest) Reset() {
	*x = DeleteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequest) ProtoMessage() {}

func (x *DeleteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{244}
}

func (x *DeleteTableRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *DeleteTableRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *DeleteTableRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

type GetTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId      *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId      *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	SelectedFields *string `protobuf:"bytes,3,opt,name=selected_fields,json=selectedFields" json:"selected_fields,omitempty"`
	TableId        *string `protobuf:"bytes,4,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	View           *string `protobuf:"bytes,5,opt,name=view" json:"view,omitempty"`
}

func (x *GetTableRequest) Reset() {
	*x = GetTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRequest) ProtoMessage() {}

func (x *GetTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRequest.ProtoReflect.Descriptor instead.
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{245}
}

func (x *GetTableRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *GetTableRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *GetTableRequest) GetSelectedFields() string {
	if x != nil && x.SelectedFields != nil {
		return *x.SelectedFields
	}
	return ""
}

func (x *GetTableRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *GetTableRequest) GetView() string {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ""
}

type InsertTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId *string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Table     *Table  `protobuf:"bytes,3,opt,name=table" json:"table,omitempty"`
}

func (x *InsertTableRequest) Reset() {
	*x = InsertTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertTableRequest) ProtoMessage() {}

func (x *InsertTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertTableRequest.ProtoReflect.Descriptor instead.
func (*InsertTableRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{246}
}

func (x *InsertTableRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *InsertTableRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *InsertTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type ListTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId  *string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	MaxResults *int32  `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	ProjectId  *string `protobuf:"bytes,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (x *ListTablesRequest) Reset() {
	*x = ListTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequest) ProtoMessage() {}

func (x *ListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequest.ProtoReflect.Descriptor instead.
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{247}
}

func (x *ListTablesRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *ListTablesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListTablesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListTablesRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

type PatchTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutodetectSchema *bool   `protobuf:"varint,1,opt,name=autodetect_schema,json=autodetectSchema" json:"autodetect_schema,omitempty"`
	DatasetId        *string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId        *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId          *string `protobuf:"bytes,4,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Table            *Table  `protobuf:"bytes,5,opt,name=table" json:"table,omitempty"`
}

func (x *PatchTableRequest) Reset() {
	*x = PatchTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchTableRequest) ProtoMessage() {}

func (x *PatchTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchTableRequest.ProtoReflect.Descriptor instead.
func (*PatchTableRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{248}
}

func (x *PatchTableRequest) GetAutodetectSchema() bool {
	if x != nil && x.AutodetectSchema != nil {
		return *x.AutodetectSchema
	}
	return false
}

func (x *PatchTableRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *PatchTableRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *PatchTableRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *PatchTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type UpdateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutodetectSchema *bool   `protobuf:"varint,1,opt,name=autodetect_schema,json=autodetectSchema" json:"autodetect_schema,omitempty"`
	DatasetId        *string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	ProjectId        *string `protobuf:"bytes,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	TableId          *string `protobuf:"bytes,4,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Table            *Table  `protobuf:"bytes,5,opt,name=table" json:"table,omitempty"`
}

func (x *UpdateTableRequest) Reset() {
	*x = UpdateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTableRequest) ProtoMessage() {}

func (x *UpdateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateTableRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP(), []int{249}
}

func (x *UpdateTableRequest) GetAutodetectSchema() bool {
	if x != nil && x.AutodetectSchema != nil {
		return *x.AutodetectSchema
	}
	return false
}

func (x *UpdateTableRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *UpdateTableRequest) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *UpdateTableRequest) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *UpdateTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

var File_mockgcp_cloud_bigquery_v2_api_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_bigquery_v2_api_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x1e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x31, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x63, 0x5f, 0x61, 0x75, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x63, 0x41, 0x75, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x6c, 0x0a, 0x1a, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53,
	0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x1a, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b,
	0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x19, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x13,
	0x41, 0x72, 0x69, 0x6d, 0x61, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x61, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x17, 0x41, 0x72, 0x69,
	0x6d, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x5f, 0x66, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x72, 0x69, 0x6d, 0x61, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x13, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x26, 0x61, 0x72, 0x69, 0x6d,
	0x61, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x22, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x72, 0x69, 0x6d, 0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x22, 0xc0, 0x04, 0x0a,
	0x0e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5a, 0x0a, 0x12, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x61,
	0x72, 0x69, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x46, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x13, 0x61, 0x72, 0x69, 0x6d, 0x61,
	0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68,
	0x61, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x61, 0x73,
	0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x70, 0x69, 0x6b, 0x65,
	0x73, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x53, 0x74, 0x65, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x73, 0x22,
	0x36, 0x0a, 0x0a, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x71, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x41, 0x72, 0x69, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x72, 0x69, 0x6d, 0x61,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69,
	0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x72, 0x69,
	0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x22, 0xf8, 0x03, 0x0a, 0x22, 0x41, 0x72, 0x69, 0x6d, 0x61,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x61, 0x0a,
	0x15, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x46, 0x69, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x13, 0x61, 0x72, 0x69,
	0x6d, 0x61, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x68, 0x61, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x70, 0x69,
	0x6b, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x53, 0x74, 0x65, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d,
	0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x73, 0x22, 0x7d, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x54, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x56, 0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78,
	0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x41, 0x76, 0x72, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x76, 0x72, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x41, 0x76, 0x72, 0x6f,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0e,
	0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x12, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x69, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x01, 0x0a,
	0x14, 0x42, 0x69, 0x67, 0x4c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x15, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x42, 0x69, 0x67, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x42,
	0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77,
	0x6b, 0x65, 0x79, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe2, 0x02, 0x0a, 0x1b,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x20,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x1e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x70, 0x0a, 0x1c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x19, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0xde, 0x02, 0x0a, 0x15, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x31, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x31, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x75,
	0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x75, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x22, 0x75, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x42, 0x71, 0x6d,
	0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x1e, 0x42, 0x71, 0x6d,
	0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x31,
	0x5f, 0x72, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x31, 0x52, 0x65,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x32, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x6c, 0x32, 0x52, 0x65, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x0f, 0x42, 0x71, 0x6d, 0x6c, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x71,
	0x6d, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x71, 0x6d, 0x6c, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x10, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a,
	0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x41, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x78, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0xb8, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x76, 0x69, 0x65, 0x73, 0x5f, 0x62,
	0x6f, 0x75, 0x6c, 0x64, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x64, 0x61, 0x76, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x6c, 0x64, 0x69,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x65, 0x61, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x31, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xdf, 0x02, 0x0a, 0x0a, 0x43, 0x73, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4a, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x77,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x63, 0x69, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x49, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x3c, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x43,
	0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x85, 0x0d, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x3f, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x20, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x1a, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66,
	0x69, 0x65, 0x73, 0x5f, 0x70, 0x7a, 0x69, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x50, 0x7a, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x7a, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x50, 0x7a, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x12, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x13, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca,
	0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xbd, 0x02,
	0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x02,
	0x0a, 0x19, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x45, 0x70, 0x73, 0x69, 0x6c, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x65, 0x0a, 0x1e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x95, 0x01,
	0x0a, 0x0d, 0x44, 0x6d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x10, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x31,
	0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x22, 0x3b, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x79, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x96, 0x06, 0x0a, 0x11, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x6d, 0x0a, 0x19, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x72, 0x69, 0x6d, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x17, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x79, 0x0a, 0x1d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x1b, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x1e, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x22,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x11, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0x96, 0x09, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d,
	0x73, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41, 0x76, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x5f, 0x61,
	0x76, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73,
	0x41, 0x76, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x73, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x73,
	0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41, 0x76, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x1c, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x12, 0x1e, 0x0a, 0x0b,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x4d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x41,
	0x76, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x41, 0x76, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x22, 0x42, 0x0a, 0x10,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x22, 0x52, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x67, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc4, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x09, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x76, 0x72, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x61, 0x76, 0x72, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x10, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x63,
	0x73, 0x76, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x73, 0x76, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x73, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x61, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x19, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x68, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x6a, 0x73, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x19,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x69, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x73, 0x22, 0x63, 0x0a, 0x18,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xd5, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8,
	0x04, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0d,
	0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6a, 0x6f, 0x62,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6d, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75,
	0x6d, 0x44, 0x6d, 0x6c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x36, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x45, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x7f, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x4c,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x48,
	0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x6f,
	0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xab,
	0x01, 0x0a, 0x17, 0x48, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xf5, 0x0e, 0x0a,
	0x12, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5e, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x63,
	0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x5c,
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x72,
	0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x72, 0x65, 0x65, 0x12, 0x61, 0x0a, 0x13,
	0x64, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x11, 0x64, 0x61,
	0x72, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x0c,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0b, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x31, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05, 0x6c, 0x31, 0x52, 0x65, 0x67, 0x12, 0x48,
	0x0a, 0x06, 0x6c, 0x32, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x05, 0x6c, 0x32, 0x52, 0x65, 0x67, 0x12, 0x50, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e,
	0x74, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x57, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x65,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x51, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e,
	0x74, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x4f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6e, 0x74, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x5a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x4f, 0x0a, 0x09,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x73, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x22, 0x88, 0x04, 0x0a, 0x11, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x12,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x11, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x74, 0x0a, 0x20, 0x68, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x5f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x1d, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x43,
	0x0a, 0x07, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x68, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x4c, 0x6f, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22,
	0xa9, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x0f, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f,
	0x0a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x44, 0x69, 0x66, 0x66, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22,
	0x26, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x49, 0x6e,
	0x74, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x22, 0xad, 0x03, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x72, 0x69,
	0x6d, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0xaa, 0x04, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x50, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x6a,
	0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x47, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x58, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x98, 0x04, 0x0a,
	0x10, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x42, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x04, 0x0a, 0x17, 0x4a, 0x6f, 0x62, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x61, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x13, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x41, 0x76, 0x72, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb8, 0x10, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4a, 0x61, 0x67, 0x67, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12,
	0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x6d, 0x0a, 0x19, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x68, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x63, 0x69, 0x69, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x69, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x75, 0x73, 0x65, 0x41, 0x76, 0x72, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf0, 0x0e, 0x0a, 0x15, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x61, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x83, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x22, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x10, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a,
	0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e,
	0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54,
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x73, 0x71, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x53, 0x71, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12,
	0x7c, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x1c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x78, 0x0a, 0x15, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x04, 0x0a, 0x19, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x70, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d,
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x4a, 0x6f,
	0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b,
	0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6a,
	0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xb6, 0x01, 0x0a, 0x07, 0x4a, 0x6f,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1d, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x4d, 0x73, 0x22, 0x8e, 0x0a, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x3c, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x35, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x34, 0x52, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x33, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x44, 0x65, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x77, 0x0a, 0x1d, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x1a, 0x72, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x54, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x1e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x32, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x4d, 0x73, 0x22, 0x98, 0x1b, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x32, 0x12, 0x5e, 0x0a, 0x14, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x12, 0x62, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64,
	0x63, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x52, 0x0a, 0x10, 0x64, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x63, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x64, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x63, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4d, 0x0a, 0x24, 0x64, 0x64, 0x6c, 0x5f, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1f, 0x64, 0x64, 0x6c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x15, 0x64, 0x64, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x64,
	0x64, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x64, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x64, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x64,
	0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x10, 0x64, 0x64, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x64, 0x64,
	0x6c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x72,
	0x0a, 0x1c, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x64, 0x64, 0x6c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x52, 0x0a, 0x10, 0x64, 0x64, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x64, 0x6c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x6d, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x08, 0x64, 0x6d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x14, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x63,
	0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x76, 0x0a, 0x1c, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6d,
	0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a,
	0x0d, 0x6d, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x6d, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x27, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6d, 0x6c, 0x5f, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x6d, 0x6c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x32, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x57, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x1b, 0x75, 0x6e, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x6a, 0x0a, 0x18, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x16, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x8b, 0x02,
	0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x33,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x49, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x34, 0x12, 0x3d,
	0x0a, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x69, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x69, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x63, 0x0a, 0x0e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x35, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x70, 0x69, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x15, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0c, 0x0a, 0x0a, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x36, 0x0a, 0x15, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x13,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a,
	0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x13, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11,
	0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x62, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x1a, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x22, 0x75, 0x0a, 0x1a, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x89, 0x01, 0x0a,
	0x17, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x6e, 0x0a, 0x1a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0c, 0x4d, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x68, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x68,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7,
	0x0a, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x65, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a,
	0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x14, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x12,
	0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53,
	0x71, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x1b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0f,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x71,
	0x6d, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x13, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x69, 0x0a,
	0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x1f, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x1e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x5d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x6a, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x61,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x65, 0x6e, 0x75, 0x6d, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x12, 0x47, 0x0a,
	0x0c, 0x73, 0x6b, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x6b, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x6b, 0x65, 0x77, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x22, 0x74, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x61, 0x76, 0x67, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x1e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x8e, 0x01, 0x0a, 0x25, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52, 0x22, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x22, 0xc1, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4d, 0x0a, 0x23, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d,
	0x0a, 0x12, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe5, 0x02,
	0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x76, 0x0a, 0x1c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x1a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x73, 0x0a, 0x1b, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x19, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x67, 0x0a, 0x17,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x15,
	0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc9,
	0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xda, 0x01,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x14, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x5c, 0x0a, 0x18,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x12, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x12,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x50, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6e, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x07, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x52,
	0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a,
	0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x62, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x53, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x71, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x06,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x09,
	0x64, 0x6d, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x6d, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x64, 0x6d, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x6a,
	0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x6d, 0x6c, 0x5f, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x6d, 0x6c, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x77, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x71, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x46, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xea,
	0x01, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65,
	0x61, 0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6e, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x25, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x22, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x6d, 0x65, 0x61, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d,
	0x65, 0x61, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x6d, 0x65, 0x61, 0x6e, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x5f, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x53, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x79, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0x45, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x0f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x7a, 0x65, 0x72, 0x22, 0xcb, 0x07, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x67,
	0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x6f, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x39, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x0f, 0x52, 0x6f, 0x77,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x1b, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x18, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x52, 0x6f,
	0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1a,
	0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x72, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6b, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x74, 0x65, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x44, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x44, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2c, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x27, 0x0a, 0x0a, 0x53, 0x6b, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x10,
	0x53, 0x70, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x61, 0x72, 0x55, 0x72, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x12, 0x56, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x72,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96,
	0x03, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x56, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x63,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x63, 0x73, 0x53, 0x74, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6b, 0x6d, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x72,
	0x6b, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x4a, 0x6f,
	0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x21,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x54, 0x0a, 0x11, 0x62, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xbe,
	0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x50, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22,
	0x69, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x69, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x44, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x17, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e,
	0x19, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x62, 0x69, 0x67, 0x6c,
	0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x69, 0x67, 0x4c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x62, 0x69, 0x67, 0x6c, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x10, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6c, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x1e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x6a, 0x0a, 0x18, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x16, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75,
	0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x6e,
	0x67, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x75,
	0x6d, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x6e, 0x75, 0x6d, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x75, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e,
	0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x14,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x27,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x5d, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x51, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2f, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x01,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x01, 0x76,
	0x22, 0x6e, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe0, 0x01, 0x0a,
	0x1b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x57, 0x0a, 0x11,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x36, 0x0a, 0x1a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x76, 0x0a,
	0x1d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x19, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x26, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0xad, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73,
	0x22, 0x32, 0x0a, 0x1a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x1a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x20, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x9b, 0x05, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x55, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7c,
	0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x71, 0x6c, 0x22, 0x82, 0x06, 0x0a,
	0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4d, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x12,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x41, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x14, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x23,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x3d, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x31, 0x0a,
	0x01, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x01, 0x66,
	0x22, 0x51, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x42, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xaf, 0x1f, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x41,
	0x72, 0x69, 0x6d, 0x61, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x72, 0x69, 0x6d, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x41, 0x72, 0x69, 0x6d, 0x61, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6c, 0x65, 0x61,
	0x6e, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x70,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x70,
	0x69, 0x6b, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x42, 0x79, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x72, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x72, 0x65, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61,
	0x72, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x61,
	0x72, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x74,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x68, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x72,
	0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x40, 0x0a,
	0x1c, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x40, 0x0a, 0x1c, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6b, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x31, 0x5f, 0x72, 0x65, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x31,
	0x52, 0x65, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x6c, 0x31, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x31, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x32,
	0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x32, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x2e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x72,
	0x65, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x52, 0x0a,
	0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x72, 0x69, 0x6d, 0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x10, 0x6e, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x1c, 0x70, 0x63, 0x61, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x19, 0x70, 0x63, 0x61, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x63, 0x61, 0x5f, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x63, 0x61, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x6c, 0x65, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x53, 0x68, 0x61, 0x70, 0x6c, 0x65, 0x79,
	0x4e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x4d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3d,
	0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x1c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x6f, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x44, 0x0a, 0x1f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x54, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x61, 0x6c, 0x73, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x78, 0x67, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x67,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x44, 0x0a, 0x16,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x90, 0x06, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6e, 0x12, 0x72, 0x0a, 0x1f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a,
	0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x11, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x70, 0x0a, 0x1e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x61, 0x69, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x17, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x61, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x41, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x8d, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x71, 0x6c, 0x12, 0x41, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x53, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x59, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x69, 0x22, 0xa1, 0x01,
	0x0a, 0x16, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0xd5, 0x02, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x71, 0x6c, 0x12, 0x7c, 0x0a, 0x1f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1c, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x72,
	0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x55, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x64, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73,
	0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x22, 0x62, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xcc, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x22, 0x6d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xa3, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x19,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x22, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6d, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0xc6, 0x09,
	0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x12, 0xa2, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22,
	0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x38, 0x22, 0x2d, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x3a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x47, 0x32, 0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x3a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0xc5, 0x01, 0x0a, 0x0f, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x50, 0x22, 0x45, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x3a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x1a,
	0x3c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x32, 0xdb, 0x08, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3d, 0x22, 0x3b, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f,
	0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x94, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x7b,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4a, 0x6f, 0x62,
	0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x12, 0x37, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a,
	0x6f, 0x62, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x29, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3a, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f,
	0x62, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x22, 0x2c, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a,
	0x03, 0x6a, 0x6f, 0x62, 0x32, 0xe6, 0x05, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x52, 0x2a, 0x50, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x58,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0xbb, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x5f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x59, 0x32, 0x50, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0xe0, 0x02,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0xc7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x32, 0xcd, 0x07, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x56, 0x2a, 0x54, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x56, 0x12, 0x54, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0x56, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x50, 0x22, 0x45, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5f, 0x1a, 0x54, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x32, 0x90, 0x02, 0x0a, 0x17, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xf4, 0x01, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x12,
	0x62, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x72, 0x6f, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x32, 0xcc, 0x03, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xee, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x67, 0x22, 0x5a, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x3a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0xc7, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x12, 0x55, 0x2f, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xd0, 0x08, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x52, 0x2a, 0x50, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x58, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x22, 0x43, 0x2f,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x3a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x45, 0x12, 0x43, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x32, 0x50, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x1a, 0x50, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3d,
	0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x3a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x62, 0x69, 0x67, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x70, 0x62, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x70,
	0x62,
}

var (
	file_mockgcp_cloud_bigquery_v2_api_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_bigquery_v2_api_proto_rawDescData = file_mockgcp_cloud_bigquery_v2_api_proto_rawDesc
)

func file_mockgcp_cloud_bigquery_v2_api_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_bigquery_v2_api_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_bigquery_v2_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_bigquery_v2_api_proto_rawDescData)
	})
	return file_mockgcp_cloud_bigquery_v2_api_proto_rawDescData
}

var file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes = make([]protoimpl.MessageInfo, 271)
var file_mockgcp_cloud_bigquery_v2_api_proto_goTypes = []interface{}{
	(*AggregateClassificationMetrics)(nil),         // 0: google.cloud.bigquery.v2.AggregateClassificationMetrics
	(*AggregationThresholdPolicy)(nil),             // 1: google.cloud.bigquery.v2.AggregationThresholdPolicy
	(*Argument)(nil),                               // 2: google.cloud.bigquery.v2.Argument
	(*ArimaCoefficients)(nil),                      // 3: google.cloud.bigquery.v2.ArimaCoefficients
	(*ArimaFittingMetrics)(nil),                    // 4: google.cloud.bigquery.v2.ArimaFittingMetrics
	(*ArimaForecastingMetrics)(nil),                // 5: google.cloud.bigquery.v2.ArimaForecastingMetrics
	(*ArimaModelInfo)(nil),                         // 6: google.cloud.bigquery.v2.ArimaModelInfo
	(*ArimaOrder)(nil),                             // 7: google.cloud.bigquery.v2.ArimaOrder
	(*ArimaResult)(nil),                            // 8: google.cloud.bigquery.v2.ArimaResult
	(*ArimaSingleModelForecastingMetrics)(nil),     // 9: google.cloud.bigquery.v2.ArimaSingleModelForecastingMetrics
	(*AuditConfig)(nil),                            // 10: google.cloud.bigquery.v2.AuditConfig
	(*AuditLogConfig)(nil),                         // 11: google.cloud.bigquery.v2.AuditLogConfig
	(*AvroOptions)(nil),                            // 12: google.cloud.bigquery.v2.AvroOptions
	(*BiEngineReason)(nil),                         // 13: google.cloud.bigquery.v2.BiEngineReason
	(*BiEngineStatistics)(nil),                     // 14: google.cloud.bigquery.v2.BiEngineStatistics
	(*BigLakeConfiguration)(nil),                   // 15: google.cloud.bigquery.v2.BigLakeConfiguration
	(*BigQueryModelTraining)(nil),                  // 16: google.cloud.bigquery.v2.BigQueryModelTraining
	(*BigtableColumn)(nil),                         // 17: google.cloud.bigquery.v2.BigtableColumn
	(*BigtableColumnFamily)(nil),                   // 18: google.cloud.bigquery.v2.BigtableColumnFamily
	(*BigtableOptions)(nil),                        // 19: google.cloud.bigquery.v2.BigtableOptions
	(*BinaryClassificationMetrics)(nil),            // 20: google.cloud.bigquery.v2.BinaryClassificationMetrics
	(*BinaryConfusionMatrix)(nil),                  // 21: google.cloud.bigquery.v2.BinaryConfusionMatrix
	(*Binding)(nil),                                // 22: google.cloud.bigquery.v2.Binding
	(*BqmlIterationResult)(nil),                    // 23: google.cloud.bigquery.v2.BqmlIterationResult
	(*BqmlTrainingRunTrainingOptions)(nil),         // 24: google.cloud.bigquery.v2.BqmlTrainingRunTrainingOptions
	(*BqmlTrainingRun)(nil),                        // 25: google.cloud.bigquery.v2.BqmlTrainingRun
	(*CategoricalValue)(nil),                       // 26: google.cloud.bigquery.v2.CategoricalValue
	(*CategoryCount)(nil),                          // 27: google.cloud.bigquery.v2.CategoryCount
	(*CloneDefinition)(nil),                        // 28: google.cloud.bigquery.v2.CloneDefinition
	(*Cluster)(nil),                                // 29: google.cloud.bigquery.v2.Cluster
	(*ClusterInfo)(nil),                            // 30: google.cloud.bigquery.v2.ClusterInfo
	(*Clustering)(nil),                             // 31: google.cloud.bigquery.v2.Clustering
	(*ClusteringMetrics)(nil),                      // 32: google.cloud.bigquery.v2.ClusteringMetrics
	(*ConfusionMatrix)(nil),                        // 33: google.cloud.bigquery.v2.ConfusionMatrix
	(*ConnectionProperty)(nil),                     // 34: google.cloud.bigquery.v2.ConnectionProperty
	(*CsvOptions)(nil),                             // 35: google.cloud.bigquery.v2.CsvOptions
	(*DataFormatOptions)(nil),                      // 36: google.cloud.bigquery.v2.DataFormatOptions
	(*DataMaskingStatistics)(nil),                  // 37: google.cloud.bigquery.v2.DataMaskingStatistics
	(*DataSplitResult)(nil),                        // 38: google.cloud.bigquery.v2.DataSplitResult
	(*DatasetAccess)(nil),                          // 39: google.cloud.bigquery.v2.DatasetAccess
	(*DatasetTags)(nil),                            // 40: google.cloud.bigquery.v2.DatasetTags
	(*Dataset)(nil),                                // 41: google.cloud.bigquery.v2.Dataset
	(*DatasetAccessEntry)(nil),                     // 42: google.cloud.bigquery.v2.DatasetAccessEntry
	(*DatasetListDatasets)(nil),                    // 43: google.cloud.bigquery.v2.DatasetListDatasets
	(*DatasetList)(nil),                            // 44: google.cloud.bigquery.v2.DatasetList
	(*DatasetReference)(nil),                       // 45: google.cloud.bigquery.v2.DatasetReference
	(*DestinationTableProperties)(nil),             // 46: google.cloud.bigquery.v2.DestinationTableProperties
	(*DifferentialPrivacyPolicy)(nil),              // 47: google.cloud.bigquery.v2.DifferentialPrivacyPolicy
	(*DimensionalityReductionMetrics)(nil),         // 48: google.cloud.bigquery.v2.DimensionalityReductionMetrics
	(*DmlStatistics)(nil),                          // 49: google.cloud.bigquery.v2.DmlStatistics
	(*DoubleCandidates)(nil),                       // 50: google.cloud.bigquery.v2.DoubleCandidates
	(*DoubleHparamSearchSpace)(nil),                // 51: google.cloud.bigquery.v2.DoubleHparamSearchSpace
	(*DoubleRange)(nil),                            // 52: google.cloud.bigquery.v2.DoubleRange
	(*EncryptionConfiguration)(nil),                // 53: google.cloud.bigquery.v2.EncryptionConfiguration
	(*Entry)(nil),                                  // 54: google.cloud.bigquery.v2.Entry
	(*ErrorProto)(nil),                             // 55: google.cloud.bigquery.v2.ErrorProto
	(*EvaluationMetrics)(nil),                      // 56: google.cloud.bigquery.v2.EvaluationMetrics
	(*ExplainQueryStage)(nil),                      // 57: google.cloud.bigquery.v2.ExplainQueryStage
	(*ExplainQueryStep)(nil),                       // 58: google.cloud.bigquery.v2.ExplainQueryStep
	(*Explanation)(nil),                            // 59: google.cloud.bigquery.v2.Explanation
	(*ExportDataStatistics)(nil),                   // 60: google.cloud.bigquery.v2.ExportDataStatistics
	(*Expr)(nil),                                   // 61: google.cloud.bigquery.v2.Expr
	(*ExternalCatalogDatasetOptions)(nil),          // 62: google.cloud.bigquery.v2.ExternalCatalogDatasetOptions
	(*ExternalCatalogTableOptions)(nil),            // 63: google.cloud.bigquery.v2.ExternalCatalogTableOptions
	(*ExternalDataConfiguration)(nil),              // 64: google.cloud.bigquery.v2.ExternalDataConfiguration
	(*ExternalDatasetReference)(nil),               // 65: google.cloud.bigquery.v2.ExternalDatasetReference
	(*ExternalServiceCost)(nil),                    // 66: google.cloud.bigquery.v2.ExternalServiceCost
	(*FeatureValue)(nil),                           // 67: google.cloud.bigquery.v2.FeatureValue
	(*GetIamPolicyRequest)(nil),                    // 68: google.cloud.bigquery.v2.GetIamPolicyRequest
	(*GetPolicyOptions)(nil),                       // 69: google.cloud.bigquery.v2.GetPolicyOptions
	(*GetQueryResultsResponse)(nil),                // 70: google.cloud.bigquery.v2.GetQueryResultsResponse
	(*GetServiceAccountResponse)(nil),              // 71: google.cloud.bigquery.v2.GetServiceAccountResponse
	(*GlobalExplanation)(nil),                      // 72: google.cloud.bigquery.v2.GlobalExplanation
	(*GoogleSheetsOptions)(nil),                    // 73: google.cloud.bigquery.v2.GoogleSheetsOptions
	(*HighCardinalityJoin)(nil),                    // 74: google.cloud.bigquery.v2.HighCardinalityJoin
	(*HivePartitioningOptions)(nil),                // 75: google.cloud.bigquery.v2.HivePartitioningOptions
	(*HparamSearchSpaces)(nil),                     // 76: google.cloud.bigquery.v2.HparamSearchSpaces
	(*HparamTuningTrial)(nil),                      // 77: google.cloud.bigquery.v2.HparamTuningTrial
	(*IndexUnusedReason)(nil),                      // 78: google.cloud.bigquery.v2.IndexUnusedReason
	(*InputDataChange)(nil),                        // 79: google.cloud.bigquery.v2.InputDataChange
	(*IntArray)(nil),                               // 80: google.cloud.bigquery.v2.IntArray
	(*IntArrayHparamSearchSpace)(nil),              // 81: google.cloud.bigquery.v2.IntArrayHparamSearchSpace
	(*IntCandidates)(nil),                          // 82: google.cloud.bigquery.v2.IntCandidates
	(*IntHparamSearchSpace)(nil),                   // 83: google.cloud.bigquery.v2.IntHparamSearchSpace
	(*IntRange)(nil),                               // 84: google.cloud.bigquery.v2.IntRange
	(*IterationResult)(nil),                        // 85: google.cloud.bigquery.v2.IterationResult
	(*Job)(nil),                                    // 86: google.cloud.bigquery.v2.Job
	(*JobCancelResponse)(nil),                      // 87: google.cloud.bigquery.v2.JobCancelResponse
	(*JobConfiguration)(nil),                       // 88: google.cloud.bigquery.v2.JobConfiguration
	(*JobConfigurationExtract)(nil),                // 89: google.cloud.bigquery.v2.JobConfigurationExtract
	(*JobConfigurationLoad)(nil),                   // 90: google.cloud.bigquery.v2.JobConfigurationLoad
	(*JobConfigurationQuery)(nil),                  // 91: google.cloud.bigquery.v2.JobConfigurationQuery
	(*JobConfigurationTableCopy)(nil),              // 92: google.cloud.bigquery.v2.JobConfigurationTableCopy
	(*JobCreationReason)(nil),                      // 93: google.cloud.bigquery.v2.JobCreationReason
	(*JobListJobs)(nil),                            // 94: google.cloud.bigquery.v2.JobListJobs
	(*JobList)(nil),                                // 95: google.cloud.bigquery.v2.JobList
	(*JobReference)(nil),                           // 96: google.cloud.bigquery.v2.JobReference
	(*JobStatisticsReservationUsage)(nil),          // 97: google.cloud.bigquery.v2.JobStatisticsReservationUsage
	(*JobStatistics)(nil),                          // 98: google.cloud.bigquery.v2.JobStatistics
	(*JobStatistics2ReservationUsage)(nil),         // 99: google.cloud.bigquery.v2.JobStatistics2ReservationUsage
	(*JobStatistics2)(nil),                         // 100: google.cloud.bigquery.v2.JobStatistics2
	(*JobStatistics3)(nil),                         // 101: google.cloud.bigquery.v2.JobStatistics3
	(*JobStatistics4)(nil),                         // 102: google.cloud.bigquery.v2.JobStatistics4
	(*JobStatistics5)(nil),                         // 103: google.cloud.bigquery.v2.JobStatistics5
	(*JobStatus)(nil),                              // 104: google.cloud.bigquery.v2.JobStatus
	(*JoinRestrictionPolicy)(nil),                  // 105: google.cloud.bigquery.v2.JoinRestrictionPolicy
	(*JsonObject)(nil),                             // 106: google.cloud.bigquery.v2.JsonObject
	(*JsonOptions)(nil),                            // 107: google.cloud.bigquery.v2.JsonOptions
	(*LinkedDatasetMetadata)(nil),                  // 108: google.cloud.bigquery.v2.LinkedDatasetMetadata
	(*LinkedDatasetSource)(nil),                    // 109: google.cloud.bigquery.v2.LinkedDatasetSource
	(*ListModelsResponse)(nil),                     // 110: google.cloud.bigquery.v2.ListModelsResponse
	(*ListRoutinesResponse)(nil),                   // 111: google.cloud.bigquery.v2.ListRoutinesResponse
	(*ListRowAccessPoliciesResponse)(nil),          // 112: google.cloud.bigquery.v2.ListRowAccessPoliciesResponse
	(*LoadQueryStatistics)(nil),                    // 113: google.cloud.bigquery.v2.LoadQueryStatistics
	(*LocationMetadata)(nil),                       // 114: google.cloud.bigquery.v2.LocationMetadata
	(*MaterializedView)(nil),                       // 115: google.cloud.bigquery.v2.MaterializedView
	(*MaterializedViewDefinition)(nil),             // 116: google.cloud.bigquery.v2.MaterializedViewDefinition
	(*MaterializedViewStatistics)(nil),             // 117: google.cloud.bigquery.v2.MaterializedViewStatistics
	(*MaterializedViewStatus)(nil),                 // 118: google.cloud.bigquery.v2.MaterializedViewStatus
	(*MetadataCacheStatistics)(nil),                // 119: google.cloud.bigquery.v2.MetadataCacheStatistics
	(*MlStatistics)(nil),                           // 120: google.cloud.bigquery.v2.MlStatistics
	(*Model)(nil),                                  // 121: google.cloud.bigquery.v2.Model
	(*ModelDefinitionModelOptions)(nil),            // 122: google.cloud.bigquery.v2.ModelDefinitionModelOptions
	(*ModelDefinition)(nil),                        // 123: google.cloud.bigquery.v2.ModelDefinition
	(*ModelExtractOptions)(nil),                    // 124: google.cloud.bigquery.v2.ModelExtractOptions
	(*ModelReference)(nil),                         // 125: google.cloud.bigquery.v2.ModelReference
	(*MultiClassClassificationMetrics)(nil),        // 126: google.cloud.bigquery.v2.MultiClassClassificationMetrics
	(*ParquetOptions)(nil),                         // 127: google.cloud.bigquery.v2.ParquetOptions
	(*PartitionSkew)(nil),                          // 128: google.cloud.bigquery.v2.PartitionSkew
	(*PartitionedColumn)(nil),                      // 129: google.cloud.bigquery.v2.PartitionedColumn
	(*PartitioningDefinition)(nil),                 // 130: google.cloud.bigquery.v2.PartitioningDefinition
	(*PerformanceInsights)(nil),                    // 131: google.cloud.bigquery.v2.PerformanceInsights
	(*Policy)(nil),                                 // 132: google.cloud.bigquery.v2.Policy
	(*PrincipalComponentInfo)(nil),                 // 133: google.cloud.bigquery.v2.PrincipalComponentInfo
	(*PrivacyPolicy)(nil),                          // 134: google.cloud.bigquery.v2.PrivacyPolicy
	(*ProjectListProjects)(nil),                    // 135: google.cloud.bigquery.v2.ProjectListProjects
	(*ProjectList)(nil),                            // 136: google.cloud.bigquery.v2.ProjectList
	(*ProjectReference)(nil),                       // 137: google.cloud.bigquery.v2.ProjectReference
	(*QueryInfo)(nil),                              // 138: google.cloud.bigquery.v2.QueryInfo
	(*QueryParameter)(nil),                         // 139: google.cloud.bigquery.v2.QueryParameter
	(*QueryParameterTypeStructTypes)(nil),          // 140: google.cloud.bigquery.v2.QueryParameterTypeStructTypes
	(*QueryParameterType)(nil),                     // 141: google.cloud.bigquery.v2.QueryParameterType
	(*QueryParameterValue)(nil),                    // 142: google.cloud.bigquery.v2.QueryParameterValue
	(*QueryRequest)(nil),                           // 143: google.cloud.bigquery.v2.QueryRequest
	(*QueryResponse)(nil),                          // 144: google.cloud.bigquery.v2.QueryResponse
	(*QueryTimelineSample)(nil),                    // 145: google.cloud.bigquery.v2.QueryTimelineSample
	(*RangePartitioningRange)(nil),                 // 146: google.cloud.bigquery.v2.RangePartitioningRange
	(*RangePartitioning)(nil),                      // 147: google.cloud.bigquery.v2.RangePartitioning
	(*RangeValue)(nil),                             // 148: google.cloud.bigquery.v2.RangeValue
	(*RankingMetrics)(nil),                         // 149: google.cloud.bigquery.v2.RankingMetrics
	(*RegressionMetrics)(nil),                      // 150: google.cloud.bigquery.v2.RegressionMetrics
	(*RemoteFunctionOptions)(nil),                  // 151: google.cloud.bigquery.v2.RemoteFunctionOptions
	(*RemoteModelInfo)(nil),                        // 152: google.cloud.bigquery.v2.RemoteModelInfo
	(*Routine)(nil),                                // 153: google.cloud.bigquery.v2.Routine
	(*RoutineReference)(nil),                       // 154: google.cloud.bigquery.v2.RoutineReference
	(*Row)(nil),                                    // 155: google.cloud.bigquery.v2.Row
	(*RowAccessPolicy)(nil),                        // 156: google.cloud.bigquery.v2.RowAccessPolicy
	(*RowAccessPolicyReference)(nil),               // 157: google.cloud.bigquery.v2.RowAccessPolicyReference
	(*RowLevelSecurityStatistics)(nil),             // 158: google.cloud.bigquery.v2.RowLevelSecurityStatistics
	(*ScriptOptions)(nil),                          // 159: google.cloud.bigquery.v2.ScriptOptions
	(*ScriptStackFrame)(nil),                       // 160: google.cloud.bigquery.v2.ScriptStackFrame
	(*ScriptStatistics)(nil),                       // 161: google.cloud.bigquery.v2.ScriptStatistics
	(*SearchStatistics)(nil),                       // 162: google.cloud.bigquery.v2.SearchStatistics
	(*SerDeInfo)(nil),                              // 163: google.cloud.bigquery.v2.SerDeInfo
	(*SessionInfo)(nil),                            // 164: google.cloud.bigquery.v2.SessionInfo
	(*SetIamPolicyRequest)(nil),                    // 165: google.cloud.bigquery.v2.SetIamPolicyRequest
	(*SkewSource)(nil),                             // 166: google.cloud.bigquery.v2.SkewSource
	(*SnapshotDefinition)(nil),                     // 167: google.cloud.bigquery.v2.SnapshotDefinition
	(*SparkLoggingInfo)(nil),                       // 168: google.cloud.bigquery.v2.SparkLoggingInfo
	(*SparkOptions)(nil),                           // 169: google.cloud.bigquery.v2.SparkOptions
	(*SparkStatistics)(nil),                        // 170: google.cloud.bigquery.v2.SparkStatistics
	(*StagePerformanceChangeInsight)(nil),          // 171: google.cloud.bigquery.v2.StagePerformanceChangeInsight
	(*StagePerformanceStandaloneInsight)(nil),      // 172: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight
	(*StandardSqlDataType)(nil),                    // 173: google.cloud.bigquery.v2.StandardSqlDataType
	(*StandardSqlField)(nil),                       // 174: google.cloud.bigquery.v2.StandardSqlField
	(*StandardSqlStructType)(nil),                  // 175: google.cloud.bigquery.v2.StandardSqlStructType
	(*StandardSqlTableType)(nil),                   // 176: google.cloud.bigquery.v2.StandardSqlTableType
	(*StorageDescriptor)(nil),                      // 177: google.cloud.bigquery.v2.StorageDescriptor
	(*Streamingbuffer)(nil),                        // 178: google.cloud.bigquery.v2.Streamingbuffer
	(*StringHparamSearchSpace)(nil),                // 179: google.cloud.bigquery.v2.StringHparamSearchSpace
	(*SystemVariables)(nil),                        // 180: google.cloud.bigquery.v2.SystemVariables
	(*Table)(nil),                                  // 181: google.cloud.bigquery.v2.Table
	(*TableCell)(nil),                              // 182: google.cloud.bigquery.v2.TableCell
	(*ColumnReferences)(nil),                       // 183: google.cloud.bigquery.v2.ColumnReferences
	(*ReferencedTable)(nil),                        // 184: google.cloud.bigquery.v2.ReferencedTable
	(*TableConstraintsForeignKeys)(nil),            // 185: google.cloud.bigquery.v2.TableConstraintsForeignKeys
	(*TableConstraintsPrimaryKey)(nil),             // 186: google.cloud.bigquery.v2.TableConstraintsPrimaryKey
	(*TableConstraints)(nil),                       // 187: google.cloud.bigquery.v2.TableConstraints
	(*TableDataInsertAllRequestRows)(nil),          // 188: google.cloud.bigquery.v2.TableDataInsertAllRequestRows
	(*TableDataInsertAllRequest)(nil),              // 189: google.cloud.bigquery.v2.TableDataInsertAllRequest
	(*TableDataInsertAllResponseInsertErrors)(nil), // 190: google.cloud.bigquery.v2.TableDataInsertAllResponseInsertErrors
	(*TableDataInsertAllResponse)(nil),             // 191: google.cloud.bigquery.v2.TableDataInsertAllResponse
	(*TableDataList)(nil),                          // 192: google.cloud.bigquery.v2.TableDataList
	(*TableFieldSchemaCategories)(nil),             // 193: google.cloud.bigquery.v2.TableFieldSchemaCategories
	(*TableFieldSchemaPolicyTags)(nil),             // 194: google.cloud.bigquery.v2.TableFieldSchemaPolicyTags
	(*TableFieldSchemaRangeElementType)(nil),       // 195: google.cloud.bigquery.v2.TableFieldSchemaRangeElementType
	(*TableFieldSchema)(nil),                       // 196: google.cloud.bigquery.v2.TableFieldSchema
	(*View)(nil),                                   // 197: google.cloud.bigquery.v2.View
	(*TableListTables)(nil),                        // 198: google.cloud.bigquery.v2.TableListTables
	(*TableList)(nil),                              // 199: google.cloud.bigquery.v2.TableList
	(*TableMetadataCacheUsage)(nil),                // 200: google.cloud.bigquery.v2.TableMetadataCacheUsage
	(*TableReference)(nil),                         // 201: google.cloud.bigquery.v2.TableReference
	(*TableReplicationInfo)(nil),                   // 202: google.cloud.bigquery.v2.TableReplicationInfo
	(*TableRow)(nil),                               // 203: google.cloud.bigquery.v2.TableRow
	(*TableSchema)(nil),                            // 204: google.cloud.bigquery.v2.TableSchema
	(*TestIamPermissionsRequest)(nil),              // 205: google.cloud.bigquery.v2.TestIamPermissionsRequest
	(*TestIamPermissionsResponse)(nil),             // 206: google.cloud.bigquery.v2.TestIamPermissionsResponse
	(*TimePartitioning)(nil),                       // 207: google.cloud.bigquery.v2.TimePartitioning
	(*TrainingOptions)(nil),                        // 208: google.cloud.bigquery.v2.TrainingOptions
	(*TrainingRun)(nil),                            // 209: google.cloud.bigquery.v2.TrainingRun
	(*TransactionInfo)(nil),                        // 210: google.cloud.bigquery.v2.TransactionInfo
	(*TransformColumn)(nil),                        // 211: google.cloud.bigquery.v2.TransformColumn
	(*UndeleteDatasetRequest)(nil),                 // 212: google.cloud.bigquery.v2.UndeleteDatasetRequest
	(*UserDefinedFunctionResource)(nil),            // 213: google.cloud.bigquery.v2.UserDefinedFunctionResource
	(*VectorSearchStatistics)(nil),                 // 214: google.cloud.bigquery.v2.VectorSearchStatistics
	(*ViewDefinition)(nil),                         // 215: google.cloud.bigquery.v2.ViewDefinition
	(*DeleteDatasetRequest)(nil),                   // 216: google.cloud.bigquery.v2.DeleteDatasetRequest
	(*GetDatasetRequest)(nil),                      // 217: google.cloud.bigquery.v2.GetDatasetRequest
	(*InsertDatasetRequest)(nil),                   // 218: google.cloud.bigquery.v2.InsertDatasetRequest
	(*ListDatasetsRequest)(nil),                    // 219: google.cloud.bigquery.v2.ListDatasetsRequest
	(*PatchDatasetRequest)(nil),                    // 220: google.cloud.bigquery.v2.PatchDatasetRequest
	(*UndeleteDatasetServiceRequest)(nil),          // 221: google.cloud.bigquery.v2.UndeleteDatasetServiceRequest
	(*UpdateDatasetRequest)(nil),                   // 222: google.cloud.bigquery.v2.UpdateDatasetRequest
	(*CancelJobRequest)(nil),                       // 223: google.cloud.bigquery.v2.CancelJobRequest
	(*DeleteJobRequest)(nil),                       // 224: google.cloud.bigquery.v2.DeleteJobRequest
	(*GetJobRequest)(nil),                          // 225: google.cloud.bigquery.v2.GetJobRequest
	(*GetQueryResultsJobRequest)(nil),              // 226: google.cloud.bigquery.v2.GetQueryResultsJobRequest
	(*InsertJobRequest)(nil),                       // 227: google.cloud.bigquery.v2.InsertJobRequest
	(*ListJobsRequest)(nil),                        // 228: google.cloud.bigquery.v2.ListJobsRequest
	(*QueryJobRequest)(nil),                        // 229: google.cloud.bigquery.v2.QueryJobRequest
	(*DeleteModelRequest)(nil),                     // 230: google.cloud.bigquery.v2.DeleteModelRequest
	(*GetModelRequest)(nil),                        // 231: google.cloud.bigquery.v2.GetModelRequest
	(*ListModelsRequest)(nil),                      // 232: google.cloud.bigquery.v2.ListModelsRequest
	(*PatchModelRequest)(nil),                      // 233: google.cloud.bigquery.v2.PatchModelRequest
	(*GetServiceAccountProjectRequest)(nil),        // 234: google.cloud.bigquery.v2.GetServiceAccountProjectRequest
	(*ListProjectsRequest)(nil),                    // 235: google.cloud.bigquery.v2.ListProjectsRequest
	(*DeleteRoutineRequest)(nil),                   // 236: google.cloud.bigquery.v2.DeleteRoutineRequest
	(*GetRoutineRequest)(nil),                      // 237: google.cloud.bigquery.v2.GetRoutineRequest
	(*InsertRoutineRequest)(nil),                   // 238: google.cloud.bigquery.v2.InsertRoutineRequest
	(*ListRoutinesRequest)(nil),                    // 239: google.cloud.bigquery.v2.ListRoutinesRequest
	(*UpdateRoutineRequest)(nil),                   // 240: google.cloud.bigquery.v2.UpdateRoutineRequest
	(*ListRowAccessPoliciesRequest)(nil),           // 241: google.cloud.bigquery.v2.ListRowAccessPoliciesRequest
	(*InsertAllTabledataRequest)(nil),              // 242: google.cloud.bigquery.v2.InsertAllTabledataRequest
	(*ListTabledataRequest)(nil),                   // 243: google.cloud.bigquery.v2.ListTabledataRequest
	(*DeleteTableRequest)(nil),                     // 244: google.cloud.bigquery.v2.DeleteTableRequest
	(*GetTableRequest)(nil),                        // 245: google.cloud.bigquery.v2.GetTableRequest
	(*InsertTableRequest)(nil),                     // 246: google.cloud.bigquery.v2.InsertTableRequest
	(*ListTablesRequest)(nil),                      // 247: google.cloud.bigquery.v2.ListTablesRequest
	(*PatchTableRequest)(nil),                      // 248: google.cloud.bigquery.v2.PatchTableRequest
	(*UpdateTableRequest)(nil),                     // 249: google.cloud.bigquery.v2.UpdateTableRequest
	nil,                                            // 250: google.cloud.bigquery.v2.Dataset.LabelsEntry
	nil,                                            // 251: google.cloud.bigquery.v2.DatasetListDatasets.LabelsEntry
	nil,                                            // 252: google.cloud.bigquery.v2.DestinationTableProperties.LabelsEntry
	nil,                                            // 253: google.cloud.bigquery.v2.ExternalCatalogDatasetOptions.ParametersEntry
	nil,                                            // 254: google.cloud.bigquery.v2.ExternalCatalogTableOptions.ParametersEntry
	nil,                                            // 255: google.cloud.bigquery.v2.JobConfiguration.LabelsEntry
	nil,                                            // 256: google.cloud.bigquery.v2.JobConfigurationQuery.TableDefinitionsEntry
	nil,                                            // 257: google.cloud.bigquery.v2.Model.LabelsEntry
	nil,                                            // 258: google.cloud.bigquery.v2.QueryInfo.OptimizationDetailsEntry
	nil,                                            // 259: google.cloud.bigquery.v2.QueryParameterValue.StructValuesEntry
	nil,                                            // 260: google.cloud.bigquery.v2.QueryRequest.LabelsEntry
	nil,                                            // 261: google.cloud.bigquery.v2.RemoteFunctionOptions.UserDefinedContextEntry
	nil,                                            // 262: google.cloud.bigquery.v2.SerDeInfo.ParametersEntry
	nil,                                            // 263: google.cloud.bigquery.v2.SparkOptions.PropertiesEntry
	nil,                                            // 264: google.cloud.bigquery.v2.SparkStatistics.EndpointsEntry
	nil,                                            // 265: google.cloud.bigquery.v2.SystemVariables.TypesEntry
	nil,                                            // 266: google.cloud.bigquery.v2.SystemVariables.ValuesEntry
	nil,                                            // 267: google.cloud.bigquery.v2.Table.LabelsEntry
	nil,                                            // 268: google.cloud.bigquery.v2.Table.ResourceTagsEntry
	nil,                                            // 269: google.cloud.bigquery.v2.TableListTables.LabelsEntry
	nil,                                            // 270: google.cloud.bigquery.v2.TrainingOptions.LabelClassWeightsEntry
	(*timestamp.Timestamp)(nil),                    // 271: google.protobuf.Timestamp
	(*any1.Any)(nil),                               // 272: google.protobuf.Any
	(*empty.Empty)(nil),                            // 273: google.protobuf.Empty
}
var file_mockgcp_cloud_bigquery_v2_api_proto_depIdxs = []int32{
	173, // 0: google.cloud.bigquery.v2.Argument.data_type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	4,   // 1: google.cloud.bigquery.v2.ArimaForecastingMetrics.arima_fitting_metrics:type_name -> google.cloud.bigquery.v2.ArimaFittingMetrics
	9,   // 2: google.cloud.bigquery.v2.ArimaForecastingMetrics.arima_single_model_forecasting_metrics:type_name -> google.cloud.bigquery.v2.ArimaSingleModelForecastingMetrics
	7,   // 3: google.cloud.bigquery.v2.ArimaForecastingMetrics.non_seasonal_order:type_name -> google.cloud.bigquery.v2.ArimaOrder
	3,   // 4: google.cloud.bigquery.v2.ArimaModelInfo.arima_coefficients:type_name -> google.cloud.bigquery.v2.ArimaCoefficients
	4,   // 5: google.cloud.bigquery.v2.ArimaModelInfo.arima_fitting_metrics:type_name -> google.cloud.bigquery.v2.ArimaFittingMetrics
	7,   // 6: google.cloud.bigquery.v2.ArimaModelInfo.non_seasonal_order:type_name -> google.cloud.bigquery.v2.ArimaOrder
	6,   // 7: google.cloud.bigquery.v2.ArimaResult.arima_model_info:type_name -> google.cloud.bigquery.v2.ArimaModelInfo
	4,   // 8: google.cloud.bigquery.v2.ArimaSingleModelForecastingMetrics.arima_fitting_metrics:type_name -> google.cloud.bigquery.v2.ArimaFittingMetrics
	7,   // 9: google.cloud.bigquery.v2.ArimaSingleModelForecastingMetrics.non_seasonal_order:type_name -> google.cloud.bigquery.v2.ArimaOrder
	11,  // 10: google.cloud.bigquery.v2.AuditConfig.audit_log_configs:type_name -> google.cloud.bigquery.v2.AuditLogConfig
	13,  // 11: google.cloud.bigquery.v2.BiEngineStatistics.bi_engine_reasons:type_name -> google.cloud.bigquery.v2.BiEngineReason
	17,  // 12: google.cloud.bigquery.v2.BigtableColumnFamily.columns:type_name -> google.cloud.bigquery.v2.BigtableColumn
	18,  // 13: google.cloud.bigquery.v2.BigtableOptions.column_families:type_name -> google.cloud.bigquery.v2.BigtableColumnFamily
	0,   // 14: google.cloud.bigquery.v2.BinaryClassificationMetrics.aggregate_classification_metrics:type_name -> google.cloud.bigquery.v2.AggregateClassificationMetrics
	21,  // 15: google.cloud.bigquery.v2.BinaryClassificationMetrics.binary_confusion_matrix_list:type_name -> google.cloud.bigquery.v2.BinaryConfusionMatrix
	61,  // 16: google.cloud.bigquery.v2.Binding.condition:type_name -> google.cloud.bigquery.v2.Expr
	23,  // 17: google.cloud.bigquery.v2.BqmlTrainingRun.iteration_results:type_name -> google.cloud.bigquery.v2.BqmlIterationResult
	271, // 18: google.cloud.bigquery.v2.BqmlTrainingRun.start_time:type_name -> google.protobuf.Timestamp
	24,  // 19: google.cloud.bigquery.v2.BqmlTrainingRun.training_options:type_name -> google.cloud.bigquery.v2.BqmlTrainingRunTrainingOptions
	27,  // 20: google.cloud.bigquery.v2.CategoricalValue.category_counts:type_name -> google.cloud.bigquery.v2.CategoryCount
	201, // 21: google.cloud.bigquery.v2.CloneDefinition.base_table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	271, // 22: google.cloud.bigquery.v2.CloneDefinition.clone_time:type_name -> google.protobuf.Timestamp
	67,  // 23: google.cloud.bigquery.v2.Cluster.feature_values:type_name -> google.cloud.bigquery.v2.FeatureValue
	29,  // 24: google.cloud.bigquery.v2.ClusteringMetrics.clusters:type_name -> google.cloud.bigquery.v2.Cluster
	155, // 25: google.cloud.bigquery.v2.ConfusionMatrix.rows:type_name -> google.cloud.bigquery.v2.Row
	201, // 26: google.cloud.bigquery.v2.DataSplitResult.evaluation_table:type_name -> google.cloud.bigquery.v2.TableReference
	201, // 27: google.cloud.bigquery.v2.DataSplitResult.test_table:type_name -> google.cloud.bigquery.v2.TableReference
	201, // 28: google.cloud.bigquery.v2.DataSplitResult.training_table:type_name -> google.cloud.bigquery.v2.TableReference
	42,  // 29: google.cloud.bigquery.v2.DatasetAccess.dataset:type_name -> google.cloud.bigquery.v2.DatasetAccessEntry
	154, // 30: google.cloud.bigquery.v2.DatasetAccess.routine:type_name -> google.cloud.bigquery.v2.RoutineReference
	201, // 31: google.cloud.bigquery.v2.DatasetAccess.view:type_name -> google.cloud.bigquery.v2.TableReference
	39,  // 32: google.cloud.bigquery.v2.Dataset.access:type_name -> google.cloud.bigquery.v2.DatasetAccess
	45,  // 33: google.cloud.bigquery.v2.Dataset.dataset_reference:type_name -> google.cloud.bigquery.v2.DatasetReference
	53,  // 34: google.cloud.bigquery.v2.Dataset.default_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	62,  // 35: google.cloud.bigquery.v2.Dataset.external_catalog_dataset_options:type_name -> google.cloud.bigquery.v2.ExternalCatalogDatasetOptions
	65,  // 36: google.cloud.bigquery.v2.Dataset.external_dataset_reference:type_name -> google.cloud.bigquery.v2.ExternalDatasetReference
	250, // 37: google.cloud.bigquery.v2.Dataset.labels:type_name -> google.cloud.bigquery.v2.Dataset.LabelsEntry
	108, // 38: google.cloud.bigquery.v2.Dataset.linked_dataset_metadata:type_name -> google.cloud.bigquery.v2.LinkedDatasetMetadata
	109, // 39: google.cloud.bigquery.v2.Dataset.linked_dataset_source:type_name -> google.cloud.bigquery.v2.LinkedDatasetSource
	40,  // 40: google.cloud.bigquery.v2.Dataset.tags:type_name -> google.cloud.bigquery.v2.DatasetTags
	45,  // 41: google.cloud.bigquery.v2.DatasetAccessEntry.dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	45,  // 42: google.cloud.bigquery.v2.DatasetListDatasets.dataset_reference:type_name -> google.cloud.bigquery.v2.DatasetReference
	251, // 43: google.cloud.bigquery.v2.DatasetListDatasets.labels:type_name -> google.cloud.bigquery.v2.DatasetListDatasets.LabelsEntry
	43,  // 44: google.cloud.bigquery.v2.DatasetList.datasets:type_name -> google.cloud.bigquery.v2.DatasetListDatasets
	271, // 45: google.cloud.bigquery.v2.DestinationTableProperties.expiration_time:type_name -> google.protobuf.Timestamp
	252, // 46: google.cloud.bigquery.v2.DestinationTableProperties.labels:type_name -> google.cloud.bigquery.v2.DestinationTableProperties.LabelsEntry
	50,  // 47: google.cloud.bigquery.v2.DoubleHparamSearchSpace.candidates:type_name -> google.cloud.bigquery.v2.DoubleCandidates
	52,  // 48: google.cloud.bigquery.v2.DoubleHparamSearchSpace.range:type_name -> google.cloud.bigquery.v2.DoubleRange
	5,   // 49: google.cloud.bigquery.v2.EvaluationMetrics.arima_forecasting_metrics:type_name -> google.cloud.bigquery.v2.ArimaForecastingMetrics
	20,  // 50: google.cloud.bigquery.v2.EvaluationMetrics.binary_classification_metrics:type_name -> google.cloud.bigquery.v2.BinaryClassificationMetrics
	32,  // 51: google.cloud.bigquery.v2.EvaluationMetrics.clustering_metrics:type_name -> google.cloud.bigquery.v2.ClusteringMetrics
	48,  // 52: google.cloud.bigquery.v2.EvaluationMetrics.dimensionality_reduction_metrics:type_name -> google.cloud.bigquery.v2.DimensionalityReductionMetrics
	126, // 53: google.cloud.bigquery.v2.EvaluationMetrics.multi_class_classification_metrics:type_name -> google.cloud.bigquery.v2.MultiClassClassificationMetrics
	149, // 54: google.cloud.bigquery.v2.EvaluationMetrics.ranking_metrics:type_name -> google.cloud.bigquery.v2.RankingMetrics
	150, // 55: google.cloud.bigquery.v2.EvaluationMetrics.regression_metrics:type_name -> google.cloud.bigquery.v2.RegressionMetrics
	58,  // 56: google.cloud.bigquery.v2.ExplainQueryStage.steps:type_name -> google.cloud.bigquery.v2.ExplainQueryStep
	253, // 57: google.cloud.bigquery.v2.ExternalCatalogDatasetOptions.parameters:type_name -> google.cloud.bigquery.v2.ExternalCatalogDatasetOptions.ParametersEntry
	254, // 58: google.cloud.bigquery.v2.ExternalCatalogTableOptions.parameters:type_name -> google.cloud.bigquery.v2.ExternalCatalogTableOptions.ParametersEntry
	177, // 59: google.cloud.bigquery.v2.ExternalCatalogTableOptions.storage_descriptor:type_name -> google.cloud.bigquery.v2.StorageDescriptor
	12,  // 60: google.cloud.bigquery.v2.ExternalDataConfiguration.avro_options:type_name -> google.cloud.bigquery.v2.AvroOptions
	19,  // 61: google.cloud.bigquery.v2.ExternalDataConfiguration.bigtable_options:type_name -> google.cloud.bigquery.v2.BigtableOptions
	35,  // 62: google.cloud.bigquery.v2.ExternalDataConfiguration.csv_options:type_name -> google.cloud.bigquery.v2.CsvOptions
	73,  // 63: google.cloud.bigquery.v2.ExternalDataConfiguration.google_sheets_options:type_name -> google.cloud.bigquery.v2.GoogleSheetsOptions
	75,  // 64: google.cloud.bigquery.v2.ExternalDataConfiguration.hive_partitioning_options:type_name -> google.cloud.bigquery.v2.HivePartitioningOptions
	107, // 65: google.cloud.bigquery.v2.ExternalDataConfiguration.json_options:type_name -> google.cloud.bigquery.v2.JsonOptions
	127, // 66: google.cloud.bigquery.v2.ExternalDataConfiguration.parquet_options:type_name -> google.cloud.bigquery.v2.ParquetOptions
	204, // 67: google.cloud.bigquery.v2.ExternalDataConfiguration.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	26,  // 68: google.cloud.bigquery.v2.FeatureValue.categorical_value:type_name -> google.cloud.bigquery.v2.CategoricalValue
	69,  // 69: google.cloud.bigquery.v2.GetIamPolicyRequest.options:type_name -> google.cloud.bigquery.v2.GetPolicyOptions
	55,  // 70: google.cloud.bigquery.v2.GetQueryResultsResponse.errors:type_name -> google.cloud.bigquery.v2.ErrorProto
	96,  // 71: google.cloud.bigquery.v2.GetQueryResultsResponse.job_reference:type_name -> google.cloud.bigquery.v2.JobReference
	203, // 72: google.cloud.bigquery.v2.GetQueryResultsResponse.rows:type_name -> google.cloud.bigquery.v2.TableRow
	204, // 73: google.cloud.bigquery.v2.GetQueryResultsResponse.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	59,  // 74: google.cloud.bigquery.v2.GlobalExplanation.explanations:type_name -> google.cloud.bigquery.v2.Explanation
	179, // 75: google.cloud.bigquery.v2.HparamSearchSpaces.activation_fn:type_name -> google.cloud.bigquery.v2.StringHparamSearchSpace
	83,  // 76: google.cloud.bigquery.v2.HparamSearchSpaces.batch_size:type_name -> google.cloud.bigquery.v2.IntHparamSearchSpace
	179, // 77: google.cloud.bigquery.v2.HparamSearchSpaces.booster_type:type_name -> google.cloud.bigquery.v2.StringHparamSearchSpace
	51,  // 78: google.cloud.bigquery.v2.HparamSearchSpaces.colsample_bylevel:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	51,  // 79: google.cloud.bigquery.v2.HparamSearchSpaces.colsample_bynode:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	51,  // 80: google.cloud.bigquery.v2.HparamSearchSpaces.colsample_bytree:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	179, // 81: google.cloud.bigquery.v2.HparamSearchSpaces.dart_normalize_type:type_name -> google.cloud.bigquery.v2.StringHparamSearchSpace
	51,  // 82: google.cloud.bigquery.v2.HparamSearchSpaces.dropout:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	81,  // 83: google.cloud.bigquery.v2.HparamSearchSpaces.hidden_units:type_name -> google.cloud.bigquery.v2.IntArrayHparamSearchSpace
	51,  // 84: google.cloud.bigquery.v2.HparamSearchSpaces.l1_reg:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	51,  // 85: google.cloud.bigquery.v2.HparamSearchSpaces.l2_reg:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	51,  // 86: google.cloud.bigquery.v2.HparamSearchSpaces.learn_rate:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	83,  // 87: google.cloud.bigquery.v2.HparamSearchSpaces.max_tree_depth:type_name -> google.cloud.bigquery.v2.IntHparamSearchSpace
	51,  // 88: google.cloud.bigquery.v2.HparamSearchSpaces.min_split_loss:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	83,  // 89: google.cloud.bigquery.v2.HparamSearchSpaces.min_tree_child_weight:type_name -> google.cloud.bigquery.v2.IntHparamSearchSpace
	83,  // 90: google.cloud.bigquery.v2.HparamSearchSpaces.num_clusters:type_name -> google.cloud.bigquery.v2.IntHparamSearchSpace
	83,  // 91: google.cloud.bigquery.v2.HparamSearchSpaces.num_factors:type_name -> google.cloud.bigquery.v2.IntHparamSearchSpace
	83,  // 92: google.cloud.bigquery.v2.HparamSearchSpaces.num_parallel_tree:type_name -> google.cloud.bigquery.v2.IntHparamSearchSpace
	179, // 93: google.cloud.bigquery.v2.HparamSearchSpaces.optimizer:type_name -> google.cloud.bigquery.v2.StringHparamSearchSpace
	51,  // 94: google.cloud.bigquery.v2.HparamSearchSpaces.subsample:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	179, // 95: google.cloud.bigquery.v2.HparamSearchSpaces.tree_method:type_name -> google.cloud.bigquery.v2.StringHparamSearchSpace
	51,  // 96: google.cloud.bigquery.v2.HparamSearchSpaces.wals_alpha:type_name -> google.cloud.bigquery.v2.DoubleHparamSearchSpace
	56,  // 97: google.cloud.bigquery.v2.HparamTuningTrial.evaluation_metrics:type_name -> google.cloud.bigquery.v2.EvaluationMetrics
	56,  // 98: google.cloud.bigquery.v2.HparamTuningTrial.hparam_tuning_evaluation_metrics:type_name -> google.cloud.bigquery.v2.EvaluationMetrics
	208, // 99: google.cloud.bigquery.v2.HparamTuningTrial.hparams:type_name -> google.cloud.bigquery.v2.TrainingOptions
	201, // 100: google.cloud.bigquery.v2.IndexUnusedReason.base_table:type_name -> google.cloud.bigquery.v2.TableReference
	80,  // 101: google.cloud.bigquery.v2.IntArrayHparamSearchSpace.candidates:type_name -> google.cloud.bigquery.v2.IntArray
	82,  // 102: google.cloud.bigquery.v2.IntHparamSearchSpace.candidates:type_name -> google.cloud.bigquery.v2.IntCandidates
	84,  // 103: google.cloud.bigquery.v2.IntHparamSearchSpace.range:type_name -> google.cloud.bigquery.v2.IntRange
	8,   // 104: google.cloud.bigquery.v2.IterationResult.arima_result:type_name -> google.cloud.bigquery.v2.ArimaResult
	30,  // 105: google.cloud.bigquery.v2.IterationResult.cluster_infos:type_name -> google.cloud.bigquery.v2.ClusterInfo
	133, // 106: google.cloud.bigquery.v2.IterationResult.principal_component_infos:type_name -> google.cloud.bigquery.v2.PrincipalComponentInfo
	88,  // 107: google.cloud.bigquery.v2.Job.configuration:type_name -> google.cloud.bigquery.v2.JobConfiguration
	93,  // 108: google.cloud.bigquery.v2.Job.job_creation_reason:type_name -> google.cloud.bigquery.v2.JobCreationReason
	96,  // 109: google.cloud.bigquery.v2.Job.job_reference:type_name -> google.cloud.bigquery.v2.JobReference
	98,  // 110: google.cloud.bigquery.v2.Job.statistics:type_name -> google.cloud.bigquery.v2.JobStatistics
	104, // 111: google.cloud.bigquery.v2.Job.status:type_name -> google.cloud.bigquery.v2.JobStatus
	86,  // 112: google.cloud.bigquery.v2.JobCancelResponse.job:type_name -> google.cloud.bigquery.v2.Job
	92,  // 113: google.cloud.bigquery.v2.JobConfiguration.copy:type_name -> google.cloud.bigquery.v2.JobConfigurationTableCopy
	89,  // 114: google.cloud.bigquery.v2.JobConfiguration.extract:type_name -> google.cloud.bigquery.v2.JobConfigurationExtract
	255, // 115: google.cloud.bigquery.v2.JobConfiguration.labels:type_name -> google.cloud.bigquery.v2.JobConfiguration.LabelsEntry
	90,  // 116: google.cloud.bigquery.v2.JobConfiguration.load:type_name -> google.cloud.bigquery.v2.JobConfigurationLoad
	91,  // 117: google.cloud.bigquery.v2.JobConfiguration.query:type_name -> google.cloud.bigquery.v2.JobConfigurationQuery
	124, // 118: google.cloud.bigquery.v2.JobConfigurationExtract.model_extract_options:type_name -> google.cloud.bigquery.v2.ModelExtractOptions
	125, // 119: google.cloud.bigquery.v2.JobConfigurationExtract.source_model:type_name -> google.cloud.bigquery.v2.ModelReference
	201, // 120: google.cloud.bigquery.v2.JobConfigurationExtract.source_table:type_name -> google.cloud.bigquery.v2.TableReference
	31,  // 121: google.cloud.bigquery.v2.JobConfigurationLoad.clustering:type_name -> google.cloud.bigquery.v2.Clustering
	34,  // 122: google.cloud.bigquery.v2.JobConfigurationLoad.connection_properties:type_name -> google.cloud.bigquery.v2.ConnectionProperty
	53,  // 123: google.cloud.bigquery.v2.JobConfigurationLoad.destination_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	201, // 124: google.cloud.bigquery.v2.JobConfigurationLoad.destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	46,  // 125: google.cloud.bigquery.v2.JobConfigurationLoad.destination_table_properties:type_name -> google.cloud.bigquery.v2.DestinationTableProperties
	75,  // 126: google.cloud.bigquery.v2.JobConfigurationLoad.hive_partitioning_options:type_name -> google.cloud.bigquery.v2.HivePartitioningOptions
	127, // 127: google.cloud.bigquery.v2.JobConfigurationLoad.parquet_options:type_name -> google.cloud.bigquery.v2.ParquetOptions
	147, // 128: google.cloud.bigquery.v2.JobConfigurationLoad.range_partitioning:type_name -> google.cloud.bigquery.v2.RangePartitioning
	204, // 129: google.cloud.bigquery.v2.JobConfigurationLoad.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	207, // 130: google.cloud.bigquery.v2.JobConfigurationLoad.time_partitioning:type_name -> google.cloud.bigquery.v2.TimePartitioning
	31,  // 131: google.cloud.bigquery.v2.JobConfigurationQuery.clustering:type_name -> google.cloud.bigquery.v2.Clustering
	34,  // 132: google.cloud.bigquery.v2.JobConfigurationQuery.connection_properties:type_name -> google.cloud.bigquery.v2.ConnectionProperty
	45,  // 133: google.cloud.bigquery.v2.JobConfigurationQuery.default_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	53,  // 134: google.cloud.bigquery.v2.JobConfigurationQuery.destination_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	201, // 135: google.cloud.bigquery.v2.JobConfigurationQuery.destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	139, // 136: google.cloud.bigquery.v2.JobConfigurationQuery.query_parameters:type_name -> google.cloud.bigquery.v2.QueryParameter
	147, // 137: google.cloud.bigquery.v2.JobConfigurationQuery.range_partitioning:type_name -> google.cloud.bigquery.v2.RangePartitioning
	159, // 138: google.cloud.bigquery.v2.JobConfigurationQuery.script_options:type_name -> google.cloud.bigquery.v2.ScriptOptions
	180, // 139: google.cloud.bigquery.v2.JobConfigurationQuery.system_variables:type_name -> google.cloud.bigquery.v2.SystemVariables
	256, // 140: google.cloud.bigquery.v2.JobConfigurationQuery.table_definitions:type_name -> google.cloud.bigquery.v2.JobConfigurationQuery.TableDefinitionsEntry
	207, // 141: google.cloud.bigquery.v2.JobConfigurationQuery.time_partitioning:type_name -> google.cloud.bigquery.v2.TimePartitioning
	213, // 142: google.cloud.bigquery.v2.JobConfigurationQuery.user_defined_function_resources:type_name -> google.cloud.bigquery.v2.UserDefinedFunctionResource
	53,  // 143: google.cloud.bigquery.v2.JobConfigurationTableCopy.destination_encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	271, // 144: google.cloud.bigquery.v2.JobConfigurationTableCopy.destination_expiration_time:type_name -> google.protobuf.Timestamp
	201, // 145: google.cloud.bigquery.v2.JobConfigurationTableCopy.destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	201, // 146: google.cloud.bigquery.v2.JobConfigurationTableCopy.source_table:type_name -> google.cloud.bigquery.v2.TableReference
	201, // 147: google.cloud.bigquery.v2.JobConfigurationTableCopy.source_tables:type_name -> google.cloud.bigquery.v2.TableReference
	88,  // 148: google.cloud.bigquery.v2.JobListJobs.configuration:type_name -> google.cloud.bigquery.v2.JobConfiguration
	55,  // 149: google.cloud.bigquery.v2.JobListJobs.error_result:type_name -> google.cloud.bigquery.v2.ErrorProto
	96,  // 150: google.cloud.bigquery.v2.JobListJobs.job_reference:type_name -> google.cloud.bigquery.v2.JobReference
	98,  // 151: google.cloud.bigquery.v2.JobListJobs.statistics:type_name -> google.cloud.bigquery.v2.JobStatistics
	104, // 152: google.cloud.bigquery.v2.JobListJobs.status:type_name -> google.cloud.bigquery.v2.JobStatus
	94,  // 153: google.cloud.bigquery.v2.JobList.jobs:type_name -> google.cloud.bigquery.v2.JobListJobs
	103, // 154: google.cloud.bigquery.v2.JobStatistics.copy:type_name -> google.cloud.bigquery.v2.JobStatistics5
	37,  // 155: google.cloud.bigquery.v2.JobStatistics.data_masking_statistics:type_name -> google.cloud.bigquery.v2.DataMaskingStatistics
	102, // 156: google.cloud.bigquery.v2.JobStatistics.extract:type_name -> google.cloud.bigquery.v2.JobStatistics4
	101, // 157: google.cloud.bigquery.v2.JobStatistics.load:type_name -> google.cloud.bigquery.v2.JobStatistics3
	100, // 158: google.cloud.bigquery.v2.JobStatistics.query:type_name -> google.cloud.bigquery.v2.JobStatistics2
	97,  // 159: google.cloud.bigquery.v2.JobStatistics.reservation_usage:type_name -> google.cloud.bigquery.v2.JobStatisticsReservationUsage
	158, // 160: google.cloud.bigquery.v2.JobStatistics.row_level_security_statistics:type_name -> google.cloud.bigquery.v2.RowLevelSecurityStatistics
	161, // 161: google.cloud.bigquery.v2.JobStatistics.script_statistics:type_name -> google.cloud.bigquery.v2.ScriptStatistics
	164, // 162: google.cloud.bigquery.v2.JobStatistics.session_info:type_name -> google.cloud.bigquery.v2.SessionInfo
	210, // 163: google.cloud.bigquery.v2.JobStatistics.transaction_info:type_name -> google.cloud.bigquery.v2.TransactionInfo
	14,  // 164: google.cloud.bigquery.v2.JobStatistics2.bi_engine_statistics:type_name -> google.cloud.bigquery.v2.BiEngineStatistics
	45,  // 165: google.cloud.bigquery.v2.JobStatistics2.dcl_target_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	201, // 166: google.cloud.bigquery.v2.JobStatistics2.dcl_target_table:type_name -> google.cloud.bigquery.v2.TableReference
	201, // 167: google.cloud.bigquery.v2.JobStatistics2.dcl_target_view:type_name -> google.cloud.bigquery.v2.TableReference
	201, // 168: google.cloud.bigquery.v2.JobStatistics2.ddl_destination_table:type_name -> google.cloud.bigquery.v2.TableReference
	45,  // 169: google.cloud.bigquery.v2.JobStatistics2.ddl_target_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	154, // 170: google.cloud.bigquery.v2.JobStatistics2.ddl_target_routine:type_name -> google.cloud.bigquery.v2.RoutineReference
	157, // 171: google.cloud.bigquery.v2.JobStatistics2.ddl_target_row_access_policy:type_name -> google.cloud.bigquery.v2.RowAccessPolicyReference
	201, // 172: google.cloud.bigquery.v2.JobStatistics2.ddl_target_table:type_name -> google.cloud.bigquery.v2.TableReference
	49,  // 173: google.cloud.bigquery.v2.JobStatistics2.dml_stats:type_name -> google.cloud.bigquery.v2.DmlStatistics
	60,  // 174: google.cloud.bigquery.v2.JobStatistics2.export_data_statistics:type_name -> google.cloud.bigquery.v2.ExportDataStatistics
	66,  // 175: google.cloud.bigquery.v2.JobStatistics2.external_service_costs:type_name -> google.cloud.bigquery.v2.ExternalServiceCost
	113, // 176: google.cloud.bigquery.v2.JobStatistics2.load_query_statistics:type_name -> google.cloud.bigquery.v2.LoadQueryStatistics
	117, // 177: google.cloud.bigquery.v2.JobStatistics2.materialized_view_statistics:type_name -> google.cloud.bigquery.v2.MaterializedViewStatistics
	119, // 178: google.cloud.bigquery.v2.JobStatistics2.metadata_cache_statistics:type_name -> google.cloud.bigquery.v2.MetadataCacheStatistics
	120, // 179: google.cloud.bigquery.v2.JobStatistics2.ml_statistics:type_name -> google.cloud.bigquery.v2.MlStatistics
	16,  // 180: google.cloud.bigquery.v2.JobStatistics2.model_training:type_name -> google.cloud.bigquery.v2.BigQueryModelTraining
	131, // 181: google.cloud.bigquery.v2.JobStatistics2.performance_insights:type_name -> google.cloud.bigquery.v2.PerformanceInsights
	138, // 182: google.cloud.bigquery.v2.JobStatistics2.query_info:type_name -> google.cloud.bigquery.v2.QueryInfo
	57,  // 183: google.cloud.bigquery.v2.JobStatistics2.query_plan:type_name -> google.cloud.bigquery.v2.ExplainQueryStage
	154, // 184: google.cloud.bigquery.v2.JobStatistics2.referenced_routines:type_name -> google.cloud.bigquery.v2.RoutineReference
	201, // 185: google.cloud.bigquery.v2.JobStatistics2.referenced_tables:type_name -> google.cloud.bigquery.v2.TableReference
	99,  // 186: google.cloud.bigquery.v2.JobStatistics2.reservation_usage:type_name -> google.cloud.bigquery.v2.JobStatistics2ReservationUsage
	204, // 187: google.cloud.bigquery.v2.JobStatistics2.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	162, // 188: google.cloud.bigquery.v2.JobStatistics2.search_statistics:type_name -> google.cloud.bigquery.v2.SearchStatistics
	170, // 189: google.cloud.bigquery.v2.JobStatistics2.spark_statistics:type_name -> google.cloud.bigquery.v2.SparkStatistics
	145, // 190: google.cloud.bigquery.v2.JobStatistics2.timeline:type_name -> google.cloud.bigquery.v2.QueryTimelineSample
	139, // 191: google.cloud.bigquery.v2.JobStatistics2.undeclared_query_parameters:type_name -> google.cloud.bigquery.v2.QueryParameter
	214, // 192: google.cloud.bigquery.v2.JobStatistics2.vector_search_statistics:type_name -> google.cloud.bigquery.v2.VectorSearchStatistics
	145, // 193: google.cloud.bigquery.v2.JobStatistics3.timeline:type_name -> google.cloud.bigquery.v2.QueryTimelineSample
	145, // 194: google.cloud.bigquery.v2.JobStatistics4.timeline:type_name -> google.cloud.bigquery.v2.QueryTimelineSample
	55,  // 195: google.cloud.bigquery.v2.JobStatus.error_result:type_name -> google.cloud.bigquery.v2.ErrorProto
	55,  // 196: google.cloud.bigquery.v2.JobStatus.errors:type_name -> google.cloud.bigquery.v2.ErrorProto
	45,  // 197: google.cloud.bigquery.v2.LinkedDatasetSource.source_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	121, // 198: google.cloud.bigquery.v2.ListModelsResponse.models:type_name -> google.cloud.bigquery.v2.Model
	153, // 199: google.cloud.bigquery.v2.ListRoutinesResponse.routines:type_name -> google.cloud.bigquery.v2.Routine
	156, // 200: google.cloud.bigquery.v2.ListRowAccessPoliciesResponse.row_access_policies:type_name -> google.cloud.bigquery.v2.RowAccessPolicy
	201, // 201: google.cloud.bigquery.v2.MaterializedView.table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	115, // 202: google.cloud.bigquery.v2.MaterializedViewStatistics.materialized_view:type_name -> google.cloud.bigquery.v2.MaterializedView
	55,  // 203: google.cloud.bigquery.v2.MaterializedViewStatus.last_refresh_status:type_name -> google.cloud.bigquery.v2.ErrorProto
	271, // 204: google.cloud.bigquery.v2.MaterializedViewStatus.refresh_watermark:type_name -> google.protobuf.Timestamp
	200, // 205: google.cloud.bigquery.v2.MetadataCacheStatistics.table_metadata_cache_usage:type_name -> google.cloud.bigquery.v2.TableMetadataCacheUsage
	77,  // 206: google.cloud.bigquery.v2.MlStatistics.hparam_trials:type_name -> google.cloud.bigquery.v2.HparamTuningTrial
	85,  // 207: google.cloud.bigquery.v2.MlStatistics.iteration_results:type_name -> google.cloud.bigquery.v2.IterationResult
	53,  // 208: google.cloud.bigquery.v2.Model.encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	174, // 209: google.cloud.bigquery.v2.Model.feature_columns:type_name -> google.cloud.bigquery.v2.StandardSqlField
	76,  // 210: google.cloud.bigquery.v2.Model.hparam_search_spaces:type_name -> google.cloud.bigquery.v2.HparamSearchSpaces
	77,  // 211: google.cloud.bigquery.v2.Model.hparam_trials:type_name -> google.cloud.bigquery.v2.HparamTuningTrial
	174, // 212: google.cloud.bigquery.v2.Model.label_columns:type_name -> google.cloud.bigquery.v2.StandardSqlField
	257, // 213: google.cloud.bigquery.v2.Model.labels:type_name -> google.cloud.bigquery.v2.Model.LabelsEntry
	125, // 214: google.cloud.bigquery.v2.Model.model_reference:type_name -> google.cloud.bigquery.v2.ModelReference
	152, // 215: google.cloud.bigquery.v2.Model.remote_model_info:type_name -> google.cloud.bigquery.v2.RemoteModelInfo
	209, // 216: google.cloud.bigquery.v2.Model.training_runs:type_name -> google.cloud.bigquery.v2.TrainingRun
	211, // 217: google.cloud.bigquery.v2.Model.transform_columns:type_name -> google.cloud.bigquery.v2.TransformColumn
	122, // 218: google.cloud.bigquery.v2.ModelDefinition.model_options:type_name -> google.cloud.bigquery.v2.ModelDefinitionModelOptions
	25,  // 219: google.cloud.bigquery.v2.ModelDefinition.training_runs:type_name -> google.cloud.bigquery.v2.BqmlTrainingRun
	0,   // 220: google.cloud.bigquery.v2.MultiClassClassificationMetrics.aggregate_classification_metrics:type_name -> google.cloud.bigquery.v2.AggregateClassificationMetrics
	33,  // 221: google.cloud.bigquery.v2.MultiClassClassificationMetrics.confusion_matrix_list:type_name -> google.cloud.bigquery.v2.ConfusionMatrix
	166, // 222: google.cloud.bigquery.v2.PartitionSkew.skew_sources:type_name -> google.cloud.bigquery.v2.SkewSource
	129, // 223: google.cloud.bigquery.v2.PartitioningDefinition.partitioned_column:type_name -> google.cloud.bigquery.v2.PartitionedColumn
	171, // 224: google.cloud.bigquery.v2.PerformanceInsights.stage_performance_change_insights:type_name -> google.cloud.bigquery.v2.StagePerformanceChangeInsight
	172, // 225: google.cloud.bigquery.v2.PerformanceInsights.stage_performance_standalone_insights:type_name -> google.cloud.bigquery.v2.StagePerformanceStandaloneInsight
	10,  // 226: google.cloud.bigquery.v2.Policy.audit_configs:type_name -> google.cloud.bigquery.v2.AuditConfig
	22,  // 227: google.cloud.bigquery.v2.Policy.bindings:type_name -> google.cloud.bigquery.v2.Binding
	1,   // 228: google.cloud.bigquery.v2.PrivacyPolicy.aggregation_threshold_policy:type_name -> google.cloud.bigquery.v2.AggregationThresholdPolicy
	47,  // 229: google.cloud.bigquery.v2.PrivacyPolicy.differential_privacy_policy:type_name -> google.cloud.bigquery.v2.DifferentialPrivacyPolicy
	105, // 230: google.cloud.bigquery.v2.PrivacyPolicy.join_restriction_policy:type_name -> google.cloud.bigquery.v2.JoinRestrictionPolicy
	137, // 231: google.cloud.bigquery.v2.ProjectListProjects.project_reference:type_name -> google.cloud.bigquery.v2.ProjectReference
	135, // 232: google.cloud.bigquery.v2.ProjectList.projects:type_name -> google.cloud.bigquery.v2.ProjectListProjects
	258, // 233: google.cloud.bigquery.v2.QueryInfo.optimization_details:type_name -> google.cloud.bigquery.v2.QueryInfo.OptimizationDetailsEntry
	141, // 234: google.cloud.bigquery.v2.QueryParameter.parameter_type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	142, // 235: google.cloud.bigquery.v2.QueryParameter.parameter_value:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	141, // 236: google.cloud.bigquery.v2.QueryParameterTypeStructTypes.type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	141, // 237: google.cloud.bigquery.v2.QueryParameterType.array_type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	141, // 238: google.cloud.bigquery.v2.QueryParameterType.range_element_type:type_name -> google.cloud.bigquery.v2.QueryParameterType
	140, // 239: google.cloud.bigquery.v2.QueryParameterType.struct_types:type_name -> google.cloud.bigquery.v2.QueryParameterTypeStructTypes
	142, // 240: google.cloud.bigquery.v2.QueryParameterValue.array_values:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	148, // 241: google.cloud.bigquery.v2.QueryParameterValue.range_value:type_name -> google.cloud.bigquery.v2.RangeValue
	259, // 242: google.cloud.bigquery.v2.QueryParameterValue.struct_values:type_name -> google.cloud.bigquery.v2.QueryParameterValue.StructValuesEntry
	34,  // 243: google.cloud.bigquery.v2.QueryRequest.connection_properties:type_name -> google.cloud.bigquery.v2.ConnectionProperty
	45,  // 244: google.cloud.bigquery.v2.QueryRequest.default_dataset:type_name -> google.cloud.bigquery.v2.DatasetReference
	36,  // 245: google.cloud.bigquery.v2.QueryRequest.format_options:type_name -> google.cloud.bigquery.v2.DataFormatOptions
	260, // 246: google.cloud.bigquery.v2.QueryRequest.labels:type_name -> google.cloud.bigquery.v2.QueryRequest.LabelsEntry
	139, // 247: google.cloud.bigquery.v2.QueryRequest.query_parameters:type_name -> google.cloud.bigquery.v2.QueryParameter
	49,  // 248: google.cloud.bigquery.v2.QueryResponse.dml_stats:type_name -> google.cloud.bigquery.v2.DmlStatistics
	55,  // 249: google.cloud.bigquery.v2.QueryResponse.errors:type_name -> google.cloud.bigquery.v2.ErrorProto
	93,  // 250: google.cloud.bigquery.v2.QueryResponse.job_creation_reason:type_name -> google.cloud.bigquery.v2.JobCreationReason
	96,  // 251: google.cloud.bigquery.v2.QueryResponse.job_reference:type_name -> google.cloud.bigquery.v2.JobReference
	203, // 252: google.cloud.bigquery.v2.QueryResponse.rows:type_name -> google.cloud.bigquery.v2.TableRow
	204, // 253: google.cloud.bigquery.v2.QueryResponse.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	164, // 254: google.cloud.bigquery.v2.QueryResponse.session_info:type_name -> google.cloud.bigquery.v2.SessionInfo
	146, // 255: google.cloud.bigquery.v2.RangePartitioning.range:type_name -> google.cloud.bigquery.v2.RangePartitioningRange
	142, // 256: google.cloud.bigquery.v2.RangeValue.end:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	142, // 257: google.cloud.bigquery.v2.RangeValue.start:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	261, // 258: google.cloud.bigquery.v2.RemoteFunctionOptions.user_defined_context:type_name -> google.cloud.bigquery.v2.RemoteFunctionOptions.UserDefinedContextEntry
	2,   // 259: google.cloud.bigquery.v2.Routine.arguments:type_name -> google.cloud.bigquery.v2.Argument
	151, // 260: google.cloud.bigquery.v2.Routine.remote_function_options:type_name -> google.cloud.bigquery.v2.RemoteFunctionOptions
	176, // 261: google.cloud.bigquery.v2.Routine.return_table_type:type_name -> google.cloud.bigquery.v2.StandardSqlTableType
	173, // 262: google.cloud.bigquery.v2.Routine.return_type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	154, // 263: google.cloud.bigquery.v2.Routine.routine_reference:type_name -> google.cloud.bigquery.v2.RoutineReference
	169, // 264: google.cloud.bigquery.v2.Routine.spark_options:type_name -> google.cloud.bigquery.v2.SparkOptions
	54,  // 265: google.cloud.bigquery.v2.Row.entries:type_name -> google.cloud.bigquery.v2.Entry
	271, // 266: google.cloud.bigquery.v2.RowAccessPolicy.creation_time:type_name -> google.protobuf.Timestamp
	271, // 267: google.cloud.bigquery.v2.RowAccessPolicy.last_modified_time:type_name -> google.protobuf.Timestamp
	157, // 268: google.cloud.bigquery.v2.RowAccessPolicy.row_access_policy_reference:type_name -> google.cloud.bigquery.v2.RowAccessPolicyReference
	160, // 269: google.cloud.bigquery.v2.ScriptStatistics.stack_frames:type_name -> google.cloud.bigquery.v2.ScriptStackFrame
	78,  // 270: google.cloud.bigquery.v2.SearchStatistics.index_unused_reasons:type_name -> google.cloud.bigquery.v2.IndexUnusedReason
	262, // 271: google.cloud.bigquery.v2.SerDeInfo.parameters:type_name -> google.cloud.bigquery.v2.SerDeInfo.ParametersEntry
	132, // 272: google.cloud.bigquery.v2.SetIamPolicyRequest.policy:type_name -> google.cloud.bigquery.v2.Policy
	201, // 273: google.cloud.bigquery.v2.SnapshotDefinition.base_table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	271, // 274: google.cloud.bigquery.v2.SnapshotDefinition.snapshot_time:type_name -> google.protobuf.Timestamp
	263, // 275: google.cloud.bigquery.v2.SparkOptions.properties:type_name -> google.cloud.bigquery.v2.SparkOptions.PropertiesEntry
	264, // 276: google.cloud.bigquery.v2.SparkStatistics.endpoints:type_name -> google.cloud.bigquery.v2.SparkStatistics.EndpointsEntry
	168, // 277: google.cloud.bigquery.v2.SparkStatistics.logging_info:type_name -> google.cloud.bigquery.v2.SparkLoggingInfo
	79,  // 278: google.cloud.bigquery.v2.StagePerformanceChangeInsight.input_data_change:type_name -> google.cloud.bigquery.v2.InputDataChange
	13,  // 279: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.bi_engine_reasons:type_name -> google.cloud.bigquery.v2.BiEngineReason
	74,  // 280: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.high_cardinality_joins:type_name -> google.cloud.bigquery.v2.HighCardinalityJoin
	128, // 281: google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.partition_skew:type_name -> google.cloud.bigquery.v2.PartitionSkew
	173, // 282: google.cloud.bigquery.v2.StandardSqlDataType.array_element_type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	173, // 283: google.cloud.bigquery.v2.StandardSqlDataType.range_element_type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	175, // 284: google.cloud.bigquery.v2.StandardSqlDataType.struct_type:type_name -> google.cloud.bigquery.v2.StandardSqlStructType
	173, // 285: google.cloud.bigquery.v2.StandardSqlField.type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	174, // 286: google.cloud.bigquery.v2.StandardSqlStructType.fields:type_name -> google.cloud.bigquery.v2.StandardSqlField
	174, // 287: google.cloud.bigquery.v2.StandardSqlTableType.columns:type_name -> google.cloud.bigquery.v2.StandardSqlField
	163, // 288: google.cloud.bigquery.v2.StorageDescriptor.serde_info:type_name -> google.cloud.bigquery.v2.SerDeInfo
	265, // 289: google.cloud.bigquery.v2.SystemVariables.types:type_name -> google.cloud.bigquery.v2.SystemVariables.TypesEntry
	266, // 290: google.cloud.bigquery.v2.SystemVariables.values:type_name -> google.cloud.bigquery.v2.SystemVariables.ValuesEntry
	15,  // 291: google.cloud.bigquery.v2.Table.biglake_configuration:type_name -> google.cloud.bigquery.v2.BigLakeConfiguration
	28,  // 292: google.cloud.bigquery.v2.Table.clone_definition:type_name -> google.cloud.bigquery.v2.CloneDefinition
	31,  // 293: google.cloud.bigquery.v2.Table.clustering:type_name -> google.cloud.bigquery.v2.Clustering
	53,  // 294: google.cloud.bigquery.v2.Table.encryption_configuration:type_name -> google.cloud.bigquery.v2.EncryptionConfiguration
	63,  // 295: google.cloud.bigquery.v2.Table.external_catalog_table_options:type_name -> google.cloud.bigquery.v2.ExternalCatalogTableOptions
	64,  // 296: google.cloud.bigquery.v2.Table.external_data_configuration:type_name -> google.cloud.bigquery.v2.ExternalDataConfiguration
	267, // 297: google.cloud.bigquery.v2.Table.labels:type_name -> google.cloud.bigquery.v2.Table.LabelsEntry
	116, // 298: google.cloud.bigquery.v2.Table.materialized_view:type_name -> google.cloud.bigquery.v2.MaterializedViewDefinition
	118, // 299: google.cloud.bigquery.v2.Table.materialized_view_status:type_name -> google.cloud.bigquery.v2.MaterializedViewStatus
	123, // 300: google.cloud.bigquery.v2.Table.model:type_name -> google.cloud.bigquery.v2.ModelDefinition
	130, // 301: google.cloud.bigquery.v2.Table.partition_definition:type_name -> google.cloud.bigquery.v2.PartitioningDefinition
	147, // 302: google.cloud.bigquery.v2.Table.range_partitioning:type_name -> google.cloud.bigquery.v2.RangePartitioning
	201, // 303: google.cloud.bigquery.v2.Table.replicas:type_name -> google.cloud.bigquery.v2.TableReference
	268, // 304: google.cloud.bigquery.v2.Table.resource_tags:type_name -> google.cloud.bigquery.v2.Table.ResourceTagsEntry
	204, // 305: google.cloud.bigquery.v2.Table.schema:type_name -> google.cloud.bigquery.v2.TableSchema
	167, // 306: google.cloud.bigquery.v2.Table.snapshot_definition:type_name -> google.cloud.bigquery.v2.SnapshotDefinition
	178, // 307: google.cloud.bigquery.v2.Table.streaming_buffer:type_name -> google.cloud.bigquery.v2.Streamingbuffer
	187, // 308: google.cloud.bigquery.v2.Table.table_constraints:type_name -> google.cloud.bigquery.v2.TableConstraints
	201, // 309: google.cloud.bigquery.v2.Table.table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	202, // 310: google.cloud.bigquery.v2.Table.table_replication_info:type_name -> google.cloud.bigquery.v2.TableReplicationInfo
	207, // 311: google.cloud.bigquery.v2.Table.time_partitioning:type_name -> google.cloud.bigquery.v2.TimePartitioning
	215, // 312: google.cloud.bigquery.v2.Table.view:type_name -> google.cloud.bigquery.v2.ViewDefinition
	272, // 313: google.cloud.bigquery.v2.TableCell.v:type_name -> google.protobuf.Any
	183, // 314: google.cloud.bigquery.v2.TableConstraintsForeignKeys.column_references:type_name -> google.cloud.bigquery.v2.ColumnReferences
	184, // 315: google.cloud.bigquery.v2.TableConstraintsForeignKeys.referenced_table:type_name -> google.cloud.bigquery.v2.ReferencedTable
	185, // 316: google.cloud.bigquery.v2.TableConstraints.foreign_keys:type_name -> google.cloud.bigquery.v2.TableConstraintsForeignKeys
	186, // 317: google.cloud.bigquery.v2.TableConstraints.primary_key:type_name -> google.cloud.bigquery.v2.TableConstraintsPrimaryKey
	106, // 318: google.cloud.bigquery.v2.TableDataInsertAllRequestRows.json:type_name -> google.cloud.bigquery.v2.JsonObject
	188, // 319: google.cloud.bigquery.v2.TableDataInsertAllRequest.rows:type_name -> google.cloud.bigquery.v2.TableDataInsertAllRequestRows
	55,  // 320: google.cloud.bigquery.v2.TableDataInsertAllResponseInsertErrors.errors:type_name -> google.cloud.bigquery.v2.ErrorProto
	190, // 321: google.cloud.bigquery.v2.TableDataInsertAllResponse.insert_errors:type_name -> google.cloud.bigquery.v2.TableDataInsertAllResponseInsertErrors
	203, // 322: google.cloud.bigquery.v2.TableDataList.rows:type_name -> google.cloud.bigquery.v2.TableRow
	193, // 323: google.cloud.bigquery.v2.TableFieldSchema.categories:type_name -> google.cloud.bigquery.v2.TableFieldSchemaCategories
	196, // 324: google.cloud.bigquery.v2.TableFieldSchema.fields:type_name -> google.cloud.bigquery.v2.TableFieldSchema
	194, // 325: google.cloud.bigquery.v2.TableFieldSchema.policy_tags:type_name -> google.cloud.bigquery.v2.TableFieldSchemaPolicyTags
	195, // 326: google.cloud.bigquery.v2.TableFieldSchema.range_element_type:type_name -> google.cloud.bigquery.v2.TableFieldSchemaRangeElementType
	134, // 327: google.cloud.bigquery.v2.View.privacy_policy:type_name -> google.cloud.bigquery.v2.PrivacyPolicy
	31,  // 328: google.cloud.bigquery.v2.TableListTables.clustering:type_name -> google.cloud.bigquery.v2.Clustering
	269, // 329: google.cloud.bigquery.v2.TableListTables.labels:type_name -> google.cloud.bigquery.v2.TableListTables.LabelsEntry
	147, // 330: google.cloud.bigquery.v2.TableListTables.range_partitioning:type_name -> google.cloud.bigquery.v2.RangePartitioning
	201, // 331: google.cloud.bigquery.v2.TableListTables.table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	207, // 332: google.cloud.bigquery.v2.TableListTables.time_partitioning:type_name -> google.cloud.bigquery.v2.TimePartitioning
	197, // 333: google.cloud.bigquery.v2.TableListTables.view:type_name -> google.cloud.bigquery.v2.View
	198, // 334: google.cloud.bigquery.v2.TableList.tables:type_name -> google.cloud.bigquery.v2.TableListTables
	201, // 335: google.cloud.bigquery.v2.TableMetadataCacheUsage.table_reference:type_name -> google.cloud.bigquery.v2.TableReference
	55,  // 336: google.cloud.bigquery.v2.TableReplicationInfo.replication_error:type_name -> google.cloud.bigquery.v2.ErrorProto
	201, // 337: google.cloud.bigquery.v2.TableReplicationInfo.source_table:type_name -> google.cloud.bigquery.v2.TableReference
	182, // 338: google.cloud.bigquery.v2.TableRow.f:type_name -> google.cloud.bigquery.v2.TableCell
	196, // 339: google.cloud.bigquery.v2.TableSchema.fields:type_name -> google.cloud.bigquery.v2.TableFieldSchema
	270, // 340: google.cloud.bigquery.v2.TrainingOptions.label_class_weights:type_name -> google.cloud.bigquery.v2.TrainingOptions.LabelClassWeightsEntry
	7,   // 341: google.cloud.bigquery.v2.TrainingOptions.non_seasonal_order:type_name -> google.cloud.bigquery.v2.ArimaOrder
	72,  // 342: google.cloud.bigquery.v2.TrainingRun.class_level_global_explanations:type_name -> google.cloud.bigquery.v2.GlobalExplanation
	38,  // 343: google.cloud.bigquery.v2.TrainingRun.data_split_result:type_name -> google.cloud.bigquery.v2.DataSplitResult
	56,  // 344: google.cloud.bigquery.v2.TrainingRun.evaluation_metrics:type_name -> google.cloud.bigquery.v2.EvaluationMetrics
	72,  // 345: google.cloud.bigquery.v2.TrainingRun.model_level_global_explanation:type_name -> google.cloud.bigquery.v2.GlobalExplanation
	85,  // 346: google.cloud.bigquery.v2.TrainingRun.results:type_name -> google.cloud.bigquery.v2.IterationResult
	271, // 347: google.cloud.bigquery.v2.TrainingRun.start_time:type_name -> google.protobuf.Timestamp
	208, // 348: google.cloud.bigquery.v2.TrainingRun.training_options:type_name -> google.cloud.bigquery.v2.TrainingOptions
	173, // 349: google.cloud.bigquery.v2.TransformColumn.type:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	271, // 350: google.cloud.bigquery.v2.UndeleteDatasetRequest.deletion_time:type_name -> google.protobuf.Timestamp
	78,  // 351: google.cloud.bigquery.v2.VectorSearchStatistics.index_unused_reasons:type_name -> google.cloud.bigquery.v2.IndexUnusedReason
	134, // 352: google.cloud.bigquery.v2.ViewDefinition.privacy_policy:type_name -> google.cloud.bigquery.v2.PrivacyPolicy
	213, // 353: google.cloud.bigquery.v2.ViewDefinition.user_defined_function_resources:type_name -> google.cloud.bigquery.v2.UserDefinedFunctionResource
	41,  // 354: google.cloud.bigquery.v2.InsertDatasetRequest.dataset:type_name -> google.cloud.bigquery.v2.Dataset
	41,  // 355: google.cloud.bigquery.v2.PatchDatasetRequest.dataset:type_name -> google.cloud.bigquery.v2.Dataset
	212, // 356: google.cloud.bigquery.v2.UndeleteDatasetServiceRequest.dataset:type_name -> google.cloud.bigquery.v2.UndeleteDatasetRequest
	41,  // 357: google.cloud.bigquery.v2.UpdateDatasetRequest.dataset:type_name -> google.cloud.bigquery.v2.Dataset
	86,  // 358: google.cloud.bigquery.v2.InsertJobRequest.job:type_name -> google.cloud.bigquery.v2.Job
	143, // 359: google.cloud.bigquery.v2.QueryJobRequest.job:type_name -> google.cloud.bigquery.v2.QueryRequest
	121, // 360: google.cloud.bigquery.v2.PatchModelRequest.model:type_name -> google.cloud.bigquery.v2.Model
	153, // 361: google.cloud.bigquery.v2.InsertRoutineRequest.routine:type_name -> google.cloud.bigquery.v2.Routine
	153, // 362: google.cloud.bigquery.v2.UpdateRoutineRequest.routine:type_name -> google.cloud.bigquery.v2.Routine
	189, // 363: google.cloud.bigquery.v2.InsertAllTabledataRequest.tabledata:type_name -> google.cloud.bigquery.v2.TableDataInsertAllRequest
	181, // 364: google.cloud.bigquery.v2.InsertTableRequest.table:type_name -> google.cloud.bigquery.v2.Table
	181, // 365: google.cloud.bigquery.v2.PatchTableRequest.table:type_name -> google.cloud.bigquery.v2.Table
	181, // 366: google.cloud.bigquery.v2.UpdateTableRequest.table:type_name -> google.cloud.bigquery.v2.Table
	64,  // 367: google.cloud.bigquery.v2.JobConfigurationQuery.TableDefinitionsEntry.value:type_name -> google.cloud.bigquery.v2.ExternalDataConfiguration
	272, // 368: google.cloud.bigquery.v2.QueryInfo.OptimizationDetailsEntry.value:type_name -> google.protobuf.Any
	142, // 369: google.cloud.bigquery.v2.QueryParameterValue.StructValuesEntry.value:type_name -> google.cloud.bigquery.v2.QueryParameterValue
	173, // 370: google.cloud.bigquery.v2.SystemVariables.TypesEntry.value:type_name -> google.cloud.bigquery.v2.StandardSqlDataType
	272, // 371: google.cloud.bigquery.v2.SystemVariables.ValuesEntry.value:type_name -> google.protobuf.Any
	216, // 372: google.cloud.bigquery.v2.DatasetsServer.DeleteDataset:input_type -> google.cloud.bigquery.v2.DeleteDatasetRequest
	217, // 373: google.cloud.bigquery.v2.DatasetsServer.GetDataset:input_type -> google.cloud.bigquery.v2.GetDatasetRequest
	218, // 374: google.cloud.bigquery.v2.DatasetsServer.InsertDataset:input_type -> google.cloud.bigquery.v2.InsertDatasetRequest
	219, // 375: google.cloud.bigquery.v2.DatasetsServer.ListDatasets:input_type -> google.cloud.bigquery.v2.ListDatasetsRequest
	220, // 376: google.cloud.bigquery.v2.DatasetsServer.PatchDataset:input_type -> google.cloud.bigquery.v2.PatchDatasetRequest
	221, // 377: google.cloud.bigquery.v2.DatasetsServer.UndeleteDataset:input_type -> google.cloud.bigquery.v2.UndeleteDatasetServiceRequest
	222, // 378: google.cloud.bigquery.v2.DatasetsServer.UpdateDataset:input_type -> google.cloud.bigquery.v2.UpdateDatasetRequest
	223, // 379: google.cloud.bigquery.v2.JobsServer.CancelJob:input_type -> google.cloud.bigquery.v2.CancelJobRequest
	224, // 380: google.cloud.bigquery.v2.JobsServer.DeleteJob:input_type -> google.cloud.bigquery.v2.DeleteJobRequest
	225, // 381: google.cloud.bigquery.v2.JobsServer.GetJob:input_type -> google.cloud.bigquery.v2.GetJobRequest
	226, // 382: google.cloud.bigquery.v2.JobsServer.GetQueryResultsJob:input_type -> google.cloud.bigquery.v2.GetQueryResultsJobRequest
	227, // 383: google.cloud.bigquery.v2.JobsServer.InsertJob:input_type -> google.cloud.bigquery.v2.InsertJobRequest
	228, // 384: google.cloud.bigquery.v2.JobsServer.ListJobs:input_type -> google.cloud.bigquery.v2.ListJobsRequest
	229, // 385: google.cloud.bigquery.v2.JobsServer.QueryJob:input_type -> google.cloud.bigquery.v2.QueryJobRequest
	230, // 386: google.cloud.bigquery.v2.ModelsServer.DeleteModel:input_type -> google.cloud.bigquery.v2.DeleteModelRequest
	231, // 387: google.cloud.bigquery.v2.ModelsServer.GetModel:input_type -> google.cloud.bigquery.v2.GetModelRequest
	232, // 388: google.cloud.bigquery.v2.ModelsServer.ListModels:input_type -> google.cloud.bigquery.v2.ListModelsRequest
	233, // 389: google.cloud.bigquery.v2.ModelsServer.PatchModel:input_type -> google.cloud.bigquery.v2.PatchModelRequest
	234, // 390: google.cloud.bigquery.v2.ProjectsServer.GetServiceAccountProject:input_type -> google.cloud.bigquery.v2.GetServiceAccountProjectRequest
	235, // 391: google.cloud.bigquery.v2.ProjectsServer.ListProjects:input_type -> google.cloud.bigquery.v2.ListProjectsRequest
	236, // 392: google.cloud.bigquery.v2.RoutinesServer.DeleteRoutine:input_type -> google.cloud.bigquery.v2.DeleteRoutineRequest
	237, // 393: google.cloud.bigquery.v2.RoutinesServer.GetRoutine:input_type -> google.cloud.bigquery.v2.GetRoutineRequest
	238, // 394: google.cloud.bigquery.v2.RoutinesServer.InsertRoutine:input_type -> google.cloud.bigquery.v2.InsertRoutineRequest
	239, // 395: google.cloud.bigquery.v2.RoutinesServer.ListRoutines:input_type -> google.cloud.bigquery.v2.ListRoutinesRequest
	240, // 396: google.cloud.bigquery.v2.RoutinesServer.UpdateRoutine:input_type -> google.cloud.bigquery.v2.UpdateRoutineRequest
	241, // 397: google.cloud.bigquery.v2.RowAccessPoliciesServer.ListRowAccessPolicies:input_type -> google.cloud.bigquery.v2.ListRowAccessPoliciesRequest
	242, // 398: google.cloud.bigquery.v2.TabledataServer.InsertAllTabledata:input_type -> google.cloud.bigquery.v2.InsertAllTabledataRequest
	243, // 399: google.cloud.bigquery.v2.TabledataServer.ListTabledata:input_type -> google.cloud.bigquery.v2.ListTabledataRequest
	244, // 400: google.cloud.bigquery.v2.TablesServer.DeleteTable:input_type -> google.cloud.bigquery.v2.DeleteTableRequest
	245, // 401: google.cloud.bigquery.v2.TablesServer.GetTable:input_type -> google.cloud.bigquery.v2.GetTableRequest
	246, // 402: google.cloud.bigquery.v2.TablesServer.InsertTable:input_type -> google.cloud.bigquery.v2.InsertTableRequest
	247, // 403: google.cloud.bigquery.v2.TablesServer.ListTables:input_type -> google.cloud.bigquery.v2.ListTablesRequest
	248, // 404: google.cloud.bigquery.v2.TablesServer.PatchTable:input_type -> google.cloud.bigquery.v2.PatchTableRequest
	249, // 405: google.cloud.bigquery.v2.TablesServer.UpdateTable:input_type -> google.cloud.bigquery.v2.UpdateTableRequest
	273, // 406: google.cloud.bigquery.v2.DatasetsServer.DeleteDataset:output_type -> google.protobuf.Empty
	41,  // 407: google.cloud.bigquery.v2.DatasetsServer.GetDataset:output_type -> google.cloud.bigquery.v2.Dataset
	41,  // 408: google.cloud.bigquery.v2.DatasetsServer.InsertDataset:output_type -> google.cloud.bigquery.v2.Dataset
	44,  // 409: google.cloud.bigquery.v2.DatasetsServer.ListDatasets:output_type -> google.cloud.bigquery.v2.DatasetList
	41,  // 410: google.cloud.bigquery.v2.DatasetsServer.PatchDataset:output_type -> google.cloud.bigquery.v2.Dataset
	41,  // 411: google.cloud.bigquery.v2.DatasetsServer.UndeleteDataset:output_type -> google.cloud.bigquery.v2.Dataset
	41,  // 412: google.cloud.bigquery.v2.DatasetsServer.UpdateDataset:output_type -> google.cloud.bigquery.v2.Dataset
	87,  // 413: google.cloud.bigquery.v2.JobsServer.CancelJob:output_type -> google.cloud.bigquery.v2.JobCancelResponse
	273, // 414: google.cloud.bigquery.v2.JobsServer.DeleteJob:output_type -> google.protobuf.Empty
	86,  // 415: google.cloud.bigquery.v2.JobsServer.GetJob:output_type -> google.cloud.bigquery.v2.Job
	70,  // 416: google.cloud.bigquery.v2.JobsServer.GetQueryResultsJob:output_type -> google.cloud.bigquery.v2.GetQueryResultsResponse
	86,  // 417: google.cloud.bigquery.v2.JobsServer.InsertJob:output_type -> google.cloud.bigquery.v2.Job
	95,  // 418: google.cloud.bigquery.v2.JobsServer.ListJobs:output_type -> google.cloud.bigquery.v2.JobList
	144, // 419: google.cloud.bigquery.v2.JobsServer.QueryJob:output_type -> google.cloud.bigquery.v2.QueryResponse
	273, // 420: google.cloud.bigquery.v2.ModelsServer.DeleteModel:output_type -> google.protobuf.Empty
	121, // 421: google.cloud.bigquery.v2.ModelsServer.GetModel:output_type -> google.cloud.bigquery.v2.Model
	110, // 422: google.cloud.bigquery.v2.ModelsServer.ListModels:output_type -> google.cloud.bigquery.v2.ListModelsResponse
	121, // 423: google.cloud.bigquery.v2.ModelsServer.PatchModel:output_type -> google.cloud.bigquery.v2.Model
	71,  // 424: google.cloud.bigquery.v2.ProjectsServer.GetServiceAccountProject:output_type -> google.cloud.bigquery.v2.GetServiceAccountResponse
	136, // 425: google.cloud.bigquery.v2.ProjectsServer.ListProjects:output_type -> google.cloud.bigquery.v2.ProjectList
	273, // 426: google.cloud.bigquery.v2.RoutinesServer.DeleteRoutine:output_type -> google.protobuf.Empty
	153, // 427: google.cloud.bigquery.v2.RoutinesServer.GetRoutine:output_type -> google.cloud.bigquery.v2.Routine
	153, // 428: google.cloud.bigquery.v2.RoutinesServer.InsertRoutine:output_type -> google.cloud.bigquery.v2.Routine
	111, // 429: google.cloud.bigquery.v2.RoutinesServer.ListRoutines:output_type -> google.cloud.bigquery.v2.ListRoutinesResponse
	153, // 430: google.cloud.bigquery.v2.RoutinesServer.UpdateRoutine:output_type -> google.cloud.bigquery.v2.Routine
	112, // 431: google.cloud.bigquery.v2.RowAccessPoliciesServer.ListRowAccessPolicies:output_type -> google.cloud.bigquery.v2.ListRowAccessPoliciesResponse
	191, // 432: google.cloud.bigquery.v2.TabledataServer.InsertAllTabledata:output_type -> google.cloud.bigquery.v2.TableDataInsertAllResponse
	192, // 433: google.cloud.bigquery.v2.TabledataServer.ListTabledata:output_type -> google.cloud.bigquery.v2.TableDataList
	273, // 434: google.cloud.bigquery.v2.TablesServer.DeleteTable:output_type -> google.protobuf.Empty
	181, // 435: google.cloud.bigquery.v2.TablesServer.GetTable:output_type -> google.cloud.bigquery.v2.Table
	181, // 436: google.cloud.bigquery.v2.TablesServer.InsertTable:output_type -> google.cloud.bigquery.v2.Table
	199, // 437: google.cloud.bigquery.v2.TablesServer.ListTables:output_type -> google.cloud.bigquery.v2.TableList
	181, // 438: google.cloud.bigquery.v2.TablesServer.PatchTable:output_type -> google.cloud.bigquery.v2.Table
	181, // 439: google.cloud.bigquery.v2.TablesServer.UpdateTable:output_type -> google.cloud.bigquery.v2.Table
	406, // [406:440] is the sub-list for method output_type
	372, // [372:406] is the sub-list for method input_type
	372, // [372:372] is the sub-list for extension type_name
	372, // [372:372] is the sub-list for extension extendee
	0,   // [0:372] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_bigquery_v2_api_proto_init() }
func file_mockgcp_cloud_bigquery_v2_api_proto_init() {
	if File_mockgcp_cloud_bigquery_v2_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateClassificationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationThresholdPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaCoefficients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaFittingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaForecastingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArimaSingleModelForecastingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvroOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiEngineReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiEngineStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigLakeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigQueryModelTraining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigtableColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigtableColumnFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigtableOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryClassificationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryConfusionMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BqmlIterationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BqmlTrainingRunTrainingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BqmlTrainingRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoricalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clustering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusteringMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfusionMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFormatOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMaskingStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSplitResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetAccessEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetListDatasets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationTableProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DifferentialPrivacyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionalityReductionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmlStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleCandidates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleHparamSearchSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainQueryStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainQueryStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Explanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDataStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalCatalogDatasetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalCatalogTableOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalDataConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalDatasetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalServiceCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleSheetsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighCardinalityJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HivePartitioningOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HparamSearchSpaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HparamTuningTrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexUnusedReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputDataChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntArrayHparamSearchSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntCandidates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntHparamSearchSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IterationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfigurationExtract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfigurationLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfigurationQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfigurationTableCopy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCreationReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobListJobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatisticsReservationUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatistics2ReservationUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatistics2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatistics3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatistics4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatistics5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRestrictionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedDatasetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedDatasetSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowAccessPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadQueryStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterializedView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterializedViewDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterializedViewStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterializedViewStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataCacheStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MlStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelDefinitionModelOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelExtractOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiClassClassificationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSkew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionedColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitioningDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceInsights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrincipalComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivacyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectListProjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameterTypeStructTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameterType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimelineSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangePartitioningRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangePartitioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegressionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteFunctionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteModelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutineReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowAccessPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowAccessPolicyReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowLevelSecurityStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptStackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerDeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkewSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparkLoggingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparkOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparkStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StagePerformanceChangeInsight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StagePerformanceStandaloneInsight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardSqlDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardSqlField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardSqlStructType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardSqlTableType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Streamingbuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringHparamSearchSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnReferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencedTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableConstraintsForeignKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableConstraintsPrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataInsertAllRequestRows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataInsertAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataInsertAllResponseInsertErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataInsertAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFieldSchemaCategories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFieldSchemaPolicyTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFieldSchemaRangeElementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFieldSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableListTables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMetadataCacheUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableReplicationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestIamPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestIamPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimePartitioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeleteDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDefinedFunctionResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorSearchStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeleteDatasetServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResultsJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceAccountProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoutineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoutineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRoutineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoutineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowAccessPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertAllTabledataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabledataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_bigquery_v2_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   271,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_mockgcp_cloud_bigquery_v2_api_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_bigquery_v2_api_proto_depIdxs,
		MessageInfos:      file_mockgcp_cloud_bigquery_v2_api_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_bigquery_v2_api_proto = out.File
	file_mockgcp_cloud_bigquery_v2_api_proto_rawDesc = nil
	file_mockgcp_cloud_bigquery_v2_api_proto_goTypes = nil
	file_mockgcp_cloud_bigquery_v2_api_proto_depIdxs = nil
}
