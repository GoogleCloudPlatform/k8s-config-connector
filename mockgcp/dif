Only in mockworkflowexecution/: execution.go
Only in mockgkehub/: gkehubfeature.go
Only in mockgkehub/: gkehubmembership.go
Only in mockgkehub/: names.go
Only in mockworkflowexecution/: normalize.go
diff '--color=auto' -r mockgkehub/service.go mockworkflowexecution/service.go
1c1
< // Copyright 2024 Google LLC
---
> // Copyright 2025 Google LLC
15,18c15
< // +tool:mockgcp-service
< // http.host: gkehub.googleapis.com
< // proto.service: google.cloud.gkehub.v1beta.GkeHub
< // proto.service: google.cloud.gkehub.v1beta1.GkeHubMembershipService
---
> package mockworkflowexecution
20c17,19
< package mockgkehub
---
> // +tool:mockgcp-service
> // http.host: workflowexecutions.googleapis.com
> // proto.service: google.cloud.workflows.executions.v1.Executions
23a23
> 	"fmt"
26a27
> 	"google.golang.org/protobuf/proto"
31,32c32
< 	v1betapb "github.com/GoogleCloudPlatform/k8s-config-connector/mockgcp/generated/mockgcp/cloud/gkehub/v1beta"
< 	v1beta1pb "github.com/GoogleCloudPlatform/k8s-config-connector/mockgcp/generated/mockgcp/cloud/gkehub/v1beta1"
---
> 	pb "github.com/GoogleCloudPlatform/k8s-config-connector/mockgcp/generated/mockgcp/cloud/workflows/executions/v1"
36c36
< // MockService represents a mocked gkehubfeature service.
---
> // MockService represents a mocked workflows service.
43,44c43,48
< 	v1beta  *GKEHubFeature
< 	v1beta1 *GKEHubMembership
---
> 	v1 *WorkflowExecutionsV1
> }
> 
> type WorkflowExecutionsV1 struct {
> 	*MockService
> 	pb.UnimplementedExecutionsServer
54,55c58
< 	s.v1beta = &GKEHubFeature{MockService: s}
< 	s.v1beta1 = &GKEHubMembership{MockService: s}
---
> 	s.v1 = &WorkflowExecutionsV1{MockService: s}
60c63
< 	return []string{"gkehub.googleapis.com"}
---
> 	return []string{"workflowexecutions.googleapis.com"}
64,65c67
< 	v1betapb.RegisterGkeHubServer(grpcServer, s.v1beta)
< 	v1beta1pb.RegisterGkeHubMembershipServiceServer(grpcServer, s.v1beta1)
---
> 	pb.RegisterExecutionsServer(grpcServer, s.v1)
69c71,74
< 	mux, err := httpmux.NewServeMux(ctx, conn, httpmux.Options{}, v1betapb.RegisterGkeHubHandler, v1beta1pb.RegisterGkeHubMembershipServiceHandler, s.operations.RegisterOperationsPath("/v1beta/{prefix=**}/operations/{name}"), s.operations.RegisterOperationsPath("/v1beta1/{prefix=**}/operations/{name}"))
---
> 	mux, err := httpmux.NewServeMux(ctx, conn, httpmux.Options{},
> 		pb.RegisterExecutionsHandler,
> 		s.operations.RegisterOperationsPath("/v1/{prefix=**}/operations/{name}"),
> 	)
71c76
< 		return nil, err
---
> 		return nil, fmt.Errorf("creating http mux: %w", err)
72a78
> 
77a84,87
> 	mux.RewriteHeaders = func(ctx context.Context, response http.ResponseWriter, payload proto.Message) {
> 		response.Header().Del("Cache-Control")
> 	}
> 
Only in mockworkflowexecution/: testdata
