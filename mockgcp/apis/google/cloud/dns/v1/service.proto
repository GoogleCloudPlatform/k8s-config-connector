// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
package google.cloud.dns.v1;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
option go_package = "cloud.google.com/go/dns/apiv1/dnspb;dnspb";

service ChangesServer {

  // Atomically updates the ResourceRecordSet collection.
  rpc CreateChange(CreateChangeRequest) returns (Change) {
    option (google.api.http) = {
      post: "/dns/v1/projects/{project}/managedZones/{managed_zone}/changes"
      body: "change"
    };
  };

  // Fetches the representation of an existing Change.
  rpc GetChange(GetChangeRequest) returns (Change) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/changes/{change_id}"
    };
  };

  // Enumerates Changes to a ResourceRecordSet collection.
  rpc ListChanges(ListChangesRequest) returns (ChangesListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/changes"
    };
  };
}

service DnsKeysServer {

  // Fetches the representation of an existing DnsKey.
  rpc GetDnsKey(GetDnsKeyRequest) returns (DnsKey) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/dnsKeys/{dns_key_id}"
    };
  };

  // Enumerates DnsKeys to a ResourceRecordSet collection.
  rpc ListDnsKeys(ListDnsKeysRequest) returns (DnsKeysListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/dnsKeys"
    };
  };
}

service ManagedZoneOperationsServer {

  // Fetches the representation of an existing Operation.
  rpc GetManagedZoneOperation(GetManagedZoneOperationRequest) returns (Operation) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/operations/{operation}"
    };
  };

  // Enumerates Operations for the given ManagedZone.
  rpc ListManagedZoneOperations(ListManagedZoneOperationsRequest) returns (ManagedZoneOperationsListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/operations"
    };
  };
}

service ManagedZonesServer {

  // Creates a new ManagedZone.
  rpc CreateManagedZone(CreateManagedZoneRequest) returns (ManagedZone) {
    option (google.api.http) = {
      post: "/dns/v1/projects/{project}/managedZones"
      body: "managed_zone"
    };
  };

  // Deletes a previously created ManagedZone.
  rpc DeleteManagedZone(DeleteManagedZoneRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/dns/v1/projects/{project}/managedZones/{name}"
    };
  };

  // Fetches the representation of an existing ManagedZone.
  rpc GetManagedZone(GetManagedZoneRequest) returns (ManagedZone) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{name}"
    };
  };

  // Enumerates ManagedZones that have been created but not yet deleted.
  rpc ListManagedZones(ListManagedZonesRequest) returns (ManagedZonesListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones"
    };
  };

  // Applies a partial update to an existing ManagedZone.
  rpc PatchManagedZone(PatchManagedZoneRequest) returns (Operation) {
    option (google.api.http) = {
      patch: "/dns/v1/projects/{project}/managedZones/{name}"
      body: "managed_zone"
    };
  };

  // Updates an existing ManagedZone.
  rpc UpdateManagedZone(UpdateManagedZoneRequest) returns (Operation) {
    option (google.api.http) = {
      put: "/dns/v1/projects/{project}/managedZones/{name}"
      body: "managed_zone"
    };
  };
}

service PoliciesServer {

  // Creates a new Policy.
  rpc CreatePolicy(CreatePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/dns/v1/projects/{project}/policies"
      body: "policy"
    };
  };

  // Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
  rpc DeletePolicy(DeletePolicyRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/dns/v1/projects/{project}/policies/{name}"
    };
  };

  // Fetches the representation of an existing Policy.
  rpc GetPolicy(GetPolicyRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/policies/{name}"
    };
  };

  // Enumerates all Policies associated with a project.
  rpc ListPolicies(ListPoliciesRequest) returns (PoliciesListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/policies"
    };
  };

  // Applies a partial update to an existing Policy.
  rpc PatchPolicy(PatchPolicyRequest) returns (PoliciesPatchResponse) {
    option (google.api.http) = {
      patch: "/dns/v1/projects/{project}/policies/{name}"
      body: "policy"
    };
  };

  // Updates an existing Policy.
  rpc UpdatePolicy(UpdatePolicyRequest) returns (PoliciesUpdateResponse) {
    option (google.api.http) = {
      put: "/dns/v1/projects/{project}/policies/{name}"
      body: "policy"
    };
  };
}

service ProjectsServer {

  // Fetches the representation of an existing Project.
  rpc GetProject(GetProjectRequest) returns (Project) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{name}"
    };
  };
}

service ResourceRecordSetsServer {

  // Creates a new ResourceRecordSet.
  rpc CreateResourceRecordSet(CreateResourceRecordSetRequest) returns (ResourceRecordSet) {
    option (google.api.http) = {
      post: "/dns/v1/projects/{project}/managedZones/{managed_zone}/rrsets"
      body: "resource_record_set"
    };
  };

  // Deletes a previously created ResourceRecordSet.
  rpc DeleteResourceRecordSet(DeleteResourceRecordSetRequest) returns (ResourceRecordSetsDeleteResponse) {
    option (google.api.http) = {
      delete: "/dns/v1/projects/{project}/managedZones/{managed_zone}/rrsets/{name}/{type}"
    };
  };

  // Fetches the representation of an existing ResourceRecordSet.
  rpc GetResourceRecordSet(GetResourceRecordSetRequest) returns (ResourceRecordSet) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/rrsets/{name}/{type}"
    };
  };

  // Enumerates ResourceRecordSets that you have created but not yet deleted.
  rpc ListResourceRecordSets(ListResourceRecordSetsRequest) returns (ResourceRecordSetsListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/managedZones/{managed_zone}/rrsets"
    };
  };

  // Applies a partial update to an existing ResourceRecordSet.
  rpc PatchResourceRecordSet(PatchResourceRecordSetRequest) returns (ResourceRecordSet) {
    option (google.api.http) = {
      patch: "/dns/v1/projects/{project}/managedZones/{managed_zone}/rrsets/{name}/{type}"
      body: "resource_record_set"
    };
  };
}

service ResponsePoliciesServer {

  // Creates a new Response Policy
  rpc CreateResponsePolicy(CreateResponsePolicyRequest) returns (ResponsePolicy) {
    option (google.api.http) = {
      post: "/dns/v1/projects/{project}/responsePolicies"
      body: "response_policy"
    };
  };

  // Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
  rpc DeleteResponsePolicy(DeleteResponsePolicyRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/dns/v1/projects/{project}/responsePolicies/{name}"
    };
  };

  // Fetches the representation of an existing Response Policy.
  rpc GetResponsePolicy(GetResponsePolicyRequest) returns (ResponsePolicy) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/responsePolicies/{name}"
    };
  };

  // Enumerates all Response Policies associated with a project.
  rpc ListResponsePolicies(ListResponsePoliciesRequest) returns (ResponsePoliciesListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/responsePolicies"
    };
  };

  // Applies a partial update to an existing Response Policy.
  rpc PatchResponsePolicy(PatchResponsePolicyRequest) returns (ResponsePoliciesPatchResponse) {
    option (google.api.http) = {
      patch: "/dns/v1/projects/{project}/responsePolicies/{name}"
      body: "response_policy"
    };
  };

  // Updates an existing Response Policy.
  rpc UpdateResponsePolicy(UpdateResponsePolicyRequest) returns (ResponsePoliciesUpdateResponse) {
    option (google.api.http) = {
      put: "/dns/v1/projects/{project}/responsePolicies/{name}"
      body: "response_policy"
    };
  };
}

service ResponsePolicyRulesServer {

  // Creates a new Response Policy Rule.
  rpc CreateResponsePolicyRule(CreateResponsePolicyRuleRequest) returns (ResponsePolicyRule) {
    option (google.api.http) = {
      post: "/dns/v1/projects/{project}/responsePolicies/{response_policy}/rules"
      body: "response_policy_rule"
    };
  };

  // Deletes a previously created Response Policy Rule.
  rpc DeleteResponsePolicyRule(DeleteResponsePolicyRuleRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/dns/v1/projects/{project}/responsePolicies/{response_policy}/rules/{name}"
    };
  };

  // Fetches the representation of an existing Response Policy Rule.
  rpc GetResponsePolicyRule(GetResponsePolicyRuleRequest) returns (ResponsePolicyRule) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/responsePolicies/{response_policy}/rules/{name}"
    };
  };

  // Enumerates all Response Policy Rules associated with a project.
  rpc ListResponsePolicyRules(ListResponsePolicyRulesRequest) returns (ResponsePolicyRulesListResponse) {
    option (google.api.http) = {
      get: "/dns/v1/projects/{project}/responsePolicies/{response_policy}/rules"
    };
  };

  // Applies a partial update to an existing Response Policy Rule.
  rpc PatchResponsePolicyRule(PatchResponsePolicyRuleRequest) returns (ResponsePolicyRulesPatchResponse) {
    option (google.api.http) = {
      patch: "/dns/v1/projects/{project}/responsePolicies/{response_policy}/rules/{name}"
      body: "response_policy_rule"
    };
  };

  // Updates an existing Response Policy Rule.
  rpc UpdateResponsePolicyRule(UpdateResponsePolicyRuleRequest) returns (ResponsePolicyRulesUpdateResponse) {
    option (google.api.http) = {
      put: "/dns/v1/projects/{project}/responsePolicies/{response_policy}/rules/{name}"
      body: "response_policy_rule"
    };
  };
}

// A Change represents a set of `ResourceRecordSet` additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the `ResourceRecordSets` in a `ManagedZone`. The current state of the `ManagedZone` is the sum effect of applying all `Change` elements in the `Changes` collection in sequence.
message Change {
  // Which ResourceRecordSets to add?
  repeated ResourceRecordSet additions = 1 [json_name="additions"];
  // Which ResourceRecordSets to remove? Must match existing data exactly.
  repeated ResourceRecordSet deletions = 2 [json_name="deletions"];
  // Unique identifier for the resource; defined by the server (output only).
  optional string id = 3 [json_name="id"];
  // If the DNS queries for the zone will be served.
  optional bool is_serving = 4 [json_name="isServing"];
  optional string kind = 5 [json_name="kind"];
  // The time that this operation was started by the server (output only). This is in RFC3339 text format.
  optional string start_time = 6 [json_name="startTime"];
  // Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
  optional string status = 7 [json_name="status"];
}

// The response to a request to enumerate Changes to a ResourceRecordSets collection.
message ChangesListResponse {
  // The requested changes.
  repeated Change changes = 1 [json_name="changes"];
  // Type of resource.
  optional string kind = 2 [json_name="kind"];
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 3 [json_name="nextPageToken"];
}

// A DNSSEC key pair.
message DnsKey {
  // String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
  optional string algorithm = 1 [json_name="algorithm"];
  // The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
  optional string creation_time = 2 [json_name="creationTime"];
  // A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
  optional string description = 3 [json_name="description"];
  // Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
  repeated DnsKeyDigest digests = 4 [json_name="digests"];
  // Unique identifier for the resource; defined by the server (output only).
  optional string id = 5 [json_name="id"];
  // Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
  optional bool is_active = 6 [json_name="isActive"];
  // Length of the key in bits. Specified at creation time, and then immutable.
  optional uint32 key_length = 7 [json_name="keyLength"];
  // The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
  optional int32 key_tag = 8 [json_name="keyTag"];
  optional string kind = 9 [json_name="kind"];
  // Base64 encoded public half of this key. Output only.
  optional string public_key = 10 [json_name="publicKey"];
  // One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.
  optional string type = 11 [json_name="type"];
}

message DnsKeyDigest {
  // The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
  optional string digest = 1 [json_name="digest"];
  // Specifies the algorithm used to calculate this digest.
  optional string type = 2 [json_name="type"];
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
message DnsKeySpec {
  // String mnemonic specifying the DNSSEC algorithm of this key.
  optional string algorithm = 1 [json_name="algorithm"];
  // Length of the keys in bits.
  optional uint32 key_length = 2 [json_name="keyLength"];
  // Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
  optional string key_type = 3 [json_name="keyType"];
  optional string kind = 4 [json_name="kind"];
}

// The response to a request to enumerate DnsKeys in a ManagedZone.
message DnsKeysListResponse {
  // The requested resources.
  repeated DnsKey dns_keys = 1 [json_name="dnsKeys"];
  // Type of resource.
  optional string kind = 2 [json_name="kind"];
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 3 [json_name="nextPageToken"];
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
message Expr {
  // Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
  optional string description = 1 [json_name="description"];
  // Textual representation of an expression in Common Expression Language syntax.
  optional string expression = 2 [json_name="expression"];
  // Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
  optional string location = 3 [json_name="location"];
  // Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
  optional string title = 4 [json_name="title"];
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
message GoogleIamV1AuditConfig {
  // The configuration for logging of each type of permission.
  repeated GoogleIamV1AuditLogConfig audit_log_configs = 1 [json_name="auditLogConfigs"];
  // Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
  optional string service = 2 [json_name="service"];
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
message GoogleIamV1AuditLogConfig {
  // Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
  repeated string exempted_members = 1 [json_name="exemptedMembers"];
  // The log type that this config enables.
  optional string log_type = 2 [json_name="logType"];
}

// Associates `members`, or principals, with a `role`.
message GoogleIamV1Binding {
  // The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional Expr condition = 1 [json_name="condition"];
  // Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
  repeated string members = 2 [json_name="members"];
  // Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
  optional string role = 3 [json_name="role"];
}

// Request message for `GetIamPolicy` method.
message GoogleIamV1GetIamPolicyRequest {
  // OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.
  optional GoogleIamV1GetPolicyOptions options = 1 [json_name="options"];
}

// Encapsulates settings provided to GetIamPolicy.
message GoogleIamV1GetPolicyOptions {
  // Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional int32 requested_policy_version = 1 [json_name="requestedPolicyVersion"];
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
message GoogleIamV1Policy {
  // Specifies cloud audit logging configuration for this policy.
  repeated GoogleIamV1AuditConfig audit_configs = 1 [json_name="auditConfigs"];
  // Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
  repeated GoogleIamV1Binding bindings = 2 [json_name="bindings"];
  // `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
  optional bytes etag = 3 [json_name="etag"];
  // Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional int32 version = 4 [json_name="version"];
}

// Request message for `SetIamPolicy` method.
message GoogleIamV1SetIamPolicyRequest {
  // REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.
  optional GoogleIamV1Policy policy = 1 [json_name="policy"];
  // OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
  optional string update_mask = 2 [json_name="updateMask"];
}

// Request message for `TestIamPermissions` method.
message GoogleIamV1TestIamPermissionsRequest {
  // The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
  repeated string permissions = 1 [json_name="permissions"];
}

// Response message for `TestIamPermissions` method.
message GoogleIamV1TestIamPermissionsResponse {
  // A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
  repeated string permissions = 1 [json_name="permissions"];
}

// A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
message ManagedZone {
  optional ManagedZoneCloudLoggingConfig cloud_logging_config = 1 [json_name="cloudLoggingConfig"];
  // The time that this resource was created on the server. This is in RFC3339 text format. Output only.
  optional string creation_time = 2 [json_name="creationTime"];
  // A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
  optional string description = 3 [json_name="description"];
  // The DNS name of this managed zone, for instance "example.com.".
  optional string dns_name = 4 [json_name="dnsName"];
  // DNSSEC configuration.
  optional ManagedZoneDnsSecConfig dnssec_config = 5 [json_name="dnssecConfig"];
  // The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field contains the set of destinations to forward to.
  optional ManagedZoneForwardingConfig forwarding_config = 6 [json_name="forwardingConfig"];
  // Unique identifier for the resource; defined by the server (output only)
  optional uint64 id = 7 [json_name="id"];
  optional string kind = 8 [json_name="kind"];
  // User labels.
  map<string, string> labels = 9 [json_name="labels"];
  // User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
  optional string name = 10 [json_name="name"];
  // Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.
  optional string name_server_set = 11 [json_name="nameServerSet"];
  // Delegate your managed_zone to these virtual name servers; defined by the server (output only)
  repeated string name_servers = 12 [json_name="nameServers"];
  // The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the network to peer with.
  optional ManagedZonePeeringConfig peering_config = 13 [json_name="peeringConfig"];
  // For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
  optional ManagedZonePrivateVisibilityConfig private_visibility_config = 14 [json_name="privateVisibilityConfig"];
  // The presence of this field indicates that this is a managed reverse lookup zone and Cloud DNS resolves reverse lookup queries using automatically configured records for VPC resources. This only applies to networks listed under private_visibility_config.
  optional ManagedZoneReverseLookupConfig reverse_lookup_config = 15 [json_name="reverseLookupConfig"];
  // This field links to the associated service directory namespace. Do not set this field for public zones or forwarding zones.
  optional ManagedZoneServiceDirectoryConfig service_directory_config = 16 [json_name="serviceDirectoryConfig"];
  // The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
  optional string visibility = 17 [json_name="visibility"];
}

// Cloud Logging configurations for publicly visible zones.
message ManagedZoneCloudLoggingConfig {
  // If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
  optional bool enable_logging = 1 [json_name="enableLogging"];
  optional string kind = 2 [json_name="kind"];
}

message ManagedZoneDnsSecConfig {
  // Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
  repeated DnsKeySpec default_key_specs = 1 [json_name="defaultKeySpecs"];
  optional string kind = 2 [json_name="kind"];
  // Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
  optional string non_existence = 3 [json_name="nonExistence"];
  // Specifies whether DNSSEC is enabled, and what mode it is in.
  optional string state = 4 [json_name="state"];
}

message ManagedZoneForwardingConfig {
  optional string kind = 1 [json_name="kind"];
  // List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
  repeated ManagedZoneForwardingConfigNameServerTarget target_name_servers = 2 [json_name="targetNameServers"];
}

message ManagedZoneForwardingConfigNameServerTarget {
  // Fully qualified domain name for the forwarding target.
  optional string domain_name = 1 [json_name="domainName"];
  // Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
  optional string forwarding_path = 2 [json_name="forwardingPath"];
  // IPv4 address of a target name server.
  optional string ipv4_address = 3 [json_name="ipv4Address"];
  // IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
  optional string ipv6_address = 4 [json_name="ipv6Address"];
  optional string kind = 5 [json_name="kind"];
}

message ManagedZoneOperationsListResponse {
  // Type of resource.
  optional string kind = 1 [json_name="kind"];
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 2 [json_name="nextPageToken"];
  // The operation resources.
  repeated Operation operations = 3 [json_name="operations"];
}

message ManagedZonePeeringConfig {
  optional string kind = 1 [json_name="kind"];
  // The network with which to peer.
  optional ManagedZonePeeringConfigTargetNetwork target_network = 2 [json_name="targetNetwork"];
}

message ManagedZonePeeringConfigTargetNetwork {
  // The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
  optional string deactivate_time = 1 [json_name="deactivateTime"];
  optional string kind = 2 [json_name="kind"];
  // The fully qualified URL of the VPC network to forward queries to. This should be formatted like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
  optional string network_url = 3 [json_name="networkUrl"];
}

message ManagedZonePrivateVisibilityConfig {
  // The list of Google Kubernetes Engine clusters that can see this zone.
  repeated ManagedZonePrivateVisibilityConfigGKECluster gke_clusters = 1 [json_name="gkeClusters"];
  optional string kind = 2 [json_name="kind"];
  // The list of VPC networks that can see this zone.
  repeated ManagedZonePrivateVisibilityConfigNetwork networks = 3 [json_name="networks"];
}

message ManagedZonePrivateVisibilityConfigGKECluster {
  // The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
  optional string gke_cluster_name = 1 [json_name="gkeClusterName"];
  optional string kind = 2 [json_name="kind"];
}

message ManagedZonePrivateVisibilityConfigNetwork {
  optional string kind = 1 [json_name="kind"];
  // The fully qualified URL of the VPC network to bind to. Format this URL like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
  optional string network_url = 2 [json_name="networkUrl"];
}

message ManagedZoneReverseLookupConfig {
  optional string kind = 1 [json_name="kind"];
}

// Contains information about Service Directory-backed zones.
message ManagedZoneServiceDirectoryConfig {
  optional string kind = 1 [json_name="kind"];
  // Contains information about the namespace associated with the zone.
  optional ManagedZoneServiceDirectoryConfigNamespace namespace = 2 [json_name="namespace"];
}

message ManagedZoneServiceDirectoryConfigNamespace {
  // The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
  optional string deletion_time = 1 [json_name="deletionTime"];
  optional string kind = 2 [json_name="kind"];
  // The fully qualified URL of the namespace associated with the zone. Format must be `https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}`
  optional string namespace_url = 3 [json_name="namespaceUrl"];
}

message ManagedZonesListResponse {
  // Type of resource.
  optional string kind = 1 [json_name="kind"];
  // The managed zone resources.
  repeated ManagedZone managed_zones = 2 [json_name="managedZones"];
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 3 [json_name="nextPageToken"];
}

// An operation represents a successful mutation performed on a Cloud DNS resource. Operations provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the case where the response is never received by the caller. Use the caller specified client_operation_id.
message Operation {
  // Only populated if the operation targeted a DnsKey (output only).
  optional OperationDnsKeyContext dns_key_context = 1 [json_name="dnsKeyContext"];
  // Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
  optional string id = 2 [json_name="id"];
  optional string kind = 3 [json_name="kind"];
  // The time that this operation was started by the server. This is in RFC3339 text format (output only).
  optional string start_time = 4 [json_name="startTime"];
  // Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A status of "DONE" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
  optional string status = 5 [json_name="status"];
  // Type of the operation. Operations include insert, update, and delete (output only).
  optional string type = 6 [json_name="type"];
  // User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)
  optional string user = 7 [json_name="user"];
  // Only populated if the operation targeted a ManagedZone (output only).
  optional OperationManagedZoneContext zone_context = 8 [json_name="zoneContext"];
}

message OperationDnsKeyContext {
  // The post-operation DnsKey resource.
  optional DnsKey new_value = 1 [json_name="newValue"];
  // The pre-operation DnsKey resource.
  optional DnsKey old_value = 2 [json_name="oldValue"];
}

message OperationManagedZoneContext {
  // The post-operation ManagedZone resource.
  optional ManagedZone new_value = 1 [json_name="newValue"];
  // The pre-operation ManagedZone resource.
  optional ManagedZone old_value = 2 [json_name="oldValue"];
}

message PoliciesListResponse {
  // Type of resource.
  optional string kind = 1 [json_name="kind"];
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 2 [json_name="nextPageToken"];
  // The policy resources.
  repeated Policy policies = 3 [json_name="policies"];
}

message PoliciesPatchResponse {
  optional Policy policy = 1 [json_name="policy"];
}

message PoliciesUpdateResponse {
  optional Policy policy = 1 [json_name="policy"];
}

// A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
message Policy {
  // Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
  optional PolicyAlternativeNameServerConfig alternative_name_server_config = 1 [json_name="alternativeNameServerConfig"];
  // A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
  optional string description = 2 [json_name="description"];
  // Configurations related to DNS64 for this Policy.
  optional PolicyDns64Config dns64_config = 3 [json_name="dns64Config"];
  // Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
  optional bool enable_inbound_forwarding = 4 [json_name="enableInboundForwarding"];
  // Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
  optional bool enable_logging = 5 [json_name="enableLogging"];
  // Unique identifier for the resource; defined by the server (output only).
  optional uint64 id = 6 [json_name="id"];
  optional string kind = 7 [json_name="kind"];
  // User-assigned name for this policy.
  optional string name = 8 [json_name="name"];
  // List of network names specifying networks to which this policy is applied.
  repeated PolicyNetwork networks = 9 [json_name="networks"];
}

message PolicyAlternativeNameServerConfig {
  optional string kind = 1 [json_name="kind"];
  // Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
  repeated PolicyAlternativeNameServerConfigTargetNameServer target_name_servers = 2 [json_name="targetNameServers"];
}

message PolicyAlternativeNameServerConfigTargetNameServer {
  // Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
  optional string forwarding_path = 1 [json_name="forwardingPath"];
  // IPv4 address to forward queries to.
  optional string ipv4_address = 2 [json_name="ipv4Address"];
  // IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
  optional string ipv6_address = 3 [json_name="ipv6Address"];
  optional string kind = 4 [json_name="kind"];
}

// DNS64 policies
message PolicyDns64Config {
  optional string kind = 1 [json_name="kind"];
  // The scope to which DNS64 config will be applied to.
  optional PolicyDns64ConfigScope scope = 2 [json_name="scope"];
}

message PolicyDns64ConfigScope {
  // Controls whether DNS64 is enabled globally at the network level.
  optional bool all_queries = 1 [json_name="allQueries"];
  optional string kind = 2 [json_name="kind"];
}

message PolicyNetwork {
  optional string kind = 1 [json_name="kind"];
  // The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
  optional string network_url = 2 [json_name="networkUrl"];
}

// A project resource. The project is a top level container for resources including Cloud DNS ManagedZones. Projects can be created only in the APIs console.
message Project {
  // User assigned unique identifier for the resource (output only).
  optional string id = 1 [json_name="id"];
  optional string kind = 2 [json_name="kind"];
  // Unique numeric identifier for the resource; defined by the server (output only).
  optional uint64 number = 3 [json_name="number"];
  // Quotas assigned to this project (output only).
  optional Quota quota = 4 [json_name="quota"];
}

// Limits associated with a Project.
message Quota {
  // Maximum allowed number of DnsKeys per ManagedZone.
  optional int32 dns_keys_per_managed_zone = 1 [json_name="dnsKeysPerManagedZone"];
  // Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.
  optional int32 gke_clusters_per_managed_zone = 2 [json_name="gkeClustersPerManagedZone"];
  // Maximum allowed number of GKE clusters per policy.
  optional int32 gke_clusters_per_policy = 3 [json_name="gkeClustersPerPolicy"];
  // Maximum allowed number of GKE clusters per response policy.
  optional int32 gke_clusters_per_response_policy = 4 [json_name="gkeClustersPerResponsePolicy"];
  optional int32 internet_health_checks_per_managed_zone = 5 [json_name="internetHealthChecksPerManagedZone"];
  // Maximum allowed number of items per routing policy.
  optional int32 items_per_routing_policy = 6 [json_name="itemsPerRoutingPolicy"];
  optional string kind = 7 [json_name="kind"];
  // Maximum allowed number of managed zones in the project.
  optional int32 managed_zones = 8 [json_name="managedZones"];
  // Maximum allowed number of managed zones which can be attached to a GKE cluster.
  optional int32 managed_zones_per_gke_cluster = 9 [json_name="managedZonesPerGkeCluster"];
  // Maximum allowed number of managed zones which can be attached to a network.
  optional int32 managed_zones_per_network = 10 [json_name="managedZonesPerNetwork"];
  // Maximum number of nameservers per delegation, meant to prevent abuse
  optional int32 nameservers_per_delegation = 11 [json_name="nameserversPerDelegation"];
  // Maximum allowed number of networks to which a privately scoped zone can be attached.
  optional int32 networks_per_managed_zone = 12 [json_name="networksPerManagedZone"];
  // Maximum allowed number of networks per policy.
  optional int32 networks_per_policy = 13 [json_name="networksPerPolicy"];
  // Maximum allowed number of networks per response policy.
  optional int32 networks_per_response_policy = 14 [json_name="networksPerResponsePolicy"];
  // Maximum allowed number of consumer peering zones per target network owned by this producer project
  optional int32 peering_zones_per_target_network = 15 [json_name="peeringZonesPerTargetNetwork"];
  // Maximum allowed number of policies per project.
  optional int32 policies = 16 [json_name="policies"];
  // Maximum allowed number of ResourceRecords per ResourceRecordSet.
  optional int32 resource_records_per_rrset = 17 [json_name="resourceRecordsPerRrset"];
  // Maximum allowed number of response policies per project.
  optional int32 response_policies = 18 [json_name="responsePolicies"];
  // Maximum allowed number of rules per response policy.
  optional int32 response_policy_rules_per_response_policy = 19 [json_name="responsePolicyRulesPerResponsePolicy"];
  // Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.
  optional int32 rrset_additions_per_change = 20 [json_name="rrsetAdditionsPerChange"];
  // Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.
  optional int32 rrset_deletions_per_change = 21 [json_name="rrsetDeletionsPerChange"];
  // Maximum allowed number of ResourceRecordSets per zone in the project.
  optional int32 rrsets_per_managed_zone = 22 [json_name="rrsetsPerManagedZone"];
  // Maximum allowed number of target name servers per managed forwarding zone.
  optional int32 target_name_servers_per_managed_zone = 23 [json_name="targetNameServersPerManagedZone"];
  // Maximum allowed number of alternative target name servers per policy.
  optional int32 target_name_servers_per_policy = 24 [json_name="targetNameServersPerPolicy"];
  // Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.
  optional int32 total_rrdata_size_per_change = 25 [json_name="totalRrdataSizePerChange"];
  // DNSSEC algorithm and key length types that can be used for DnsKeys.
  repeated DnsKeySpec whitelisted_key_specs = 26 [json_name="whitelistedKeySpecs"];
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
message RRSetRoutingPolicy {
  optional RRSetRoutingPolicyGeoPolicy geo = 1 [json_name="geo"];
  // The fully qualified URL of the HealthCheck to use for this RRSetRoutingPolicy. Format this URL like `https://www.googleapis.com/compute/v1/projects/{project}/global/healthChecks/{healthCheck}`. https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks
  optional string health_check = 2 [json_name="healthCheck"];
  optional string kind = 3 [json_name="kind"];
  optional RRSetRoutingPolicyPrimaryBackupPolicy primary_backup = 4 [json_name="primaryBackup"];
  optional RRSetRoutingPolicyWrrPolicy wrr = 5 [json_name="wrr"];
}

// Configures a `RRSetRoutingPolicy` that routes based on the geo location of the querying user.
message RRSetRoutingPolicyGeoPolicy {
  // Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
  optional bool enable_fencing = 1 [json_name="enableFencing"];
  // The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
  repeated RRSetRoutingPolicyGeoPolicyGeoPolicyItem items = 2 [json_name="items"];
  optional string kind = 3 [json_name="kind"];
}

// ResourceRecordSet data for one geo location.
message RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
  // For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with `rrdata` within this item.
  optional RRSetRoutingPolicyHealthCheckTargets health_checked_targets = 1 [json_name="healthCheckedTargets"];
  optional string kind = 2 [json_name="kind"];
  // The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
  optional string location = 3 [json_name="location"];
  repeated string rrdatas = 4 [json_name="rrdatas"];
  // DNSSEC generated signatures for all the `rrdata` within this item. When using health-checked targets for DNSSEC-enabled zones, you can only use at most one health-checked IP address per item.
  repeated string signature_rrdatas = 5 [json_name="signatureRrdatas"];
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Set either `internal_load_balancer` or `external_endpoints`. Do not set both.
message RRSetRoutingPolicyHealthCheckTargets {
  // The Internet IP addresses to be health checked. The format matches the format of ResourceRecordSet.rrdata as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
  repeated string external_endpoints = 1 [json_name="externalEndpoints"];
  // Configuration for internal load balancers to be health checked.
  repeated RRSetRoutingPolicyLoadBalancerTarget internal_load_balancers = 2 [json_name="internalLoadBalancers"];
}

// The configuration for an individual load balancer to health check.
message RRSetRoutingPolicyLoadBalancerTarget {
  // The frontend IP address of the load balancer to health check.
  optional string ip_address = 1 [json_name="ipAddress"];
  // The protocol of the load balancer to health check.
  optional string ip_protocol = 2 [json_name="ipProtocol"];
  optional string kind = 3 [json_name="kind"];
  // The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. 
  optional string load_balancer_type = 4 [json_name="loadBalancerType"];
  // The fully qualified URL of the network that the load balancer is attached to. This should be formatted like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`.
  optional string network_url = 5 [json_name="networkUrl"];
  // The configured port of the load balancer.
  optional string port = 6 [json_name="port"];
  // The project ID in which the load balancer is located.
  optional string project = 7 [json_name="project"];
  // The region in which the load balancer is located.
  optional string region = 8 [json_name="region"];
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
message RRSetRoutingPolicyPrimaryBackupPolicy {
  // Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to `BACKUP`, this policy essentially becomes a geo routing policy.
  optional RRSetRoutingPolicyGeoPolicy backup_geo_targets = 1 [json_name="backupGeoTargets"];
  optional string kind = 2 [json_name="kind"];
  // Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the `backup_geo_targets`.
  optional RRSetRoutingPolicyHealthCheckTargets primary_targets = 3 [json_name="primaryTargets"];
  // When serving state is `PRIMARY`, this field provides the option of sending a small percentage of the traffic to the backup targets.
  optional double trickle_traffic = 4 [json_name="trickleTraffic"];
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
message RRSetRoutingPolicyWrrPolicy {
  repeated RRSetRoutingPolicyWrrPolicyWrrPolicyItem items = 1 [json_name="items"];
  optional string kind = 2 [json_name="kind"];
}

// A routing block which contains the routing information for one WRR item.
message RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
  // Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of `rrdata` or `health_checked_targets` can be set.
  optional RRSetRoutingPolicyHealthCheckTargets health_checked_targets = 1 [json_name="healthCheckedTargets"];
  optional string kind = 2 [json_name="kind"];
  repeated string rrdatas = 3 [json_name="rrdatas"];
  // DNSSEC generated signatures for all the `rrdata` within this item. When using health-checked targets for DNSSEC-enabled zones, you can only use at most one health-checked IP address per item.
  repeated string signature_rrdatas = 4 [json_name="signatureRrdatas"];
  // The weight corresponding to this `WrrPolicyItem` object. When multiple `WrrPolicyItem` objects are configured, the probability of returning an `WrrPolicyItem` object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
  optional double weight = 5 [json_name="weight"];
}

// A unit of data that is returned by the DNS servers.
message ResourceRecordSet {
  optional string kind = 1 [json_name="kind"];
  // For example, www.example.com.
  optional string name = 2 [json_name="name"];
  // Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid `ResourceRecordSet` contains only `rrdata` (for static resolution) or a `routing_policy` (for dynamic resolution).
  optional RRSetRoutingPolicy routing_policy = 3 [json_name="routingPolicy"];
  // As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
  repeated string rrdatas = 4 [json_name="rrdatas"];
  // As defined in RFC 4034 (section 3.2).
  repeated string signature_rrdatas = 5 [json_name="signatureRrdatas"];
  // Number of seconds that this `ResourceRecordSet` can be cached by resolvers.
  optional int32 ttl = 6 [json_name="ttl"];
  // The identifier of a supported record type. See the list of Supported DNS record types.
  optional string type = 7 [json_name="type"];
}

message ResourceRecordSetsDeleteResponse {
}

message ResourceRecordSetsListResponse {
  // Type of resource.
  optional string kind = 1 [json_name="kind"];
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 2 [json_name="nextPageToken"];
  // The resource record set resources.
  repeated ResourceRecordSet rrsets = 3 [json_name="rrsets"];
}

message ResponsePoliciesListResponse {
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // The Response Policy resources.
  repeated ResponsePolicy response_policies = 2 [json_name="responsePolicies"];
}

message ResponsePoliciesPatchResponse {
  optional ResponsePolicy response_policy = 1 [json_name="responsePolicy"];
}

message ResponsePoliciesUpdateResponse {
  optional ResponsePolicy response_policy = 1 [json_name="responsePolicy"];
}

// A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
message ResponsePolicy {
  // User-provided description for this Response Policy.
  optional string description = 1 [json_name="description"];
  // The list of Google Kubernetes Engine clusters to which this response policy is applied.
  repeated ResponsePolicyGKECluster gke_clusters = 2 [json_name="gkeClusters"];
  // Unique identifier for the resource; defined by the server (output only).
  optional int64 id = 3 [json_name="id"];
  optional string kind = 4 [json_name="kind"];
  // User labels.
  map<string, string> labels = 5 [json_name="labels"];
  // List of network names specifying networks to which this policy is applied.
  repeated ResponsePolicyNetwork networks = 6 [json_name="networks"];
  // User assigned name for this Response Policy.
  optional string response_policy_name = 7 [json_name="responsePolicyName"];
}

message ResponsePolicyGKECluster {
  // The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
  optional string gke_cluster_name = 1 [json_name="gkeClusterName"];
  optional string kind = 2 [json_name="kind"];
}

message ResponsePolicyNetwork {
  optional string kind = 1 [json_name="kind"];
  // The fully qualified URL of the VPC network to bind to. This should be formatted like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
  optional string network_url = 2 [json_name="networkUrl"];
}

// A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
message ResponsePolicyRule {
  // Answer this query with a behavior rather than DNS data.
  optional string behavior = 1 [json_name="behavior"];
  // The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
  optional string dns_name = 2 [json_name="dnsName"];
  optional string kind = 3 [json_name="kind"];
  // Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name; in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
  optional ResponsePolicyRuleLocalData local_data = 4 [json_name="localData"];
  // An identifier for this rule. Must be unique with the ResponsePolicy.
  optional string rule_name = 5 [json_name="ruleName"];
}

message ResponsePolicyRuleLocalData {
  // All resource record sets for this selector, one per resource record type. The name must match the dns_name.
  repeated ResourceRecordSet local_datas = 1 [json_name="localDatas"];
}

message ResponsePolicyRulesListResponse {
  // This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // The Response Policy Rule resources.
  repeated ResponsePolicyRule response_policy_rules = 2 [json_name="responsePolicyRules"];
}

message ResponsePolicyRulesPatchResponse {
  optional ResponsePolicyRule response_policy_rule = 1 [json_name="responsePolicyRule"];
}

message ResponsePolicyRulesUpdateResponse {
  optional ResponsePolicyRule response_policy_rule = 1 [json_name="responsePolicyRule"];
}

message CreateChangeRequest {
  optional string client_operation_id = 1;
  optional string managed_zone = 2;
  optional string project = 3;
  optional Change change = 4;
}

message GetChangeRequest {
  optional string change_id = 1;
  optional string client_operation_id = 2;
  optional string managed_zone = 3;
  optional string project = 4;
}

message ListChangesRequest {
  optional string managed_zone = 1;
  optional int32 max_results = 2;
  optional string page_token = 3;
  optional string project = 4;
  optional string sort_by = 5;
  optional string sort_order = 6;
}

message GetDnsKeyRequest {
  optional string client_operation_id = 1;
  optional string digest_type = 2;
  optional string dns_key_id = 3;
  optional string managed_zone = 4;
  optional string project = 5;
}

message ListDnsKeysRequest {
  optional string digest_type = 1;
  optional string managed_zone = 2;
  optional int32 max_results = 3;
  optional string page_token = 4;
  optional string project = 5;
}

message GetManagedZoneOperationRequest {
  optional string client_operation_id = 1;
  optional string managed_zone = 2;
  optional string operation = 3;
  optional string project = 4;
}

message ListManagedZoneOperationsRequest {
  optional string managed_zone = 1;
  optional int32 max_results = 2;
  optional string page_token = 3;
  optional string project = 4;
  optional string sort_by = 5;
}

message CreateManagedZoneRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional ManagedZone managed_zone = 3;
}

message DeleteManagedZoneRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
}

message GetManagedZoneRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
}

message ListManagedZonesRequest {
  optional string dns_name = 1;
  optional int32 max_results = 2;
  optional string page_token = 3;
  optional string project = 4;
}

message PatchManagedZoneRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
  optional ManagedZone managed_zone = 4;
}

message UpdateManagedZoneRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
  optional ManagedZone managed_zone = 4;
}

message CreatePolicyRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional Policy policy = 3;
}

message DeletePolicyRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
}

message GetPolicyRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
}

message ListPoliciesRequest {
  optional int32 max_results = 1;
  optional string page_token = 2;
  optional string project = 3;
}

message PatchPolicyRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
  optional Policy policy = 4;
}

message UpdatePolicyRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
  optional string project = 3;
  optional Policy policy = 4;
}

message GetProjectRequest {
  optional string client_operation_id = 1;
  optional string name = 2;
}

message CreateResourceRecordSetRequest {
  optional string client_operation_id = 1;
  optional string managed_zone = 2;
  optional string project = 3;
  optional ResourceRecordSet resource_record_set = 4;
}

message DeleteResourceRecordSetRequest {
  optional string client_operation_id = 1;
  optional string managed_zone = 2;
  optional string name = 3;
  optional string project = 4;
  optional string type = 5;
}

message GetResourceRecordSetRequest {
  optional string client_operation_id = 1;
  optional string managed_zone = 2;
  optional string name = 3;
  optional string project = 4;
  optional string type = 5;
}

message ListResourceRecordSetsRequest {
  optional string managed_zone = 1;
  optional int32 max_results = 2;
  optional string name = 3;
  optional string page_token = 4;
  optional string project = 5;
  optional string type = 6;
}

message PatchResourceRecordSetRequest {
  optional string client_operation_id = 1;
  optional string managed_zone = 2;
  optional string name = 3;
  optional string project = 4;
  optional string type = 5;
  optional ResourceRecordSet resource_record_set = 6;
}

message CreateResponsePolicyRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional ResponsePolicy response_policy = 3;
}

message DeleteResponsePolicyRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string name = 3;
}

message GetResponsePolicyRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string name = 3;
}

message ListResponsePoliciesRequest {
  optional int32 max_results = 1;
  optional string page_token = 2;
  optional string project = 3;
}

message PatchResponsePolicyRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string name = 3;
  optional ResponsePolicy response_policy = 4;
}

message UpdateResponsePolicyRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string name = 3;
  optional ResponsePolicy response_policy = 4;
}

message CreateResponsePolicyRuleRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string response_policy = 3;
  optional ResponsePolicyRule response_policy_rule = 4;
}

message DeleteResponsePolicyRuleRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string response_policy = 3;
  optional string name = 4;
}

message GetResponsePolicyRuleRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string response_policy = 3;
  optional string name = 4;
}

message ListResponsePolicyRulesRequest {
  optional int32 max_results = 1;
  optional string page_token = 2;
  optional string project = 3;
  optional string response_policy = 4;
}

message PatchResponsePolicyRuleRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string response_policy = 3;
  optional string name = 4;
  optional ResponsePolicyRule response_policy_rule = 5;
}

message UpdateResponsePolicyRuleRequest {
  optional string client_operation_id = 1;
  optional string project = 2;
  optional string response_policy = 3;
  optional string name = 4;
  optional ResponsePolicyRule response_policy_rule = 5;
}
