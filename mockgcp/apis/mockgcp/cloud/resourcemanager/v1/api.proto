// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
package mockgcp.cloudresourcemanager.v1;
import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
option go_package = "cloud.google.com/go/cloudresourcemanager/apiv1/cloudresourcemanagerpb;cloudresourcemanagerpb";

service FoldersServer {

  // Clears a `Policy` from a resource.
  rpc ClearOrgPolicyFolder(ClearOrgPolicyFolderRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/{resource=folders/*}:clearOrgPolicy"
      body: "folder"
    };
  };

  // Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
  rpc GetEffectiveOrgPolicyFolder(GetEffectiveOrgPolicyFolderRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=folders/*}:getEffectiveOrgPolicy"
      body: "folder"
    };
  };

  // Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
  rpc GetOrgPolicyFolder(GetOrgPolicyFolderRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=folders/*}:getOrgPolicy"
      body: "folder"
    };
  };

  // Lists `Constraints` that could be applied on the specified resource.
  rpc ListAvailableOrgPolicyConstraintsFolder(ListAvailableOrgPolicyConstraintsFolderRequest) returns (ListAvailableOrgPolicyConstraintsResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=folders/*}:listAvailableOrgPolicyConstraints"
      body: "folder"
    };
  };

  // Lists all the `Policies` set for a particular resource.
  rpc ListOrgPoliciesFolder(ListOrgPoliciesFolderRequest) returns (ListOrgPoliciesResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=folders/*}:listOrgPolicies"
      body: "folder"
    };
  };

  // Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
  rpc SetOrgPolicyFolder(SetOrgPolicyFolderRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=folders/*}:setOrgPolicy"
      body: "folder"
    };
  };
}

service LiensServer {

  // Create a Lien which applies to the resource denoted by the `parent` field. Callers of this method will require permission on the `parent` resource. For example, applying to `projects/1234` requires permission `resourcemanager.projects.updateLiens`. NOTE: Some resources may limit the number of Liens which may be applied.
  rpc CreateLien(CreateLienRequest) returns (Lien) {
    option (google.api.http) = {
      post: "/v1/liens"
      body: "lien"
    };
  };

  // Delete a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.updateLiens`.
  rpc DeleteLien(DeleteLienRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=liens/.*}"
    };
  };

  // Retrieve a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`
  rpc GetLien(GetLienRequest) returns (Lien) {
    option (google.api.http) = {
      get: "/v1/{name=liens/.*}"
    };
  };

  // List all Liens applied to the `parent` resource. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`.
  rpc ListLiens(ListLiensRequest) returns (ListLiensResponse) {
    option (google.api.http) = {
      get: "/v1/liens"
    };
  };
}

service OrganizationsServer {

  // Clears a `Policy` from a resource.
  rpc ClearOrgPolicyOrganization(ClearOrgPolicyOrganizationRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/{resource=organizations/*}:clearOrgPolicy"
      body: "organization"
    };
  };

  // Fetches an Organization resource identified by the specified resource name.
  rpc GetOrganization(GetOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      get: "/v1/{name=organizations/*}"
    };
  };

  // Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
  rpc GetEffectiveOrgPolicyOrganization(GetEffectiveOrgPolicyOrganizationRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=organizations/*}:getEffectiveOrgPolicy"
      body: "organization"
    };
  };

  // Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
  rpc GetOrgPolicyOrganization(GetOrgPolicyOrganizationRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=organizations/*}:getOrgPolicy"
      body: "organization"
    };
  };

  // Lists `Constraints` that could be applied on the specified resource.
  rpc ListAvailableOrgPolicyConstraintsOrganization(ListAvailableOrgPolicyConstraintsOrganizationRequest) returns (ListAvailableOrgPolicyConstraintsResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=organizations/*}:listAvailableOrgPolicyConstraints"
      body: "organization"
    };
  };

  // Lists all the `Policies` set for a particular resource.
  rpc ListOrgPoliciesOrganization(ListOrgPoliciesOrganizationRequest) returns (ListOrgPoliciesResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=organizations/*}:listOrgPolicies"
      body: "organization"
    };
  };

  // Searches Organization resources that are visible to the user and satisfy the specified filter. This method returns Organizations in an unspecified order. New Organizations do not necessarily appear at the end of the results. Search will only return organizations on which the user has the permission `resourcemanager.organizations.get` or has super admin privileges.
  rpc SearchOrganization(SearchOrganizationRequest) returns (SearchOrganizationsResponse) {
    option (google.api.http) = {
      post: "/v1/organizations:search"
      body: "organization"
    };
  };

  // Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
  rpc SetOrgPolicyOrganization(SetOrgPolicyOrganizationRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=organizations/*}:setOrgPolicy"
      body: "organization"
    };
  };
}

service ProjectsServer {

  // Clears a `Policy` from a resource.
  rpc ClearOrgPolicyProject(ClearOrgPolicyProjectRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:clearOrgPolicy"
      body: "project"
    };
  };

  // Request that a new Project be created. The result is an Operation which can be used to track the creation process. This process usually takes a few seconds, but can sometimes take much longer. The tracking Operation is automatically deleted after a few hours, so there is no need to call DeleteOperation. Authorization requires the Google IAM permission `resourcemanager.projects.create` on the specified parent for the new project. The parent is identified by a specified ResourceId, which must include both an ID and a type, such as organization. This method does not associate the new project with a billing account. You can set or update the billing account associated with a project using the [`projects.updateBillingInfo`] (/billing/reference/rest/v1/projects/updateBillingInfo) method.
  rpc CreateProject(CreateProjectRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "project"
    };
  };

  // Marks the Project identified by the specified `project_id` (for example, `my-project-123`) for deletion. This method will only affect the Project if it has a lifecycle state of ACTIVE. This method changes the Project's lifecycle state from ACTIVE to DELETE_REQUESTED. The deletion starts at an unspecified time, at which point the Project is no longer accessible. Until the deletion completes, you can check the lifecycle state checked by retrieving the Project with GetProject, and the Project remains visible to ListProjects. However, you cannot update the project. After the deletion completes, the Project is not retrievable by the GetProject and ListProjects methods. The caller must have delete permissions for this Project.
  rpc DeleteProject(DeleteProjectRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/projects/{project_id}"
    };
  };

  // Retrieves the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.
  rpc GetProject(GetProjectRequest) returns (Project) {
    option (google.api.http) = {
      get: "/v1/projects/{project_id}"
    };
  };

  // Gets a list of ancestors in the resource hierarchy for the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.
  rpc GetAncestryProject(GetAncestryProjectRequest) returns (GetAncestryResponse) {
    option (google.api.http) = {
      post: "/v1/projects/{project_id}:getAncestry"
      body: "project"
    };
  };

  // Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
  rpc GetEffectiveOrgPolicyProject(GetEffectiveOrgPolicyProjectRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:getEffectiveOrgPolicy"
      body: "project"
    };
  };

  // Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
  rpc GetOrgPolicyProject(GetOrgPolicyProjectRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:getOrgPolicy"
      body: "project"
    };
  };

  // Lists Projects that the caller has the `resourcemanager.projects.get` permission on and satisfy the specified filter. This method returns Projects in an unspecified order. This method is eventually consistent with project mutations; this means that a newly created project may not appear in the results or recent updates to an existing project may not be reflected in the results. To retrieve the latest state of a project, use the GetProject method. NOTE: If the request filter contains a `parent.type` and `parent.id` and the caller has the `resourcemanager.projects.list` permission on the parent, the results will be drawn from an alternate index which provides more consistent results. In future versions of this API, this List method will be split into List and Search to properly capture the behavioral difference.
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      get: "/v1/projects"
    };
  };

  // Lists `Constraints` that could be applied on the specified resource.
  rpc ListAvailableOrgPolicyConstraintsProject(ListAvailableOrgPolicyConstraintsProjectRequest) returns (ListAvailableOrgPolicyConstraintsResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:listAvailableOrgPolicyConstraints"
      body: "project"
    };
  };

  // Lists all the `Policies` set for a particular resource.
  rpc ListOrgPoliciesProject(ListOrgPoliciesProjectRequest) returns (ListOrgPoliciesResponse) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:listOrgPolicies"
      body: "project"
    };
  };

  // Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
  rpc SetOrgPolicyProject(SetOrgPolicyProjectRequest) returns (OrgPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:setOrgPolicy"
      body: "project"
    };
  };

  // Restores the Project identified by the specified `project_id` (for example, `my-project-123`). You can only use this method for a Project that has a lifecycle state of DELETE_REQUESTED. After deletion starts, the Project cannot be restored. The caller must have undelete permissions for this Project.
  rpc UndeleteProject(UndeleteProjectServiceRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/projects/{project_id}:undelete"
      body: "project"
    };
  };

  // Updates the attributes of the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have modify permissions for this Project.
  rpc UpdateProject(UpdateProjectRequest) returns (Project) {
    option (google.api.http) = {
      put: "/v1/projects/{project_id}"
      body: "project"
    };
  };
}

// Identifying information for a single ancestor of a project.
message Ancestor {
  // Resource id of the ancestor.
  optional ResourceId resource_id = 1 [json_name="resourceId"];
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
message AuditConfig {
  // The configuration for logging of each type of permission.
  repeated AuditLogConfig audit_log_configs = 1 [json_name="auditLogConfigs"];
  // Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
  optional string service = 2 [json_name="service"];
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
message AuditLogConfig {
  // Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
  repeated string exempted_members = 1 [json_name="exemptedMembers"];
  // The log type that this config enables.
  optional string log_type = 2 [json_name="logType"];
}

// Associates `members`, or principals, with a `role`.
message Binding {
  // The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional Expr condition = 1 [json_name="condition"];
  // Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
  repeated string members = 2 [json_name="members"];
  // Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
  optional string role = 3 [json_name="role"];
}

// A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.
message BooleanConstraint {
}

// Used in `policy_type` to specify how `boolean_policy` will behave at this resource.
message BooleanPolicy {
  // If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. Suppose you have a `Constraint` `constraints/compute.disableSerialPortAccess` with `constraint_default` set to `ALLOW`. A `Policy` for that `Constraint` exhibits the following behavior: - If the `Policy` at this resource has enforced set to `false`, serial port connection attempts will be allowed. - If the `Policy` at this resource has enforced set to `true`, serial port connection attempts will be refused. - If the `Policy` at this resource is `RestoreDefault`, serial port connection attempts will be allowed. - If no `Policy` is set at this resource or anywhere higher in the resource hierarchy, serial port connection attempts will be allowed. - If no `Policy` is set at this resource, but one exists higher in the resource hierarchy, the behavior is as if the`Policy` were set at this resource. The following examples demonstrate the different possible layerings: Example 1 (nearest `Constraint` wins): `organizations/foo` has a `Policy` with: {enforced: false} `projects/bar` has no `Policy` set. The constraint at `projects/bar` and `organizations/foo` will not be enforced. Example 2 (enforcement gets replaced): `organizations/foo` has a `Policy` with: {enforced: false} `projects/bar` has a `Policy` with: {enforced: true} The constraint at `organizations/foo` is not enforced. The constraint at `projects/bar` is enforced. Example 3 (RestoreDefault): `organizations/foo` has a `Policy` with: {enforced: true} `projects/bar` has a `Policy` with: {RestoreDefault: {}} The constraint at `organizations/foo` is enforced. The constraint at `projects/bar` is not enforced, because `constraint_default` for the `Constraint` is `ALLOW`.
  optional bool enforced = 1 [json_name="enforced"];
}

// The request sent to the ClearOrgPolicy method.
message ClearOrgPolicyRequest {
  // Name of the `Constraint` of the `Policy` to clear.
  optional string constraint = 1 [json_name="constraint"];
  // The current version, for concurrency control. Not sending an `etag` will cause the `Policy` to be cleared blindly.
  optional bytes etag = 2 [json_name="etag"];
}

// Metadata describing a long running folder operation
message CloudresourcemanagerGoogleCloudResourcemanagerV2alpha1FolderOperation {
  // The resource name of the folder or organization we are either creating the folder under or moving the folder to.
  optional string destination_parent = 1 [json_name="destinationParent"];
  // The display name of the folder.
  optional string display_name = 2 [json_name="displayName"];
  // The type of this operation.
  optional string operation_type = 3 [json_name="operationType"];
  // The resource name of the folder's parent. Only applicable when the operation_type is MOVE.
  optional string source_parent = 4 [json_name="sourceParent"];
}

// Metadata describing a long running folder operation
message CloudresourcemanagerGoogleCloudResourcemanagerV2beta1FolderOperation {
  // The resource name of the folder or organization we are either creating the folder under or moving the folder to.
  optional string destination_parent = 1 [json_name="destinationParent"];
  // The display name of the folder.
  optional string display_name = 2 [json_name="displayName"];
  // The type of this operation.
  optional string operation_type = 3 [json_name="operationType"];
  // The resource name of the folder's parent. Only applicable when the operation_type is MOVE.
  optional string source_parent = 4 [json_name="sourceParent"];
}

// A `Constraint` describes a way in which a resource's configuration can be restricted. For example, it controls which cloud services can be activated across an organization, or whether a Compute Engine instance can have serial port connections established. `Constraints` can be configured by the organization's policy administrator to fit the needs of the organzation by setting Policies for `Constraints` at different locations in the organization's resource hierarchy. Policies are inherited down the resource hierarchy from higher levels, but can also be overridden. For details about the inheritance rules please read about [Policies](/resource-manager/reference/rest/v1/Policy). `Constraints` have a default behavior determined by the `constraint_default` field, which is the enforcement behavior that is used in the absence of a `Policy` being defined or inherited for the resource in question.
message Constraint {
  // Defines this constraint as being a BooleanConstraint.
  optional BooleanConstraint boolean_constraint = 1 [json_name="booleanConstraint"];
  // The evaluation behavior of this constraint in the absence of 'Policy'.
  optional string constraint_default = 2 [json_name="constraintDefault"];
  // Detailed description of what this `Constraint` controls as well as how and where it is enforced. Mutable.
  optional string description = 3 [json_name="description"];
  // The human readable name. Mutable.
  optional string display_name = 4 [json_name="displayName"];
  // Defines this constraint as being a ListConstraint.
  optional ListConstraint list_constraint = 5 [json_name="listConstraint"];
  // Immutable value, required to globally be unique. For example, `constraints/serviceuser.services`
  optional string name = 6 [json_name="name"];
  // Version of the `Constraint`. Default version is 0;
  optional int32 version = 7 [json_name="version"];
}

// Metadata pertaining to the Folder creation process.
message CreateFolderMetadata {
  // The display name of the folder.
  optional string display_name = 1 [json_name="displayName"];
  // The resource name of the folder or organization we are creating the folder under.
  optional string parent = 2 [json_name="parent"];
}

// A status object which is used as the `metadata` field for the Operation returned by CreateProject. It provides insight for when significant phases of Project creation have completed.
message CreateProjectMetadata {
  // Creation time of the project creation workflow.
  optional .google.protobuf.Timestamp create_time = 1 [json_name="createTime"];
  // True if the project can be retrieved using `GetProject`. No other operations on the project are guaranteed to work until the project creation is complete.
  optional bool gettable = 2 [json_name="gettable"];
  // True if the project creation process is complete.
  optional bool ready = 3 [json_name="ready"];
}

// Runtime operation information for creating a TagValue.
message CreateTagBindingMetadata {
}

// Runtime operation information for creating a TagKey.
message CreateTagKeyMetadata {
}

// Runtime operation information for creating a TagValue.
message CreateTagValueMetadata {
}

// A status object which is used as the `metadata` field for the `Operation` returned by `DeleteFolder`.
message DeleteFolderMetadata {
}

// A status object which is used as the `metadata` field for the operation returned by DeleteOrganization.
message DeleteOrganizationMetadata {
}

// A status object which is used as the `metadata` field for the Operation returned by `DeleteProject`.
message DeleteProjectMetadata {
}

// Runtime operation information for deleting a TagBinding.
message DeleteTagBindingMetadata {
}

// Runtime operation information for deleting a TagKey.
message DeleteTagKeyMetadata {
}

// Runtime operation information for deleting a TagValue.
message DeleteTagValueMetadata {
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
message Empty {
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
message Expr {
  // Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
  optional string description = 1 [json_name="description"];
  // Textual representation of an expression in Common Expression Language syntax.
  optional string expression = 2 [json_name="expression"];
  // Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
  optional string location = 3 [json_name="location"];
  // Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
  optional string title = 4 [json_name="title"];
}

// Metadata describing a long running folder operation
message FolderOperation {
  // The resource name of the folder or organization we are either creating the folder under or moving the folder to.
  optional string destination_parent = 1 [json_name="destinationParent"];
  // The display name of the folder.
  optional string display_name = 2 [json_name="displayName"];
  // The type of this operation.
  optional string operation_type = 3 [json_name="operationType"];
  // The resource name of the folder's parent. Only applicable when the operation_type is MOVE.
  optional string source_parent = 4 [json_name="sourceParent"];
}

// A classification of the Folder Operation error.
message FolderOperationError {
  // The type of operation error experienced.
  optional string error_message_id = 1 [json_name="errorMessageId"];
}

// The request sent to the GetAncestry method.
message GetAncestryRequest {
}

// Response from the projects.getAncestry method.
message GetAncestryResponse {
  // Ancestors are ordered from bottom to top of the resource hierarchy. The first ancestor is the project itself, followed by the project's parent, etc..
  repeated Ancestor ancestor = 1 [json_name="ancestor"];
}

// The request sent to the GetEffectiveOrgPolicy method.
message GetEffectiveOrgPolicyRequest {
  // The name of the `Constraint` to compute the effective `Policy`.
  optional string constraint = 1 [json_name="constraint"];
}

// Request message for `GetIamPolicy` method.
message GetIamPolicyRequest {
  // OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.
  optional GetPolicyOptions options = 1 [json_name="options"];
}

// The request sent to the GetOrgPolicy method.
message GetOrgPolicyRequest {
  // Name of the `Constraint` to get the `Policy`.
  optional string constraint = 1 [json_name="constraint"];
}

// Encapsulates settings provided to GetIamPolicy.
message GetPolicyOptions {
  // Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional int32 requested_policy_version = 1 [json_name="requestedPolicyVersion"];
}

// A Lien represents an encumbrance on the actions that can be performed on a resource.
message Lien {
  // The creation time of this Lien.
  optional .google.protobuf.Timestamp create_time = 1 [json_name="createTime"];
  // A system-generated unique identifier for this Lien. Example: `liens/1234abcd`
  optional string name = 2 [json_name="name"];
  // A stable, user-visible/meaningful string identifying the origin of the Lien, intended to be inspected programmatically. Maximum length of 200 characters. Example: 'compute.googleapis.com'
  optional string origin = 3 [json_name="origin"];
  // A reference to the resource this Lien is attached to. The server will validate the parent against those for which Liens are supported. Example: `projects/1234`
  optional string parent = 4 [json_name="parent"];
  // Concise user-visible strings indicating why an action cannot be performed on a resource. Maximum length of 200 characters. Example: 'Holds production API key'
  optional string reason = 5 [json_name="reason"];
  // The types of operations which should be blocked as a result of this Lien. Each value should correspond to an IAM permission. The server will validate the permissions against those for which Liens are supported. An empty list is meaningless and will be rejected. Example: ['resourcemanager.projects.delete']
  repeated string restrictions = 6 [json_name="restrictions"];
}

// The request sent to the `ListAvailableOrgPolicyConstraints` method on the project, folder, or organization.
message ListAvailableOrgPolicyConstraintsRequest {
  // Size of the pages to be returned. This is currently unsupported and will be ignored. The server may at any point start using this field to limit page size.
  optional int32 page_size = 1 [json_name="pageSize"];
  // Page token used to retrieve the next page. This is currently unsupported and will be ignored. The server may at any point start using this field.
  optional string page_token = 2 [json_name="pageToken"];
}

// The response returned from the `ListAvailableOrgPolicyConstraints` method. Returns all `Constraints` that could be set at this level of the hierarchy (contrast with the response from `ListPolicies`, which returns all policies which are set).
message ListAvailableOrgPolicyConstraintsResponse {
  // The collection of constraints that are settable on the request resource.
  repeated Constraint constraints = 1 [json_name="constraints"];
  // Page token used to retrieve the next page. This is currently not used.
  optional string next_page_token = 2 [json_name="nextPageToken"];
}

// A `Constraint` that allows or disallows a list of string values, which are configured by an Organization's policy administrator with a `Policy`.
message ListConstraint {
  // Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Constraint`.
  optional string suggested_value = 1 [json_name="suggestedValue"];
  // Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `"under:folders/123"` would match any resource under the 'folders/123' folder.
  optional bool supports_under = 2 [json_name="supportsUnder"];
}

// The response message for Liens.ListLiens.
message ListLiensResponse {
  // A list of Liens.
  repeated Lien liens = 1 [json_name="liens"];
  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  optional string next_page_token = 2 [json_name="nextPageToken"];
}

// The request sent to the ListOrgPolicies method.
message ListOrgPoliciesRequest {
  // Size of the pages to be returned. This is currently unsupported and will be ignored. The server may at any point start using this field to limit page size.
  optional int32 page_size = 1 [json_name="pageSize"];
  // Page token used to retrieve the next page. This is currently unsupported and will be ignored. The server may at any point start using this field.
  optional string page_token = 2 [json_name="pageToken"];
}

// The response returned from the `ListOrgPolicies` method. It will be empty if no `Policies` are set on the resource.
message ListOrgPoliciesResponse {
  // Page token used to retrieve the next page. This is currently not used, but the server may at any point start supplying a valid token.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // The `Policies` that are set on the resource. It will be empty if no `Policies` are set.
  repeated OrgPolicy policies = 2 [json_name="policies"];
}

// Used in `policy_type` to specify how `list_policy` behaves at this resource. `ListPolicy` can define specific values and subtrees of Cloud Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied by setting the `allowed_values` and `denied_values` fields. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a ":". Values prefixed with "is:" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - "projects/", e.g. "projects/tokyo-rain-123" - "folders/", e.g. "folders/1234" - "organizations/", e.g. "organizations/1234" The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used. You can set `allowed_values` and `denied_values` in the same `Policy` if `all_values` is `ALL_VALUES_UNSPECIFIED`. `ALLOW` or `DENY` are used to allow or deny all values. If `all_values` is set to either `ALLOW` or `DENY`, `allowed_values` and `denied_values` must be unset.
message ListPolicy {
  // The policy all_values state.
  optional string all_values = 1 [json_name="allValues"];
  // List of values allowed at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.
  repeated string allowed_values = 2 [json_name="allowedValues"];
  // List of values denied at this resource. Can only be set if `all_values` is set to `ALL_VALUES_UNSPECIFIED`.
  repeated string denied_values = 3 [json_name="deniedValues"];
  // Determines the inheritance behavior for this `Policy`. By default, a `ListPolicy` set at a resource supersedes any `Policy` set anywhere up the resource hierarchy. However, if `inherit_from_parent` is set to `true`, then the values from the effective `Policy` of the parent resource are inherited, meaning the values set in this `Policy` are added to the values inherited up the hierarchy. Setting `Policy` hierarchies that inherit both allowed values and denied values isn't recommended in most circumstances to keep the configuration simple and understandable. However, it is possible to set a `Policy` with `allowed_values` set that inherits a `Policy` with `denied_values` set. In this case, the values that are allowed must be in `allowed_values` and not present in `denied_values`. For example, suppose you have a `Constraint` `constraints/serviceuser.services`, which has a `constraint_type` of `list_constraint`, and with `constraint_default` set to `ALLOW`. Suppose that at the Organization level, a `Policy` is applied that restricts the allowed API activations to {`E1`, `E2`}. Then, if a `Policy` is applied to a project below the Organization that has `inherit_from_parent` set to `false` and field all_values set to DENY, then an attempt to activate any API will be denied. The following examples demonstrate different possible layerings for `projects/bar` parented by `organizations/foo`: Example 1 (no inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: "E1" allowed_values:"E2"} `projects/bar` has `inherit_from_parent` `false` and values: {allowed_values: "E3" allowed_values: "E4"} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E3`, and `E4`. Example 2 (inherited values): `organizations/foo` has a `Policy` with values: {allowed_values: "E1" allowed_values:"E2"} `projects/bar` has a `Policy` with values: {value: "E3" value: "E4" inherit_from_parent: true} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are `E1`, `E2`, `E3`, and `E4`. Example 3 (inheriting both allowed and denied values): `organizations/foo` has a `Policy` with values: {allowed_values: "E1" allowed_values: "E2"} `projects/bar` has a `Policy` with: {denied_values: "E1"} The accepted values at `organizations/foo` are `E1`, `E2`. The value accepted at `projects/bar` is `E2`. Example 4 (RestoreDefault): `organizations/foo` has a `Policy` with values: {allowed_values: "E1" allowed_values:"E2"} `projects/bar` has a `Policy` with values: {RestoreDefault: {}} The accepted values at `organizations/foo` are `E1`, `E2`. The accepted values at `projects/bar` are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 5 (no policy inherits parent policy): `organizations/foo` has no `Policy` set. `projects/bar` has no `Policy` set. The accepted values at both levels are either all or none depending on the value of `constraint_default` (if `ALLOW`, all; if `DENY`, none). Example 6 (ListConstraint allowing all): `organizations/foo` has a `Policy` with values: {allowed_values: "E1" allowed_values: "E2"} `projects/bar` has a `Policy` with: {all: ALLOW} The accepted values at `organizations/foo` are `E1`, E2`. Any value is accepted at `projects/bar`. Example 7 (ListConstraint allowing none): `organizations/foo` has a `Policy` with values: {allowed_values: "E1" allowed_values: "E2"} `projects/bar` has a `Policy` with: {all: DENY} The accepted values at `organizations/foo` are `E1`, E2`. No value is accepted at `projects/bar`. Example 10 (allowed and denied subtrees of Resource Manager hierarchy): Given the following resource hierarchy O1->{F1, F2}; F1->{P1}; F2->{P2, P3}, `organizations/foo` has a `Policy` with values: {allowed_values: "under:organizations/O1"} `projects/bar` has a `Policy` with: {allowed_values: "under:projects/P3"} {denied_values: "under:folders/F2"} The accepted values at `organizations/foo` are `organizations/O1`, `folders/F1`, `folders/F2`, `projects/P1`, `projects/P2`, `projects/P3`. The accepted values at `projects/bar` are `organizations/O1`, `folders/F1`, `projects/P1`.
  optional bool inherit_from_parent = 4 [json_name="inheritFromParent"];
  // Optional. The Google Cloud Console will try to default to a configuration that matches the value specified in this `Policy`. If `suggested_value` is not set, it will inherit the value specified higher in the hierarchy, unless `inherit_from_parent` is `false`.
  optional string suggested_value = 5 [json_name="suggestedValue"];
}

// A page of the response received from the ListProjects method. A paginated response where more pages are available has `next_page_token` set. This token can be used in a subsequent request to retrieve the next request page.
message ListProjectsResponse {
  // Pagination token. If the result set is too large to fit in a single response, this token is returned. It encodes the position of the current result cursor. Feeding this value into a new list request with the `page_token` parameter gives the next page of the results. When `next_page_token` is not filled in, there is no next page and the list returned is the last page in the result set. Pagination tokens have a limited lifetime.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // The list of Projects that matched the list filter. This list can be paginated.
  repeated Project projects = 2 [json_name="projects"];
}

// Metadata pertaining to the folder move process.
message MoveFolderMetadata {
  // The resource name of the folder or organization to move the folder to.
  optional string destination_parent = 1 [json_name="destinationParent"];
  // The display name of the folder.
  optional string display_name = 2 [json_name="displayName"];
  // The resource name of the folder's parent.
  optional string source_parent = 3 [json_name="sourceParent"];
}

// A status object which is used as the `metadata` field for the Operation returned by MoveProject.
message MoveProjectMetadata {
}

// Defines a Cloud Organization `Policy` which is used to specify `Constraints` for configurations of Cloud Platform resources.
message OrgPolicy {
  // For boolean `Constraints`, whether to enforce the `Constraint` or not.
  optional BooleanPolicy boolean_policy = 1 [json_name="booleanPolicy"];
  // The name of the `Constraint` the `Policy` is configuring, for example, `constraints/serviceuser.services`. A [list of available constraints](/resource-manager/docs/organization-policy/org-policy-constraints) is available. Immutable after creation.
  optional string constraint = 2 [json_name="constraint"];
  // An opaque tag indicating the current version of the `Policy`, used for concurrency control. When the `Policy` is returned from either a `GetPolicy` or a `ListOrgPolicy` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset. When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value that was returned from a `GetOrgPolicy` request as part of a read-modify-write loop for concurrency control. Not setting the `etag`in a `SetOrgPolicy` request will result in an unconditional write of the `Policy`.
  optional bytes etag = 3 [json_name="etag"];
  // List of values either allowed or disallowed.
  optional ListPolicy list_policy = 4 [json_name="listPolicy"];
  // Restores the default behavior of the constraint; independent of `Constraint` type.
  optional RestoreDefault restore_default = 5 [json_name="restoreDefault"];
  // The time stamp the `Policy` was previously updated. This is set by the server, not specified by the caller, and represents the last time a call to `SetOrgPolicy` was made for that `Policy`. Any value set by the client will be ignored.
  optional .google.protobuf.Timestamp update_time = 6 [json_name="updateTime"];
  // Version of the `Policy`. Default version is 0;
  optional int32 version = 7 [json_name="version"];
}

// The root node in the resource hierarchy to which a particular entity's (e.g., company) resources belong.
message Organization {
  // Timestamp when the Organization was created. Assigned by the server.
  optional .google.protobuf.Timestamp creation_time = 1 [json_name="creationTime"];
  // A human-readable string that refers to the Organization in the Google Cloud console. This string is set by the server and cannot be changed. The string will be set to the primary domain (for example, "google.com") of the G Suite customer that owns the organization.
  optional string display_name = 2 [json_name="displayName"];
  // The organization's current lifecycle state. Assigned by the server.
  optional string lifecycle_state = 3 [json_name="lifecycleState"];
  // Output only. The resource name of the organization. This is the organization's relative path in the API. Its format is "organizations/[organization_id]". For example, "organizations/1234".
  optional string name = 4 [json_name="name"];
  // The owner of this Organization. The owner should be specified on creation. Once set, it cannot be changed. This field is required.
  optional OrganizationOwner owner = 5 [json_name="owner"];
}

// The entity that owns an Organization. The lifetime of the Organization and all of its descendants are bound to the `OrganizationOwner`. If the `OrganizationOwner` is deleted, the Organization and all its descendants will be deleted.
message OrganizationOwner {
  // The G Suite customer id used in the Directory API.
  optional string directory_customer_id = 1 [json_name="directoryCustomerId"];
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
message Policy {
  // Specifies cloud audit logging configuration for this policy.
  repeated AuditConfig audit_configs = 1 [json_name="auditConfigs"];
  // Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
  repeated Binding bindings = 2 [json_name="bindings"];
  // `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
  optional bytes etag = 3 [json_name="etag"];
  // Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional int32 version = 4 [json_name="version"];
}

// A Project is a high-level Google Cloud Platform entity. It is a container for ACLs, APIs, App Engine Apps, VMs, and other Google Cloud Platform resources.
message Project {
  // Output only. If this project is a Management Project, list of capabilities configured on the parent folder. Note, presence of any capability implies that this is a Management Project. Example: `folders/123/capabilities/app-management`. OUTPUT ONLY.
  repeated string configured_capabilities = 1 [json_name="configuredCapabilities"];
  // Creation time. Read-only.
  optional .google.protobuf.Timestamp create_time = 2 [json_name="createTime"];
  // The labels associated with this Project. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: a-z{0,62}. Label values must be between 0 and 63 characters long and must conform to the regular expression [a-z0-9_-]{0,63}. A label value can be empty. No more than 256 labels can be associated with a given resource. Clients should store labels in a representation such as JSON that does not depend on specific characters being disallowed. Example: "environment" : "dev" Read-write.
  map<string, string> labels = 3 [json_name="labels"];
  // The Project lifecycle state. Read-only.
  optional string lifecycle_state = 4 [json_name="lifecycleState"];
  // The optional user-assigned display name of the Project. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `My Project` Read-write.
  optional string name = 5 [json_name="name"];
  // An optional reference to a parent Resource. Supported parent types include "organization" and "folder". Once set, the parent cannot be cleared. The `parent` can be set on creation or using the `UpdateProject` method; the end user must have the `resourcemanager.projects.create` permission on the parent.
  optional ResourceId parent = 6 [json_name="parent"];
  // The unique, user-assigned ID of the Project. It must be 6 to 30 lowercase letters, digits, or hyphens. It must start with a letter. Trailing hyphens are prohibited. Example: `tokyo-rain-123` Read-only after creation.
  optional string project_id = 7 [json_name="projectId"];
  // The number uniquely identifying the project. Example: `415104041262` Read-only.
  optional int64 project_number = 8 [json_name="projectNumber"];
  // Optional. Input only. Immutable. Tag keys/values directly bound to this project. Each item in the map must be expressed as " : ". For example: "123/environment" : "production", "123/costCenter" : "marketing" Note: Currently this field is in Preview.
  map<string, string> tags = 9 [json_name="tags"];
}

// A status object which is used as the `metadata` field for the Operation returned by CreateProject. It provides insight for when significant phases of Project creation have completed.
message ProjectCreationStatus {
  // Creation time of the project creation workflow.
  optional .google.protobuf.Timestamp create_time = 1 [json_name="createTime"];
  // True if the project can be retrieved using GetProject. No other operations on the project are guaranteed to work until the project creation is complete.
  optional bool gettable = 2 [json_name="gettable"];
  // True if the project creation process is complete.
  optional bool ready = 3 [json_name="ready"];
}

// A container to reference an id for any resource type. A `resource` in Google Cloud Platform is a generic term for something you (a developer) may want to interact with through one of our API's. Some examples are an App Engine app, a Compute Engine instance, a Cloud SQL database, and so on.
message ResourceId {
  // The type-specific id. This should correspond to the id used in the type-specific API's.
  optional string id = 1 [json_name="id"];
  // The resource type this id is for. At present, the valid types are: "organization", "folder", and "project".
  optional string type = 2 [json_name="type"];
}

// Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. Suppose that `constraint_default` is set to `ALLOW` for the `Constraint` `constraints/serviceuser.services`. Suppose that organization foo.com sets a `Policy` at their Organization resource node that restricts the allowed service activations to deny all service activations. They could then set a `Policy` with the `policy_type` `restore_default` on several experimental projects, restoring the `constraint_default` enforcement of the `Constraint` for only those projects, allowing those projects to have all services activated.
message RestoreDefault {
}

// The request sent to the `SearchOrganizations` method.
message SearchOrganizationsRequest {
  // An optional query string used to filter the Organizations to return in the response. Filter rules are case-insensitive. Organizations may be filtered by `owner.directoryCustomerId` or by `domain`, where the domain is a verified G Suite domain, for example: * Filter `owner.directorycustomerid:123456789` returns Organization resources with `owner.directory_customer_id` equal to `123456789`. * Filter `domain:google.com` returns Organization resources corresponding to the domain `google.com`. This field is optional.
  optional string filter = 1 [json_name="filter"];
  // The maximum number of Organizations to return in the response. The server can return fewer organizations than requested. If unspecified, server picks an appropriate default.
  optional int32 page_size = 2 [json_name="pageSize"];
  // A pagination token returned from a previous call to `SearchOrganizations` that indicates from where listing should continue. This field is optional.
  optional string page_token = 3 [json_name="pageToken"];
}

// The response returned from the `SearchOrganizations` method.
message SearchOrganizationsResponse {
  // A pagination token to be used to retrieve the next page of results. If the result is too large to fit within the page size specified in the request, this field will be set with a token that can be used to fetch the next page of results. If this field is empty, it indicates that this response contains the last page of results.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // The list of Organizations that matched the search query, possibly paginated.
  repeated Organization organizations = 2 [json_name="organizations"];
}

// Request message for `SetIamPolicy` method.
message SetIamPolicyRequest {
  // REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.
  optional Policy policy = 1 [json_name="policy"];
  // OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
  optional string update_mask = 2 [json_name="updateMask"];
}

// The request sent to the SetOrgPolicyRequest method.
message SetOrgPolicyRequest {
  // `Policy` to set on the resource.
  optional OrgPolicy policy = 1 [json_name="policy"];
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
message Status {
  // The status code, which should be an enum value of google.rpc.Code.
  optional int32 code = 1 [json_name="code"];
  // A list of messages that carry the error details. There is a common set of message types for APIs to use.
  repeated .google.protobuf.Any details = 2 [json_name="details"];
  // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
  optional string message = 3 [json_name="message"];
}

// Request message for `TestIamPermissions` method.
message TestIamPermissionsRequest {
  // The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
  repeated string permissions = 1 [json_name="permissions"];
}

// Response message for `TestIamPermissions` method.
message TestIamPermissionsResponse {
  // A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
  repeated string permissions = 1 [json_name="permissions"];
}

// A status object which is used as the `metadata` field for the `Operation` returned by `UndeleteFolder`.
message UndeleteFolderMetadata {
}

// A status object which is used as the `metadata` field for the Operation returned by UndeleteOrganization.
message UndeleteOrganizationMetadata {
}

// A status object which is used as the `metadata` field for the Operation returned by `UndeleteProject`.
message UndeleteProjectMetadata {
}

// The request sent to the UndeleteProject method.
message UndeleteProjectRequest {
}

// A status object which is used as the `metadata` field for the Operation returned by UpdateFolder.
message UpdateFolderMetadata {
}

// A status object which is used as the `metadata` field for the Operation returned by UpdateProject.
message UpdateProjectMetadata {
}

// Runtime operation information for updating a TagKey.
message UpdateTagKeyMetadata {
}

// Runtime operation information for updating a TagValue.
message UpdateTagValueMetadata {
}

message ClearOrgPolicyFolderRequest {
  optional string resource = 1;
  optional ClearOrgPolicyRequest folder = 2;
}

message GetEffectiveOrgPolicyFolderRequest {
  optional string resource = 1;
  optional GetEffectiveOrgPolicyRequest folder = 2;
}

message GetOrgPolicyFolderRequest {
  optional string resource = 1;
  optional GetOrgPolicyRequest folder = 2;
}

message ListAvailableOrgPolicyConstraintsFolderRequest {
  optional string resource = 1;
  optional ListAvailableOrgPolicyConstraintsRequest folder = 2;
}

message ListOrgPoliciesFolderRequest {
  optional string resource = 1;
  optional ListOrgPoliciesRequest folder = 2;
}

message SetOrgPolicyFolderRequest {
  optional string resource = 1;
  optional SetOrgPolicyRequest folder = 2;
}

message CreateLienRequest {
  optional Lien lien = 1;
}

message DeleteLienRequest {
  optional string name = 1;
}

message GetLienRequest {
  optional string name = 1;
}

message ListLiensRequest {
  optional int32 page_size = 1;
  optional string page_token = 2;
  optional string parent = 3;
}

message ClearOrgPolicyOrganizationRequest {
  optional string resource = 1;
  optional ClearOrgPolicyRequest organization = 2;
}

message GetOrganizationRequest {
  optional string name = 1;
}

message GetEffectiveOrgPolicyOrganizationRequest {
  optional string resource = 1;
  optional GetEffectiveOrgPolicyRequest organization = 2;
}

message GetOrgPolicyOrganizationRequest {
  optional string resource = 1;
  optional GetOrgPolicyRequest organization = 2;
}

message ListAvailableOrgPolicyConstraintsOrganizationRequest {
  optional string resource = 1;
  optional ListAvailableOrgPolicyConstraintsRequest organization = 2;
}

message ListOrgPoliciesOrganizationRequest {
  optional string resource = 1;
  optional ListOrgPoliciesRequest organization = 2;
}

message SearchOrganizationRequest {
  optional SearchOrganizationsRequest organization = 1;
}

message SetOrgPolicyOrganizationRequest {
  optional string resource = 1;
  optional SetOrgPolicyRequest organization = 2;
}

message ClearOrgPolicyProjectRequest {
  optional string resource = 1;
  optional ClearOrgPolicyRequest project = 2;
}

message CreateProjectRequest {
  optional Project project = 1;
}

message DeleteProjectRequest {
  optional string project_id = 1;
}

message GetProjectRequest {
  optional string project_id = 1;
}

message GetAncestryProjectRequest {
  optional string project_id = 1;
  optional GetAncestryRequest project = 2;
}

message GetEffectiveOrgPolicyProjectRequest {
  optional string resource = 1;
  optional GetEffectiveOrgPolicyRequest project = 2;
}

message GetOrgPolicyProjectRequest {
  optional string resource = 1;
  optional GetOrgPolicyRequest project = 2;
}

message ListProjectsRequest {
  optional string filter = 1;
  optional int32 page_size = 2;
  optional string page_token = 3;
}

message ListAvailableOrgPolicyConstraintsProjectRequest {
  optional string resource = 1;
  optional ListAvailableOrgPolicyConstraintsRequest project = 2;
}

message ListOrgPoliciesProjectRequest {
  optional string resource = 1;
  optional ListOrgPoliciesRequest project = 2;
}

message SetOrgPolicyProjectRequest {
  optional string resource = 1;
  optional SetOrgPolicyRequest project = 2;
}

message UndeleteProjectServiceRequest {
  optional string project_id = 1;
  optional UndeleteProjectRequest project = 2;
}

message UpdateProjectRequest {
  optional string project_id = 1;
  optional Project project = 2;
}
