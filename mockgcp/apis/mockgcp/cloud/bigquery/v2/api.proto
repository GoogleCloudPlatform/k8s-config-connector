// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
package mockgcp.cloud.bigquery.v2;
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
option go_package = "cloud.google.com/go/bigquery/apiv2/bigquerypb;bigquerypb";

service DatasetsServer {

  // Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.
  rpc DeleteDataset(DeleteDatasetRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}"
    };
  };

  // Returns the dataset specified by datasetID.
  rpc GetDataset(GetDatasetRequest) returns (Dataset) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}"
    };
  };

  // Creates a new empty dataset.
  rpc InsertDataset(InsertDatasetRequest) returns (Dataset) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/datasets"
      body: "dataset"
    };
  };

  // Lists all datasets in the specified project to which the user has been granted the READER dataset role.
  rpc ListDatasets(ListDatasetsRequest) returns (DatasetList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets"
    };
  };

  // Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports RFC5789 patch semantics.
  rpc PatchDataset(PatchDatasetRequest) returns (Dataset) {
    option (google.api.http) = {
      patch: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}"
      body: "dataset"
    };
  };

  // Undeletes a dataset which is within time travel window based on datasetId. If a time is specified, the dataset version deleted at that time is undeleted, else the last live version is undeleted.
  rpc UndeleteDataset(UndeleteDatasetServiceRequest) returns (Dataset) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}:undelete"
      body: "dataset"
    };
  };

  // Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource.
  rpc UpdateDataset(UpdateDatasetRequest) returns (Dataset) {
    option (google.api.http) = {
      put: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}"
      body: "dataset"
    };
  };
}

service JobsServer {

  // Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs.
  rpc CancelJob(CancelJobRequest) returns (JobCancelResponse) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/jobs/{job_id=*}/cancel"
    };
  };

  // Requests the deletion of the metadata of a job. This call returns when the job's metadata is deleted.
  rpc DeleteJob(DeleteJobRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id=*}/jobs/{job_id=*}/delete"
    };
  };

  // Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.
  rpc GetJob(GetJobRequest) returns (Job) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/jobs/{job_id=*}"
    };
  };

  // RPC to get the results of a query job.
  rpc GetQueryResultsJob(GetQueryResultsJobRequest) returns (GetQueryResultsResponse) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/queries/{job_id=*}"
    };
  };

  // Starts a new asynchronous job. This API has two different kinds of endpoint URIs, as this method supports a variety of use cases. * The *Metadata* URI is used for most interactions, as it accepts the job configuration directly. * The *Upload* URI is ONLY for the case when you're sending both a load job configuration and a data stream together. In this case, the Upload URI accepts the job configuration and the data as two distinct multipart MIME parts.
  rpc InsertJob(InsertJobRequest) returns (Job) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/jobs"
      body: "job"
    };
  };

  // Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.
  rpc ListJobs(ListJobsRequest) returns (JobList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/jobs"
    };
  };

  // Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.
  rpc QueryJob(QueryJobRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/queries"
      body: "job"
    };
  };
}

service ModelsServer {

  // Deletes the model specified by modelId from the dataset.
  rpc DeleteModel(DeleteModelRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/models/{model_id=*}"
    };
  };

  // Gets the specified model resource by model ID.
  rpc GetModel(GetModelRequest) returns (Model) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/models/{model_id=*}"
    };
  };

  // Lists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method.
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/models"
    };
  };

  // Patch specific fields in the specified model.
  rpc PatchModel(PatchModelRequest) returns (Model) {
    option (google.api.http) = {
      patch: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/models/{model_id=*}"
      body: "model"
    };
  };
}

service ProjectsServer {

  // RPC to get the service account for a project used for interactions with Google Cloud KMS
  rpc GetServiceAccountProject(GetServiceAccountProjectRequest) returns (GetServiceAccountResponse) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/serviceAccount"
    };
  };

  // RPC to list projects to which the user has been granted any project role. Users of this method are encouraged to consider the [Resource Manager](https://cloud.google.com/resource-manager/docs/) API, which provides the underlying data for this method and has more capabilities.
  rpc ListProjects(ListProjectsRequest) returns (ProjectList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects"
    };
  };
}

service RoutinesServer {

  // Deletes the routine specified by routineId from the dataset.
  rpc DeleteRoutine(DeleteRoutineRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/routines/{routine_id=*}"
    };
  };

  // Gets the specified routine resource by routine ID.
  rpc GetRoutine(GetRoutineRequest) returns (Routine) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/routines/{routine_id=*}"
    };
  };

  // Creates a new routine in the dataset.
  rpc InsertRoutine(InsertRoutineRequest) returns (Routine) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/routines"
      body: "routine"
    };
  };

  // Lists all routines in the specified dataset. Requires the READER dataset role.
  rpc ListRoutines(ListRoutinesRequest) returns (ListRoutinesResponse) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/routines"
    };
  };

  // Updates information in an existing routine. The update method replaces the entire Routine resource.
  rpc UpdateRoutine(UpdateRoutineRequest) returns (Routine) {
    option (google.api.http) = {
      put: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/routines/{routine_id=*}"
      body: "routine"
    };
  };
}

service RowAccessPoliciesServer {

  // Lists all row access policies on the specified table.
  rpc ListRowAccessPolicies(ListRowAccessPoliciesRequest) returns (ListRowAccessPoliciesResponse) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}/rowAccessPolicies"
    };
  };
}

service TabledataServer {

  // Streams data into BigQuery one record at a time without needing to run a load job.
  rpc InsertAllTabledata(InsertAllTabledataRequest) returns (TableDataInsertAllResponse) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}/insertAll"
      body: "tabledata"
    };
  };

  // List the content of a table in rows.
  rpc ListTabledata(ListTabledataRequest) returns (TableDataList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}/data"
    };
  };
}

service TablesServer {

  // Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.
  rpc DeleteTable(DeleteTableRequest) returns (.google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}"
    };
  };

  // Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.
  rpc GetTable(GetTableRequest) returns (Table) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}"
    };
  };

  // Creates a new, empty table in the dataset.
  rpc InsertTable(InsertTableRequest) returns (Table) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables"
      body: "table"
    };
  };

  // Lists all tables in the specified dataset. Requires the READER dataset role.
  rpc ListTables(ListTablesRequest) returns (TableList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables"
    };
  };

  // Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports RFC5789 patch semantics.
  rpc PatchTable(PatchTableRequest) returns (Table) {
    option (google.api.http) = {
      patch: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}"
      body: "table"
    };
  };

  // Updates information in an existing table. The update method replaces the entire Table resource, whereas the patch method only replaces fields that are provided in the submitted Table resource.
  rpc UpdateTable(UpdateTableRequest) returns (Table) {
    option (google.api.http) = {
      put: "/bigquery/v2/projects/{project_id=*}/datasets/{dataset_id=*}/tables/{table_id=*}"
      body: "table"
    };
  };
}

// Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
message AggregateClassificationMetrics {
  // Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
  optional double accuracy = 1 [json_name="accuracy"];
  // The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
  optional double f1_score = 2 [json_name="f1Score"];
  // Logarithmic Loss. For multiclass this is a macro-averaged metric.
  optional double log_loss = 3 [json_name="logLoss"];
  // Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
  optional double precision = 4 [json_name="precision"];
  // Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
  optional double recall = 5 [json_name="recall"];
  // Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
  optional double roc_auc = 6 [json_name="rocAuc"];
  // Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
  optional double threshold = 7 [json_name="threshold"];
}

// Represents privacy policy associated with "aggregation threshold" method.
message AggregationThresholdPolicy {
  // Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
  repeated string privacy_unit_columns = 1 [json_name="privacyUnitColumns"];
  // Optional. The threshold for the "aggregation threshold" policy.
  optional int64 threshold = 2 [json_name="threshold"];
}

// Input/output argument of a function or a stored procedure.
message Argument {
  // Optional. Defaults to FIXED_TYPE.
  optional string argument_kind = 1 [json_name="argumentKind"];
  // Set if argument_kind == FIXED_TYPE.
  optional StandardSqlDataType data_type = 2 [json_name="dataType"];
  // Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
  optional bool is_aggregate = 3 [json_name="isAggregate"];
  // Optional. Specifies whether the argument is input or output. Can be set for procedures only.
  optional string mode = 4 [json_name="mode"];
  // Optional. The name of this argument. Can be absent for function return argument.
  optional string name = 5 [json_name="name"];
}

// Arima coefficients.
message ArimaCoefficients {
  // Auto-regressive coefficients, an array of double.
  repeated double auto_regressive_coefficients = 1 [json_name="autoRegressiveCoefficients"];
  // Intercept coefficient, just a double not an array.
  optional double intercept_coefficient = 2 [json_name="interceptCoefficient"];
  // Moving-average coefficients, an array of double.
  repeated double moving_average_coefficients = 3 [json_name="movingAverageCoefficients"];
}

// ARIMA model fitting metrics.
message ArimaFittingMetrics {
  // AIC.
  optional double aic = 1 [json_name="aic"];
  // Log-likelihood.
  optional double log_likelihood = 2 [json_name="logLikelihood"];
  // Variance.
  optional double variance = 3 [json_name="variance"];
}

// Model evaluation metrics for ARIMA forecasting models.
message ArimaForecastingMetrics {
  // Arima model fitting metrics.
  repeated ArimaFittingMetrics arima_fitting_metrics = 1 [json_name="arimaFittingMetrics"];
  // Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
  repeated ArimaSingleModelForecastingMetrics arima_single_model_forecasting_metrics = 2 [json_name="arimaSingleModelForecastingMetrics"];
  // Whether Arima model fitted with drift or not. It is always false when d is not 1.
  repeated bool has_drift = 3 [json_name="hasDrift"];
  // Non-seasonal order.
  repeated ArimaOrder non_seasonal_order = 4 [json_name="nonSeasonalOrder"];
  // Seasonal periods. Repeated because multiple periods are supported for one time series.
  repeated string seasonal_periods = 5 [json_name="seasonalPeriods"];
  // Id to differentiate different time series for the large-scale case.
  repeated string time_series_id = 6 [json_name="timeSeriesId"];
}

// Arima model information.
message ArimaModelInfo {
  // Arima coefficients.
  optional ArimaCoefficients arima_coefficients = 1 [json_name="arimaCoefficients"];
  // Arima fitting metrics.
  optional ArimaFittingMetrics arima_fitting_metrics = 2 [json_name="arimaFittingMetrics"];
  // Whether Arima model fitted with drift or not. It is always false when d is not 1.
  optional bool has_drift = 3 [json_name="hasDrift"];
  // If true, holiday_effect is a part of time series decomposition result.
  optional bool has_holiday_effect = 4 [json_name="hasHolidayEffect"];
  // If true, spikes_and_dips is a part of time series decomposition result.
  optional bool has_spikes_and_dips = 5 [json_name="hasSpikesAndDips"];
  // If true, step_changes is a part of time series decomposition result.
  optional bool has_step_changes = 6 [json_name="hasStepChanges"];
  // Non-seasonal order.
  optional ArimaOrder non_seasonal_order = 7 [json_name="nonSeasonalOrder"];
  // Seasonal periods. Repeated because multiple periods are supported for one time series.
  repeated string seasonal_periods = 8 [json_name="seasonalPeriods"];
  // The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
  optional string time_series_id = 9 [json_name="timeSeriesId"];
  // The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
  repeated string time_series_ids = 10 [json_name="timeSeriesIds"];
}

// Arima order, can be used for both non-seasonal and seasonal parts.
message ArimaOrder {
  // Order of the differencing part.
  optional int64 d = 1 [json_name="d"];
  // Order of the autoregressive part.
  optional int64 p = 2 [json_name="p"];
  // Order of the moving-average part.
  optional int64 q = 3 [json_name="q"];
}

// (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
message ArimaResult {
  // This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.
  repeated ArimaModelInfo arima_model_info = 1 [json_name="arimaModelInfo"];
  // Seasonal periods. Repeated because multiple periods are supported for one time series.
  repeated string seasonal_periods = 2 [json_name="seasonalPeriods"];
}

// Model evaluation metrics for a single ARIMA forecasting model.
message ArimaSingleModelForecastingMetrics {
  // Arima fitting metrics.
  optional ArimaFittingMetrics arima_fitting_metrics = 1 [json_name="arimaFittingMetrics"];
  // Is arima model fitted with drift or not. It is always false when d is not 1.
  optional bool has_drift = 2 [json_name="hasDrift"];
  // If true, holiday_effect is a part of time series decomposition result.
  optional bool has_holiday_effect = 3 [json_name="hasHolidayEffect"];
  // If true, spikes_and_dips is a part of time series decomposition result.
  optional bool has_spikes_and_dips = 4 [json_name="hasSpikesAndDips"];
  // If true, step_changes is a part of time series decomposition result.
  optional bool has_step_changes = 5 [json_name="hasStepChanges"];
  // Non-seasonal order.
  optional ArimaOrder non_seasonal_order = 6 [json_name="nonSeasonalOrder"];
  // Seasonal periods. Repeated because multiple periods are supported for one time series.
  repeated string seasonal_periods = 7 [json_name="seasonalPeriods"];
  // The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
  optional string time_series_id = 8 [json_name="timeSeriesId"];
  // The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
  repeated string time_series_ids = 9 [json_name="timeSeriesIds"];
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
message AuditConfig {
  // The configuration for logging of each type of permission.
  repeated AuditLogConfig audit_log_configs = 1 [json_name="auditLogConfigs"];
  // Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
  optional string service = 2 [json_name="service"];
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
message AuditLogConfig {
  // Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
  repeated string exempted_members = 1 [json_name="exemptedMembers"];
  // The log type that this config enables.
  optional string log_type = 2 [json_name="logType"];
}

// Options for external data sources.
message AvroOptions {
  // Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
  optional bool use_avro_logical_types = 1 [json_name="useAvroLogicalTypes"];
}

// Reason why BI Engine didn't accelerate the query (or sub-query).
message BiEngineReason {
  // Output only. High-level BI Engine reason for partial or disabled acceleration
  optional string code = 1 [json_name="code"];
  // Output only. Free form human-readable reason for partial or disabled acceleration.
  optional string message = 2 [json_name="message"];
}

// Statistics for a BI Engine specific query. Populated as part of JobStatistics2
message BiEngineStatistics {
  // Output only. Specifies which mode of BI Engine acceleration was performed (if any).
  optional string acceleration_mode = 1 [json_name="accelerationMode"];
  // Output only. Specifies which mode of BI Engine acceleration was performed (if any).
  optional string bi_engine_mode = 2 [json_name="biEngineMode"];
  // In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
  repeated BiEngineReason bi_engine_reasons = 3 [json_name="biEngineReasons"];
}

// Configuration for BigLake managed tables.
message BigLakeConfiguration {
  // Optional. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form `{project}.{location}.{connection_id}` or `projects/{project}/locations/{location}/connections/{connection_id}".
  optional string connection_id = 1 [json_name="connectionId"];
  // Optional. The file format the table data is stored in.
  optional string file_format = 2 [json_name="fileFormat"];
  // Optional. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format `gs://bucket/path_to_table/`
  optional string storage_uri = 3 [json_name="storageUri"];
  // Optional. The table format the metadata only snapshots are stored in.
  optional string table_format = 4 [json_name="tableFormat"];
}

message BigQueryModelTraining {
  // Deprecated.
  optional int32 current_iteration = 1 [json_name="currentIteration"];
  // Deprecated.
  optional int64 expected_total_iterations = 2 [json_name="expectedTotalIterations"];
}

// Information related to a Bigtable column.
message BigtableColumn {
  // Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
  optional string encoding = 1 [json_name="encoding"];
  // Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
  optional string field_name = 2 [json_name="fieldName"];
  // Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
  optional bool only_read_latest = 3 [json_name="onlyReadLatest"];
  // [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as `.` field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
  optional bytes qualifier_encoded = 4 [json_name="qualifierEncoded"];
  // Qualifier string.
  optional string qualifier_string = 5 [json_name="qualifierString"];
  // Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
  optional string type = 6 [json_name="type"];
}

// Information related to a Bigtable column family.
message BigtableColumnFamily {
  // Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as `.`. Other columns can be accessed as a list through the `.Column` field.
  repeated BigtableColumn columns = 1 [json_name="columns"];
  // Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
  optional string encoding = 2 [json_name="encoding"];
  // Identifier of the column family.
  optional string family_id = 3 [json_name="familyId"];
  // Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
  optional bool only_read_latest = 4 [json_name="onlyReadLatest"];
  // Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
  optional string type = 5 [json_name="type"];
}

// Options specific to Google Cloud Bigtable data sources.
message BigtableOptions {
  // Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
  repeated BigtableColumnFamily column_families = 1 [json_name="columnFamilies"];
  // Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
  optional bool ignore_unspecified_column_families = 2 [json_name="ignoreUnspecifiedColumnFamilies"];
  // Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
  optional bool output_column_families_as_json = 3 [json_name="outputColumnFamiliesAsJson"];
  // Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
  optional bool read_rowkey_as_string = 4 [json_name="readRowkeyAsString"];
}

// Evaluation metrics for binary classification/classifier models.
message BinaryClassificationMetrics {
  // Aggregate classification metrics.
  optional AggregateClassificationMetrics aggregate_classification_metrics = 1 [json_name="aggregateClassificationMetrics"];
  // Binary confusion matrix at multiple thresholds.
  repeated BinaryConfusionMatrix binary_confusion_matrix_list = 2 [json_name="binaryConfusionMatrixList"];
  // Label representing the negative class.
  optional string negative_label = 3 [json_name="negativeLabel"];
  // Label representing the positive class.
  optional string positive_label = 4 [json_name="positiveLabel"];
}

// Confusion matrix for binary classification models.
message BinaryConfusionMatrix {
  // The fraction of predictions given the correct label.
  optional double accuracy = 1 [json_name="accuracy"];
  // The equally weighted average of recall and precision.
  optional double f1_score = 2 [json_name="f1Score"];
  // Number of false samples predicted as false.
  optional int64 false_negatives = 3 [json_name="falseNegatives"];
  // Number of false samples predicted as true.
  optional int64 false_positives = 4 [json_name="falsePositives"];
  // Threshold value used when computing each of the following metric.
  optional double positive_class_threshold = 5 [json_name="positiveClassThreshold"];
  // The fraction of actual positive predictions that had positive actual labels.
  optional double precision = 6 [json_name="precision"];
  // The fraction of actual positive labels that were given a positive prediction.
  optional double recall = 7 [json_name="recall"];
  // Number of true samples predicted as false.
  optional int64 true_negatives = 8 [json_name="trueNegatives"];
  // Number of true samples predicted as true.
  optional int64 true_positives = 9 [json_name="truePositives"];
}

// Associates `members`, or principals, with a `role`.
message Binding {
  // The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional Expr condition = 1 [json_name="condition"];
  // Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
  repeated string members = 2 [json_name="members"];
  // Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
  optional string role = 3 [json_name="role"];
}

message BqmlIterationResult {
  // Deprecated.
  optional int64 duration_ms = 1 [json_name="durationMs"];
  // Deprecated.
  optional double eval_loss = 2 [json_name="evalLoss"];
  // Deprecated.
  optional int32 index = 3 [json_name="index"];
  // Deprecated.
  optional double learn_rate = 4 [json_name="learnRate"];
  // Deprecated.
  optional double training_loss = 5 [json_name="trainingLoss"];
}

message BqmlTrainingRunTrainingOptions {
  optional bool early_stop = 1 [json_name="earlyStop"];
  optional double l1_reg = 2 [json_name="l1Reg"];
  optional double l2_reg = 3 [json_name="l2Reg"];
  optional double learn_rate = 4 [json_name="learnRate"];
  optional string learn_rate_strategy = 5 [json_name="learnRateStrategy"];
  optional double line_search_init_learn_rate = 6 [json_name="lineSearchInitLearnRate"];
  optional int64 max_iteration = 7 [json_name="maxIteration"];
  optional double min_rel_progress = 8 [json_name="minRelProgress"];
  optional bool warm_start = 9 [json_name="warmStart"];
}

message BqmlTrainingRun {
  // Deprecated.
  repeated BqmlIterationResult iteration_results = 1 [json_name="iterationResults"];
  // Deprecated.
  optional .google.protobuf.Timestamp start_time = 2 [json_name="startTime"];
  // Deprecated.
  optional string state = 3 [json_name="state"];
  // Deprecated.
  optional BqmlTrainingRunTrainingOptions training_options = 4 [json_name="trainingOptions"];
}

// Representative value of a categorical feature.
message CategoricalValue {
  // Counts of all categories for the categorical feature. If there are more than ten categories, we return top ten (by count) and return one more CategoryCount with category "_OTHER_" and count as aggregate counts of remaining categories.
  repeated CategoryCount category_counts = 1 [json_name="categoryCounts"];
}

// Represents the count of a single category within the cluster.
message CategoryCount {
  // The name of category.
  optional string category = 1 [json_name="category"];
  // The count of training samples matching the category within the cluster.
  optional int64 count = 2 [json_name="count"];
}

// Information about base table and clone time of a table clone.
message CloneDefinition {
  // Required. Reference describing the ID of the table that was cloned.
  optional TableReference base_table_reference = 1 [json_name="baseTableReference"];
  // Required. The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.
  optional .google.protobuf.Timestamp clone_time = 2 [json_name="cloneTime"];
}

// Message containing the information about one cluster.
message Cluster {
  // Centroid id.
  optional int64 centroid_id = 1 [json_name="centroidId"];
  // Count of training data rows that were assigned to this cluster.
  optional int64 count = 2 [json_name="count"];
  // Values of highly variant features for this cluster.
  repeated FeatureValue feature_values = 3 [json_name="featureValues"];
}

// Information about a single cluster for clustering model.
message ClusterInfo {
  // Centroid id.
  optional int64 centroid_id = 1 [json_name="centroidId"];
  // Cluster radius, the average distance from centroid to each point assigned to the cluster.
  optional double cluster_radius = 2 [json_name="clusterRadius"];
  // Cluster size, the total number of points assigned to the cluster.
  optional int64 cluster_size = 3 [json_name="clusterSize"];
}

// Configures table clustering.
message Clustering {
  // One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. For additional information, see [Introduction to clustered tables](https://cloud.google.com/bigquery/docs/clustered-tables#limitations).
  repeated string fields = 1 [json_name="fields"];
}

// Evaluation metrics for clustering models.
message ClusteringMetrics {
  // Information for all clusters.
  repeated Cluster clusters = 1 [json_name="clusters"];
  // Davies-Bouldin index.
  optional double davies_bouldin_index = 2 [json_name="daviesBouldinIndex"];
  // Mean of squared distances between each sample to its cluster centroid.
  optional double mean_squared_distance = 3 [json_name="meanSquaredDistance"];
}

// Confusion matrix for multi-class classification models.
message ConfusionMatrix {
  // Confidence threshold used when computing the entries of the confusion matrix.
  optional double confidence_threshold = 1 [json_name="confidenceThreshold"];
  // One row per actual label.
  repeated Row rows = 2 [json_name="rows"];
}

// A connection-level property to customize query behavior. Under JDBC, these correspond directly to connection properties passed to the DriverManager. Under ODBC, these correspond to properties in the connection string. Currently supported connection properties: * **dataset_project_id**: represents the default project for datasets that are used in the query. Setting the system variable `@@dataset_project_id` achieves the same behavior. For more information about system variables, see: https://cloud.google.com/bigquery/docs/reference/system-variables * **time_zone**: represents the default timezone used to run the query. * **session_id**: associates the query with a given session. * **query_label**: associates the query with a given job label. If set, all subsequent queries in a script or session will have this label. For the format in which a you can specify a query label, see labels in the JobConfiguration resource type: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration * **service_account**: indicates the service account to use to run a continuous query. If set, the query job uses the service account to access Google Cloud resources. Service account access is bounded by the IAM permissions that you have granted to the service account. Additional properties are allowed, but ignored. Specifying multiple connection properties with the same key returns an error.
message ConnectionProperty {
  // The key of the property to set.
  optional string key = 1 [json_name="key"];
  // The value of the property to set.
  optional string value = 2 [json_name="value"];
}

// Information related to a CSV data source.
message CsvOptions {
  // Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
  optional bool allow_jagged_rows = 1 [json_name="allowJaggedRows"];
  // Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
  optional bool allow_quoted_newlines = 2 [json_name="allowQuotedNewlines"];
  // Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
  optional string encoding = 3 [json_name="encoding"];
  // Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
  optional string field_delimiter = 4 [json_name="fieldDelimiter"];
  // Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when querying a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
  optional string null_marker = 5 [json_name="nullMarker"];
  // Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
  optional bool preserve_ascii_control_characters = 6 [json_name="preserveAsciiControlCharacters"];
  // Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
  optional string quote = 7 [json_name="quote"];
  // Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
  optional int64 skip_leading_rows = 8 [json_name="skipLeadingRows"];
}

// Options for data format adjustments.
message DataFormatOptions {
  // Optional. Output timestamp as usec int64. Default is false.
  optional bool use_int64_timestamp = 1 [json_name="useInt64Timestamp"];
}

// Statistics for data-masking.
message DataMaskingStatistics {
  // Whether any accessed data was protected by the data masking.
  optional bool data_masking_applied = 1 [json_name="dataMaskingApplied"];
}

// Data policy option proto, it currently supports name only, will support precedence later.
message DataPolicyOption {
  // Data policy resource name in the form of projects/project_id/locations/location_id/dataPolicies/data_policy_id.
  optional string name = 1 [json_name="name"];
}

// Data split result. This contains references to the training and evaluation data tables that were used to train the model.
message DataSplitResult {
  // Table reference of the evaluation data after split.
  optional TableReference evaluation_table = 1 [json_name="evaluationTable"];
  // Table reference of the test data after split.
  optional TableReference test_table = 2 [json_name="testTable"];
  // Table reference of the training data after split.
  optional TableReference training_table = 3 [json_name="trainingTable"];
}

message DatasetAccess {
  optional Expr condition = 1 [json_name="condition"];
  optional DatasetAccessEntry dataset = 2 [json_name="dataset"];
  optional string domain = 3 [json_name="domain"];
  optional string group_by_email = 4 [json_name="groupByEmail"];
  optional string iam_member = 5 [json_name="iamMember"];
  optional string role = 6 [json_name="role"];
  optional RoutineReference routine = 7 [json_name="routine"];
  optional string special_group = 8 [json_name="specialGroup"];
  optional string user_by_email = 9 [json_name="userByEmail"];
  optional TableReference view = 10 [json_name="view"];
}

message DatasetTags {
  optional string tag_key = 1 [json_name="tagKey"];
  optional string tag_value = 2 [json_name="tagValue"];
}

// Represents a BigQuery dataset.
message Dataset {
  // Optional. An array of objects that define dataset access for one or more entities. You can set this property when inserting or updating a dataset in order to control who is allowed to access the data. If unspecified at dataset creation time, BigQuery adds default dataset access for the following entities: access.specialGroup: projectReaders; access.role: READER; access.specialGroup: projectWriters; access.role: WRITER; access.specialGroup: projectOwners; access.role: OWNER; access.userByEmail: [dataset creator email]; access.role: OWNER; If you patch a dataset, then this field is overwritten by the patched dataset's access field. To add entities, you must supply the entire existing access array in addition to any new entities that you want to add.
  repeated DatasetAccess access = 1 [json_name="access"];
  // Output only. The time when this dataset was created, in milliseconds since the epoch.
  optional int64 creation_time = 2 [json_name="creationTime"];
  // Required. A reference that identifies the dataset.
  optional DatasetReference dataset_reference = 3 [json_name="datasetReference"];
  // Optional. Defines the default collation specification of future tables created in the dataset. If a table is created in this dataset without table-level default collation, then the table inherits the dataset default collation, which is applied to the string fields that do not have explicit collation specified. A change to this field affects only tables created afterwards, and does not alter the existing tables. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
  optional string default_collation = 4 [json_name="defaultCollation"];
  // The default encryption key for all tables in the dataset. After this property is set, the encryption key of all newly-created tables in the dataset is set to this value unless the table creation request or query explicitly overrides the key.
  optional EncryptionConfiguration default_encryption_configuration = 5 [json_name="defaultEncryptionConfiguration"];
  // This default partition expiration, expressed in milliseconds. When new time-partitioned tables are created in a dataset where this property is set, the table will inherit this value, propagated as the `TimePartitioning.expirationMs` property on the new table. If you set `TimePartitioning.expirationMs` explicitly when creating a table, the `defaultPartitionExpirationMs` of the containing dataset is ignored. When creating a partitioned table, if `defaultPartitionExpirationMs` is set, the `defaultTableExpirationMs` value is ignored and the table will not be inherit a table expiration deadline.
  optional int64 default_partition_expiration_ms = 6 [json_name="defaultPartitionExpirationMs"];
  // Optional. Defines the default rounding mode specification of new tables created within this dataset. During table creation, if this field is specified, the table within this dataset will inherit the default rounding mode of the dataset. Setting the default rounding mode on a table overrides this option. Existing tables in the dataset are unaffected. If columns are defined during that table creation, they will immediately inherit the table's default rounding mode, unless otherwise specified.
  optional string default_rounding_mode = 7 [json_name="defaultRoundingMode"];
  // Optional. The default lifetime of all tables in the dataset, in milliseconds. The minimum lifetime value is 3600000 milliseconds (one hour). To clear an existing default expiration with a PATCH request, set to 0. Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property.
  optional int64 default_table_expiration_ms = 8 [json_name="defaultTableExpirationMs"];
  // Optional. A user-friendly description of the dataset.
  optional string description = 9 [json_name="description"];
  // Output only. A hash of the resource.
  optional string etag = 10 [json_name="etag"];
  // Optional. Options defining open source compatible datasets living in the BigQuery catalog. Contains metadata of open source database, schema or namespace represented by the current dataset.
  optional ExternalCatalogDatasetOptions external_catalog_dataset_options = 11 [json_name="externalCatalogDatasetOptions"];
  // Optional. Reference to a read-only external dataset defined in data catalogs outside of BigQuery. Filled out when the dataset type is EXTERNAL.
  optional ExternalDatasetReference external_dataset_reference = 12 [json_name="externalDatasetReference"];
  // Optional. A descriptive name for the dataset.
  optional string friendly_name = 13 [json_name="friendlyName"];
  // Output only. The fully-qualified unique name of the dataset in the format projectId:datasetId. The dataset name without the project name is given in the datasetId field. When creating a new dataset, leave this field blank, and instead specify the datasetId field.
  optional string id = 14 [json_name="id"];
  // Optional. TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references.
  optional bool is_case_insensitive = 15 [json_name="isCaseInsensitive"];
  // Output only. The resource type.
  optional string kind = 16 [json_name="kind"];
  // The labels associated with this dataset. You can use these to organize and group your datasets. You can set this property when inserting or updating a dataset. See [Creating and Updating Dataset Labels](https://cloud.google.com/bigquery/docs/creating-managing-labels#creating_and_updating_dataset_labels) for more information.
  map<string, string> labels = 17 [json_name="labels"];
  // Output only. The date when this dataset was last modified, in milliseconds since the epoch.
  optional int64 last_modified_time = 18 [json_name="lastModifiedTime"];
  // Output only. Metadata about the LinkedDataset. Filled out when the dataset type is LINKED.
  optional LinkedDatasetMetadata linked_dataset_metadata = 19 [json_name="linkedDatasetMetadata"];
  // Optional. The source dataset reference when the dataset is of type LINKED. For all other dataset types it is not set. This field cannot be updated once it is set. Any attempt to update this field using Update and Patch API Operations will be ignored.
  optional LinkedDatasetSource linked_dataset_source = 20 [json_name="linkedDatasetSource"];
  // The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
  optional string location = 21 [json_name="location"];
  // Optional. Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days). The default value is 168 hours if this is not set.
  optional int64 max_time_travel_hours = 22 [json_name="maxTimeTravelHours"];
  // Optional. The [tags](https://cloud.google.com/bigquery/docs/tags) attached to this dataset. Tag keys are globally unique. Tag key is expected to be in the namespaced format, for example "123456789012/environment" where 123456789012 is the ID of the parent organization or project resource for this tag key. Tag value is expected to be the short name, for example "Production". See [Tag definitions](https://cloud.google.com/iam/docs/tags-access-control#definitions) for more details.
  map<string, string> resource_tags = 23 [json_name="resourceTags"];
  // Optional. Output only. Restriction config for all tables and dataset. If set, restrict certain accesses on the dataset and all its tables based on the config. See [Data egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress) for more details.
  optional RestrictionConfig restrictions = 24 [json_name="restrictions"];
  // Output only. Reserved for future use.
  optional bool satisfies_pzi = 25 [json_name="satisfiesPzi"];
  // Output only. Reserved for future use.
  optional bool satisfies_pzs = 26 [json_name="satisfiesPzs"];
  // Output only. A URL that can be used to access the resource again. You can use this URL in Get or Update requests to the resource.
  optional string self_link = 27 [json_name="selfLink"];
  // Optional. Updates storage_billing_model for the dataset.
  optional string storage_billing_model = 28 [json_name="storageBillingModel"];
  // Output only. Tags for the dataset. To provide tags as inputs, use the `resourceTags` field.
  repeated DatasetTags tags = 29 [json_name="tags"];
  // Output only. Same as `type` in `ListFormatDataset`. The type of the dataset, one of: * DEFAULT - only accessible by owner and authorized accounts, * PUBLIC - accessible by everyone, * LINKED - linked dataset, * EXTERNAL - dataset with definition in external metadata catalog.
  optional string type = 30 [json_name="type"];
}

// Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
message DatasetAccessEntry {
  // The dataset this entry applies to
  optional DatasetReference dataset = 1 [json_name="dataset"];
  // Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
  repeated string target_types = 2 [json_name="targetTypes"];
}

message DatasetListDatasets {
  optional DatasetReference dataset_reference = 1 [json_name="datasetReference"];
  optional string friendly_name = 2 [json_name="friendlyName"];
  optional string id = 3 [json_name="id"];
  optional string kind = 4 [json_name="kind"];
  map<string, string> labels = 5 [json_name="labels"];
  optional string location = 6 [json_name="location"];
}

// Response format for a page of results when listing datasets.
message DatasetList {
  // An array of the dataset resources in the project. Each resource contains basic information. For full information about a particular dataset resource, use the Datasets: get method. This property is omitted when there are no datasets in the project.
  repeated DatasetListDatasets datasets = 1 [json_name="datasets"];
  // Output only. A hash value of the results page. You can use this property to determine if the page has changed since the last request.
  optional string etag = 2 [json_name="etag"];
  // Output only. The resource type. This property always returns the value "bigquery#datasetList"
  optional string kind = 3 [json_name="kind"];
  // A token that can be used to request the next results page. This property is omitted on the final results page.
  optional string next_page_token = 4 [json_name="nextPageToken"];
  // A list of skipped locations that were unreachable. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations. Example: "europe-west5"
  repeated string unreachable = 5 [json_name="unreachable"];
}

// Identifier for a dataset.
message DatasetReference {
  // Required. A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
  optional string dataset_id = 1 [json_name="datasetId"];
  // Optional. The ID of the project containing this dataset.
  optional string project_id = 2 [json_name="projectId"];
}

// Properties for the destination table.
message DestinationTableProperties {
  // Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
  optional string description = 1 [json_name="description"];
  // Internal use only.
  optional .google.protobuf.Timestamp expiration_time = 2 [json_name="expirationTime"];
  // Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
  optional string friendly_name = 3 [json_name="friendlyName"];
  // Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
  map<string, string> labels = 4 [json_name="labels"];
}

// Represents privacy policy associated with "differential privacy" method.
message DifferentialPrivacyPolicy {
  // Optional. The total delta budget for all queries against the privacy-protected view. Each subscriber query against this view charges the amount of delta that is pre-defined by the contributor through the privacy policy delta_per_query field. If there is sufficient budget, then the subscriber query attempts to complete. It might still fail due to other reasons, in which case the charge is refunded. If there is insufficient budget the query is rejected. There might be multiple charge attempts if a single query references multiple views. In this case there must be sufficient budget for all charges or the query is rejected and charges are refunded in best effort. The budget does not have a refresh policy and can only be updated via ALTER VIEW or circumvented by creating a new view that can be queried with a fresh budget.
  optional double delta_budget = 1 [json_name="deltaBudget"];
  // Output only. The delta budget remaining. If budget is exhausted, no more queries are allowed. Note that the budget for queries that are in progress is deducted before the query executes. If the query fails or is cancelled then the budget is refunded. In this case the amount of budget remaining can increase.
  optional double delta_budget_remaining = 2 [json_name="deltaBudgetRemaining"];
  // Optional. The delta value that is used per query. Delta represents the probability that any row will fail to be epsilon differentially private. Indicates the risk associated with exposing aggregate rows in the result of a query.
  optional double delta_per_query = 3 [json_name="deltaPerQuery"];
  // Optional. The total epsilon budget for all queries against the privacy-protected view. Each subscriber query against this view charges the amount of epsilon they request in their query. If there is sufficient budget, then the subscriber query attempts to complete. It might still fail due to other reasons, in which case the charge is refunded. If there is insufficient budget the query is rejected. There might be multiple charge attempts if a single query references multiple views. In this case there must be sufficient budget for all charges or the query is rejected and charges are refunded in best effort. The budget does not have a refresh policy and can only be updated via ALTER VIEW or circumvented by creating a new view that can be queried with a fresh budget.
  optional double epsilon_budget = 4 [json_name="epsilonBudget"];
  // Output only. The epsilon budget remaining. If budget is exhausted, no more queries are allowed. Note that the budget for queries that are in progress is deducted before the query executes. If the query fails or is cancelled then the budget is refunded. In this case the amount of budget remaining can increase.
  optional double epsilon_budget_remaining = 5 [json_name="epsilonBudgetRemaining"];
  // Optional. The maximum epsilon value that a query can consume. If the subscriber specifies epsilon as a parameter in a SELECT query, it must be less than or equal to this value. The epsilon parameter controls the amount of noise that is added to the groups — a higher epsilon means less noise.
  optional double max_epsilon_per_query = 6 [json_name="maxEpsilonPerQuery"];
  // Optional. The maximum groups contributed value that is used per query. Represents the maximum number of groups to which each protected entity can contribute. Changing this value does not improve or worsen privacy. The best value for accuracy and utility depends on the query and data.
  optional int64 max_groups_contributed = 7 [json_name="maxGroupsContributed"];
  // Optional. The privacy unit column associated with this policy. Differential privacy policies can only have one privacy unit column per data source object (table, view).
  optional string privacy_unit_column = 8 [json_name="privacyUnitColumn"];
}

// Model evaluation metrics for dimensionality reduction models.
message DimensionalityReductionMetrics {
  // Total percentage of variance explained by the selected principal components.
  optional double total_explained_variance_ratio = 1 [json_name="totalExplainedVarianceRatio"];
}

// Detailed statistics for DML statements
message DmlStatistics {
  // Output only. Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.
  optional int64 deleted_row_count = 1 [json_name="deletedRowCount"];
  // Output only. Number of inserted Rows. Populated by DML INSERT and MERGE statements
  optional int64 inserted_row_count = 2 [json_name="insertedRowCount"];
  // Output only. Number of updated Rows. Populated by DML UPDATE and MERGE statements.
  optional int64 updated_row_count = 3 [json_name="updatedRowCount"];
}

// Discrete candidates of a double hyperparameter.
message DoubleCandidates {
  // Candidates for the double parameter in increasing order.
  repeated double candidates = 1 [json_name="candidates"];
}

// Search space for a double hyperparameter.
message DoubleHparamSearchSpace {
  // Candidates of the double hyperparameter.
  optional DoubleCandidates candidates = 1 [json_name="candidates"];
  // Range of the double hyperparameter.
  optional DoubleRange range = 2 [json_name="range"];
}

// Range of a double hyperparameter.
message DoubleRange {
  // Max value of the double parameter.
  optional double max = 1 [json_name="max"];
  // Min value of the double parameter.
  optional double min = 2 [json_name="min"];
}

// Configuration for Cloud KMS encryption settings.
message EncryptionConfiguration {
  // Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
  optional string kms_key_name = 1 [json_name="kmsKeyName"];
}

// A single entry in the confusion matrix.
message Entry {
  // Number of items being predicted as this label.
  optional int64 item_count = 1 [json_name="itemCount"];
  // The predicted label. For confidence_threshold > 0, we will also add an entry indicating the number of items under the confidence threshold.
  optional string predicted_label = 2 [json_name="predictedLabel"];
}

// Error details.
message ErrorProto {
  // Debugging information. This property is internal to Google and should not be used.
  optional string debug_info = 1 [json_name="debugInfo"];
  // Specifies where the error occurred, if present.
  optional string location = 2 [json_name="location"];
  // A human-readable description of the error.
  optional string message = 3 [json_name="message"];
  // A short error code that summarizes the error.
  optional string reason = 4 [json_name="reason"];
}

// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
message EvaluationMetrics {
  // Populated for ARIMA models.
  optional ArimaForecastingMetrics arima_forecasting_metrics = 1 [json_name="arimaForecastingMetrics"];
  // Populated for binary classification/classifier models.
  optional BinaryClassificationMetrics binary_classification_metrics = 2 [json_name="binaryClassificationMetrics"];
  // Populated for clustering models.
  optional ClusteringMetrics clustering_metrics = 3 [json_name="clusteringMetrics"];
  // Evaluation metrics when the model is a dimensionality reduction model, which currently includes PCA.
  optional DimensionalityReductionMetrics dimensionality_reduction_metrics = 4 [json_name="dimensionalityReductionMetrics"];
  // Populated for multi-class classification/classifier models.
  optional MultiClassClassificationMetrics multi_class_classification_metrics = 5 [json_name="multiClassClassificationMetrics"];
  // Populated for implicit feedback type matrix factorization models.
  optional RankingMetrics ranking_metrics = 6 [json_name="rankingMetrics"];
  // Populated for regression models and explicit feedback type matrix factorization models.
  optional RegressionMetrics regression_metrics = 7 [json_name="regressionMetrics"];
}

// A single stage of query execution.
message ExplainQueryStage {
  // Number of parallel input segments completed.
  optional int64 completed_parallel_inputs = 1 [json_name="completedParallelInputs"];
  // Output only. Compute mode for this stage.
  optional string compute_mode = 2 [json_name="computeMode"];
  // Milliseconds the average shard spent on CPU-bound tasks.
  optional int64 compute_ms_avg = 3 [json_name="computeMsAvg"];
  // Milliseconds the slowest shard spent on CPU-bound tasks.
  optional int64 compute_ms_max = 4 [json_name="computeMsMax"];
  // Relative amount of time the average shard spent on CPU-bound tasks.
  optional double compute_ratio_avg = 5 [json_name="computeRatioAvg"];
  // Relative amount of time the slowest shard spent on CPU-bound tasks.
  optional double compute_ratio_max = 6 [json_name="computeRatioMax"];
  // Stage end time represented as milliseconds since the epoch.
  optional int64 end_ms = 7 [json_name="endMs"];
  // Unique ID for the stage within the plan.
  optional int64 id = 8 [json_name="id"];
  // IDs for stages that are inputs to this stage.
  repeated int64 input_stages = 9 [json_name="inputStages"];
  // Human-readable name for the stage.
  optional string name = 10 [json_name="name"];
  // Number of parallel input segments to be processed
  optional int64 parallel_inputs = 11 [json_name="parallelInputs"];
  // Milliseconds the average shard spent reading input.
  optional int64 read_ms_avg = 12 [json_name="readMsAvg"];
  // Milliseconds the slowest shard spent reading input.
  optional int64 read_ms_max = 13 [json_name="readMsMax"];
  // Relative amount of time the average shard spent reading input.
  optional double read_ratio_avg = 14 [json_name="readRatioAvg"];
  // Relative amount of time the slowest shard spent reading input.
  optional double read_ratio_max = 15 [json_name="readRatioMax"];
  // Number of records read into the stage.
  optional int64 records_read = 16 [json_name="recordsRead"];
  // Number of records written by the stage.
  optional int64 records_written = 17 [json_name="recordsWritten"];
  // Total number of bytes written to shuffle.
  optional int64 shuffle_output_bytes = 18 [json_name="shuffleOutputBytes"];
  // Total number of bytes written to shuffle and spilled to disk.
  optional int64 shuffle_output_bytes_spilled = 19 [json_name="shuffleOutputBytesSpilled"];
  // Slot-milliseconds used by the stage.
  optional int64 slot_ms = 20 [json_name="slotMs"];
  // Stage start time represented as milliseconds since the epoch.
  optional int64 start_ms = 21 [json_name="startMs"];
  // Current status for this stage.
  optional string status = 22 [json_name="status"];
  // List of operations within the stage in dependency order (approximately chronological).
  repeated ExplainQueryStep steps = 23 [json_name="steps"];
  // Milliseconds the average shard spent waiting to be scheduled.
  optional int64 wait_ms_avg = 24 [json_name="waitMsAvg"];
  // Milliseconds the slowest shard spent waiting to be scheduled.
  optional int64 wait_ms_max = 25 [json_name="waitMsMax"];
  // Relative amount of time the average shard spent waiting to be scheduled.
  optional double wait_ratio_avg = 26 [json_name="waitRatioAvg"];
  // Relative amount of time the slowest shard spent waiting to be scheduled.
  optional double wait_ratio_max = 27 [json_name="waitRatioMax"];
  // Milliseconds the average shard spent on writing output.
  optional int64 write_ms_avg = 28 [json_name="writeMsAvg"];
  // Milliseconds the slowest shard spent on writing output.
  optional int64 write_ms_max = 29 [json_name="writeMsMax"];
  // Relative amount of time the average shard spent on writing output.
  optional double write_ratio_avg = 30 [json_name="writeRatioAvg"];
  // Relative amount of time the slowest shard spent on writing output.
  optional double write_ratio_max = 31 [json_name="writeRatioMax"];
}

// An operation within a stage.
message ExplainQueryStep {
  // Machine-readable operation type.
  optional string kind = 1 [json_name="kind"];
  // Human-readable description of the step(s).
  repeated string substeps = 2 [json_name="substeps"];
}

// Explanation for a single feature.
message Explanation {
  // Attribution of feature.
  optional double attribution = 1 [json_name="attribution"];
  // The full feature name. For non-numerical features, will be formatted like `.`. Overall size of feature name will always be truncated to first 120 characters.
  optional string feature_name = 2 [json_name="featureName"];
}

// Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT JOB statistics are populated in JobStatistics4.
message ExportDataStatistics {
  // Number of destination files generated in case of EXPORT DATA statement only.
  optional int64 file_count = 1 [json_name="fileCount"];
  // [Alpha] Number of destination rows generated in case of EXPORT DATA statement only.
  optional int64 row_count = 2 [json_name="rowCount"];
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
message Expr {
  // Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
  optional string description = 1 [json_name="description"];
  // Textual representation of an expression in Common Expression Language syntax.
  optional string expression = 2 [json_name="expression"];
  // Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
  optional string location = 3 [json_name="location"];
  // Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
  optional string title = 4 [json_name="title"];
}

// Options defining open source compatible datasets living in the BigQuery catalog. Contains metadata of open source database, schema, or namespace represented by the current dataset.
message ExternalCatalogDatasetOptions {
  // Optional. The storage location URI for all tables in the dataset. Equivalent to hive metastore's database locationUri. Maximum length of 1024 characters.
  optional string default_storage_location_uri = 1 [json_name="defaultStorageLocationUri"];
  // Optional. A map of key value pairs defining the parameters and properties of the open source schema. Maximum size of 2MiB.
  map<string, string> parameters = 2 [json_name="parameters"];
}

// Metadata about open source compatible table. The fields contained in these options correspond to Hive metastore's table-level properties.
message ExternalCatalogTableOptions {
  // Optional. A connection ID that specifies the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or Amazon S3. This connection is needed to read the open source table from BigQuery. The connection_id format must be either `..` or `projects//locations//connections/`.
  optional string connection_id = 1 [json_name="connectionId"];
  // Optional. A map of the key-value pairs defining the parameters and properties of the open source table. Corresponds with Hive metastore table parameters. Maximum size of 4MiB.
  map<string, string> parameters = 2 [json_name="parameters"];
  // Optional. A storage descriptor containing information about the physical storage of this table.
  optional StorageDescriptor storage_descriptor = 3 [json_name="storageDescriptor"];
}

message ExternalDataConfiguration {
  // Try to detect schema and format options automatically. Any option specified explicitly will be honored.
  optional bool autodetect = 1 [json_name="autodetect"];
  // Optional. Additional properties to set if sourceFormat is set to AVRO.
  optional AvroOptions avro_options = 2 [json_name="avroOptions"];
  // Optional. Additional options if sourceFormat is set to BIGTABLE.
  optional BigtableOptions bigtable_options = 3 [json_name="bigtableOptions"];
  // Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
  optional string compression = 4 [json_name="compression"];
  // Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form `{project_id}.{location_id};{connection_id}` or `projects/{project_id}/locations/{location_id}/connections/{connection_id}`.
  optional string connection_id = 5 [json_name="connectionId"];
  // Optional. Additional properties to set if sourceFormat is set to CSV.
  optional CsvOptions csv_options = 6 [json_name="csvOptions"];
  // Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
  repeated string decimal_target_types = 7 [json_name="decimalTargetTypes"];
  // Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
  optional string file_set_spec_type = 8 [json_name="fileSetSpecType"];
  // Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
  optional GoogleSheetsOptions google_sheets_options = 9 [json_name="googleSheetsOptions"];
  // Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
  optional HivePartitioningOptions hive_partitioning_options = 10 [json_name="hivePartitioningOptions"];
  // Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
  optional bool ignore_unknown_values = 11 [json_name="ignoreUnknownValues"];
  // Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
  optional string json_extension = 12 [json_name="jsonExtension"];
  // Optional. Additional properties to set if sourceFormat is set to JSON.
  optional JsonOptions json_options = 13 [json_name="jsonOptions"];
  // Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
  optional int32 max_bad_records = 14 [json_name="maxBadRecords"];
  // Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
  optional string metadata_cache_mode = 15 [json_name="metadataCacheMode"];
  // Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
  optional string object_metadata = 16 [json_name="objectMetadata"];
  // Optional. Additional properties to set if sourceFormat is set to PARQUET.
  optional ParquetOptions parquet_options = 17 [json_name="parquetOptions"];
  // Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
  optional string reference_file_schema_uri = 18 [json_name="referenceFileSchemaUri"];
  // Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
  optional TableSchema schema = 19 [json_name="schema"];
  // [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
  optional string source_format = 20 [json_name="sourceFormat"];
  // [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
  repeated string source_uris = 21 [json_name="sourceUris"];
}

// Configures the access a dataset defined in an external metadata storage.
message ExternalDatasetReference {
  // Required. The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
  optional string connection = 1 [json_name="connection"];
  // Required. External source that backs this dataset.
  optional string external_source = 2 [json_name="externalSource"];
}

// The external service cost is a portion of the total cost, these costs are not additive with total_bytes_billed. Moreover, this field only track external service costs that will show up as BigQuery costs (e.g. training BigQuery ML job with google cloud CAIP or Automl Tables services), not other costs which may be accrued by running the query (e.g. reading from Bigtable or Cloud Storage). The external service costs with different billing sku (e.g. CAIP job is charged based on VM usage) are converted to BigQuery billed_bytes and slot_ms with equivalent amount of US dollars. Services may not directly correlate to these metrics, but these are the equivalents for billing purposes. Output only.
message ExternalServiceCost {
  // External service cost in terms of bigquery bytes billed.
  optional int64 bytes_billed = 1 [json_name="bytesBilled"];
  // External service cost in terms of bigquery bytes processed.
  optional int64 bytes_processed = 2 [json_name="bytesProcessed"];
  // External service name.
  optional string external_service = 3 [json_name="externalService"];
  // Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.
  optional int64 reserved_slot_count = 4 [json_name="reservedSlotCount"];
  // External service cost in terms of bigquery slot milliseconds.
  optional int64 slot_ms = 5 [json_name="slotMs"];
}

// Representative value of a single feature within the cluster.
message FeatureValue {
  // The categorical feature value.
  optional CategoricalValue categorical_value = 1 [json_name="categoricalValue"];
  // The feature column name.
  optional string feature_column = 2 [json_name="featureColumn"];
  // The numerical feature value. This is the centroid value for this feature.
  optional double numerical_value = 3 [json_name="numericalValue"];
}

// Metadata about the foreign data type definition such as the system in which the type is defined.
message ForeignTypeInfo {
  // Required. Specifies the system which defines the foreign data type.
  optional string type_system = 1 [json_name="typeSystem"];
}

// A view can be represented in multiple ways. Each representation has its own dialect. This message stores the metadata required for these representations.
message ForeignViewDefinition {
  // Optional. Represents the dialect of the query.
  optional string dialect = 1 [json_name="dialect"];
  // Required. The query that defines the view.
  optional string query = 2 [json_name="query"];
}

// Request message for `GetIamPolicy` method.
message GetIamPolicyRequest {
  // OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.
  optional GetPolicyOptions options = 1 [json_name="options"];
}

// Encapsulates settings provided to GetIamPolicy.
message GetPolicyOptions {
  // Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional int32 requested_policy_version = 1 [json_name="requestedPolicyVersion"];
}

// Response object of GetQueryResults.
message GetQueryResultsResponse {
  // Whether the query result was fetched from the query cache.
  optional bool cache_hit = 1 [json_name="cacheHit"];
  // Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
  repeated ErrorProto errors = 2 [json_name="errors"];
  // A hash of this response.
  optional string etag = 3 [json_name="etag"];
  // Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
  optional bool job_complete = 4 [json_name="jobComplete"];
  // Reference to the BigQuery Job that was created to run the query. This field will be present even if the original request timed out, in which case GetQueryResults can be used to read the results once the query has completed. Since this API only returns the first page of results, subsequent pages can be fetched via the same mechanism (GetQueryResults).
  optional JobReference job_reference = 5 [json_name="jobReference"];
  // The resource type of the response.
  optional string kind = 6 [json_name="kind"];
  // Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
  optional int64 num_dml_affected_rows = 7 [json_name="numDmlAffectedRows"];
  // A token used for paging results. When this token is non-empty, it indicates additional results are available.
  optional string page_token = 8 [json_name="pageToken"];
  // An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully. The REST-based representation of this data leverages a series of JSON f,v objects for indicating fields and values.
  repeated TableRow rows = 9 [json_name="rows"];
  // The schema of the results. Present only when the query completes successfully.
  optional TableSchema schema = 10 [json_name="schema"];
  // The total number of bytes processed for this query.
  optional int64 total_bytes_processed = 11 [json_name="totalBytesProcessed"];
  // The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.
  optional uint64 total_rows = 12 [json_name="totalRows"];
}

// Response object of GetServiceAccount
message GetServiceAccountResponse {
  // The service account email address.
  optional string email = 1 [json_name="email"];
  // The resource type of the response.
  optional string kind = 2 [json_name="kind"];
}

// Global explanations containing the top most important features after training.
message GlobalExplanation {
  // Class label for this set of global explanations. Will be empty/null for binary logistic and linear regression models. Sorted alphabetically in descending order.
  optional string class_label = 1 [json_name="classLabel"];
  // A list of the top global explanations. Sorted by absolute value of attribution in descending order.
  repeated Explanation explanations = 2 [json_name="explanations"];
}

// Options specific to Google Sheets data sources.
message GoogleSheetsOptions {
  // Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
  optional string range = 1 [json_name="range"];
  // Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
  optional int64 skip_leading_rows = 2 [json_name="skipLeadingRows"];
}

// High cardinality join detailed information.
message HighCardinalityJoin {
  // Output only. Count of left input rows.
  optional int64 left_rows = 1 [json_name="leftRows"];
  // Output only. Count of the output rows.
  optional int64 output_rows = 2 [json_name="outputRows"];
  // Output only. Count of right input rows.
  optional int64 right_rows = 3 [json_name="rightRows"];
  // Output only. The index of the join operator in the ExplainQueryStep lists.
  optional int32 step_index = 4 [json_name="stepIndex"];
}

// Options for configuring hive partitioning detect.
message HivePartitioningOptions {
  // Output only. For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
  repeated string fields = 1 [json_name="fields"];
  // Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
  optional string mode = 2 [json_name="mode"];
  // Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
  optional bool require_partition_filter = 3 [json_name="requirePartitionFilter"];
  // Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
  optional string source_uri_prefix = 4 [json_name="sourceUriPrefix"];
}

// Hyperparameter search spaces. These should be a subset of training_options.
message HparamSearchSpaces {
  // Activation functions of neural network models.
  optional StringHparamSearchSpace activation_fn = 1 [json_name="activationFn"];
  // Mini batch sample size.
  optional IntHparamSearchSpace batch_size = 2 [json_name="batchSize"];
  // Booster type for boosted tree models.
  optional StringHparamSearchSpace booster_type = 3 [json_name="boosterType"];
  // Subsample ratio of columns for each level for boosted tree models.
  optional DoubleHparamSearchSpace colsample_bylevel = 4 [json_name="colsampleBylevel"];
  // Subsample ratio of columns for each node(split) for boosted tree models.
  optional DoubleHparamSearchSpace colsample_bynode = 5 [json_name="colsampleBynode"];
  // Subsample ratio of columns when constructing each tree for boosted tree models.
  optional DoubleHparamSearchSpace colsample_bytree = 6 [json_name="colsampleBytree"];
  // Dart normalization type for boosted tree models.
  optional StringHparamSearchSpace dart_normalize_type = 7 [json_name="dartNormalizeType"];
  // Dropout probability for dnn model training and boosted tree models using dart booster.
  optional DoubleHparamSearchSpace dropout = 8 [json_name="dropout"];
  // Hidden units for neural network models.
  optional IntArrayHparamSearchSpace hidden_units = 9 [json_name="hiddenUnits"];
  // L1 regularization coefficient.
  optional DoubleHparamSearchSpace l1_reg = 10 [json_name="l1Reg"];
  // L2 regularization coefficient.
  optional DoubleHparamSearchSpace l2_reg = 11 [json_name="l2Reg"];
  // Learning rate of training jobs.
  optional DoubleHparamSearchSpace learn_rate = 12 [json_name="learnRate"];
  // Maximum depth of a tree for boosted tree models.
  optional IntHparamSearchSpace max_tree_depth = 13 [json_name="maxTreeDepth"];
  // Minimum split loss for boosted tree models.
  optional DoubleHparamSearchSpace min_split_loss = 14 [json_name="minSplitLoss"];
  // Minimum sum of instance weight needed in a child for boosted tree models.
  optional IntHparamSearchSpace min_tree_child_weight = 15 [json_name="minTreeChildWeight"];
  // Number of clusters for k-means.
  optional IntHparamSearchSpace num_clusters = 16 [json_name="numClusters"];
  // Number of latent factors to train on.
  optional IntHparamSearchSpace num_factors = 17 [json_name="numFactors"];
  // Number of parallel trees for boosted tree models.
  optional IntHparamSearchSpace num_parallel_tree = 18 [json_name="numParallelTree"];
  // Optimizer of TF models.
  optional StringHparamSearchSpace optimizer = 19 [json_name="optimizer"];
  // Subsample the training data to grow tree to prevent overfitting for boosted tree models.
  optional DoubleHparamSearchSpace subsample = 20 [json_name="subsample"];
  // Tree construction algorithm for boosted tree models.
  optional StringHparamSearchSpace tree_method = 21 [json_name="treeMethod"];
  // Hyperparameter for matrix factoration when implicit feedback type is specified.
  optional DoubleHparamSearchSpace wals_alpha = 22 [json_name="walsAlpha"];
}

// Training info of a trial in [hyperparameter tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models.
message HparamTuningTrial {
  // Ending time of the trial.
  optional int64 end_time_ms = 1 [json_name="endTimeMs"];
  // Error message for FAILED and INFEASIBLE trial.
  optional string error_message = 2 [json_name="errorMessage"];
  // Loss computed on the eval data at the end of trial.
  optional double eval_loss = 3 [json_name="evalLoss"];
  // Evaluation metrics of this trial calculated on the test data. Empty in Job API.
  optional EvaluationMetrics evaluation_metrics = 4 [json_name="evaluationMetrics"];
  // Hyperparameter tuning evaluation metrics of this trial calculated on the eval data. Unlike evaluation_metrics, only the fields corresponding to the hparam_tuning_objectives are set.
  optional EvaluationMetrics hparam_tuning_evaluation_metrics = 5 [json_name="hparamTuningEvaluationMetrics"];
  // The hyperprameters selected for this trial.
  optional TrainingOptions hparams = 6 [json_name="hparams"];
  // Starting time of the trial.
  optional int64 start_time_ms = 7 [json_name="startTimeMs"];
  // The status of the trial.
  optional string status = 8 [json_name="status"];
  // Loss computed on the training data at the end of trial.
  optional double training_loss = 9 [json_name="trainingLoss"];
  // 1-based index of the trial.
  optional int64 trial_id = 10 [json_name="trialId"];
}

// Reason about why no search index was used in the search query (or sub-query).
message IndexUnusedReason {
  // Specifies the base table involved in the reason that no search index was used.
  optional TableReference base_table = 1 [json_name="baseTable"];
  // Specifies the high-level reason for the scenario when no search index was used.
  optional string code = 2 [json_name="code"];
  // Specifies the name of the unused search index, if available.
  optional string index_name = 3 [json_name="indexName"];
  // Free form human-readable reason for the scenario when no search index was used.
  optional string message = 4 [json_name="message"];
}

// Details about the input data change insight.
message InputDataChange {
  // Output only. Records read difference percentage compared to a previous run.
  optional float records_read_diff_percentage = 1 [json_name="recordsReadDiffPercentage"];
}

// An array of int.
message IntArray {
  // Elements in the int array.
  repeated int64 elements = 1 [json_name="elements"];
}

// Search space for int array.
message IntArrayHparamSearchSpace {
  // Candidates for the int array parameter.
  repeated IntArray candidates = 1 [json_name="candidates"];
}

// Discrete candidates of an int hyperparameter.
message IntCandidates {
  // Candidates for the int parameter in increasing order.
  repeated int64 candidates = 1 [json_name="candidates"];
}

// Search space for an int hyperparameter.
message IntHparamSearchSpace {
  // Candidates of the int hyperparameter.
  optional IntCandidates candidates = 1 [json_name="candidates"];
  // Range of the int hyperparameter.
  optional IntRange range = 2 [json_name="range"];
}

// Range of an int hyperparameter.
message IntRange {
  // Max value of the int parameter.
  optional int64 max = 1 [json_name="max"];
  // Min value of the int parameter.
  optional int64 min = 2 [json_name="min"];
}

// Information about a single iteration of the training run.
message IterationResult {
  // Arima result.
  optional ArimaResult arima_result = 1 [json_name="arimaResult"];
  // Information about top clusters for clustering models.
  repeated ClusterInfo cluster_infos = 2 [json_name="clusterInfos"];
  // Time taken to run the iteration in milliseconds.
  optional int64 duration_ms = 3 [json_name="durationMs"];
  // Loss computed on the eval data at the end of iteration.
  optional double eval_loss = 4 [json_name="evalLoss"];
  // Index of the iteration, 0 based.
  optional int32 index = 5 [json_name="index"];
  // Learn rate used for this iteration.
  optional double learn_rate = 6 [json_name="learnRate"];
  // The information of the principal components.
  repeated PrincipalComponentInfo principal_component_infos = 7 [json_name="principalComponentInfos"];
  // Loss computed on the training data at the end of iteration.
  optional double training_loss = 8 [json_name="trainingLoss"];
}

message Job {
  // Required. Describes the job configuration.
  optional JobConfiguration configuration = 1 [json_name="configuration"];
  // Output only. A hash of this resource.
  optional string etag = 2 [json_name="etag"];
  // Output only. Opaque ID field of the job.
  optional string id = 3 [json_name="id"];
  // Output only. The reason why a Job was created. [Preview](https://cloud.google.com/products/#product-launch-stages)
  optional JobCreationReason job_creation_reason = 4 [json_name="jobCreationReason"];
  // Optional. Reference describing the unique-per-user name of the job.
  optional JobReference job_reference = 5 [json_name="jobReference"];
  // Output only. The type of the resource.
  optional string kind = 6 [json_name="kind"];
  // Output only. [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.
  optional string principal_subject = 7 [json_name="principal_subject"];
  // Output only. A URL that can be used to access the resource again.
  optional string self_link = 8 [json_name="selfLink"];
  // Output only. Information about the job, including starting time and ending time of the job.
  optional JobStatistics statistics = 9 [json_name="statistics"];
  // Output only. The status of this job. Examine this value when polling an asynchronous job to see if the job is complete.
  optional JobStatus status = 10 [json_name="status"];
  // Output only. Email address of the user who ran the job.
  optional string user_email = 11 [json_name="user_email"];
}

// Describes format of a jobs cancellation response.
message JobCancelResponse {
  // The final state of the job.
  optional Job job = 1 [json_name="job"];
  // The resource type of the response.
  optional string kind = 2 [json_name="kind"];
}

message JobConfiguration {
  // [Pick one] Copies a table.
  optional JobConfigurationTableCopy copy = 1 [json_name="copy"];
  // Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
  optional bool dry_run = 2 [json_name="dryRun"];
  // [Pick one] Configures an extract job.
  optional JobConfigurationExtract extract = 3 [json_name="extract"];
  // Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery will attempt to stop a longer job, but may not always succeed in canceling it before the job completes. For example, a job that takes more than 60 seconds to complete has a better chance of being stopped than a job that takes 10 seconds to complete.
  optional int64 job_timeout_ms = 4 [json_name="jobTimeoutMs"];
  // Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
  optional string job_type = 5 [json_name="jobType"];
  // The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
  map<string, string> labels = 6 [json_name="labels"];
  // [Pick one] Configures a load job.
  optional JobConfigurationLoad load = 7 [json_name="load"];
  // [Pick one] Configures a query job.
  optional JobConfigurationQuery query = 8 [json_name="query"];
}

// JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
message JobConfigurationExtract {
  // Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
  optional string compression = 1 [json_name="compression"];
  // Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
  optional string destination_format = 2 [json_name="destinationFormat"];
  // [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
  optional string destination_uri = 3 [json_name="destinationUri"];
  // [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
  repeated string destination_uris = 4 [json_name="destinationUris"];
  // Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
  optional string field_delimiter = 5 [json_name="fieldDelimiter"];
  // Optional. Model extract options only applicable when extracting models.
  optional ModelExtractOptions model_extract_options = 6 [json_name="modelExtractOptions"];
  // Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
  optional bool print_header = 7 [json_name="printHeader"];
  // A reference to the model being exported.
  optional ModelReference source_model = 8 [json_name="sourceModel"];
  // A reference to the table being exported.
  optional TableReference source_table = 9 [json_name="sourceTable"];
  // Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
  optional bool use_avro_logical_types = 10 [json_name="useAvroLogicalTypes"];
}

// JobConfigurationLoad contains the configuration properties for loading data into a destination table.
message JobConfigurationLoad {
  // Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
  optional bool allow_jagged_rows = 1 [json_name="allowJaggedRows"];
  // Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
  optional bool allow_quoted_newlines = 2 [json_name="allowQuotedNewlines"];
  // Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
  optional bool autodetect = 3 [json_name="autodetect"];
  // Clustering specification for the destination table.
  optional Clustering clustering = 4 [json_name="clustering"];
  // Optional. Character map supported for column names in CSV/Parquet loads. Defaults to STRICT and can be overridden by Project Config Service. Using this option with unsupporting load formats will result in an error.
  optional string column_name_character_map = 5 [json_name="columnNameCharacterMap"];
  // Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
  repeated ConnectionProperty connection_properties = 6 [json_name="connectionProperties"];
  // Optional. [Experimental] Configures the load job to copy files directly to the destination BigLake managed table, bypassing file content reading and rewriting. Copying files only is supported when all the following are true: * `source_uris` are located in the same Cloud Storage location as the destination table's `storage_uri` location. * `source_format` is `PARQUET`. * `destination_table` is an existing BigLake managed table. The table's schema does not have flexible column names. The table's columns do not have type parameters other than precision and scale. * No options other than the above are specified.
  optional bool copy_files_only = 7 [json_name="copyFilesOnly"];
  // Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
  optional string create_disposition = 8 [json_name="createDisposition"];
  // Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
  optional bool create_session = 9 [json_name="createSession"];
  // Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
  repeated string decimal_target_types = 10 [json_name="decimalTargetTypes"];
  // Custom encryption configuration (e.g., Cloud KMS keys)
  optional EncryptionConfiguration destination_encryption_configuration = 11 [json_name="destinationEncryptionConfiguration"];
  // [Required] The destination table to load the data into.
  optional TableReference destination_table = 12 [json_name="destinationTable"];
  // Optional. [Experimental] Properties with which to create the destination table if it is new.
  optional DestinationTableProperties destination_table_properties = 13 [json_name="destinationTableProperties"];
  // Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
  optional string encoding = 14 [json_name="encoding"];
  // Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
  optional string field_delimiter = 15 [json_name="fieldDelimiter"];
  // Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
  optional string file_set_spec_type = 16 [json_name="fileSetSpecType"];
  // Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
  optional HivePartitioningOptions hive_partitioning_options = 17 [json_name="hivePartitioningOptions"];
  // Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
  optional bool ignore_unknown_values = 18 [json_name="ignoreUnknownValues"];
  // Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
  optional string json_extension = 19 [json_name="jsonExtension"];
  // Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
  optional int32 max_bad_records = 20 [json_name="maxBadRecords"];
  // Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
  optional string null_marker = 21 [json_name="nullMarker"];
  // Optional. Additional properties to set if sourceFormat is set to PARQUET.
  optional ParquetOptions parquet_options = 22 [json_name="parquetOptions"];
  // Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
  optional bool preserve_ascii_control_characters = 23 [json_name="preserveAsciiControlCharacters"];
  // If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
  repeated string projection_fields = 24 [json_name="projectionFields"];
  // Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
  optional string quote = 25 [json_name="quote"];
  // Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
  optional RangePartitioning range_partitioning = 26 [json_name="rangePartitioning"];
  // Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
  optional string reference_file_schema_uri = 27 [json_name="referenceFileSchemaUri"];
  // Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
  optional TableSchema schema = 28 [json_name="schema"];
  // [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
  optional string schema_inline = 29 [json_name="schemaInline"];
  // [Deprecated] The format of the schemaInline property.
  optional string schema_inline_format = 30 [json_name="schemaInlineFormat"];
  // Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
  repeated string schema_update_options = 31 [json_name="schemaUpdateOptions"];
  // Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
  optional int32 skip_leading_rows = 32 [json_name="skipLeadingRows"];
  // Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
  optional string source_format = 33 [json_name="sourceFormat"];
  // [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
  repeated string source_uris = 34 [json_name="sourceUris"];
  // Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
  optional TimePartitioning time_partitioning = 35 [json_name="timePartitioning"];
  // Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
  optional bool use_avro_logical_types = 36 [json_name="useAvroLogicalTypes"];
  // Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
  optional string write_disposition = 37 [json_name="writeDisposition"];
}

// JobConfigurationQuery configures a BigQuery query job.
message JobConfigurationQuery {
  // Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
  optional bool allow_large_results = 1 [json_name="allowLargeResults"];
  // Clustering specification for the destination table.
  optional Clustering clustering = 2 [json_name="clustering"];
  // Connection properties which can modify the query behavior.
  repeated ConnectionProperty connection_properties = 3 [json_name="connectionProperties"];
  // [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
  optional bool continuous = 4 [json_name="continuous"];
  // Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
  optional string create_disposition = 5 [json_name="createDisposition"];
  // If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
  optional bool create_session = 6 [json_name="createSession"];
  // Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
  optional DatasetReference default_dataset = 7 [json_name="defaultDataset"];
  // Custom encryption configuration (e.g., Cloud KMS keys)
  optional EncryptionConfiguration destination_encryption_configuration = 8 [json_name="destinationEncryptionConfiguration"];
  // Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
  optional TableReference destination_table = 9 [json_name="destinationTable"];
  // Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
  optional bool flatten_results = 10 [json_name="flattenResults"];
  // Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
  optional int32 maximum_billing_tier = 11 [json_name="maximumBillingTier"];
  // Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
  optional int64 maximum_bytes_billed = 12 [json_name="maximumBytesBilled"];
  // GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
  optional string parameter_mode = 13 [json_name="parameterMode"];
  // [Deprecated] This property is deprecated.
  optional bool preserve_nulls = 14 [json_name="preserveNulls"];
  // Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
  optional string priority = 15 [json_name="priority"];
  // [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
  optional string query = 16 [json_name="query"];
  // Query parameters for GoogleSQL queries.
  repeated QueryParameter query_parameters = 17 [json_name="queryParameters"];
  // Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
  optional RangePartitioning range_partitioning = 18 [json_name="rangePartitioning"];
  // Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
  repeated string schema_update_options = 19 [json_name="schemaUpdateOptions"];
  // Options controlling the execution of scripts.
  optional ScriptOptions script_options = 20 [json_name="scriptOptions"];
  // Output only. System variables for GoogleSQL queries. A system variable is output if the variable is settable and its value differs from the system default. "@@" prefix is not included in the name of the System variables.
  optional SystemVariables system_variables = 21 [json_name="systemVariables"];
  // Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
  map<string, ExternalDataConfiguration> table_definitions = 22 [json_name="tableDefinitions"];
  // Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
  optional TimePartitioning time_partitioning = 23 [json_name="timePartitioning"];
  // Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
  optional bool use_legacy_sql = 24 [json_name="useLegacySql"];
  // Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
  optional bool use_query_cache = 25 [json_name="useQueryCache"];
  // Describes user-defined function resources used in the query.
  repeated UserDefinedFunctionResource user_defined_function_resources = 26 [json_name="userDefinedFunctionResources"];
  // Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
  optional string write_disposition = 27 [json_name="writeDisposition"];
}

// JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
message JobConfigurationTableCopy {
  // Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
  optional string create_disposition = 1 [json_name="createDisposition"];
  // Custom encryption configuration (e.g., Cloud KMS keys).
  optional EncryptionConfiguration destination_encryption_configuration = 2 [json_name="destinationEncryptionConfiguration"];
  // Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
  optional .google.protobuf.Timestamp destination_expiration_time = 3 [json_name="destinationExpirationTime"];
  // [Required] The destination table.
  optional TableReference destination_table = 4 [json_name="destinationTable"];
  // Optional. Supported operation types in table copy job.
  optional string operation_type = 5 [json_name="operationType"];
  // [Pick one] Source table to copy.
  optional TableReference source_table = 6 [json_name="sourceTable"];
  // [Pick one] Source tables to copy.
  repeated TableReference source_tables = 7 [json_name="sourceTables"];
  // Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
  optional string write_disposition = 8 [json_name="writeDisposition"];
}

// Reason about why a Job was created from a [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) method when used with `JOB_CREATION_OPTIONAL` Job creation mode. For [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert) method calls it will always be `REQUESTED`. [Preview](https://cloud.google.com/products/#product-launch-stages)
message JobCreationReason {
  // Output only. Specifies the high level reason why a Job was created.
  optional string code = 1 [json_name="code"];
}

message JobListJobs {
  optional JobConfiguration configuration = 1 [json_name="configuration"];
  optional ErrorProto error_result = 2 [json_name="errorResult"];
  optional string id = 3 [json_name="id"];
  optional JobReference job_reference = 4 [json_name="jobReference"];
  optional string kind = 5 [json_name="kind"];
  optional string principal_subject = 6 [json_name="principal_subject"];
  optional string state = 7 [json_name="state"];
  optional JobStatistics statistics = 8 [json_name="statistics"];
  optional JobStatus status = 9 [json_name="status"];
  optional string user_email = 10 [json_name="user_email"];
}

// JobList is the response format for a jobs.list call.
message JobList {
  // A hash of this page of results.
  optional string etag = 1 [json_name="etag"];
  // List of jobs that were requested.
  repeated JobListJobs jobs = 2 [json_name="jobs"];
  // The resource type of the response.
  optional string kind = 3 [json_name="kind"];
  // A token to request the next page of results.
  optional string next_page_token = 4 [json_name="nextPageToken"];
  // A list of skipped locations that were unreachable. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations. Example: "europe-west5"
  repeated string unreachable = 5 [json_name="unreachable"];
}

// A job reference is a fully qualified identifier for referring to a job.
message JobReference {
  // Required. The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
  optional string job_id = 1 [json_name="jobId"];
  // Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
  optional string location = 2 [json_name="location"];
  // Required. The ID of the project containing this job.
  optional string project_id = 3 [json_name="projectId"];
}

message JobStatisticsReservationUsage {
  optional string name = 1 [json_name="name"];
  optional int64 slot_ms = 2 [json_name="slotMs"];
}

// Statistics for a single job execution.
message JobStatistics {
  // Output only. [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
  optional double completion_ratio = 1 [json_name="completionRatio"];
  // Output only. Statistics for a copy job.
  optional JobStatistics5 copy = 2 [json_name="copy"];
  // Output only. Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
  optional int64 creation_time = 3 [json_name="creationTime"];
  // Output only. Statistics for data-masking. Present only for query and extract jobs.
  optional DataMaskingStatistics data_masking_statistics = 4 [json_name="dataMaskingStatistics"];
  // Output only. Name of edition corresponding to the reservation for this job at the time of this update.
  optional string edition = 5 [json_name="edition"];
  // Output only. End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
  optional int64 end_time = 6 [json_name="endTime"];
  // Output only. Statistics for an extract job.
  optional JobStatistics4 extract = 7 [json_name="extract"];
  // Output only. The duration in milliseconds of the execution of the final attempt of this job, as BigQuery may internally re-attempt to execute the job.
  optional int64 final_execution_duration_ms = 8 [json_name="finalExecutionDurationMs"];
  // Output only. Statistics for a load job.
  optional JobStatistics3 load = 9 [json_name="load"];
  // Output only. Number of child jobs executed.
  optional int64 num_child_jobs = 10 [json_name="numChildJobs"];
  // Output only. If this is a child job, specifies the job ID of the parent.
  optional string parent_job_id = 11 [json_name="parentJobId"];
  // Output only. Statistics for a query job.
  optional JobStatistics2 query = 12 [json_name="query"];
  // Output only. Quotas which delayed this job's start time.
  repeated string quota_deferments = 13 [json_name="quotaDeferments"];
  // Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
  repeated JobStatisticsReservationUsage reservation_usage = 14 [json_name="reservationUsage"];
  // Output only. Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
  optional string reservation_id = 15 [json_name="reservation_id"];
  // Output only. Statistics for row-level security. Present only for query and extract jobs.
  optional RowLevelSecurityStatistics row_level_security_statistics = 16 [json_name="rowLevelSecurityStatistics"];
  // Output only. If this a child job of a script, specifies information about the context of this job within the script.
  optional ScriptStatistics script_statistics = 17 [json_name="scriptStatistics"];
  // Output only. Information of the session if this job is part of one.
  optional SessionInfo session_info = 18 [json_name="sessionInfo"];
  // Output only. Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
  optional int64 start_time = 19 [json_name="startTime"];
  // Output only. Total bytes processed for the job.
  optional int64 total_bytes_processed = 20 [json_name="totalBytesProcessed"];
  // Output only. Slot-milliseconds for the job.
  optional int64 total_slot_ms = 21 [json_name="totalSlotMs"];
  // Output only. [Alpha] Information of the multi-statement transaction if this job is part of one. This property is only expected on a child job or a job that is in a session. A script parent job is not part of the transaction started in the script.
  optional TransactionInfo transaction_info = 22 [json_name="transactionInfo"];
}

message JobStatistics2ReservationUsage {
  optional string name = 1 [json_name="name"];
  optional int64 slot_ms = 2 [json_name="slotMs"];
}

// Statistics for a query job.
message JobStatistics2 {
  // Output only. BI Engine specific Statistics.
  optional BiEngineStatistics bi_engine_statistics = 1 [json_name="biEngineStatistics"];
  // Output only. Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of "free tier". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.
  optional int32 billing_tier = 2 [json_name="billingTier"];
  // Output only. Whether the query result was fetched from the query cache.
  optional bool cache_hit = 3 [json_name="cacheHit"];
  // Output only. Referenced dataset for DCL statement.
  optional DatasetReference dcl_target_dataset = 4 [json_name="dclTargetDataset"];
  // Output only. Referenced table for DCL statement.
  optional TableReference dcl_target_table = 5 [json_name="dclTargetTable"];
  // Output only. Referenced view for DCL statement.
  optional TableReference dcl_target_view = 6 [json_name="dclTargetView"];
  // Output only. The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
  optional int64 ddl_affected_row_access_policy_count = 7 [json_name="ddlAffectedRowAccessPolicyCount"];
  // Output only. The table after rename. Present only for ALTER TABLE RENAME TO query.
  optional TableReference ddl_destination_table = 8 [json_name="ddlDestinationTable"];
  // Output only. The DDL operation performed, possibly dependent on the pre-existence of the DDL target.
  optional string ddl_operation_performed = 9 [json_name="ddlOperationPerformed"];
  // Output only. The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA(dataset) queries.
  optional DatasetReference ddl_target_dataset = 10 [json_name="ddlTargetDataset"];
  // Output only. [Beta] The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
  optional RoutineReference ddl_target_routine = 11 [json_name="ddlTargetRoutine"];
  // Output only. The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
  optional RowAccessPolicyReference ddl_target_row_access_policy = 12 [json_name="ddlTargetRowAccessPolicy"];
  // Output only. The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
  optional TableReference ddl_target_table = 13 [json_name="ddlTargetTable"];
  // Output only. Detailed statistics for DML statements INSERT, UPDATE, DELETE, MERGE or TRUNCATE.
  optional DmlStatistics dml_stats = 14 [json_name="dmlStats"];
  // Output only. The original estimate of bytes processed for the job.
  optional int64 estimated_bytes_processed = 15 [json_name="estimatedBytesProcessed"];
  // Output only. Stats for EXPORT DATA statement.
  optional ExportDataStatistics export_data_statistics = 16 [json_name="exportDataStatistics"];
  // Output only. Job cost breakdown as bigquery internal cost and external service costs.
  repeated ExternalServiceCost external_service_costs = 17 [json_name="externalServiceCosts"];
  // Output only. Statistics for a LOAD query.
  optional LoadQueryStatistics load_query_statistics = 18 [json_name="loadQueryStatistics"];
  // Output only. Statistics of materialized views of a query job.
  optional MaterializedViewStatistics materialized_view_statistics = 19 [json_name="materializedViewStatistics"];
  // Output only. Statistics of metadata cache usage in a query for BigLake tables.
  optional MetadataCacheStatistics metadata_cache_statistics = 20 [json_name="metadataCacheStatistics"];
  // Output only. Statistics of a BigQuery ML training job.
  optional MlStatistics ml_statistics = 21 [json_name="mlStatistics"];
  // Deprecated.
  optional BigQueryModelTraining model_training = 22 [json_name="modelTraining"];
  // Deprecated.
  optional int32 model_training_current_iteration = 23 [json_name="modelTrainingCurrentIteration"];
  // Deprecated.
  optional int64 model_training_expected_total_iteration = 24 [json_name="modelTrainingExpectedTotalIteration"];
  // Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
  optional int64 num_dml_affected_rows = 25 [json_name="numDmlAffectedRows"];
  // Output only. Performance insights.
  optional PerformanceInsights performance_insights = 26 [json_name="performanceInsights"];
  // Output only. Query optimization information for a QUERY job.
  optional QueryInfo query_info = 27 [json_name="queryInfo"];
  // Output only. Describes execution plan for the query.
  repeated ExplainQueryStage query_plan = 28 [json_name="queryPlan"];
  // Output only. Referenced routines for the job.
  repeated RoutineReference referenced_routines = 29 [json_name="referencedRoutines"];
  // Output only. Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
  repeated TableReference referenced_tables = 30 [json_name="referencedTables"];
  // Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
  repeated JobStatistics2ReservationUsage reservation_usage = 31 [json_name="reservationUsage"];
  // Output only. The schema of the results. Present only for successful dry run of non-legacy SQL queries.
  optional TableSchema schema = 32 [json_name="schema"];
  // Output only. Search query specific statistics.
  optional SearchStatistics search_statistics = 33 [json_name="searchStatistics"];
  // Output only. Statistics of a Spark procedure job.
  optional SparkStatistics spark_statistics = 34 [json_name="sparkStatistics"];
  // Output only. The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#update_statement) statement. * `DELETE`: [`DELETE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language#call) statement.
  optional string statement_type = 35 [json_name="statementType"];
  // Output only. Describes a timeline of job execution.
  repeated QueryTimelineSample timeline = 36 [json_name="timeline"];
  // Output only. If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
  optional int64 total_bytes_billed = 37 [json_name="totalBytesBilled"];
  // Output only. Total bytes processed for the job.
  optional int64 total_bytes_processed = 38 [json_name="totalBytesProcessed"];
  // Output only. For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
  optional string total_bytes_processed_accuracy = 39 [json_name="totalBytesProcessedAccuracy"];
  // Output only. Total number of partitions processed from all partitioned tables referenced in the job.
  optional int64 total_partitions_processed = 40 [json_name="totalPartitionsProcessed"];
  // Output only. Slot-milliseconds for the job.
  optional int64 total_slot_ms = 41 [json_name="totalSlotMs"];
  // Output only. Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
  optional int64 transferred_bytes = 42 [json_name="transferredBytes"];
  // Output only. GoogleSQL only: list of undeclared query parameters detected during a dry run validation.
  repeated QueryParameter undeclared_query_parameters = 43 [json_name="undeclaredQueryParameters"];
  // Output only. Vector Search query specific statistics.
  optional VectorSearchStatistics vector_search_statistics = 44 [json_name="vectorSearchStatistics"];
}

// Statistics for a load job.
message JobStatistics3 {
  // Output only. The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
  optional int64 bad_records = 1 [json_name="badRecords"];
  // Output only. Number of bytes of source data in a load job.
  optional int64 input_file_bytes = 2 [json_name="inputFileBytes"];
  // Output only. Number of source files in a load job.
  optional int64 input_files = 3 [json_name="inputFiles"];
  // Output only. Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
  optional int64 output_bytes = 4 [json_name="outputBytes"];
  // Output only. Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
  optional int64 output_rows = 5 [json_name="outputRows"];
  // Output only. Describes a timeline of job execution.
  repeated QueryTimelineSample timeline = 6 [json_name="timeline"];
}

// Statistics for an extract job.
message JobStatistics4 {
  // Output only. Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
  repeated int64 destination_uri_file_counts = 1 [json_name="destinationUriFileCounts"];
  // Output only. Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes and doesn't have any relationship with the number of actual result bytes extracted in the desired format.
  optional int64 input_bytes = 2 [json_name="inputBytes"];
  // Output only. Describes a timeline of job execution.
  repeated QueryTimelineSample timeline = 3 [json_name="timeline"];
}

// Statistics for a copy job.
message JobStatistics5 {
  // Output only. Number of logical bytes copied to the destination table.
  optional int64 copied_logical_bytes = 1 [json_name="copiedLogicalBytes"];
  // Output only. Number of rows copied to the destination table.
  optional int64 copied_rows = 2 [json_name="copiedRows"];
}

message JobStatus {
  // Output only. Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
  optional ErrorProto error_result = 1 [json_name="errorResult"];
  // Output only. The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.
  repeated ErrorProto errors = 2 [json_name="errors"];
  // Output only. Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
  optional string state = 3 [json_name="state"];
}

// Represents privacy policy associated with "join restrictions". Join restriction gives data providers the ability to enforce joins on the 'join_allowed_columns' when data is queried from a privacy protected view.
message JoinRestrictionPolicy {
  // Optional. The only columns that joins are allowed on. This field is must be specified for join_conditions JOIN_ANY and JOIN_ALL and it cannot be set for JOIN_BLOCKED.
  repeated string join_allowed_columns = 1 [json_name="joinAllowedColumns"];
  // Optional. Specifies if a join is required or not on queries for the view. Default is JOIN_CONDITION_UNSPECIFIED.
  optional string join_condition = 2 [json_name="joinCondition"];
}

// Represents a single JSON object.
message JsonObject {
}

// Json Options for load and make external tables.
message JsonOptions {
  // Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
  optional string encoding = 1 [json_name="encoding"];
}

// Metadata about the Linked Dataset.
message LinkedDatasetMetadata {
  // Output only. Specifies whether Linked Dataset is currently in a linked state or not.
  optional string link_state = 1 [json_name="linkState"];
}

// A dataset source type which refers to another BigQuery dataset.
message LinkedDatasetSource {
  // The source dataset reference contains project numbers and not project ids.
  optional DatasetReference source_dataset = 1 [json_name="sourceDataset"];
}

// Response format for a single page when listing BigQuery ML models.
message ListModelsResponse {
  // Models in the requested dataset. Only the following fields are populated: model_reference, model_type, creation_time, last_modified_time and labels.
  repeated Model models = 1 [json_name="models"];
  // A token to request the next page of results.
  optional string next_page_token = 2 [json_name="nextPageToken"];
}

// Describes the format of a single result page when listing routines.
message ListRoutinesResponse {
  // A token to request the next page of results.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // Routines in the requested dataset. Unless read_mask is set in the request, only the following fields are populated: etag, project_id, dataset_id, routine_id, routine_type, creation_time, last_modified_time, language, and remote_function_options.
  repeated Routine routines = 2 [json_name="routines"];
}

// Response message for the ListRowAccessPolicies method.
message ListRowAccessPoliciesResponse {
  // A token to request the next page of results.
  optional string next_page_token = 1 [json_name="nextPageToken"];
  // Row access policies on the requested table.
  repeated RowAccessPolicy row_access_policies = 2 [json_name="rowAccessPolicies"];
}

// Statistics for a LOAD query.
message LoadQueryStatistics {
  // Output only. The number of bad records encountered while processing a LOAD query. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
  optional int64 bad_records = 1 [json_name="badRecords"];
  // Output only. This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.
  optional int64 bytes_transferred = 2 [json_name="bytesTransferred"];
  // Output only. Number of bytes of source data in a LOAD query.
  optional int64 input_file_bytes = 3 [json_name="inputFileBytes"];
  // Output only. Number of source files in a LOAD query.
  optional int64 input_files = 4 [json_name="inputFiles"];
  // Output only. Size of the loaded data in bytes. Note that while a LOAD query is in the running state, this value may change.
  optional int64 output_bytes = 5 [json_name="outputBytes"];
  // Output only. Number of rows imported in a LOAD query. Note that while a LOAD query is in the running state, this value may change.
  optional int64 output_rows = 6 [json_name="outputRows"];
}

// BigQuery-specific metadata about a location. This will be set on google.cloud.location.Location.metadata in Cloud Location API responses.
message LocationMetadata {
  // The legacy BigQuery location ID, e.g. “EU” for the “europe” location. This is for any API consumers that need the legacy “US” and “EU” locations.
  optional string legacy_location_id = 1 [json_name="legacyLocationId"];
}

// A materialized view considered for a query job.
message MaterializedView {
  // Whether the materialized view is chosen for the query. A materialized view can be chosen to rewrite multiple parts of the same query. If a materialized view is chosen to rewrite any part of the query, then this field is true, even if the materialized view was not chosen to rewrite others parts.
  optional bool chosen = 1 [json_name="chosen"];
  // If present, specifies a best-effort estimation of the bytes saved by using the materialized view rather than its base tables.
  optional int64 estimated_bytes_saved = 2 [json_name="estimatedBytesSaved"];
  // If present, specifies the reason why the materialized view was not chosen for the query.
  optional string rejected_reason = 3 [json_name="rejectedReason"];
  // The candidate materialized view.
  optional TableReference table_reference = 4 [json_name="tableReference"];
}

// Definition and configuration of a materialized view.
message MaterializedViewDefinition {
  // Optional. This option declares the intention to construct a materialized view that isn't refreshed incrementally.
  optional bool allow_non_incremental_definition = 1 [json_name="allowNonIncrementalDefinition"];
  // Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
  optional bool enable_refresh = 2 [json_name="enableRefresh"];
  // Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.
  optional int64 last_refresh_time = 3 [json_name="lastRefreshTime"];
  // [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
  optional bytes max_staleness = 4 [json_name="maxStaleness"];
  // Required. A query whose results are persisted.
  optional string query = 5 [json_name="query"];
  // Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
  optional int64 refresh_interval_ms = 6 [json_name="refreshIntervalMs"];
}

// Statistics of materialized views considered in a query job.
message MaterializedViewStatistics {
  // Materialized views considered for the query job. Only certain materialized views are used. For a detailed list, see the child message. If many materialized views are considered, then the list might be incomplete.
  repeated MaterializedView materialized_view = 1 [json_name="materializedView"];
}

// Status of a materialized view. The last refresh timestamp status is omitted here, but is present in the MaterializedViewDefinition message.
message MaterializedViewStatus {
  // Output only. Error result of the last automatic refresh. If present, indicates that the last automatic refresh was unsuccessful.
  optional ErrorProto last_refresh_status = 1 [json_name="lastRefreshStatus"];
  // Output only. Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time.
  optional .google.protobuf.Timestamp refresh_watermark = 2 [json_name="refreshWatermark"];
}

// Statistics for metadata caching in BigLake tables.
message MetadataCacheStatistics {
  // Set for the Metadata caching eligible tables referenced in the query.
  repeated TableMetadataCacheUsage table_metadata_cache_usage = 1 [json_name="tableMetadataCacheUsage"];
}

// Job statistics specific to a BigQuery ML training job.
message MlStatistics {
  // Output only. Trials of a [hyperparameter tuning job](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.
  repeated HparamTuningTrial hparam_trials = 1 [json_name="hparamTrials"];
  // Results for all completed iterations. Empty for [hyperparameter tuning jobs](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
  repeated IterationResult iteration_results = 2 [json_name="iterationResults"];
  // Output only. Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.
  optional int64 max_iterations = 3 [json_name="maxIterations"];
  // Output only. The type of the model that is being trained.
  optional string model_type = 4 [json_name="modelType"];
  // Output only. Training type of the job.
  optional string training_type = 5 [json_name="trainingType"];
}

message Model {
  // The best trial_id across all training runs.
  optional int64 best_trial_id = 1 [json_name="bestTrialId"];
  // Output only. The time when this model was created, in millisecs since the epoch.
  optional int64 creation_time = 2 [json_name="creationTime"];
  // Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.
  optional int64 default_trial_id = 3 [json_name="defaultTrialId"];
  // Optional. A user-friendly description of this model.
  optional string description = 4 [json_name="description"];
  // Custom encryption configuration (e.g., Cloud KMS keys). This shows the encryption configuration of the model data while stored in BigQuery storage. This field can be used with PatchModel to update encryption key for an already encrypted model.
  optional EncryptionConfiguration encryption_configuration = 5 [json_name="encryptionConfiguration"];
  // Output only. A hash of this resource.
  optional string etag = 6 [json_name="etag"];
  // Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.
  optional int64 expiration_time = 7 [json_name="expirationTime"];
  // Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.
  repeated StandardSqlField feature_columns = 8 [json_name="featureColumns"];
  // Optional. A descriptive name for this model.
  optional string friendly_name = 9 [json_name="friendlyName"];
  // Output only. All hyperparameter search spaces in this model.
  optional HparamSearchSpaces hparam_search_spaces = 10 [json_name="hparamSearchSpaces"];
  // Output only. Trials of a [hyperparameter tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.
  repeated HparamTuningTrial hparam_trials = 11 [json_name="hparamTrials"];
  // Output only. Label columns that were used to train this model. The output of the model will have a "predicted_" prefix to these columns.
  repeated StandardSqlField label_columns = 12 [json_name="labelColumns"];
  // The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
  map<string, string> labels = 13 [json_name="labels"];
  // Output only. The time when this model was last modified, in millisecs since the epoch.
  optional int64 last_modified_time = 14 [json_name="lastModifiedTime"];
  // Output only. The geographic location where the model resides. This value is inherited from the dataset.
  optional string location = 15 [json_name="location"];
  // Required. Unique identifier for this model.
  optional ModelReference model_reference = 16 [json_name="modelReference"];
  // Output only. Type of the model resource.
  optional string model_type = 17 [json_name="modelType"];
  // Output only. For single-objective [hyperparameter tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.
  repeated int64 optimal_trial_ids = 18 [json_name="optimalTrialIds"];
  // Output only. Remote model info
  optional RemoteModelInfo remote_model_info = 19 [json_name="remoteModelInfo"];
  // Information for all training runs in increasing order of start_time.
  repeated TrainingRun training_runs = 20 [json_name="trainingRuns"];
  // Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.
  repeated TransformColumn transform_columns = 21 [json_name="transformColumns"];
}

message ModelDefinitionModelOptions {
  repeated string labels = 1 [json_name="labels"];
  optional string loss_type = 2 [json_name="lossType"];
  optional string model_type = 3 [json_name="modelType"];
}

message ModelDefinition {
  // Deprecated.
  optional ModelDefinitionModelOptions model_options = 1 [json_name="modelOptions"];
  // Deprecated.
  repeated BqmlTrainingRun training_runs = 2 [json_name="trainingRuns"];
}

// Options related to model extraction.
message ModelExtractOptions {
  // The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](https://cloud.google.com/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
  optional int64 trial_id = 1 [json_name="trialId"];
}

// Id path of a model.
message ModelReference {
  // Required. The ID of the dataset containing this model.
  optional string dataset_id = 1 [json_name="datasetId"];
  // Required. The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
  optional string model_id = 2 [json_name="modelId"];
  // Required. The ID of the project containing this model.
  optional string project_id = 3 [json_name="projectId"];
}

// Evaluation metrics for multi-class classification/classifier models.
message MultiClassClassificationMetrics {
  // Aggregate classification metrics.
  optional AggregateClassificationMetrics aggregate_classification_metrics = 1 [json_name="aggregateClassificationMetrics"];
  // Confusion matrix at different thresholds.
  repeated ConfusionMatrix confusion_matrix_list = 2 [json_name="confusionMatrixList"];
}

// Parquet Options for load and make external tables.
message ParquetOptions {
  // Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
  optional bool enable_list_inference = 1 [json_name="enableListInference"];
  // Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
  optional bool enum_as_string = 2 [json_name="enumAsString"];
  // Optional. Indicates how to represent a Parquet map if present.
  optional string map_target_type = 3 [json_name="mapTargetType"];
}

// Partition skew detailed information.
message PartitionSkew {
  // Output only. Source stages which produce skewed data.
  repeated SkewSource skew_sources = 1 [json_name="skewSources"];
}

// The partitioning column information.
message PartitionedColumn {
  // Required. The name of the partition column.
  optional string field = 1 [json_name="field"];
}

// The partitioning information, which includes managed table, external table and metastore partitioned table partition information.
message PartitioningDefinition {
  // Optional. Details about each partitioning column. This field is output only for all partitioning types other than metastore partitioned tables. BigQuery native tables only support 1 partitioning column. Other table types may support 0, 1 or more partitioning columns. For metastore partitioned tables, the order must match the definition order in the Hive Metastore, where it must match the physical layout of the table. For example, CREATE TABLE a_table(id BIGINT, name STRING) PARTITIONED BY (city STRING, state STRING). In this case the values must be ['city', 'state'] in that order.
  repeated PartitionedColumn partitioned_column = 1 [json_name="partitionedColumn"];
}

// Performance insights for the job.
message PerformanceInsights {
  // Output only. Average execution ms of previous runs. Indicates the job ran slow compared to previous executions. To find previous executions, use INFORMATION_SCHEMA tables and filter jobs with same query hash.
  optional int64 avg_previous_execution_ms = 1 [json_name="avgPreviousExecutionMs"];
  // Output only. Query stage performance insights compared to previous runs, for diagnosing performance regression.
  repeated StagePerformanceChangeInsight stage_performance_change_insights = 2 [json_name="stagePerformanceChangeInsights"];
  // Output only. Standalone query stage performance insights, for exploring potential improvements.
  repeated StagePerformanceStandaloneInsight stage_performance_standalone_insights = 3 [json_name="stagePerformanceStandaloneInsights"];
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
message Policy {
  // Specifies cloud audit logging configuration for this policy.
  repeated AuditConfig audit_configs = 1 [json_name="auditConfigs"];
  // Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
  repeated Binding bindings = 2 [json_name="bindings"];
  // `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
  optional bytes etag = 3 [json_name="etag"];
  // Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
  optional int32 version = 4 [json_name="version"];
}

// Principal component infos, used only for eigen decomposition based models, e.g., PCA. Ordered by explained_variance in the descending order.
message PrincipalComponentInfo {
  // The explained_variance is pre-ordered in the descending order to compute the cumulative explained variance ratio.
  optional double cumulative_explained_variance_ratio = 1 [json_name="cumulativeExplainedVarianceRatio"];
  // Explained variance by this principal component, which is simply the eigenvalue.
  optional double explained_variance = 2 [json_name="explainedVariance"];
  // Explained_variance over the total explained variance.
  optional double explained_variance_ratio = 3 [json_name="explainedVarianceRatio"];
  // Id of the principal component.
  optional int64 principal_component_id = 4 [json_name="principalComponentId"];
}

// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
message PrivacyPolicy {
  // Optional. Policy used for aggregation thresholds.
  optional AggregationThresholdPolicy aggregation_threshold_policy = 1 [json_name="aggregationThresholdPolicy"];
  // Optional. Policy used for differential privacy.
  optional DifferentialPrivacyPolicy differential_privacy_policy = 2 [json_name="differentialPrivacyPolicy"];
  // Optional. Join restriction policy is outside of the one of policies, since this policy can be set along with other policies. This policy gives data providers the ability to enforce joins on the 'join_allowed_columns' when data is queried from a privacy protected view.
  optional JoinRestrictionPolicy join_restriction_policy = 3 [json_name="joinRestrictionPolicy"];
}

message ProjectListProjects {
  optional string friendly_name = 1 [json_name="friendlyName"];
  optional string id = 2 [json_name="id"];
  optional string kind = 3 [json_name="kind"];
  optional uint64 numeric_id = 4 [json_name="numericId"];
  optional ProjectReference project_reference = 5 [json_name="projectReference"];
}

// Response object of ListProjects
message ProjectList {
  // A hash of the page of results.
  optional string etag = 1 [json_name="etag"];
  // The resource type of the response.
  optional string kind = 2 [json_name="kind"];
  // Use this token to request the next page of results.
  optional string next_page_token = 3 [json_name="nextPageToken"];
  // Projects to which the user has at least READ access.
  repeated ProjectListProjects projects = 4 [json_name="projects"];
  // The total number of projects in the page. A wrapper is used here because the field should still be in the response when the value is 0.
  optional int32 total_items = 5 [json_name="totalItems"];
}

// A unique reference to a project.
message ProjectReference {
  // Required. ID of the project. Can be either the numeric ID or the assigned ID of the project.
  optional string project_id = 1 [json_name="projectId"];
}

// Query optimization information for a QUERY job.
message QueryInfo {
  // Output only. Information about query optimizations.
  map<string, .google.protobuf.Any> optimization_details = 1 [json_name="optimizationDetails"];
}

// A parameter given to a query.
message QueryParameter {
  // Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.
  optional string name = 1 [json_name="name"];
  // Required. The type of this parameter.
  optional QueryParameterType parameter_type = 2 [json_name="parameterType"];
  // Required. The value of this parameter.
  optional QueryParameterValue parameter_value = 3 [json_name="parameterValue"];
}

message QueryParameterTypeStructTypes {
  optional string description = 1 [json_name="description"];
  optional string name = 2 [json_name="name"];
  optional QueryParameterType type = 3 [json_name="type"];
}

// The type of a query parameter.
message QueryParameterType {
  // Optional. The type of the array's elements, if this is an array.
  optional QueryParameterType array_type = 1 [json_name="arrayType"];
  // Optional. The element type of the range, if this is a range.
  optional QueryParameterType range_element_type = 2 [json_name="rangeElementType"];
  // Optional. The types of the fields of this struct, in order, if this is a struct.
  repeated QueryParameterTypeStructTypes struct_types = 3 [json_name="structTypes"];
  // Required. The top level type of this field.
  optional string type = 4 [json_name="type"];
}

// The value of a query parameter.
message QueryParameterValue {
  // Optional. The array values, if this is an array type.
  repeated QueryParameterValue array_values = 1 [json_name="arrayValues"];
  // Optional. The range value, if this is a range type.
  optional RangeValue range_value = 2 [json_name="rangeValue"];
  // The struct field values.
  map<string, QueryParameterValue> struct_values = 3 [json_name="structValues"];
  // Optional. The value of this value, if a simple scalar type.
  optional string value = 4 [json_name="value"];
}

// Describes the format of the jobs.query request.
message QueryRequest {
  // Optional. Connection properties which can modify the query behavior.
  repeated ConnectionProperty connection_properties = 1 [json_name="connectionProperties"];
  // [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
  optional bool continuous = 2 [json_name="continuous"];
  // Optional. If true, creates a new session using a randomly generated session_id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode. The session location will be set to QueryRequest.location if it is present, otherwise it's set to the default location based on existing routing logic.
  optional bool create_session = 3 [json_name="createSession"];
  // Optional. Specifies the default datasetId and projectId to assume for any unqualified table names in the query. If not set, all table names in the query string must be qualified in the format 'datasetId.tableId'.
  optional DatasetReference default_dataset = 4 [json_name="defaultDataset"];
  // Optional. If set to true, BigQuery doesn't run the job. Instead, if the query is valid, BigQuery returns statistics about the job such as how many bytes would be processed. If the query is invalid, an error returns. The default value is false.
  optional bool dry_run = 5 [json_name="dryRun"];
  // Optional. Output format adjustments.
  optional DataFormatOptions format_options = 6 [json_name="formatOptions"];
  // Optional. If not set, jobs are always required. If set, the query request will follow the behavior described JobCreationMode. [Preview](https://cloud.google.com/products/#product-launch-stages)
  optional string job_creation_mode = 7 [json_name="jobCreationMode"];
  // The resource type of the request.
  optional string kind = 8 [json_name="kind"];
  // Optional. The labels associated with this query. Labels can be used to organize and group query jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label keys must start with a letter and each label in the list must have a different key.
  map<string, string> labels = 9 [json_name="labels"];
  // The geographic location where the job should run. For more information, see how to [specify locations](https://cloud.google.com/bigquery/docs/locations#specify_locations).
  optional string location = 10 [json_name="location"];
  // Optional. The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies.
  optional uint32 max_results = 11 [json_name="maxResults"];
  // Optional. Limits the bytes billed for this query. Queries with bytes billed above this limit will fail (without incurring a charge). If unspecified, the project default is used.
  optional int64 maximum_bytes_billed = 12 [json_name="maximumBytesBilled"];
  // GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
  optional string parameter_mode = 13 [json_name="parameterMode"];
  // This property is deprecated.
  optional bool preserve_nulls = 14 [json_name="preserveNulls"];
  // Required. A query string to execute, using Google Standard SQL or legacy SQL syntax. Example: "SELECT COUNT(f1) FROM myProjectId.myDatasetId.myTableId".
  optional string query = 15 [json_name="query"];
  // Query parameters for GoogleSQL queries.
  repeated QueryParameter query_parameters = 16 [json_name="queryParameters"];
  // Optional. A unique user provided identifier to ensure idempotent behavior for queries. Note that this is different from the job_id. It has the following properties: 1. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended. 2. Read only queries can ignore this token since they are nullipotent by definition. 3. For the purposes of idempotency ensured by the request_id, a request is considered duplicate of another only if they have the same request_id and are actually duplicates. When determining whether a request is a duplicate of another request, all parameters in the request that may affect the result are considered. For example, query, connection_properties, query_parameters, use_legacy_sql are parameters that affect the result and are considered when determining whether a request is a duplicate, but properties like timeout_ms don't affect the result and are thus not considered. Dry run query requests are never considered duplicate of another request. 4. When a duplicate mutating query request is detected, it returns: a. the results of the mutation if it completes successfully within the timeout. b. the running operation if it is still in progress at the end of the timeout. 5. Its lifetime is limited to 15 minutes. In other words, if two requests are sent with the same request_id, but more than 15 minutes apart, idempotency is not guaranteed.
  optional string request_id = 17 [json_name="requestId"];
  // Optional. Optional: Specifies the maximum amount of time, in milliseconds, that the client is willing to wait for the query to complete. By default, this limit is 10 seconds (10,000 milliseconds). If the query is complete, the jobComplete field in the response is true. If the query has not yet completed, jobComplete is false. You can request a longer timeout period in the timeoutMs field. However, the call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete. If jobComplete is false, you can continue to wait for the query to complete by calling the getQueryResults method until the jobComplete field in the getQueryResults response is true.
  optional uint32 timeout_ms = 18 [json_name="timeoutMs"];
  // Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
  optional bool use_legacy_sql = 19 [json_name="useLegacySql"];
  // Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. The default value is true.
  optional bool use_query_cache = 20 [json_name="useQueryCache"];
}

message QueryResponse {
  // Whether the query result was fetched from the query cache.
  optional bool cache_hit = 1 [json_name="cacheHit"];
  // Output only. Detailed statistics for DML statements INSERT, UPDATE, DELETE, MERGE or TRUNCATE.
  optional DmlStatistics dml_stats = 2 [json_name="dmlStats"];
  // Output only. The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful. For more information about error messages, see [Error messages](https://cloud.google.com/bigquery/docs/error-messages).
  repeated ErrorProto errors = 3 [json_name="errors"];
  // Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
  optional bool job_complete = 4 [json_name="jobComplete"];
  // Optional. The reason why a Job was created. Only relevant when a job_reference is present in the response. If job_reference is not present it will always be unset. [Preview](https://cloud.google.com/products/#product-launch-stages)
  optional JobCreationReason job_creation_reason = 5 [json_name="jobCreationReason"];
  // Reference to the Job that was created to run the query. This field will be present even if the original request timed out, in which case GetQueryResults can be used to read the results once the query has completed. Since this API only returns the first page of results, subsequent pages can be fetched via the same mechanism (GetQueryResults). If job_creation_mode was set to `JOB_CREATION_OPTIONAL` and the query completes without creating a job, this field will be empty.
  optional JobReference job_reference = 6 [json_name="jobReference"];
  // The resource type.
  optional string kind = 7 [json_name="kind"];
  // Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
  optional int64 num_dml_affected_rows = 8 [json_name="numDmlAffectedRows"];
  // A token used for paging results. A non-empty token indicates that additional results are available. To see additional results, query the [`jobs.getQueryResults`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults) method. For more information, see [Paging through table data](https://cloud.google.com/bigquery/docs/paging-results).
  optional string page_token = 9 [json_name="pageToken"];
  // Auto-generated ID for the query. [Preview](https://cloud.google.com/products/#product-launch-stages)
  optional string query_id = 10 [json_name="queryId"];
  // An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.
  repeated TableRow rows = 11 [json_name="rows"];
  // The schema of the results. Present only when the query completes successfully.
  optional TableSchema schema = 12 [json_name="schema"];
  // Output only. Information of the session if this job is part of one.
  optional SessionInfo session_info = 13 [json_name="sessionInfo"];
  // The total number of bytes processed for this query. If this query was a dry run, this is the number of bytes that would be processed if the query were run.
  optional int64 total_bytes_processed = 14 [json_name="totalBytesProcessed"];
  // The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.
  optional uint64 total_rows = 15 [json_name="totalRows"];
}

// Summary of the state of query execution at a given time.
message QueryTimelineSample {
  // Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
  optional int64 active_units = 1 [json_name="activeUnits"];
  // Total parallel units of work completed by this query.
  optional int64 completed_units = 2 [json_name="completedUnits"];
  // Milliseconds elapsed since the start of query execution.
  optional int64 elapsed_ms = 3 [json_name="elapsedMs"];
  // Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.
  optional int64 estimated_runnable_units = 4 [json_name="estimatedRunnableUnits"];
  // Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
  optional int64 pending_units = 5 [json_name="pendingUnits"];
  // Cumulative slot-ms consumed by the query.
  optional int64 total_slot_ms = 6 [json_name="totalSlotMs"];
}

message RangePartitioningRange {
  optional int64 end = 1 [json_name="end"];
  optional int64 interval = 2 [json_name="interval"];
  optional int64 start = 3 [json_name="start"];
}

message RangePartitioning {
  // Required. The name of the column to partition the table on. It must be a top-level, INT64 column whose mode is NULLABLE or REQUIRED.
  optional string field = 1 [json_name="field"];
  // [Experimental] Defines the ranges for range partitioning.
  optional RangePartitioningRange range = 2 [json_name="range"];
}

// Represents the value of a range.
message RangeValue {
  // Optional. The end value of the range. A missing value represents an unbounded end.
  optional QueryParameterValue end = 1 [json_name="end"];
  // Optional. The start value of the range. A missing value represents an unbounded start.
  optional QueryParameterValue start = 2 [json_name="start"];
}

// Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
message RankingMetrics {
  // Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
  optional double average_rank = 1 [json_name="averageRank"];
  // Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
  optional double mean_average_precision = 2 [json_name="meanAveragePrecision"];
  // Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
  optional double mean_squared_error = 3 [json_name="meanSquaredError"];
  // A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
  optional double normalized_discounted_cumulative_gain = 4 [json_name="normalizedDiscountedCumulativeGain"];
}

// Evaluation metrics for regression and explicit feedback type matrix factorization models.
message RegressionMetrics {
  // Mean absolute error.
  optional double mean_absolute_error = 1 [json_name="meanAbsoluteError"];
  // Mean squared error.
  optional double mean_squared_error = 2 [json_name="meanSquaredError"];
  // Mean squared log error.
  optional double mean_squared_log_error = 3 [json_name="meanSquaredLogError"];
  // Median absolute error.
  optional double median_absolute_error = 4 [json_name="medianAbsoluteError"];
  // R^2 score. This corresponds to r2_score in ML.EVALUATE.
  optional double r_squared = 5 [json_name="rSquared"];
}

// Options for a remote user-defined function.
message RemoteFunctionOptions {
  // Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
  optional string connection = 1 [json_name="connection"];
  // Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
  optional string endpoint = 2 [json_name="endpoint"];
  // Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
  optional int64 max_batching_rows = 3 [json_name="maxBatchingRows"];
  // User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
  map<string, string> user_defined_context = 4 [json_name="userDefinedContext"];
}

// Remote Model Info
message RemoteModelInfo {
  // Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
  optional string connection = 1 [json_name="connection"];
  // Output only. The endpoint for remote model.
  optional string endpoint = 2 [json_name="endpoint"];
  // Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.
  optional int64 max_batching_rows = 3 [json_name="maxBatchingRows"];
  // Output only. The model version for LLM.
  optional string remote_model_version = 4 [json_name="remoteModelVersion"];
  // Output only. The remote service type for remote model.
  optional string remote_service_type = 5 [json_name="remoteServiceType"];
  // Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)
  optional string speech_recognizer = 6 [json_name="speechRecognizer"];
}

message RestrictionConfig {
  // Output only. Specifies the type of dataset/table restriction.
  optional string type = 1 [json_name="type"];
}

// A user-defined function or a stored procedure.
message Routine {
  // Optional.
  repeated Argument arguments = 1 [json_name="arguments"];
  // Output only. The time when this routine was created, in milliseconds since the epoch.
  optional int64 creation_time = 2 [json_name="creationTime"];
  // Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).
  optional string data_governance_type = 3 [json_name="dataGovernanceType"];
  // Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, "\n", y))` The definition_body is `concat(x, "\n", y)` (\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return "\n";\n'` The definition_body is `return "\n";\n` Note that both \n are replaced with linebreaks.
  optional string definition_body = 4 [json_name="definitionBody"];
  // Optional. The description of the routine, if defined.
  optional string description = 5 [json_name="description"];
  // Optional. The determinism level of the JavaScript UDF, if defined.
  optional string determinism_level = 6 [json_name="determinismLevel"];
  // Output only. A hash of this resource.
  optional string etag = 7 [json_name="etag"];
  // Optional. If language = "JAVASCRIPT", this field stores the path of the imported JAVASCRIPT libraries.
  repeated string imported_libraries = 8 [json_name="importedLibraries"];
  // Optional. Defaults to "SQL" if remote_function_options field is absent, not set otherwise.
  optional string language = 9 [json_name="language"];
  // Output only. The time when this routine was last modified, in milliseconds since the epoch.
  optional int64 last_modified_time = 10 [json_name="lastModifiedTime"];
  // Optional. Remote function specific options.
  optional RemoteFunctionOptions remote_function_options = 11 [json_name="remoteFunctionOptions"];
  // Optional. Can be set only if routine_type = "TABLE_VALUED_FUNCTION". If absent, the return table type is inferred from definition_body at query time in each query that references this routine. If present, then the columns in the evaluated table result will be cast to match the column types specified in return table type, at query time.
  optional StandardSqlTableType return_table_type = 12 [json_name="returnTableType"];
  // Optional if language = "SQL"; required otherwise. Cannot be set if routine_type = "TABLE_VALUED_FUNCTION". If absent, the return type is inferred from definition_body at query time in each query that references this routine. If present, then the evaluated result will be cast to the specified returned type at query time. For example, for the functions created with the following statements: * `CREATE FUNCTION Add(x FLOAT64, y FLOAT64) RETURNS FLOAT64 AS (x + y);` * `CREATE FUNCTION Increment(x FLOAT64) AS (Add(x, 1));` * `CREATE FUNCTION Decrement(x FLOAT64) RETURNS FLOAT64 AS (Add(x, -1));` The return_type is `{type_kind: "FLOAT64"}` for `Add` and `Decrement`, and is absent for `Increment` (inferred as FLOAT64 at query time). Suppose the function `Add` is replaced by `CREATE OR REPLACE FUNCTION Add(x INT64, y INT64) AS (x + y);` Then the inferred return type of `Increment` is automatically changed to INT64 at query time, while the return type of `Decrement` remains FLOAT64.
  optional StandardSqlDataType return_type = 13 [json_name="returnType"];
  // Required. Reference describing the ID of this routine.
  optional RoutineReference routine_reference = 14 [json_name="routineReference"];
  // Required. The type of routine.
  optional string routine_type = 15 [json_name="routineType"];
  // Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.
  optional string security_mode = 16 [json_name="securityMode"];
  // Optional. Spark specific options.
  optional SparkOptions spark_options = 17 [json_name="sparkOptions"];
  // Optional. Use this option to catch many common errors. Error checking is not exhaustive, and successfully creating a procedure doesn't guarantee that the procedure will successfully execute at runtime. If `strictMode` is set to `TRUE`, the procedure body is further checked for errors such as non-existent tables or columns. The `CREATE PROCEDURE` statement fails if the body fails any of these checks. If `strictMode` is set to `FALSE`, the procedure body is checked only for syntax. For procedures that invoke themselves recursively, specify `strictMode=FALSE` to avoid non-existent procedure errors during validation. Default value is `TRUE`.
  optional bool strict_mode = 18 [json_name="strictMode"];
}

// Id path of a routine.
message RoutineReference {
  // Required. The ID of the dataset containing this routine.
  optional string dataset_id = 1 [json_name="datasetId"];
  // Required. The ID of the project containing this routine.
  optional string project_id = 2 [json_name="projectId"];
  // Required. The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
  optional string routine_id = 3 [json_name="routineId"];
}

// A single row in the confusion matrix.
message Row {
  // The original label of this row.
  optional string actual_label = 1 [json_name="actualLabel"];
  // Info describing predicted label distribution.
  repeated Entry entries = 2 [json_name="entries"];
}

// Represents access on a subset of rows on the specified table, defined by its filter predicate. Access to the subset of rows is controlled by its IAM policy.
message RowAccessPolicy {
  // Output only. The time when this row access policy was created, in milliseconds since the epoch.
  optional .google.protobuf.Timestamp creation_time = 1 [json_name="creationTime"];
  // Output only. A hash of this resource.
  optional string etag = 2 [json_name="etag"];
  // Required. A SQL boolean expression that represents the rows defined by this row access policy, similar to the boolean expression in a WHERE clause of a SELECT query on a table. References to other tables, routines, and temporary functions are not supported. Examples: region="EU" date_field = CAST('2019-9-27' as DATE) nullable_field is not NULL numeric_field BETWEEN 1.0 AND 5.0
  optional string filter_predicate = 3 [json_name="filterPredicate"];
  // Output only. The time when this row access policy was last modified, in milliseconds since the epoch.
  optional .google.protobuf.Timestamp last_modified_time = 4 [json_name="lastModifiedTime"];
  // Required. Reference describing the ID of this row access policy.
  optional RowAccessPolicyReference row_access_policy_reference = 5 [json_name="rowAccessPolicyReference"];
}

// Id path of a row access policy.
message RowAccessPolicyReference {
  // Required. The ID of the dataset containing this row access policy.
  optional string dataset_id = 1 [json_name="datasetId"];
  // Required. The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
  optional string policy_id = 2 [json_name="policyId"];
  // Required. The ID of the project containing this row access policy.
  optional string project_id = 3 [json_name="projectId"];
  // Required. The ID of the table containing this row access policy.
  optional string table_id = 4 [json_name="tableId"];
}

// Statistics for row-level security.
message RowLevelSecurityStatistics {
  // Whether any accessed data was protected by row access policies.
  optional bool row_level_security_applied = 1 [json_name="rowLevelSecurityApplied"];
}

// Options related to script execution.
message ScriptOptions {
  // Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
  optional string key_result_statement = 1 [json_name="keyResultStatement"];
  // Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
  optional int64 statement_byte_budget = 2 [json_name="statementByteBudget"];
  // Timeout period for each statement in a script.
  optional int64 statement_timeout_ms = 3 [json_name="statementTimeoutMs"];
}

// Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a ";", when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab "snaps" the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
message ScriptStackFrame {
  // Output only. One-based end column.
  optional int32 end_column = 1 [json_name="endColumn"];
  // Output only. One-based end line.
  optional int32 end_line = 2 [json_name="endLine"];
  // Output only. Name of the active procedure, empty if in a top-level script.
  optional string procedure_id = 3 [json_name="procedureId"];
  // Output only. One-based start column.
  optional int32 start_column = 4 [json_name="startColumn"];
  // Output only. One-based start line.
  optional int32 start_line = 5 [json_name="startLine"];
  // Output only. Text of the current statement/expression.
  optional string text = 6 [json_name="text"];
}

// Job statistics specific to the child job of a script.
message ScriptStatistics {
  // Whether this child job was a statement or expression.
  optional string evaluation_kind = 1 [json_name="evaluationKind"];
  // Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
  repeated ScriptStackFrame stack_frames = 2 [json_name="stackFrames"];
}

// Statistics for a search query. Populated as part of JobStatistics2.
message SearchStatistics {
  // When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
  repeated IndexUnusedReason index_unused_reasons = 1 [json_name="indexUnusedReasons"];
  // Specifies the index usage mode for the query.
  optional string index_usage_mode = 2 [json_name="indexUsageMode"];
}

// Serializer and deserializer information.
message SerDeInfo {
  // Optional. Name of the SerDe. The maximum length is 256 characters.
  optional string name = 1 [json_name="name"];
  // Optional. Key-value pairs that define the initialization parameters for the serialization library. Maximum size 10 Kib.
  map<string, string> parameters = 2 [json_name="parameters"];
  // Required. Specifies a fully-qualified class name of the serialization library that is responsible for the translation of data between table representation and the underlying low-level input and output format structures. The maximum length is 256 characters.
  optional string serialization_library = 3 [json_name="serializationLibrary"];
}

// [Preview] Information related to sessions.
message SessionInfo {
  // Output only. The id of the session.
  optional string session_id = 1 [json_name="sessionId"];
}

// Request message for `SetIamPolicy` method.
message SetIamPolicyRequest {
  // REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.
  optional Policy policy = 1 [json_name="policy"];
  // OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
  optional string update_mask = 2 [json_name="updateMask"];
}

// Details about source stages which produce skewed data.
message SkewSource {
  // Output only. Stage id of the skew source stage.
  optional int64 stage_id = 1 [json_name="stageId"];
}

// Information about base table and snapshot time of the snapshot.
message SnapshotDefinition {
  // Required. Reference describing the ID of the table that was snapshot.
  optional TableReference base_table_reference = 1 [json_name="baseTableReference"];
  // Required. The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.
  optional .google.protobuf.Timestamp snapshot_time = 2 [json_name="snapshotTime"];
}

// Spark job logs can be filtered by these fields in Cloud Logging.
message SparkLoggingInfo {
  // Output only. Project ID where the Spark logs were written.
  optional string project_id = 1 [json_name="projectId"];
  // Output only. Resource type used for logging.
  optional string resource_type = 2 [json_name="resourceType"];
}

// Options for a user-defined Spark routine.
message SparkOptions {
  // Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
  repeated string archive_uris = 1 [json_name="archiveUris"];
  // Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
  optional string connection = 2 [json_name="connection"];
  // Custom container image for the runtime environment.
  optional string container_image = 3 [json_name="containerImage"];
  // Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
  repeated string file_uris = 4 [json_name="fileUris"];
  // JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
  repeated string jar_uris = 5 [json_name="jarUris"];
  // The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
  optional string main_class = 6 [json_name="mainClass"];
  // The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
  optional string main_file_uri = 7 [json_name="mainFileUri"];
  // Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
  map<string, string> properties = 8 [json_name="properties"];
  // Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
  repeated string py_file_uris = 9 [json_name="pyFileUris"];
  // Runtime version. If not specified, the default runtime version is used.
  optional string runtime_version = 10 [json_name="runtimeVersion"];
}

// Statistics for a BigSpark query. Populated as part of JobStatistics2
message SparkStatistics {
  // Output only. Endpoints returned from Dataproc. Key list: - history_server_endpoint: A link to Spark job UI.
  map<string, string> endpoints = 1 [json_name="endpoints"];
  // Output only. The Google Cloud Storage bucket that is used as the default file system by the Spark application. This field is only filled when the Spark procedure uses the invoker security mode. The `gcsStagingBucket` bucket is inferred from the `@@spark_proc_properties.staging_bucket` system variable (if it is provided). Otherwise, BigQuery creates a default staging bucket for the job and returns the bucket name in this field. Example: * `gs://[bucket_name]`
  optional string gcs_staging_bucket = 2 [json_name="gcsStagingBucket"];
  // Output only. The Cloud KMS encryption key that is used to protect the resources created by the Spark job. If the Spark procedure uses the invoker security mode, the Cloud KMS encryption key is either inferred from the provided system variable, `@@spark_proc_properties.kms_key_name`, or the default key of the BigQuery job's project (if the CMEK organization policy is enforced). Otherwise, the Cloud KMS key is either inferred from the Spark connection associated with the procedure (if it is provided), or from the default key of the Spark connection's project if the CMEK organization policy is enforced. Example: * `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
  optional string kms_key_name = 3 [json_name="kmsKeyName"];
  // Output only. Logging info is used to generate a link to Cloud Logging.
  optional SparkLoggingInfo logging_info = 4 [json_name="loggingInfo"];
  // Output only. Spark job ID if a Spark job is created successfully.
  optional string spark_job_id = 5 [json_name="sparkJobId"];
  // Output only. Location where the Spark job is executed. A location is selected by BigQueury for jobs configured to run in a multi-region.
  optional string spark_job_location = 6 [json_name="sparkJobLocation"];
}

// Performance insights compared to the previous executions for a specific stage.
message StagePerformanceChangeInsight {
  // Output only. Input data change insight of the query stage.
  optional InputDataChange input_data_change = 1 [json_name="inputDataChange"];
  // Output only. The stage id that the insight mapped to.
  optional int64 stage_id = 2 [json_name="stageId"];
}

// Standalone performance insights for a specific stage.
message StagePerformanceStandaloneInsight {
  // Output only. If present, the stage had the following reasons for being disqualified from BI Engine execution.
  repeated BiEngineReason bi_engine_reasons = 1 [json_name="biEngineReasons"];
  // Output only. High cardinality joins in the stage.
  repeated HighCardinalityJoin high_cardinality_joins = 2 [json_name="highCardinalityJoins"];
  // Output only. True if the stage has insufficient shuffle quota.
  optional bool insufficient_shuffle_quota = 3 [json_name="insufficientShuffleQuota"];
  // Output only. Partition skew in the stage.
  optional PartitionSkew partition_skew = 4 [json_name="partitionSkew"];
  // Output only. True if the stage has a slot contention issue.
  optional bool slot_contention = 5 [json_name="slotContention"];
  // Output only. The stage id that the insight mapped to.
  optional int64 stage_id = 6 [json_name="stageId"];
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } } * RANGE: { "typeKind": "RANGE", "rangeElementType": {"typeKind": "DATE"} }
message StandardSqlDataType {
  // The type of the array's elements, if type_kind = "ARRAY".
  optional StandardSqlDataType array_element_type = 1 [json_name="arrayElementType"];
  // The type of the range's elements, if type_kind = "RANGE".
  optional StandardSqlDataType range_element_type = 2 [json_name="rangeElementType"];
  // The fields of this struct, in order, if type_kind = "STRUCT".
  optional StandardSqlStructType struct_type = 3 [json_name="structType"];
  // Required. The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
  optional string type_kind = 4 [json_name="typeKind"];
}

// A field or a column.
message StandardSqlField {
  // Optional. The name of this field. Can be absent for struct fields.
  optional string name = 1 [json_name="name"];
  // Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
  optional StandardSqlDataType type = 2 [json_name="type"];
}

// The representation of a SQL STRUCT type.
message StandardSqlStructType {
  // Fields within the struct.
  repeated StandardSqlField fields = 1 [json_name="fields"];
}

// A table type
message StandardSqlTableType {
  // The columns in this table type
  repeated StandardSqlField columns = 1 [json_name="columns"];
}

// Contains information about how a table's data is stored and accessed by open source query engines.
message StorageDescriptor {
  // Optional. Specifies the fully qualified class name of the InputFormat (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcInputFormat"). The maximum length is 128 characters.
  optional string input_format = 1 [json_name="inputFormat"];
  // Optional. The physical location of the table (e.g. `gs://spark-dataproc-data/pangea-data/case_sensitive/` or `gs://spark-dataproc-data/pangea-data/*`). The maximum length is 2056 bytes.
  optional string location_uri = 2 [json_name="locationUri"];
  // Optional. Specifies the fully qualified class name of the OutputFormat (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat"). The maximum length is 128 characters.
  optional string output_format = 3 [json_name="outputFormat"];
  // Optional. Serializer and deserializer information.
  optional SerDeInfo serde_info = 4 [json_name="serdeInfo"];
}

message Streamingbuffer {
  // Output only. A lower-bound estimate of the number of bytes currently in the streaming buffer.
  optional uint64 estimated_bytes = 1 [json_name="estimatedBytes"];
  // Output only. A lower-bound estimate of the number of rows currently in the streaming buffer.
  optional uint64 estimated_rows = 2 [json_name="estimatedRows"];
  // Output only. Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
  optional uint64 oldest_entry_time = 3 [json_name="oldestEntryTime"];
}

// Search space for string and enum.
message StringHparamSearchSpace {
  // Canididates for the string or enum parameter in lower case.
  repeated string candidates = 1 [json_name="candidates"];
}

// System variables given to a query.
message SystemVariables {
  // Output only. Data type for each system variable.
  map<string, StandardSqlDataType> types = 1 [json_name="types"];
  // Output only. Value for each system variable.
  map<string, .google.protobuf.Any> values = 2 [json_name="values"];
}

message Table {
  // Optional. Specifies the configuration of a BigLake managed table.
  optional BigLakeConfiguration biglake_configuration = 1 [json_name="biglakeConfiguration"];
  // Output only. Contains information about the clone. This value is set via the clone operation.
  optional CloneDefinition clone_definition = 2 [json_name="cloneDefinition"];
  // Clustering specification for the table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
  optional Clustering clustering = 3 [json_name="clustering"];
  // Output only. The time when this table was created, in milliseconds since the epoch.
  optional int64 creation_time = 4 [json_name="creationTime"];
  // Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
  optional string default_collation = 5 [json_name="defaultCollation"];
  // Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.
  optional string default_rounding_mode = 6 [json_name="defaultRoundingMode"];
  // Optional. A user-friendly description of this table.
  optional string description = 7 [json_name="description"];
  // Custom encryption configuration (e.g., Cloud KMS keys).
  optional EncryptionConfiguration encryption_configuration = 8 [json_name="encryptionConfiguration"];
  // Output only. A hash of this resource.
  optional string etag = 9 [json_name="etag"];
  // Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.
  optional int64 expiration_time = 10 [json_name="expirationTime"];
  // Optional. Options defining open source compatible table.
  optional ExternalCatalogTableOptions external_catalog_table_options = 11 [json_name="externalCatalogTableOptions"];
  // Optional. Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
  optional ExternalDataConfiguration external_data_configuration = 12 [json_name="externalDataConfiguration"];
  // Optional. A descriptive name for this table.
  optional string friendly_name = 13 [json_name="friendlyName"];
  // Output only. An opaque ID uniquely identifying the table.
  optional string id = 14 [json_name="id"];
  // The type of resource ID.
  optional string kind = 15 [json_name="kind"];
  // The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
  map<string, string> labels = 16 [json_name="labels"];
  // Output only. The time when this table was last modified, in milliseconds since the epoch.
  optional uint64 last_modified_time = 17 [json_name="lastModifiedTime"];
  // Output only. The geographic location where the table resides. This value is inherited from the dataset.
  optional string location = 18 [json_name="location"];
  // Optional. If set, overrides the default managed table type configured in the dataset.
  optional string managed_table_type = 19 [json_name="managedTableType"];
  // Optional. The materialized view definition.
  optional MaterializedViewDefinition materialized_view = 20 [json_name="materializedView"];
  // Output only. The materialized view status.
  optional MaterializedViewStatus materialized_view_status = 21 [json_name="materializedViewStatus"];
  // Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.
  optional string max_staleness = 22 [json_name="maxStaleness"];
  // Deprecated.
  optional ModelDefinition model = 23 [json_name="model"];
  // Output only. Number of logical bytes that are less than 90 days old.
  optional int64 num_active_logical_bytes = 24 [json_name="numActiveLogicalBytes"];
  // Output only. Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
  optional int64 num_active_physical_bytes = 25 [json_name="numActivePhysicalBytes"];
  // Output only. The size of this table in logical bytes, excluding any data in the streaming buffer.
  optional int64 num_bytes = 26 [json_name="numBytes"];
  // Output only. Number of physical bytes used by current live data storage. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
  optional int64 num_current_physical_bytes = 27 [json_name="numCurrentPhysicalBytes"];
  // Output only. The number of logical bytes in the table that are considered "long-term storage".
  optional int64 num_long_term_bytes = 28 [json_name="numLongTermBytes"];
  // Output only. Number of logical bytes that are more than 90 days old.
  optional int64 num_long_term_logical_bytes = 29 [json_name="numLongTermLogicalBytes"];
  // Output only. Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
  optional int64 num_long_term_physical_bytes = 30 [json_name="numLongTermPhysicalBytes"];
  // Output only. The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
  optional int64 num_partitions = 31 [json_name="numPartitions"];
  // Output only. The physical size of this table in bytes. This includes storage used for time travel.
  optional int64 num_physical_bytes = 32 [json_name="numPhysicalBytes"];
  // Output only. The number of rows of data in this table, excluding any data in the streaming buffer.
  optional uint64 num_rows = 33 [json_name="numRows"];
  // Output only. Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
  optional int64 num_time_travel_physical_bytes = 34 [json_name="numTimeTravelPhysicalBytes"];
  // Output only. Total number of logical bytes in the table or materialized view.
  optional int64 num_total_logical_bytes = 35 [json_name="numTotalLogicalBytes"];
  // Output only. The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.
  optional int64 num_total_physical_bytes = 36 [json_name="numTotalPhysicalBytes"];
  // Optional. The partition information for all table formats, including managed partitioned tables, hive partitioned tables, iceberg partitioned, and metastore partitioned tables. This field is only populated for metastore partitioned tables. For other table formats, this is an output only field.
  optional PartitioningDefinition partition_definition = 37 [json_name="partitionDefinition"];
  // If specified, configures range partitioning for this table.
  optional RangePartitioning range_partitioning = 38 [json_name="rangePartitioning"];
  // Optional. Output only. Table references of all replicas currently active on the table.
  repeated TableReference replicas = 39 [json_name="replicas"];
  // Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.
  optional bool require_partition_filter = 40 [json_name="requirePartitionFilter"];
  // [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of "key": value pairs. The key is the namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. "production".
  map<string, string> resource_tags = 41 [json_name="resourceTags"];
  // Optional. Output only. Restriction config for table. If set, restrict certain accesses on the table based on the config. See [Data egress](https://cloud.google.com/bigquery/docs/analytics-hub-introduction#data_egress) for more details.
  optional RestrictionConfig restrictions = 42 [json_name="restrictions"];
  // Optional. Describes the schema of this table.
  optional TableSchema schema = 43 [json_name="schema"];
  // Output only. A URL that can be used to access this resource again.
  optional string self_link = 44 [json_name="selfLink"];
  // Output only. Contains information about the snapshot. This value is set via snapshot creation.
  optional SnapshotDefinition snapshot_definition = 45 [json_name="snapshotDefinition"];
  // Output only. Contains information regarding this table's streaming buffer, if one is present. This field will be absent if the table is not being streamed to or if there is no data in the streaming buffer.
  optional Streamingbuffer streaming_buffer = 46 [json_name="streamingBuffer"];
  // Optional. Tables Primary Key and Foreign Key information
  optional TableConstraints table_constraints = 47 [json_name="tableConstraints"];
  // Required. Reference describing the ID of this table.
  optional TableReference table_reference = 48 [json_name="tableReference"];
  // Optional. Table replication info for table created `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
  optional TableReplicationInfo table_replication_info = 49 [json_name="tableReplicationInfo"];
  // If specified, configures time-based partitioning for this table.
  optional TimePartitioning time_partitioning = 50 [json_name="timePartitioning"];
  // Output only. Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](https://cloud.google.com/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.
  optional string type = 51 [json_name="type"];
  // Optional. The view definition.
  optional ViewDefinition view = 52 [json_name="view"];
}

message TableCell {
  optional .google.protobuf.Any v = 1 [json_name="v"];
}

message ColumnReferences {
  optional string referenced_column = 1 [json_name="referencedColumn"];
  optional string referencing_column = 2 [json_name="referencingColumn"];
}

message ReferencedTable {
  optional string dataset_id = 1 [json_name="datasetId"];
  optional string project_id = 2 [json_name="projectId"];
  optional string table_id = 3 [json_name="tableId"];
}

message TableConstraintsForeignKeys {
  repeated ColumnReferences column_references = 1 [json_name="columnReferences"];
  optional string name = 2 [json_name="name"];
  optional ReferencedTable referenced_table = 3 [json_name="referencedTable"];
}

message TableConstraintsPrimaryKey {
  repeated string columns = 1 [json_name="columns"];
}

// The TableConstraints defines the primary key and foreign key.
message TableConstraints {
  // Optional. Present only if the table has a foreign key. The foreign key is not enforced.
  repeated TableConstraintsForeignKeys foreign_keys = 1 [json_name="foreignKeys"];
  // Represents the primary key constraint on a table's columns.
  optional TableConstraintsPrimaryKey primary_key = 2 [json_name="primaryKey"];
}

message TableDataInsertAllRequestRows {
  optional string insert_id = 1 [json_name="insertId"];
  optional JsonObject json = 2 [json_name="json"];
}

// Request for sending a single streaming insert.
message TableDataInsertAllRequest {
  // Optional. Accept rows that contain values that do not match the schema. The unknown values are ignored. Default is false, which treats unknown values as errors.
  optional bool ignore_unknown_values = 1 [json_name="ignoreUnknownValues"];
  // Optional. The resource type of the response. The value is not checked at the backend. Historically, it has been set to "bigquery#tableDataInsertAllRequest" but you are not required to set it.
  optional string kind = 2 [json_name="kind"];
  repeated TableDataInsertAllRequestRows rows = 3 [json_name="rows"];
  // Optional. Insert all valid rows of a request, even if invalid rows exist. The default value is false, which causes the entire request to fail if any invalid rows exist.
  optional bool skip_invalid_rows = 4 [json_name="skipInvalidRows"];
  // Optional. If specified, treats the destination table as a base template, and inserts the rows into an instance table named "{destination}{templateSuffix}". BigQuery will manage creation of the instance table, using the schema of the base template table. See https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables for considerations when working with templates tables.
  optional string template_suffix = 5 [json_name="templateSuffix"];
  // Optional. Unique request trace id. Used for debugging purposes only. It is case-sensitive, limited to up to 36 ASCII characters. A UUID is recommended.
  optional string trace_id = 6 [json_name="traceId"];
}

message TableDataInsertAllResponseInsertErrors {
  repeated ErrorProto errors = 1 [json_name="errors"];
  optional uint32 index = 2 [json_name="index"];
}

// Describes the format of a streaming insert response.
message TableDataInsertAllResponse {
  // Describes specific errors encountered while processing the request.
  repeated TableDataInsertAllResponseInsertErrors insert_errors = 1 [json_name="insertErrors"];
  // Returns "bigquery#tableDataInsertAllResponse".
  optional string kind = 2 [json_name="kind"];
}

message TableDataList {
  // A hash of this page of results.
  optional string etag = 1 [json_name="etag"];
  // The resource type of the response.
  optional string kind = 2 [json_name="kind"];
  // A token used for paging results. Providing this token instead of the startIndex parameter can help you retrieve stable results when an underlying table is changing.
  optional string page_token = 3 [json_name="pageToken"];
  // Rows of results.
  repeated TableRow rows = 4 [json_name="rows"];
  // Total rows of the entire table. In order to show default value 0 we have to present it as string.
  optional int64 total_rows = 5 [json_name="totalRows"];
}

message TableFieldSchemaCategories {
  repeated string names = 1 [json_name="names"];
}

message TableFieldSchemaPolicyTags {
  repeated string names = 1 [json_name="names"];
}

message TableFieldSchemaRangeElementType {
  optional string type = 1 [json_name="type"];
}

// A field in TableSchema
message TableFieldSchema {
  // Deprecated.
  optional TableFieldSchemaCategories categories = 1 [json_name="categories"];
  // Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
  optional string collation = 2 [json_name="collation"];
  // Optional. Data policy options, will replace the data_policies.
  repeated DataPolicyOption data_policies = 3 [json_name="dataPolicies"];
  // Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.
  optional string default_value_expression = 4 [json_name="defaultValueExpression"];
  // Optional. The field description. The maximum length is 1,024 characters.
  optional string description = 5 [json_name="description"];
  // Optional. Describes the nested schema fields if the type property is set to RECORD.
  repeated TableFieldSchema fields = 6 [json_name="fields"];
  // Optional. Definition of the foreign data type. Only valid for top-level schema fields (not nested fields). If the type is FOREIGN, this field is required.
  optional string foreign_type_definition = 7 [json_name="foreignTypeDefinition"];
  // Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
  optional int64 max_length = 8 [json_name="maxLength"];
  // Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
  optional string mode = 9 [json_name="mode"];
  // Required. The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
  optional string name = 10 [json_name="name"];
  // Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
  optional TableFieldSchemaPolicyTags policy_tags = 11 [json_name="policyTags"];
  // Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC": 1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
  optional int64 precision = 12 [json_name="precision"];
  // Represents the type of a field element.
  optional TableFieldSchemaRangeElementType range_element_type = 13 [json_name="rangeElementType"];
  // Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
  optional string rounding_mode = 14 [json_name="roundingMode"];
  // Optional. See documentation for precision.
  optional int64 scale = 15 [json_name="scale"];
  // Required. The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) * RANGE Use of RECORD/STRUCT indicates that the field contains a nested schema.
  optional string type = 16 [json_name="type"];
}

message View {
  optional PrivacyPolicy privacy_policy = 1 [json_name="privacyPolicy"];
  optional bool use_legacy_sql = 2 [json_name="useLegacySql"];
}

message TableListTables {
  optional Clustering clustering = 1 [json_name="clustering"];
  optional int64 creation_time = 2 [json_name="creationTime"];
  optional int64 expiration_time = 3 [json_name="expirationTime"];
  optional string friendly_name = 4 [json_name="friendlyName"];
  optional string id = 5 [json_name="id"];
  optional string kind = 6 [json_name="kind"];
  map<string, string> labels = 7 [json_name="labels"];
  optional RangePartitioning range_partitioning = 8 [json_name="rangePartitioning"];
  optional bool require_partition_filter = 9 [json_name="requirePartitionFilter"];
  optional TableReference table_reference = 10 [json_name="tableReference"];
  optional TimePartitioning time_partitioning = 11 [json_name="timePartitioning"];
  optional string type = 12 [json_name="type"];
  optional View view = 13 [json_name="view"];
}

// Partial projection of the metadata for a given table in a list response.
message TableList {
  // A hash of this page of results.
  optional string etag = 1 [json_name="etag"];
  // The type of list.
  optional string kind = 2 [json_name="kind"];
  // A token to request the next page of results.
  optional string next_page_token = 3 [json_name="nextPageToken"];
  // Tables in the requested dataset.
  repeated TableListTables tables = 4 [json_name="tables"];
  // The total number of tables in the dataset.
  optional int32 total_items = 5 [json_name="totalItems"];
}

// Table level detail on the usage of metadata caching. Only set for Metadata caching eligible tables referenced in the query.
message TableMetadataCacheUsage {
  // Free form human-readable reason metadata caching was unused for the job.
  optional string explanation = 1 [json_name="explanation"];
  // Duration since last refresh as of this job for managed tables (indicates metadata cache staleness as seen by this job).
  optional .google.protobuf.Duration staleness = 2 [json_name="staleness"];
  // Metadata caching eligible table referenced in the query.
  optional TableReference table_reference = 3 [json_name="tableReference"];
  // [Table type](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
  optional string table_type = 4 [json_name="tableType"];
  // Reason for not using metadata caching for the table.
  optional string unused_reason = 5 [json_name="unusedReason"];
}

message TableReference {
  // Required. The ID of the dataset containing this table.
  optional string dataset_id = 1 [json_name="datasetId"];
  // Required. The ID of the project containing this table.
  optional string project_id = 2 [json_name="projectId"];
  // Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
  optional string table_id = 3 [json_name="tableId"];
}

// Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
message TableReplicationInfo {
  // Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.
  optional int64 replicated_source_last_refresh_time = 1 [json_name="replicatedSourceLastRefreshTime"];
  // Optional. Output only. Replication error that will permanently stopped table replication.
  optional ErrorProto replication_error = 2 [json_name="replicationError"];
  // Optional. Specifies the interval at which the source table is polled for updates. It's Optional. If not specified, default replication interval would be applied.
  optional int64 replication_interval_ms = 3 [json_name="replicationIntervalMs"];
  // Optional. Output only. Replication status of configured replication.
  optional string replication_status = 4 [json_name="replicationStatus"];
  // Required. Source table reference that is replicated.
  optional TableReference source_table = 5 [json_name="sourceTable"];
}

message TableRow {
  // Represents a single row in the result set, consisting of one or more fields.
  repeated TableCell f = 1 [json_name="f"];
}

// Schema of a table
message TableSchema {
  // Describes the fields in a table.
  repeated TableFieldSchema fields = 1 [json_name="fields"];
  // Optional. Specifies metadata of the foreign data type definition in field schema (TableFieldSchema.foreign_type_definition).
  optional ForeignTypeInfo foreign_type_info = 2 [json_name="foreignTypeInfo"];
}

// Request message for `TestIamPermissions` method.
message TestIamPermissionsRequest {
  // The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
  repeated string permissions = 1 [json_name="permissions"];
}

// Response message for `TestIamPermissions` method.
message TestIamPermissionsResponse {
  // A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
  repeated string permissions = 1 [json_name="permissions"];
}

message TimePartitioning {
  // Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
  optional int64 expiration_ms = 1 [json_name="expirationMs"];
  // Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
  optional string field = 2 [json_name="field"];
  // If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
  optional bool require_partition_filter = 3 [json_name="requirePartitionFilter"];
  // Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
  optional string type = 4 [json_name="type"];
}

// Options used in model training.
message TrainingOptions {
  // Activation function of the neural nets.
  optional string activation_fn = 1 [json_name="activationFn"];
  // If true, detect step changes and make data adjustment in the input time series.
  optional bool adjust_step_changes = 2 [json_name="adjustStepChanges"];
  // Whether to use approximate feature contribution method in XGBoost model explanation for global explain.
  optional bool approx_global_feature_contrib = 3 [json_name="approxGlobalFeatureContrib"];
  // Whether to enable auto ARIMA or not.
  optional bool auto_arima = 4 [json_name="autoArima"];
  // The max value of the sum of non-seasonal p and q.
  optional int64 auto_arima_max_order = 5 [json_name="autoArimaMaxOrder"];
  // The min value of the sum of non-seasonal p and q.
  optional int64 auto_arima_min_order = 6 [json_name="autoArimaMinOrder"];
  // Whether to calculate class weights automatically based on the popularity of each label.
  optional bool auto_class_weights = 7 [json_name="autoClassWeights"];
  // Batch size for dnn models.
  optional int64 batch_size = 8 [json_name="batchSize"];
  // Booster type for boosted tree models.
  optional string booster_type = 9 [json_name="boosterType"];
  // Budget in hours for AutoML training.
  optional double budget_hours = 10 [json_name="budgetHours"];
  // Whether or not p-value test should be computed for this model. Only available for linear and logistic regression models.
  optional bool calculate_p_values = 11 [json_name="calculatePValues"];
  // Categorical feature encoding method.
  optional string category_encoding_method = 12 [json_name="categoryEncodingMethod"];
  // If true, clean spikes and dips in the input time series.
  optional bool clean_spikes_and_dips = 13 [json_name="cleanSpikesAndDips"];
  // Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
  optional string color_space = 14 [json_name="colorSpace"];
  // Subsample ratio of columns for each level for boosted tree models.
  optional double colsample_bylevel = 15 [json_name="colsampleBylevel"];
  // Subsample ratio of columns for each node(split) for boosted tree models.
  optional double colsample_bynode = 16 [json_name="colsampleBynode"];
  // Subsample ratio of columns when constructing each tree for boosted tree models.
  optional double colsample_bytree = 17 [json_name="colsampleBytree"];
  // The contribution metric. Applies to contribution analysis models. Allowed formats supported are for summable and summable ratio contribution metrics. These include expressions such as `SUM(x)` or `SUM(x)/SUM(y)`, where x and y are column names from the base table.
  optional string contribution_metric = 18 [json_name="contributionMetric"];
  // Type of normalization algorithm for boosted tree models using dart booster.
  optional string dart_normalize_type = 19 [json_name="dartNormalizeType"];
  // The data frequency of a time series.
  optional string data_frequency = 20 [json_name="dataFrequency"];
  // The column to split data with. This column won't be used as a feature. 1. When data_split_method is CUSTOM, the corresponding column should be boolean. The rows with true value tag are eval data, and the false are training data. 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the corresponding column are used as training data, and the rest are eval data. It respects the order in Orderable data types: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data_type_properties
  optional string data_split_column = 21 [json_name="dataSplitColumn"];
  // The fraction of evaluation data over the whole input data. The rest of data will be used as training data. The format should be double. Accurate to two decimal places. Default value is 0.2.
  optional double data_split_eval_fraction = 22 [json_name="dataSplitEvalFraction"];
  // The data split type for training and evaluation, e.g. RANDOM.
  optional string data_split_method = 23 [json_name="dataSplitMethod"];
  // If true, perform decompose time series and save the results.
  optional bool decompose_time_series = 24 [json_name="decomposeTimeSeries"];
  // Optional. Names of the columns to slice on. Applies to contribution analysis models.
  repeated string dimension_id_columns = 25 [json_name="dimensionIdColumns"];
  // Distance type for clustering models.
  optional string distance_type = 26 [json_name="distanceType"];
  // Dropout probability for dnn models.
  optional double dropout = 27 [json_name="dropout"];
  // Whether to stop early when the loss doesn't improve significantly any more (compared to min_relative_progress). Used only for iterative training algorithms.
  optional bool early_stop = 28 [json_name="earlyStop"];
  // If true, enable global explanation during training.
  optional bool enable_global_explain = 29 [json_name="enableGlobalExplain"];
  // Feedback type that specifies which algorithm to run for matrix factorization.
  optional string feedback_type = 30 [json_name="feedbackType"];
  // Whether the model should include intercept during model training.
  optional bool fit_intercept = 31 [json_name="fitIntercept"];
  // Hidden units for dnn models.
  repeated int64 hidden_units = 32 [json_name="hiddenUnits"];
  // The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
  optional string holiday_region = 33 [json_name="holidayRegion"];
  // A list of geographical regions that are used for time series modeling.
  repeated string holiday_regions = 34 [json_name="holidayRegions"];
  // The number of periods ahead that need to be forecasted.
  optional int64 horizon = 35 [json_name="horizon"];
  // The target evaluation metrics to optimize the hyperparameters for.
  repeated string hparam_tuning_objectives = 36 [json_name="hparamTuningObjectives"];
  // Include drift when fitting an ARIMA model.
  optional bool include_drift = 37 [json_name="includeDrift"];
  // Specifies the initial learning rate for the line search learn rate strategy.
  optional double initial_learn_rate = 38 [json_name="initialLearnRate"];
  // Name of input label columns in training data.
  repeated string input_label_columns = 39 [json_name="inputLabelColumns"];
  // Name of the instance weight column for training data. This column isn't be used as a feature.
  optional string instance_weight_column = 40 [json_name="instanceWeightColumn"];
  // Number of integral steps for the integrated gradients explain method.
  optional int64 integrated_gradients_num_steps = 41 [json_name="integratedGradientsNumSteps"];
  // Name of the column used to determine the rows corresponding to control and test. Applies to contribution analysis models.
  optional string is_test_column = 42 [json_name="isTestColumn"];
  // Item column specified for matrix factorization models.
  optional string item_column = 43 [json_name="itemColumn"];
  // The column used to provide the initial centroids for kmeans algorithm when kmeans_initialization_method is CUSTOM.
  optional string kmeans_initialization_column = 44 [json_name="kmeansInitializationColumn"];
  // The method used to initialize the centroids for kmeans algorithm.
  optional string kmeans_initialization_method = 45 [json_name="kmeansInitializationMethod"];
  // L1 regularization coefficient to activations.
  optional double l1_reg_activation = 46 [json_name="l1RegActivation"];
  // L1 regularization coefficient.
  optional double l1_regularization = 47 [json_name="l1Regularization"];
  // L2 regularization coefficient.
  optional double l2_regularization = 48 [json_name="l2Regularization"];
  // Weights associated with each label class, for rebalancing the training data. Only applicable for classification models.
  map<string, double> label_class_weights = 49 [json_name="labelClassWeights"];
  // Learning rate in training. Used only for iterative training algorithms.
  optional double learn_rate = 50 [json_name="learnRate"];
  // The strategy to determine learn rate for the current iteration.
  optional string learn_rate_strategy = 51 [json_name="learnRateStrategy"];
  // Type of loss function used during training run.
  optional string loss_type = 52 [json_name="lossType"];
  // The maximum number of iterations in training. Used only for iterative training algorithms.
  optional int64 max_iterations = 53 [json_name="maxIterations"];
  // Maximum number of trials to run in parallel.
  optional int64 max_parallel_trials = 54 [json_name="maxParallelTrials"];
  // The maximum number of time points in a time series that can be used in modeling the trend component of the time series. Don't use this option with the `timeSeriesLengthFraction` or `minTimeSeriesLength` options.
  optional int64 max_time_series_length = 55 [json_name="maxTimeSeriesLength"];
  // Maximum depth of a tree for boosted tree models.
  optional int64 max_tree_depth = 56 [json_name="maxTreeDepth"];
  // The apriori support minimum. Applies to contribution analysis models.
  optional double min_apriori_support = 57 [json_name="minAprioriSupport"];
  // When early_stop is true, stops training when accuracy improvement is less than 'min_relative_progress'. Used only for iterative training algorithms.
  optional double min_relative_progress = 58 [json_name="minRelativeProgress"];
  // Minimum split loss for boosted tree models.
  optional double min_split_loss = 59 [json_name="minSplitLoss"];
  // The minimum number of time points in a time series that are used in modeling the trend component of the time series. If you use this option you must also set the `timeSeriesLengthFraction` option. This training option ensures that enough time points are available when you use `timeSeriesLengthFraction` in trend modeling. This is particularly important when forecasting multiple time series in a single query using `timeSeriesIdColumn`. If the total number of time points is less than the `minTimeSeriesLength` value, then the query uses all available time points.
  optional int64 min_time_series_length = 60 [json_name="minTimeSeriesLength"];
  // Minimum sum of instance weight needed in a child for boosted tree models.
  optional int64 min_tree_child_weight = 61 [json_name="minTreeChildWeight"];
  // The model registry.
  optional string model_registry = 62 [json_name="modelRegistry"];
  // Google Cloud Storage URI from which the model was imported. Only applicable for imported models.
  optional string model_uri = 63 [json_name="modelUri"];
  // A specification of the non-seasonal part of the ARIMA model: the three components (p, d, q) are the AR order, the degree of differencing, and the MA order.
  optional ArimaOrder non_seasonal_order = 64 [json_name="nonSeasonalOrder"];
  // Number of clusters for clustering models.
  optional int64 num_clusters = 65 [json_name="numClusters"];
  // Num factors specified for matrix factorization models.
  optional int64 num_factors = 66 [json_name="numFactors"];
  // Number of parallel trees constructed during each iteration for boosted tree models.
  optional int64 num_parallel_tree = 67 [json_name="numParallelTree"];
  // Number of principal components to keep in the PCA model. Must be <= the number of features.
  optional int64 num_principal_components = 68 [json_name="numPrincipalComponents"];
  // Number of trials to run this hyperparameter tuning job.
  optional int64 num_trials = 69 [json_name="numTrials"];
  // Optimization strategy for training linear regression models.
  optional string optimization_strategy = 70 [json_name="optimizationStrategy"];
  // Optimizer used for training the neural nets.
  optional string optimizer = 71 [json_name="optimizer"];
  // The minimum ratio of cumulative explained variance that needs to be given by the PCA model.
  optional double pca_explained_variance_ratio = 72 [json_name="pcaExplainedVarianceRatio"];
  // The solver for PCA.
  optional string pca_solver = 73 [json_name="pcaSolver"];
  // Number of paths for the sampled Shapley explain method.
  optional int64 sampled_shapley_num_paths = 74 [json_name="sampledShapleyNumPaths"];
  // If true, scale the feature values by dividing the feature standard deviation. Currently only apply to PCA.
  optional bool scale_features = 75 [json_name="scaleFeatures"];
  // Whether to standardize numerical features. Default to true.
  optional bool standardize_features = 76 [json_name="standardizeFeatures"];
  // Subsample fraction of the training data to grow tree to prevent overfitting for boosted tree models.
  optional double subsample = 77 [json_name="subsample"];
  // Based on the selected TF version, the corresponding docker image is used to train external models.
  optional string tf_version = 78 [json_name="tfVersion"];
  // Column to be designated as time series data for ARIMA model.
  optional string time_series_data_column = 79 [json_name="timeSeriesDataColumn"];
  // The time series id column that was used during ARIMA model training.
  optional string time_series_id_column = 80 [json_name="timeSeriesIdColumn"];
  // The time series id columns that were used during ARIMA model training.
  repeated string time_series_id_columns = 81 [json_name="timeSeriesIdColumns"];
  // The fraction of the interpolated length of the time series that's used to model the time series trend component. All of the time points of the time series are used to model the non-trend component. This training option accelerates modeling training without sacrificing much forecasting accuracy. You can use this option with `minTimeSeriesLength` but not with `maxTimeSeriesLength`.
  optional double time_series_length_fraction = 82 [json_name="timeSeriesLengthFraction"];
  // Column to be designated as time series timestamp for ARIMA model.
  optional string time_series_timestamp_column = 83 [json_name="timeSeriesTimestampColumn"];
  // Tree construction algorithm for boosted tree models.
  optional string tree_method = 84 [json_name="treeMethod"];
  // Smoothing window size for the trend component. When a positive value is specified, a center moving average smoothing is applied on the history trend. When the smoothing window is out of the boundary at the beginning or the end of the trend, the first element or the last element is padded to fill the smoothing window before the average is applied.
  optional int64 trend_smoothing_window_size = 85 [json_name="trendSmoothingWindowSize"];
  // User column specified for matrix factorization models.
  optional string user_column = 86 [json_name="userColumn"];
  // The version aliases to apply in Vertex AI model registry. Always overwrite if the version aliases exists in a existing model.
  repeated string vertex_ai_model_version_aliases = 87 [json_name="vertexAiModelVersionAliases"];
  // Hyperparameter for matrix factoration when implicit feedback type is specified.
  optional double wals_alpha = 88 [json_name="walsAlpha"];
  // Whether to train a model from the last checkpoint.
  optional bool warm_start = 89 [json_name="warmStart"];
  // User-selected XGBoost versions for training of XGBoost models.
  optional string xgboost_version = 90 [json_name="xgboostVersion"];
}

// Information about a single training query run for the model.
message TrainingRun {
  // Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.
  repeated GlobalExplanation class_level_global_explanations = 1 [json_name="classLevelGlobalExplanations"];
  // Output only. Data split result of the training run. Only set when the input data is actually split.
  optional DataSplitResult data_split_result = 2 [json_name="dataSplitResult"];
  // Output only. The evaluation metrics over training/eval data that were computed at the end of training.
  optional EvaluationMetrics evaluation_metrics = 3 [json_name="evaluationMetrics"];
  // Output only. Global explanation contains the explanation of top features on the model level. Applies to both regression and classification models.
  optional GlobalExplanation model_level_global_explanation = 4 [json_name="modelLevelGlobalExplanation"];
  // Output only. Output of each iteration run, results.size() <= max_iterations.
  repeated IterationResult results = 5 [json_name="results"];
  // Output only. The start time of this training run.
  optional .google.protobuf.Timestamp start_time = 6 [json_name="startTime"];
  // Output only. Options that were used for this training run, includes user specified and default options that were used.
  optional TrainingOptions training_options = 7 [json_name="trainingOptions"];
  // Output only. The start time of this training run, in milliseconds since epoch.
  optional int64 training_start_time = 8 [json_name="trainingStartTime"];
  // The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
  optional string vertex_ai_model_id = 9 [json_name="vertexAiModelId"];
  // Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.
  optional string vertex_ai_model_version = 10 [json_name="vertexAiModelVersion"];
}

// [Alpha] Information of a multi-statement transaction.
message TransactionInfo {
  // Output only. [Alpha] Id of the transaction.
  optional string transaction_id = 1 [json_name="transactionId"];
}

// Information about a single transform column.
message TransformColumn {
  // Output only. Name of the column.
  optional string name = 1 [json_name="name"];
  // Output only. The SQL expression used in the column transform.
  optional string transform_sql = 2 [json_name="transformSql"];
  // Output only. Data type of the column after the transform.
  optional StandardSqlDataType type = 3 [json_name="type"];
}

// Request format for undeleting a dataset.
message UndeleteDatasetRequest {
  // Optional. The exact time when the dataset was deleted. If not specified, the most recently deleted version is undeleted. Undeleting a dataset using deletion time is not supported.
  optional .google.protobuf.Timestamp deletion_time = 1 [json_name="deletionTime"];
}

//  This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
message UserDefinedFunctionResource {
  // [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
  optional string inline_code = 1 [json_name="inlineCode"];
  // [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
  optional string resource_uri = 2 [json_name="resourceUri"];
}

// Statistics for a vector search query. Populated as part of JobStatistics2.
message VectorSearchStatistics {
  // When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the vector search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
  repeated IndexUnusedReason index_unused_reasons = 1 [json_name="indexUnusedReasons"];
  // Specifies the index usage mode for the query.
  optional string index_usage_mode = 2 [json_name="indexUsageMode"];
}

// Describes the definition of a logical view.
message ViewDefinition {
  // Optional. Foreign view representations.
  repeated ForeignViewDefinition foreign_definitions = 1 [json_name="foreignDefinitions"];
  // Optional. Specifices the privacy policy for the view.
  optional PrivacyPolicy privacy_policy = 2 [json_name="privacyPolicy"];
  // Required. A query that BigQuery executes when the view is referenced.
  optional string query = 3 [json_name="query"];
  // True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
  optional bool use_explicit_column_names = 4 [json_name="useExplicitColumnNames"];
  // Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
  optional bool use_legacy_sql = 5 [json_name="useLegacySql"];
  // Describes user-defined function resources used in the query.
  repeated UserDefinedFunctionResource user_defined_function_resources = 6 [json_name="userDefinedFunctionResources"];
}

message DeleteDatasetRequest {
  optional string dataset_id = 1;
  optional bool delete_contents = 2;
  optional string project_id = 3;
}

message GetDatasetRequest {
  optional int32 access_policy_version = 1;
  optional string dataset_id = 2;
  optional string dataset_view = 3;
  optional string project_id = 4;
}

message InsertDatasetRequest {
  optional int32 access_policy_version = 1;
  optional string project_id = 2;
  optional Dataset dataset = 3;
}

message ListDatasetsRequest {
  optional bool all = 1;
  optional string filter = 2;
  optional int32 max_results = 3;
  optional string page_token = 4;
  optional string project_id = 5;
}

message PatchDatasetRequest {
  optional int32 access_policy_version = 1;
  optional string dataset_id = 2;
  optional string project_id = 3;
  optional Dataset dataset = 4;
}

message UndeleteDatasetServiceRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional UndeleteDatasetRequest dataset = 3;
}

message UpdateDatasetRequest {
  optional int32 access_policy_version = 1;
  optional string dataset_id = 2;
  optional string project_id = 3;
  optional Dataset dataset = 4;
}

message CancelJobRequest {
  optional string job_id = 1;
  optional string location = 2;
  optional string project_id = 3;
}

message DeleteJobRequest {
  optional string job_id = 1;
  optional string location = 2;
  optional string project_id = 3;
}

message GetJobRequest {
  optional string job_id = 1;
  optional string location = 2;
  optional string project_id = 3;
}

message GetQueryResultsJobRequest {
  optional bool format_options_use_int64_timestamp = 1;
  optional string job_id = 2;
  optional string location = 3;
  optional int32 max_results = 4;
  optional string page_token = 5;
  optional string project_id = 6;
  optional string start_index = 7;
  optional int32 timeout_ms = 8;
}

message InsertJobRequest {
  optional string project_id = 1;
  optional Job job = 2;
}

message ListJobsRequest {
  optional bool all_users = 1;
  optional string max_creation_time = 2;
  optional int32 max_results = 3;
  optional string min_creation_time = 4;
  optional string page_token = 5;
  optional string parent_job_id = 6;
  optional string project_id = 7;
  optional string projection = 8;
  optional string state_filter = 9;
}

message QueryJobRequest {
  optional string project_id = 1;
  optional QueryRequest job = 2;
}

message DeleteModelRequest {
  optional string dataset_id = 1;
  optional string model_id = 2;
  optional string project_id = 3;
}

message GetModelRequest {
  optional string dataset_id = 1;
  optional string model_id = 2;
  optional string project_id = 3;
}

message ListModelsRequest {
  optional string dataset_id = 1;
  optional int32 max_results = 2;
  optional string page_token = 3;
  optional string project_id = 4;
}

message PatchModelRequest {
  optional string dataset_id = 1;
  optional string model_id = 2;
  optional string project_id = 3;
  optional Model model = 4;
}

message GetServiceAccountProjectRequest {
  optional string project_id = 1;
}

message ListProjectsRequest {
  optional int32 max_results = 1;
  optional string page_token = 2;
}

message DeleteRoutineRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional string routine_id = 3;
}

message GetRoutineRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional string read_mask = 3;
  optional string routine_id = 4;
}

message InsertRoutineRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional Routine routine = 3;
}

message ListRoutinesRequest {
  optional string dataset_id = 1;
  optional string filter = 2;
  optional int32 max_results = 3;
  optional string page_token = 4;
  optional string project_id = 5;
  optional string read_mask = 6;
}

message UpdateRoutineRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional string routine_id = 3;
  optional Routine routine = 4;
}

message ListRowAccessPoliciesRequest {
  optional string dataset_id = 1;
  optional int32 page_size = 2;
  optional string page_token = 3;
  optional string project_id = 4;
  optional string table_id = 5;
}

message InsertAllTabledataRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional string table_id = 3;
  optional TableDataInsertAllRequest tabledata = 4;
}

message ListTabledataRequest {
  optional string dataset_id = 1;
  optional bool format_options_use_int64_timestamp = 2;
  optional int32 max_results = 3;
  optional string page_token = 4;
  optional string project_id = 5;
  optional string selected_fields = 6;
  optional string start_index = 7;
  optional string table_id = 8;
}

message DeleteTableRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional string table_id = 3;
}

message GetTableRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional string selected_fields = 3;
  optional string table_id = 4;
  optional string view = 5;
}

message InsertTableRequest {
  optional string dataset_id = 1;
  optional string project_id = 2;
  optional Table table = 3;
}

message ListTablesRequest {
  optional string dataset_id = 1;
  optional int32 max_results = 2;
  optional string page_token = 3;
  optional string project_id = 4;
}

message PatchTableRequest {
  optional bool autodetect_schema = 1;
  optional string dataset_id = 2;
  optional string project_id = 3;
  optional string table_id = 4;
  optional Table table = 5;
}

message UpdateTableRequest {
  optional bool autodetect_schema = 1;
  optional string dataset_id = 2;
  optional string project_id = 3;
  optional string table_id = 4;
  optional Table table = 5;
}
