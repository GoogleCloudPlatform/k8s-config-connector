// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package mockgcp.cloud.servicenetworking.v1;
import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
option go_package = "cloud.google.com/go/servicenetworking/apiv1/servicenetworkingpb;servicenetworkingpb";

service ServicesServer {

  // For service producers, provisions a new subnet in a peered service's shared VPC network in the requested region and with the requested size that's expressed as a CIDR range (number of leading bits of ipV4 network mask). The method checks against the assigned allocated ranges to find a non-conflicting IP address range. The method will reuse a subnet if subsequent calls contain the same subnet name, region, and prefix length. This method will make producer's tenant project to be a shared VPC service project as needed.
  rpc AddSubnetworkService(AddSubnetworkServiceRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*/*/*}:addSubnetwork"
      body: "service"
    };
  };

  // Disables VPC service controls for a connection.
  rpc DisableVpcServiceControlsService(DisableVpcServiceControlsServiceRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1/{parent=services/*}:disableVpcServiceControls"
      body: "service"
    };
  };

  // Enables VPC service controls for a connection.
  rpc EnableVpcServiceControlsService(EnableVpcServiceControlsServiceRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1/{parent=services/*}:enableVpcServiceControls"
      body: "service"
    };
  };

  // Service producers can use this method to find a currently unused range within consumer allocated ranges. This returned range is not reserved, and not guaranteed to remain unused. It will validate previously provided allocated ranges, find non-conflicting sub-range of requested size (expressed in number of leading bits of ipv4 network mask, as in CIDR range notation).
  rpc SearchRangeService(SearchRangeServiceRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}:searchRange"
      body: "service"
    };
  };

  // Service producers use this method to validate if the consumer provided network, project and requested range are valid. This allows them to use a fail-fast mechanism for consumer requests, and not have to wait for AddSubnetwork operation completion to determine if user request is invalid.
  rpc ValidateService(ValidateServiceRequest) returns (ValidateConsumerConfigResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}:validate"
      body: "service"
    };
  };
}

service ServicesConnectionsServer {

  // Creates a private connection that establishes a VPC Network Peering connection to a VPC network in the service producer's organization. The administrator of the service consumer's VPC network invokes this method. The administrator must assign one or more allocated IP ranges for provisioning subnetworks in the service producer's VPC network. This connection is used for all supported services in the service producer's organization, so it only needs to be invoked once.
  rpc CreateServicesConnection(CreateServicesConnectionRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/connections"
      body: "services_connection"
    };
  };

  // Deletes a private service access connection.
  rpc DeleteConnectionServicesConnection(DeleteConnectionServicesConnectionRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{name=services/*/connections/*}"
      body: "services_connection"
    };
  };

  // List the private connections that are configured in a service consumer's VPC network.
  rpc ListServicesConnections(ListServicesConnectionsRequest) returns (ListConnectionsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=services/*}/connections"
    };
  };

  // Updates the allocated ranges that are assigned to a connection.
  rpc PatchServicesConnection(PatchServicesConnectionRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1/{name=services/*/connections/*}"
      body: "services_connection"
    };
  };
}

service ServicesDnsRecordSetsServer {

  // Service producers can use this method to add DNS record sets to private DNS zones in the shared producer host project.
  rpc AddServicesDnsRecordSet(AddServicesDnsRecordSetRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/dnsRecordSets:add"
      body: "services_dns_record_set"
    };
  };

  // Producers can use this method to retrieve information about the DNS record set added to the private zone inside the shared tenant host project associated with a consumer network.
  rpc GetServicesDnsRecordSet(GetServicesDnsRecordSetRequest) returns (DnsRecordSet) {
    option (google.api.http) = {
      get: "/v1/{parent=services/*}/dnsRecordSets:get"
    };
  };

  // Producers can use this method to retrieve a list of available DNS RecordSets available inside the private zone on the tenant host project accessible from their network.
  rpc ListServicesDnsRecordSets(ListServicesDnsRecordSetsRequest) returns (ListDnsRecordSetsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=services/*}/dnsRecordSets:list"
    };
  };

  // Service producers can use this method to remove DNS record sets from private DNS zones in the shared producer host project.
  rpc DeleteServicesDnsRecordSet(DeleteServicesDnsRecordSetRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/dnsRecordSets:remove"
      body: "services_dns_record_set"
    };
  };

  // Service producers can use this method to update DNS record sets from private DNS zones in the shared producer host project.
  rpc UpdateServicesDnsRecordSet(UpdateServicesDnsRecordSetRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/dnsRecordSets:update"
      body: "services_dns_record_set"
    };
  };
}

service ServicesDnsZonesServer {

  // Service producers can use this method to add private DNS zones in the shared producer host project and matching peering zones in the consumer project.
  rpc AddServicesDnsZone(AddServicesDnsZoneRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/dnsZones:add"
      body: "services_dns_zone"
    };
  };

  // Service producers can use this method to remove private DNS zones in the shared producer host project and matching peering zones in the consumer project.
  rpc DeleteServicesDnsZone(DeleteServicesDnsZoneRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/dnsZones:remove"
      body: "services_dns_zone"
    };
  };
}

service ServicesProjectsServer {
}

service ServicesProjectsGlobalServer {
}

service ServicesProjectsGlobalNetworksServer {

  // Service producers use this method to get the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.
  rpc GetServicesProjectsGlobalNetwork(GetServicesProjectsGlobalNetworkRequest) returns (ConsumerConfig) {
    option (google.api.http) = {
      get: "/v1/{name=services/*/projects/*/global/networks/*}"
    };
  };

  // Consumers use this method to find out the state of VPC Service Controls. The controls could be enabled or disabled for a connection.
  rpc GetVpcServiceControlsServicesProjectsGlobalNetwork(GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) returns (VpcServiceControls) {
    option (google.api.http) = {
      get: "/v1/{name=services/*/projects/*/global/networks/*}/vpcServiceControls"
    };
  };

  // Service producers use this method to update the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.
  rpc UpdateConsumerConfigServicesProjectsGlobalNetwork(UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1/{parent=services/*/projects/*/global/networks/*}:updateConsumerConfig"
      body: "services_projects_global_network"
    };
  };
}

service ServicesProjectsGlobalNetworksDnsZonesServer {

  // Service producers can use this method to retrieve a DNS zone in the shared producer host project and the matching peering zones in consumer project
  rpc GetServicesProjectsGlobalNetworksDnsZone(GetServicesProjectsGlobalNetworksDnsZoneRequest) returns (GetDnsZoneResponse) {
    option (google.api.http) = {
      get: "/v1/{name=services/*/projects/*/global/networks/*/dnsZones/*}"
    };
  };

  // * Service producers can use this method to retrieve a list of available DNS zones in the shared producer host project and the matching peering zones in the consumer project. *
  rpc ListServicesProjectsGlobalNetworksDnsZones(ListServicesProjectsGlobalNetworksDnsZonesRequest) returns (ListDnsZonesResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=services/*/projects/*/global/networks/*}/dnsZones:list"
    };
  };
}

service ServicesProjectsGlobalNetworksPeeredDnsDomainsServer {

  // Creates a peered DNS domain which sends requests for records in given namespace originating in the service producer VPC network to the consumer VPC network to be resolved.
  rpc CreateServicesProjectsGlobalNetworksPeeredDnsDomain(CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*/projects/*/global/networks/*}/peeredDnsDomains"
      body: "services_projects_global_networks_peered_dns_domain"
    };
  };

  // Deletes a peered DNS domain.
  rpc DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      delete: "/v1/{name=services/*/projects/*/global/networks/*/peeredDnsDomains/*}"
    };
  };

  // Lists peered DNS domains for a connection.
  rpc ListServicesProjectsGlobalNetworksPeeredDnsDomains(ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) returns (ListPeeredDnsDomainsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=services/*/projects/*/global/networks/*}/peeredDnsDomains"
    };
  };
}

service ServicesRolesServer {

  // Service producers can use this method to add roles in the shared VPC host project. Each role is bound to the provided member. Each role must be selected from within an allowlisted set of roles. Each role is applied at only the granularity specified in the allowlist.
  rpc AddServicesRole(AddServicesRoleRequest) returns (.google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=services/*}/roles:add"
      body: "services_role"
    };
  };
}

// Metadata provided through GetOperation request for the LRO generated by AddDnsRecordSet API
message AddDnsRecordSetMetadata {
}

// Request to add a record set to a private managed DNS zone in the shared producer host project.
message AddDnsRecordSetRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
  // Required. The DNS record set to add.
  DnsRecordSet dns_record_set = 2 [json_name="dnsRecordSet"];
  // Required. The name of the private DNS zone in the shared producer host project to which the record set will be added.
  string zone = 3 [json_name="zone"];
}

// Metadata provided through GetOperation request for the LRO generated by AddDnsZone API
message AddDnsZoneMetadata {
}

// Request to add a private managed DNS zone in the shared producer host project and a matching DNS peering zone in the consumer project.
message AddDnsZoneRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
  // Required. The DNS name suffix for the zones e.g. `example.com.`. Cloud DNS requires that a DNS suffix ends with a trailing dot.
  string dns_suffix = 2 [json_name="dnsSuffix"];
  // Required. The name for both the private zone in the shared producer host project and the peering zone in the consumer project. Must be unique within both projects. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
  string name = 3 [json_name="name"];
}

// Represents managed DNS zones created in the shared producer host and consumer projects.
message AddDnsZoneResponse {
  // The DNS peering zone created in the consumer project.
  DnsZone consumer_peering_zone = 1 [json_name="consumerPeeringZone"];
  // The private DNS zone created in the shared producer host project.
  DnsZone producer_private_zone = 2 [json_name="producerPrivateZone"];
}

// Metadata provided through GetOperation request for the LRO generated by AddRoles API
message AddRolesMetadata {
}

// Request for AddRoles to allow Service Producers to add roles in the shared VPC host project for them to use.
message AddRolesRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is a network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
  // Required. List of policy bindings to add to shared VPC host project.
  repeated PolicyBinding policy_binding = 2 [json_name="policyBinding"];
}

// Represents IAM roles added to the shared VPC host project.
message AddRolesResponse {
  // Required. List of policy bindings that were added to the shared VPC host project.
  repeated PolicyBinding policy_binding = 1 [json_name="policyBinding"];
}

// Request to create a subnetwork in a previously peered service network.
message AddSubnetworkRequest {
  // Optional. Defines the allowSubnetCidrRoutesOverlap field of the subnet, e.g. Available in alpha and beta according to [Compute API documentation](https://cloud.google.com/compute/docs/reference/rest/beta/subnetworks/insert)
  bool allow_subnet_cidr_routes_overlap = 1 [json_name="allowSubnetCidrRoutesOverlap"];
  // Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.
  bool check_service_networking_use_permission = 2 [json_name="checkServiceNetworkingUsePermission"];
  // Optional. Specifies a custom time bucket for Arcus subnetwork request idempotency. If two equivalent concurrent requests are made, Arcus will know to ignore the request if it has already been completed or is in progress. Only requests with matching compute_idempotency_window have guaranteed idempotency. Changing this time window between requests results in undefined behavior. Zero (or empty) value with custom_compute_idempotency_window=true specifies no idempotency (i.e. no request ID is provided to Arcus). Maximum value of 14 days (enforced by Arcus limit). For more information on how to use, see: go/revisit-sn-idempotency-window
  .google.protobuf.Duration compute_idempotency_window = 3 [json_name="computeIdempotencyWindow"];
  // Required. A resource that represents the service consumer, such as `projects/123456`. The project number can be different from the value in the consumer network parameter. For example, the network might be part of a Shared VPC network. In those cases, Service Networking validates that this resource belongs to that Shared VPC.
  string consumer = 4 [json_name="consumer"];
  // Required. The name of the service consumer's VPC network. The network must have an existing private connection that was provisioned through the connections.create method. The name must be in the following format: `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`. {network} is the name of a VPC network in the project.
  string consumer_network = 5 [json_name="consumerNetwork"];
  // Optional. Description of the subnet.
  string description = 6 [json_name="description"];
  // Optional. The url of an Internal Range. Eg: `projects//locations/global/internalRanges/`. If specified, it means that the subnetwork cidr will be created using the combination of requested_address/ip_prefix_length. Note that the subnet cidr has to be within the cidr range of this Internal Range.
  string internal_range = 7 [json_name="internalRange"];
  // Required. The prefix length of the subnet's IP address range. Use CIDR range notation, such as `29` to provision a subnet with an `x.x.x.x/29` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range. GCE disallows subnets with prefix_length > 29
  int32 ip_prefix_length = 8 [json_name="ipPrefixLength"];
  // Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this primary IP range.
  string outside_allocation_public_ip_range = 9 [json_name="outsideAllocationPublicIpRange"];
  // Optional. The private IPv6 google access type for the VMs in this subnet. For information about the access types that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.
  string private_ipv6_google_access = 10 [json_name="privateIpv6GoogleAccess"];
  // Optional. Defines the purpose field of the subnet, e.g. 'PRIVATE_SERVICE_CONNECT'. For information about the purposes that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.
  string purpose = 11 [json_name="purpose"];
  // Required. The name of a [region](/compute/docs/regions-zones) for the subnet, such `europe-west1`.
  string region = 12 [json_name="region"];
  // Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the subnet. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.
  string requested_address = 13 [json_name="requestedAddress"];
  // Optional. The name of one or more allocated IP address ranges associated with this private service access connection. If no range names are provided all ranges associated with this connection will be considered. If a CIDR range with the specified IP prefix length is not available within these ranges, the call fails.
  repeated string requested_ranges = 14 [json_name="requestedRanges"];
  // Optional. Defines the role field of the subnet, e.g. 'ACTIVE'. For information about the roles that can be set using this field, see [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.
  string role = 15 [json_name="role"];
  // Optional. A list of secondary IP ranges to be created within the new subnetwork.
  repeated SecondaryIpRangeSpec secondary_ip_range_specs = 16 [json_name="secondaryIpRangeSpecs"];
  // Optional. Skips validating if the requested_address is in use by SN VPC’s peering group. Compute Engine will still perform this check and fail the request if the requested_address is in use. Note that Compute Engine does not check for the existence of dynamic routes when performing this check. Caller of this API should make sure that there are no dynamic routes overlapping with the requested_address/prefix_length IP address range otherwise the created subnet could cause misrouting.
  bool skip_requested_address_validation = 17 [json_name="skipRequestedAddressValidation"];
  // Required. A name for the new subnet. For information about the naming requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks) in the Compute API documentation.
  string subnetwork = 18 [json_name="subnetwork"];
  // A list of members that are granted the `roles/servicenetworking.subnetworkAdmin` role on the subnet.
  repeated string subnetwork_users = 19 [json_name="subnetworkUsers"];
  // Optional. Specifies if Service Networking should use a custom time bucket for Arcus idempotency. If false, Service Networking uses a 300 second (5 minute) Arcus idempotency window. If true, Service Networking uses a custom idempotency window provided by the user in field compute_idempotency_window. For more information on how to use, see: go/revisit-sn-idempotency-window
  bool use_custom_compute_idempotency_window = 20 [json_name="useCustomComputeIdempotencyWindow"];
}

// Api is a light-weight descriptor for an API Interface. Interfaces are also described as "protocol buffer services" in some contexts, such as by the "service" keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as "APIs" in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
message Api {
  // The methods of this interface, in unspecified order.
  repeated Method methods = 1 [json_name="methods"];
  // Included interfaces. See Mixin.
  repeated Mixin mixins = 2 [json_name="mixins"];
  // The fully qualified name of this interface, including package name followed by the interface's simple name.
  string name = 3 [json_name="name"];
  // Any metadata attached to the interface.
  repeated Option options = 4 [json_name="options"];
  // Source context for the protocol buffer service represented by this message.
  SourceContext source_context = 5 [json_name="sourceContext"];
  // The source syntax of the service.
  string syntax = 6 [json_name="syntax"];
  // A version string for this interface. If specified, must have the form `major-version.minor-version`, as in `1.10`. If the minor version is omitted, it defaults to zero. If the entire version field is empty, the major version is derived from the package name, as outlined below. If the field is not empty, the version in the package name will be verified to be consistent with what is provided here. The versioning schema uses [semantic versioning](http://semver.org) where the major version number indicates a breaking change and the minor version an additive, non-breaking change. Both version numbers are signals to users what to expect from different versions, and should be carefully chosen based on the product plan. The major version is also reflected in the package name of the interface, which must end in `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can be omitted. Zero major versions must only be used for experimental, non-GA interfaces. 
  string version = 7 [json_name="version"];
}

// Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
message AuthProvider {
  // The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - "https://[service.name]/[google.protobuf.Api.name]" - "https://[service.name]/" will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
  string audiences = 1 [json_name="audiences"];
  // Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
  string authorization_url = 2 [json_name="authorizationUrl"];
  // The unique identifier of the auth provider. It will be referred to by `AuthRequirement.provider_id`. Example: "bookstore_auth".
  string id = 3 [json_name="id"];
  // Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
  string issuer = 4 [json_name="issuer"];
  // URL of the provider's public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
  string jwks_uri = 5 [json_name="jwksUri"];
  // Defines the locations to extract the JWT. For now it is only used by the Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations] (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations) JWT locations can be one of HTTP headers, URL query parameters or cookies. The rule is that the first match wins. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: "Bearer " - header: x-goog-iap-jwt-assertion - query: access_token
  repeated JwtLocation jwt_locations = 6 [json_name="jwtLocations"];
}

// User-defined authentication requirements, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
message AuthRequirement {
  // NOTE: This will be deprecated soon, once AuthProvider.audiences is implemented and accepted in all the runtime components. The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, only JWTs with audience "https://Service_name/API_name" will be accepted. For example, if no audiences are in the setting, LibraryService API will only accept JWTs with the following audience "https://library-example.googleapis.com/google.example.library.v1.LibraryService". Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
  string audiences = 1 [json_name="audiences"];
  // id from authentication provider. Example: provider_id: bookstore_auth
  string provider_id = 2 [json_name="providerId"];
}

// `Authentication` defines the authentication configuration for API methods provided by an API service. Example: name: calendar.googleapis.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth - selector: google.calendar.Delegate oauth: canonical_scopes: https://www.googleapis.com/auth/calendar.read
message Authentication {
  // Defines a set of authentication providers that a service supports.
  repeated AuthProvider providers = 1 [json_name="providers"];
  // A list of authentication rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated AuthenticationRule rules = 2 [json_name="rules"];
}

// Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It's an error to include more than one kind of credential in a single request. If a method doesn't have any auth requirements, request credentials will be ignored.
message AuthenticationRule {
  // If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
  bool allow_without_credential = 1 [json_name="allowWithoutCredential"];
  // The requirements for OAuth credentials.
  OAuthRequirements oauth = 2 [json_name="oauth"];
  // Requirements for additional authentication providers.
  repeated AuthRequirement requirements = 3 [json_name="requirements"];
  // Selects the methods to which this rule applies. Refer to selector for syntax details.
  string selector = 4 [json_name="selector"];
}

// `Backend` defines the backend configuration for a service.
message Backend {
  // A list of API backend rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated BackendRule rules = 1 [json_name="rules"];
}

// A backend rule provides configuration for an individual API element.
message BackendRule {
  // The address of the API backend. The scheme is used to determine the backend protocol and security. The following schemes are accepted: SCHEME PROTOCOL SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC TLS It is recommended to explicitly include a scheme. Leaving out the scheme may cause constrasting behaviors across platforms. If the port is unspecified, the default is: - 80 for schemes without TLS - 443 for schemes with TLS For HTTP backends, use protocol to specify the protocol version.
  string address = 1 [json_name="address"];
  // The number of seconds to wait for a response from a request. The default varies based on the request protocol and deployment environment.
  double deadline = 2 [json_name="deadline"];
  // When disable_auth is true, a JWT ID token won't be generated and the original "Authorization" HTTP header will be preserved. If the header is used to carry the original token and is expected by the backend, this field must be set to true to preserve the header.
  bool disable_auth = 3 [json_name="disableAuth"];
  // The JWT audience is used when generating a JWT ID token for the backend. This ID token will be added in the HTTP "authorization" header, and sent to the backend.
  string jwt_audience = 4 [json_name="jwtAudience"];
  // Deprecated, do not use.
  double min_deadline = 5 [json_name="minDeadline"];
  // The number of seconds to wait for the completion of a long running operation. The default is no deadline.
  double operation_deadline = 6 [json_name="operationDeadline"];
  // The map between request protocol and the backend address.
  map<string, BackendRule> overrides_by_request_protocol = 7 [json_name="overridesByRequestProtocol"];
  string path_translation = 8 [json_name="pathTranslation"];
  // The protocol used for sending a request to the backend. The supported values are "http/1.1" and "h2". The default value is inferred from the scheme in the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1 grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support HTTP/2, set this field to "h2" for improved performance. Configuring this field to non-default values is only supported for secure HTTP backends. This field will be ignored for all other backends. See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for more details on the supported values.
  string protocol = 9 [json_name="protocol"];
  // Selects the methods to which this rule applies. Refer to selector for syntax details.
  string selector = 10 [json_name="selector"];
}

// Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, `consumer_destinations` is the only supported destination and the monitored resources need at least one label key `cloud.googleapis.com/location` to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: "1" billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
message Billing {
  // Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
  repeated BillingDestination consumer_destinations = 1 [json_name="consumerDestinations"];
}

// Configuration of a specific billing destination (Currently only support bill against consumer project).
message BillingDestination {
  // Names of the metrics to report to this billing destination. Each name must be defined in Service.metrics section.
  repeated string metrics = 1 [json_name="metrics"];
  // The monitored resource type. The type must be defined in Service.monitored_resources section.
  string monitored_resource = 2 [json_name="monitoredResource"];
}

// The request message for Operations.CancelOperation.
message CancelOperationRequest {
}

// Details about how and where to publish client libraries.
message ClientLibrarySettings {
  // Settings for C++ client libraries.
  CppSettings cpp_settings = 1 [json_name="cppSettings"];
  // Settings for .NET client libraries.
  DotnetSettings dotnet_settings = 2 [json_name="dotnetSettings"];
  // Settings for Go client libraries.
  GoSettings go_settings = 3 [json_name="goSettings"];
  // Settings for legacy Java features, supported in the Service YAML.
  JavaSettings java_settings = 4 [json_name="javaSettings"];
  // Launch stage of this version of the API.
  string launch_stage = 5 [json_name="launchStage"];
  // Settings for Node client libraries.
  NodeSettings node_settings = 6 [json_name="nodeSettings"];
  // Settings for PHP client libraries.
  PhpSettings php_settings = 7 [json_name="phpSettings"];
  // Settings for Python client libraries.
  PythonSettings python_settings = 8 [json_name="pythonSettings"];
  // When using transport=rest, the client request will encode enums as numbers rather than strings.
  bool rest_numeric_enums = 9 [json_name="restNumericEnums"];
  // Settings for Ruby client libraries.
  RubySettings ruby_settings = 10 [json_name="rubySettings"];
  // Version of the API to apply these settings to. This is the full protobuf package for the API, ending in the version element. Examples: "google.cloud.speech.v1" and "google.spanner.admin.database.v1".
  string version = 11 [json_name="version"];
}

// Cloud SQL configuration.
message CloudSQLConfig {
  // Peering service used for peering with the Cloud SQL project.
  string service = 1 [json_name="service"];
  // The name of the umbrella network in the Cloud SQL umbrella project.
  string umbrella_network = 2 [json_name="umbrellaNetwork"];
  // The project number of the Cloud SQL umbrella project.
  int64 umbrella_project = 3 [json_name="umbrellaProject"];
}

// Required information for every language.
message CommonLanguageSettings {
  // The destination where API teams want this client library to be published.
  repeated string destinations = 1 [json_name="destinations"];
  // Link to automatically generated reference documentation. Example: https://cloud.google.com/nodejs/docs/reference/asset/latest
  string reference_docs_uri = 2 [json_name="referenceDocsUri"];
  // Configuration for which RPCs should be generated in the GAPIC client.
  SelectiveGapicGeneration selective_gapic_generation = 3 [json_name="selectiveGapicGeneration"];
}

// Represents a private connection resource. A private connection is implemented as a VPC Network Peering connection between a service producer's VPC network and a service consumer's VPC network.
message Connection {
  // The name of service consumer's VPC network that's connected with service producer network, in the following format: `projects/{project}/global/networks/{network}`. `{project}` is a project number, such as in `12345` that includes the VPC service consumer's VPC network. `{network}` is the name of the service consumer's VPC network.
  string network = 1 [json_name="network"];
  // Output only. The name of the VPC Network Peering connection that was created by the service producer.
  string peering = 2 [json_name="peering"];
  // The name of one or more allocated IP address ranges for this service producer of type `PEERING`. Note that invoking CreateConnection method with a different range when connection is already established will not modify already provisioned service producer subnetworks. If CreateConnection method is invoked repeatedly to reconnect when peering connection had been disconnected on the consumer side, leaving this field empty will restore previously allocated IP ranges.
  repeated string reserved_peering_ranges = 3 [json_name="reservedPeeringRanges"];
  // Output only. The name of the peering service that's associated with this connection, in the following format: `services/{service name}`.
  string service = 4 [json_name="service"];
}

// Configuration information for a private service access connection.
message ConsumerConfig {
  // Represents one or multiple Cloud SQL configurations.
  repeated CloudSQLConfig cloudsql_configs = 1 [json_name="cloudsqlConfigs"];
  // Export custom routes flag value for peering from consumer to producer.
  bool consumer_export_custom_routes = 2 [json_name="consumerExportCustomRoutes"];
  // Export subnet routes with public ip flag value for peering from consumer to producer.
  bool consumer_export_subnet_routes_with_public_ip = 3 [json_name="consumerExportSubnetRoutesWithPublicIp"];
  // Import custom routes flag value for peering from consumer to producer.
  bool consumer_import_custom_routes = 4 [json_name="consumerImportCustomRoutes"];
  // Import subnet routes with public ip flag value for peering from consumer to producer.
  bool consumer_import_subnet_routes_with_public_ip = 5 [json_name="consumerImportSubnetRoutesWithPublicIp"];
  // Export custom routes flag value for peering from producer to consumer.
  bool producer_export_custom_routes = 6 [json_name="producerExportCustomRoutes"];
  // Export subnet routes with public ip flag value for peering from producer to consumer.
  bool producer_export_subnet_routes_with_public_ip = 7 [json_name="producerExportSubnetRoutesWithPublicIp"];
  // Import custom routes flag value for peering from producer to consumer.
  bool producer_import_custom_routes = 8 [json_name="producerImportCustomRoutes"];
  // Import subnet routes with public ip flag value for peering from producer to consumer.
  bool producer_import_subnet_routes_with_public_ip = 9 [json_name="producerImportSubnetRoutesWithPublicIp"];
  // Output only. The VPC host network that is used to host managed service instances. In the format, projects/{project}/global/networks/{network} where {project} is the project number e.g. '12345' and {network} is the network name.
  string producer_network = 10 [json_name="producerNetwork"];
  // Output only. The reserved ranges associated with this private service access connection.
  repeated GoogleCloudServicenetworkingV1ConsumerConfigReservedRange reserved_ranges = 11 [json_name="reservedRanges"];
  // Output only. The IP ranges already in use by consumer or producer
  repeated string used_ip_ranges = 12 [json_name="usedIpRanges"];
  // Output only. Indicates whether the VPC Service Controls reference architecture is configured for the producer VPC host network.
  bool vpc_sc_reference_architecture_enabled = 13 [json_name="vpcScReferenceArchitectureEnabled"];
}

// Metadata provided through GetOperation request for the LRO generated by UpdateConsumerConfig API.
message ConsumerConfigMetadata {
}

// Represents a consumer project.
message ConsumerProject {
  // Required. Project number of the consumer that is launching the service instance. It can own the network that is peered with Google or, be a service project in an XPN where the host project has the network.
  int64 project_num = 1 [json_name="projectNum"];
}

// `Context` defines which contexts an API requests. Example: context: rules: - selector: "*" requested: - google.rpc.context.ProjectContext - google.rpc.context.OriginContext The above specifies that all methods in the API request `google.rpc.context.ProjectContext` and `google.rpc.context.OriginContext`. Available context types are defined in package `google.rpc.context`. This also provides mechanism to allowlist any protobuf message extension that can be sent in grpc metadata using “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any service specific protobuf types that can appear in grpc metadata as follows in your yaml file: Example: context: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allowed_request_extensions: - google.foo.v1.NewExtension allowed_response_extensions: - google.foo.v1.NewExtension You can also specify extension ID instead of fully qualified extension name here.
message Context {
  // A list of RPC context rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated ContextRule rules = 1 [json_name="rules"];
}

// A context rule provides information about the context for an individual API element.
message ContextRule {
  // A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
  repeated string allowed_request_extensions = 1 [json_name="allowedRequestExtensions"];
  // A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
  repeated string allowed_response_extensions = 2 [json_name="allowedResponseExtensions"];
  // A list of full type names of provided contexts. It is used to support propagating HTTP headers and ETags from the response extension.
  repeated string provided = 3 [json_name="provided"];
  // A list of full type names of requested contexts, only the requested context will be made available to the backend.
  repeated string requested = 4 [json_name="requested"];
  // Selects the methods to which this rule applies. Refer to selector for syntax details.
  string selector = 5 [json_name="selector"];
}

// Selects and configures the service controller used by the service. Example: control: environment: servicecontrol.googleapis.com
message Control {
  // The service controller environment to use. If empty, no control plane feature (like quota and billing) will be enabled. The recommended value for most services is servicecontrol.googleapis.com
  string environment = 1 [json_name="environment"];
  // Defines policies applying to the API methods of the service.
  repeated MethodPolicy method_policies = 2 [json_name="methodPolicies"];
}

// Settings for C++ client libraries.
message CppSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
}

// Customize service error responses. For example, list any service specific protobuf types that can appear in error detail lists of error responses. Example: custom_error: types: - google.foo.v1.CustomError - google.foo.v1.AnotherError
message CustomError {
  // The list of custom error rules that apply to individual API messages. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated CustomErrorRule rules = 1 [json_name="rules"];
  // The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
  repeated string types = 2 [json_name="types"];
}

// A custom error rule.
message CustomErrorRule {
  // Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload.
  bool is_error_type = 1 [json_name="isErrorType"];
  // Selects messages to which this rule applies. Refer to selector for syntax details.
  string selector = 2 [json_name="selector"];
}

// A custom pattern is used for defining custom HTTP verb.
message CustomHttpPattern {
  // The name of this custom HTTP verb.
  string kind = 1 [json_name="kind"];
  // The path matched by this custom verb.
  string path = 2 [json_name="path"];
}

// Metadata provided through GetOperation request for the LRO generated by Delete Connection API
message DeleteConnectionMetadata {
}

// Request to delete a private service access connection. The call will fail if there are any managed service instances using this connection.
message DeleteConnectionRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is a network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
}

// Metadata provided through GetOperation request for the LRO generated by DeletePeeredDnsDomain API.
message DeletePeeredDnsDomainMetadata {
}

// Request to disable VPC service controls.
message DisableVpcServiceControlsRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
}

// Represents a DNS record set resource.
message DnsRecordSet {
  // Required. As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) for examples see https://cloud.google.com/dns/records/json-record.
  repeated string data = 1 [json_name="data"];
  // Required. The DNS or domain name of the record set, e.g. `test.example.com`. Cloud DNS requires that a DNS suffix ends with a trailing dot.
  string domain = 2 [json_name="domain"];
  // Required. The period of time for which this RecordSet can be cached by resolvers.
  .google.protobuf.Duration ttl = 3 [json_name="ttl"];
  // Required. The identifier of a supported record type.
  string type = 4 [json_name="type"];
}

// Represents a DNS zone resource.
message DnsZone {
  // The DNS name suffix of this zone e.g. `example.com.`. Cloud DNS requires that a DNS suffix ends with a trailing dot.
  string dns_suffix = 1 [json_name="dnsSuffix"];
  // User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
  string name = 2 [json_name="name"];
}

// * Represents a pair of private and peering DNS zone resources. *
message DnsZonePair {
  // The DNS peering zone in the consumer project.
  DnsZone consumer_peering_zone = 1 [json_name="consumerPeeringZone"];
  // The private DNS zone in the shared producer host project.
  DnsZone producer_private_zone = 2 [json_name="producerPrivateZone"];
}

// `Documentation` provides the information for describing a service. Example: documentation: summary: > The Google Calendar API gives access to most calendar features. pages: - name: Overview content: (== include google/foo/overview.md ==) - name: Tutorial content: (== include google/foo/tutorial.md ==) subpages: - name: Java content: (== include google/foo/tutorial_java.md ==) rules: - selector: google.calendar.Calendar.Get description: > ... - selector: google.calendar.Calendar.Put description: > ... Documentation is provided in markdown syntax. In addition to standard markdown features, definition lists, tables and fenced code blocks are supported. Section headers can be provided and are interpreted relative to the section nesting of the context where a documentation fragment is embedded. Documentation from the IDL is merged with documentation defined via the config at normalization time, where documentation provided by config rules overrides IDL provided. A number of constructs specific to the API platform are supported in documentation text. In order to reference a proto element, the following notation can be used: [fully.qualified.proto.name][] To override the display text used for the link, this can be used: [display text][fully.qualified.proto.name] Text can be excluded from doc using the following notation: (-- internal comment --) A few directives are available in documentation. Note that directives must appear on a single line to be properly identified. The `include` directive includes a markdown file from an external source: (== include path/to/file ==) The `resource_for` directive marks a message to be the resource of a collection in REST view. If it is not specified, tools attempt to infer the resource from the operations in a collection: (== resource_for v1.shelves.books ==) The directive `suppress_warning` does not directly affect documentation and is documented together with service config validation.
message Documentation {
  // The URL to the root of documentation.
  string documentation_root_url = 1 [json_name="documentationRootUrl"];
  // Declares a single overview page. For example: documentation: summary: ... overview: (== include overview.md ==) This is a shortcut for the following declaration (using pages style): documentation: summary: ... pages: - name: Overview content: (== include overview.md ==) Note: you cannot specify both `overview` field and `pages` field.
  string overview = 2 [json_name="overview"];
  // The top level pages for the documentation set.
  repeated Page pages = 3 [json_name="pages"];
  // A list of documentation rules that apply to individual API elements. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated DocumentationRule rules = 4 [json_name="rules"];
  // Specifies section and content to override boilerplate content provided by go/api-docgen. Currently overrides following sections: 1. rest.service.client_libraries
  repeated Page section_overrides = 5 [json_name="sectionOverrides"];
  // Specifies the service root url if the default one (the service name from the yaml file) is not suitable. This can be seen in any fully specified service urls as well as sections that show a base that other urls are relative to.
  string service_root_url = 6 [json_name="serviceRootUrl"];
  // A short description of what the service does. The summary must be plain text. It becomes the overview of the service displayed in Google Cloud Console. NOTE: This field is equivalent to the standard field `description`.
  string summary = 7 [json_name="summary"];
}

// A documentation rule provides information about individual API elements.
message DocumentationRule {
  // Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.
  string deprecation_description = 1 [json_name="deprecationDescription"];
  // Description of the selected proto element (e.g. a message, a method, a 'service' definition, or a field). Defaults to leading & trailing comments taken from the proto source definition of the proto element.
  string description = 2 [json_name="description"];
  // String of comma or space separated case-sensitive words for which method/field name replacement will be disabled by go/api-docgen.
  string disable_replacement_words = 3 [json_name="disableReplacementWords"];
  // The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in "*", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern "*" is used.
  string selector = 4 [json_name="selector"];
}

// Settings for Dotnet client libraries.
message DotnetSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
  // Namespaces which must be aliased in snippets due to a known (but non-generator-predictable) naming collision
  repeated string forced_namespace_aliases = 2 [json_name="forcedNamespaceAliases"];
  // Method signatures (in the form "service.method(signature)") which are provided separately, so shouldn't be generated. Snippets *calling* these methods are still generated, however.
  repeated string handwritten_signatures = 3 [json_name="handwrittenSignatures"];
  // List of full resource types to ignore during generation. This is typically used for API-specific Location resources, which should be handled by the generator as if they were actually the common Location resources. Example entry: "documentai.googleapis.com/Location"
  repeated string ignored_resources = 4 [json_name="ignoredResources"];
  // Map from full resource types to the effective short name for the resource. This is used when otherwise resource named from different services would cause naming collisions. Example entry: "datalabeling.googleapis.com/Dataset": "DataLabelingDataset"
  map<string, string> renamed_resources = 5 [json_name="renamedResources"];
  // Map from original service names to renamed versions. This is used when the default generated types would cause a naming conflict. (Neither name is fully-qualified.) Example: Subscriber to SubscriberServiceApi.
  map<string, string> renamed_services = 6 [json_name="renamedServices"];
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
message Empty {
}

// Request to enable VPC service controls.
message EnableVpcServiceControlsRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
}

// `Endpoint` describes a network address of a service that serves a set of APIs. It is commonly known as a service endpoint. A service may expose any number of service endpoints, and all service endpoints share the same service definition, such as quota limits and monitoring metrics. Example: type: google.api.Service name: library-example.googleapis.com endpoints: # Declares network address `https://library-example.googleapis.com` # for service `library-example.googleapis.com`. The `https` scheme # is implicit for all service endpoints. Other schemes may be # supported in the future. - name: library-example.googleapis.com allow_cors: false - name: content-staging-library-example.googleapis.com # Allows HTTP OPTIONS calls to be passed to the API frontend, for it # to decide whether the subsequent cross-origin request is allowed # to proceed. allow_cors: true
message Endpoint {
  // Aliases for this endpoint, these will be served by the same UrlMap as the parent endpoint, and will be provisioned in the GCP stack for the Regional Endpoints.
  repeated string aliases = 1 [json_name="aliases"];
  // Allowing [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka cross-domain traffic, would allow the backends served from this endpoint to receive and respond to HTTP OPTIONS requests. The response will be used by the browser to determine whether the subsequent cross-origin request is allowed to proceed.
  bool allow_cors = 2 [json_name="allowCors"];
  // The canonical name of this endpoint.
  string name = 3 [json_name="name"];
  // The specification of an Internet routable address of API frontend that will handle requests to this [API Endpoint](https://cloud.google.com/apis/design/glossary). It should be either a valid IPv4 address or a fully-qualified domain name. For example, "8.8.8.8" or "myservice.appspot.com".
  string target = 4 [json_name="target"];
}

// Enum type definition.
message Enum {
  // The source edition string, only valid when syntax is SYNTAX_EDITIONS.
  string edition = 1 [json_name="edition"];
  // Enum value definitions.
  repeated EnumValue enumvalue = 2 [json_name="enumvalue"];
  // Enum type name.
  string name = 3 [json_name="name"];
  // Protocol buffer options.
  repeated Option options = 4 [json_name="options"];
  // The source context.
  SourceContext source_context = 5 [json_name="sourceContext"];
  // The source syntax.
  string syntax = 6 [json_name="syntax"];
}

// Enum value definition.
message EnumValue {
  // Enum value name.
  string name = 1 [json_name="name"];
  // Enum value number.
  int32 number = 2 [json_name="number"];
  // Protocol buffer options.
  repeated Option options = 3 [json_name="options"];
}

// Experimental features to be included during client library generation. These fields will be deprecated once the feature graduates and is enabled by default.
message ExperimentalFeatures {
  // Enables generation of protobuf code using new types that are more Pythonic which are included in `protobuf>=5.29.x`. This feature will be enabled by default 1 month after launching the feature in preview packages.
  bool protobuf_pythonic_types_enabled = 1 [json_name="protobufPythonicTypesEnabled"];
  // Enables generation of asynchronous REST clients if `rest` transport is enabled. By default, asynchronous REST clients will not be generated. This feature will be enabled by default 1 month after launching the feature in preview packages.
  bool rest_async_io_enabled = 2 [json_name="restAsyncIoEnabled"];
}

// A single field of a message type.
message Field {
  // The field cardinality.
  string cardinality = 1 [json_name="cardinality"];
  // The string value of the default value of this field. Proto2 syntax only.
  string default_value = 2 [json_name="defaultValue"];
  // The field JSON name.
  string json_name = 3 [json_name="jsonName"];
  // The field type.
  string kind = 4 [json_name="kind"];
  // The field name.
  string name = 5 [json_name="name"];
  // The field number.
  int32 number = 6 [json_name="number"];
  // The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
  int32 oneof_index = 7 [json_name="oneofIndex"];
  // The protocol buffer options.
  repeated Option options = 8 [json_name="options"];
  // Whether to use alternative packed wire representation.
  bool packed = 9 [json_name="packed"];
  // The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
  string type_url = 10 [json_name="typeUrl"];
}

// Google API Policy Annotation This message defines a simple API policy annotation that can be used to annotate API request and response message fields with applicable policies. One field may have multiple applicable policies that must all be satisfied before a request can be processed. This policy annotation is used to generate the overall policy that will be used for automatic runtime policy enforcement and documentation generation.
message FieldPolicy {
  // Specifies the required permission(s) for the resource referred to by the field. It requires the field contains a valid resource reference, and the request must pass the permission checks to proceed. For example, "resourcemanager.projects.get".
  string resource_permission = 1 [json_name="resourcePermission"];
  // Specifies the resource type for the resource referred to by the field.
  string resource_type = 2 [json_name="resourceType"];
  // Selects one or more request or response message fields to apply this `FieldPolicy`. When a `FieldPolicy` is used in proto annotation, the selector must be left as empty. The service config generator will automatically fill the correct value. When a `FieldPolicy` is used in service config, the selector must be a comma-separated string with valid request or response field paths, such as "foo.bar" or "foo.bar,foo.baz".
  string selector = 3 [json_name="selector"];
}

// Represents managed DNS zones created in the shared Producer host and consumer projects.
message GetDnsZoneResponse {
  // The DNS peering zone created in the consumer project.
  DnsZone consumer_peering_zone = 1 [json_name="consumerPeeringZone"];
  // The private DNS zone created in the shared producer host project.
  DnsZone producer_private_zone = 2 [json_name="producerPrivateZone"];
}

// Settings for Go client libraries.
message GoSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
  // Map of service names to renamed services. Keys are the package relative service names and values are the name to be used for the service client and call options. publishing: go_settings: renamed_services: Publisher: TopicAdmin
  map<string, string> renamed_services = 2 [json_name="renamedServices"];
}

// Allocated IP address ranges for this private service access connection.
message GoogleCloudServicenetworkingV1ConsumerConfigReservedRange {
  // The starting address of the reserved range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix length is the CIDR range for the reserved range.
  string address = 1 [json_name="address"];
  // The prefix length of the reserved range.
  int32 ip_prefix_length = 2 [json_name="ipPrefixLength"];
  // The name of the reserved range.
  string name = 3 [json_name="name"];
}

// Represents a private connection resource. A private connection is implemented as a VPC Network Peering connection between a service producer's VPC network and a service consumer's VPC network.
message GoogleCloudServicenetworkingV1betaConnection {
  // The name of service consumer's VPC network that's connected with service producer network, in the following format: `projects/{project}/global/networks/{network}`. `{project}` is a project number, such as in `12345` that includes the VPC service consumer's VPC network. `{network}` is the name of the service consumer's VPC network.
  string network = 1 [json_name="network"];
  // Output only. The name of the VPC Network Peering connection that was created by the service producer.
  string peering = 2 [json_name="peering"];
  // The name of one or more allocated IP address ranges for this service producer of type `PEERING`. Note that invoking this method with a different range when connection is already established will not modify already provisioned service producer subnetworks.
  repeated string reserved_peering_ranges = 3 [json_name="reservedPeeringRanges"];
  // Output only. The name of the peering service that's associated with this connection, in the following format: `services/{service name}`.
  string service = 4 [json_name="service"];
}

// Represents a subnet that was created or discovered by a private access management service.
message GoogleCloudServicenetworkingV1betaSubnetwork {
  // Subnetwork CIDR range in `10.x.x.x/y` format.
  string ip_cidr_range = 1 [json_name="ipCidrRange"];
  // Subnetwork name. See https://cloud.google.com/compute/docs/vpc/
  string name = 2 [json_name="name"];
  // In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`
  string network = 3 [json_name="network"];
  // This is a discovered subnet that is not within the current consumer allocated ranges.
  bool outside_allocation = 4 [json_name="outsideAllocation"];
}

// Defines the HTTP configuration for an API service. It contains a list of HttpRule, each specifying the mapping of an RPC method to one or more HTTP REST API methods.
message Http {
  // When set to true, URL path parameters will be fully URI-decoded except in cases of single segment matches in reserved expansion, where "%2F" will be left encoded. The default behavior is to not decode RFC 6570 reserved characters in multi segment matches.
  bool fully_decode_reserved_expansion = 1 [json_name="fullyDecodeReservedExpansion"];
  // A list of HTTP configuration rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated HttpRule rules = 2 [json_name="rules"];
}

// gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC method and one or more HTTP REST endpoints. It allows developers to build a single API service that supports both gRPC APIs and REST APIs. Many systems, including [Google APIs](https://github.com/googleapis/googleapis), [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and use it for large scale production services. `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies how different portions of the gRPC request message are mapped to the URL path, URL query parameters, and HTTP request body. It also controls how the gRPC response message is mapped to the HTTP response body. `HttpRule` is typically specified as an `google.api.http` annotation on the gRPC method. Each mapping specifies a URL path template and an HTTP method. The path template may refer to one or more fields in the gRPC request message, as long as each field is a non-repeated field with a primitive (non-message) type. The path template controls how fields of the request message are mapped to the URL path. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/{name=messages/*}" }; } } message GetMessageRequest { string name = 1; // Mapped to URL path. } message Message { string text = 1; // The resource content. } This enables an HTTP REST to gRPC mapping as below: - HTTP: `GET /v1/messages/123456` - gRPC: `GetMessage(name: "messages/123456")` Any fields in the request message which are not bound by the path template automatically become HTTP query parameters if there is no HTTP request body. For example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get:"/v1/messages/{message_id}" }; } } message GetMessageRequest { message SubMessage { string subfield = 1; } string message_id = 1; // Mapped to URL path. int64 revision = 2; // Mapped to URL query parameter `revision`. SubMessage sub = 3; // Mapped to URL query parameter `sub.subfield`. } This enables a HTTP JSON to RPC mapping as below: - HTTP: `GET /v1/messages/123456?revision=2&sub.subfield=foo` - gRPC: `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields which are mapped to URL query parameters must have a primitive type or a repeated primitive type or a non-repeated message type. In the case of a repeated type, the parameter can be repeated in the URL as `...?param=A&param=B`. In the case of a message type, each field of the message is mapped to a separate parameter, such as `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body, the `body` field specifies the mapping. Consider a REST update method on the message resource collection: service Messaging { rpc UpdateMessage(UpdateMessageRequest) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "message" }; } } message UpdateMessageRequest { string message_id = 1; // mapped to the URL Message message = 2; // mapped to the body } The following HTTP JSON to RPC mapping is enabled, where the representation of the JSON in the request body is determined by protos JSON encoding: - HTTP: `PATCH /v1/messages/123456 { "text": "Hi!" }` - gRPC: `UpdateMessage(message_id: "123456" message { text: "Hi!" })` The special name `*` can be used in the body mapping to define that every field not bound by the path template should be mapped to the request body. This enables the following alternative definition of the update method: service Messaging { rpc UpdateMessage(Message) returns (Message) { option (google.api.http) = { patch: "/v1/messages/{message_id}" body: "*" }; } } message Message { string message_id = 1; string text = 2; } The following HTTP JSON to RPC mapping is enabled: - HTTP: `PATCH /v1/messages/123456 { "text": "Hi!" }` - gRPC: `UpdateMessage(message_id: "123456" text: "Hi!")` Note that when using `*` in the body mapping, it is not possible to have HTTP parameters, as all fields not bound by the path end in the body. This makes this option more rarely used in practice when defining REST APIs. The common usage of `*` is in custom methods which don't use the URL at all for transferring data. It is possible to define multiple HTTP methods for one RPC by using the `additional_bindings` option. Example: service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) = { get: "/v1/messages/{message_id}" additional_bindings { get: "/v1/users/{user_id}/messages/{message_id}" } }; } } message GetMessageRequest { string message_id = 1; string user_id = 2; } This enables the following two alternative HTTP JSON to RPC mappings: - HTTP: `GET /v1/messages/123456` - gRPC: `GetMessage(message_id: "123456")` - HTTP: `GET /v1/users/me/messages/123456` - gRPC: `GetMessage(user_id: "me" message_id: "123456")` Rules for HTTP mapping 1. Leaf request fields (recursive expansion nested messages in the request message) are classified into three categories: - Fields referred by the path template. They are passed via the URL path. - Fields referred by the HttpRule.body. They are passed via the HTTP request body. - All other fields are passed via the URL query parameters, and the parameter name is the field path in the request message. A repeated field can be represented as multiple query parameters under the same name. 2. If HttpRule.body is "*", there is no URL query parameter, all fields are passed via URL path and HTTP request body. 3. If HttpRule.body is omitted, there is no HTTP request body, all fields are passed via URL path and URL query parameters. Path template syntax Template = "/" Segments [ Verb ] ; Segments = Segment { "/" Segment } ; Segment = "*" | "**" | LITERAL | Variable ; Variable = "{" FieldPath [ "=" Segments ] "}" ; FieldPath = IDENT { "." IDENT } ; Verb = ":" LITERAL ; The syntax `*` matches a single URL path segment. The syntax `**` matches zero or more URL path segments, which must be the last part of the URL path except the `Verb`. The syntax `Variable` matches part of the URL path as specified by its template. A variable template must not contain other variables. If a variable matches a single path segment, its template may be omitted, e.g. `{var}` is equivalent to `{var=*}`. The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL` contains any reserved character, such characters should be percent-encoded before the matching. If a variable contains exactly one path segment, such as `"{var}"` or `"{var=*}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{var}`. If a variable contains multiple path segments, such as `"{var=foo/*}"` or `"{var=**}"`, when such a variable is expanded into a URL path on the client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded. The server side does the reverse decoding, except "%2F" and "%2f" are left unchanged. Such variables show up in the [Discovery Document](https://developers.google.com/discovery/v1/reference/apis) as `{+var}`. Using gRPC API Service Configuration gRPC API Service Configuration (service config) is a configuration language for configuring a gRPC service to become a user-facing product. The service config is simply the YAML representation of the `google.api.Service` proto message. As an alternative to annotating your proto file, you can configure gRPC transcoding in your service config YAML files. You do this by specifying a `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same effect as the proto annotation. This can be particularly useful if you have a proto that is reused in multiple services. Note that any transcoding specified in the service config will override any matching transcoding configuration in the proto. The following example selects a gRPC method and applies an `HttpRule` to it: http: rules: - selector: example.v1.Messaging.GetMessage get: /v1/messages/{message_id}/{sub.subfield} Special notes When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON conversion must follow the [proto3 specification](https://developers.google.com/protocol-buffers/docs/proto3#json). While the single segment variable follows the semantics of [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String Expansion, the multi segment variable **does not** follow RFC 6570 Section 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not expand special characters like `?` and `#`, which would lead to invalid URLs. As the result, gRPC Transcoding uses a custom encoding for multi segment variables. The path variables **must not** refer to any repeated or mapped field, because client libraries are not capable of handling such variable expansion. The path variables **must not** capture the leading "/" character. The reason is that the most common use case "{var}" does not capture the leading "/" character. For consistency, all path variables must share the same behavior. Repeated message fields must not be mapped to URL query parameters, because no client library can support such complicated mapping. If an API needs to use a JSON array for request or response body, it can map the request or response body to a repeated field. However, some gRPC Transcoding implementations may not support this feature.
message HttpRule {
  // Additional HTTP bindings for the selector. Nested bindings must not contain an `additional_bindings` field themselves (that is, the nesting may only be one level deep).
  repeated HttpRule additional_bindings = 1 [json_name="additionalBindings"];
  // The name of the request field whose value is mapped to the HTTP request body, or `*` for mapping all request fields not captured by the path pattern to the HTTP body, or omitted for not having any HTTP request body. NOTE: the referred field must be present at the top-level of the request message type.
  string body = 2 [json_name="body"];
  // The custom pattern is used for specifying an HTTP method that is not included in the `pattern` field, such as HEAD, or "*" to leave the HTTP method unspecified for this rule. The wild-card rule is useful for services that provide content to Web (HTML) clients.
  CustomHttpPattern custom = 3 [json_name="custom"];
  // Maps to HTTP DELETE. Used for deleting a resource.
  string delete = 4 [json_name="delete"];
  // Maps to HTTP GET. Used for listing and getting information about resources.
  string get = 5 [json_name="get"];
  // Maps to HTTP PATCH. Used for updating a resource.
  string patch = 6 [json_name="patch"];
  // Maps to HTTP POST. Used for creating a resource or performing an action.
  string post = 7 [json_name="post"];
  // Maps to HTTP PUT. Used for replacing a resource.
  string put = 8 [json_name="put"];
  // Optional. The name of the response field whose value is mapped to the HTTP response body. When omitted, the entire response message will be used as the HTTP response body. NOTE: The referred field must be present at the top-level of the response message type.
  string response_body = 9 [json_name="responseBody"];
  // Selects a method to which this rule applies. Refer to selector for syntax details.
  string selector = 10 [json_name="selector"];
}

// Settings for Java client libraries.
message JavaSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
  // The package name to use in Java. Clobbers the java_package option set in the protobuf. This should be used **only** by APIs who have already set the language_settings.java.package_name" field in gapic.yaml. API teams should use the protobuf java_package option where possible. Example of a YAML configuration:: publishing: java_settings: library_package: com.google.cloud.pubsub.v1
  string library_package = 2 [json_name="libraryPackage"];
  // Configure the Java class name to use instead of the service's for its corresponding generated GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including the full the language_settings.java.interface_names" field in gapic.yaml. API teams should otherwise use the service name as it appears in the protobuf. Example of a YAML configuration:: publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin - google.pubsub.v1.Subscriber: SubscriptionAdmin
  map<string, string> service_class_names = 3 [json_name="serviceClassNames"];
}

// Specifies a location to extract JWT from an API request.
message JwtLocation {
  // Specifies cookie name to extract JWT token.
  string cookie = 1 [json_name="cookie"];
  // Specifies HTTP header name to extract JWT token.
  string header = 2 [json_name="header"];
  // Specifies URL query parameter name to extract JWT token.
  string query = 3 [json_name="query"];
  // The value prefix. The value format is "value_prefix{token}" Only applies to "in" header type. Must be empty for "in" query type. If not empty, the header value has to match (case sensitive) this prefix. If not matched, JWT will not be extracted. If matched, JWT will be extracted after the prefix is removed. For example, for "Authorization: Bearer {JWT}", value_prefix="Bearer " with a space at the end.
  string value_prefix = 4 [json_name="valuePrefix"];
}

// A description of a label.
message LabelDescriptor {
  // A human-readable description for the label.
  string description = 1 [json_name="description"];
  // The label key.
  string key = 2 [json_name="key"];
  // The type of data that can be assigned to the label.
  string value_type = 3 [json_name="valueType"];
}

// ListConnectionsResponse is the response to list peering states for the given service and consumer project.
message ListConnectionsResponse {
  // The list of Connections.
  repeated Connection connections = 1 [json_name="connections"];
}

// Represents all DNS RecordSets associated with the producer network
message ListDnsRecordSetsResponse {
  // DNS record Set Resource
  repeated DnsRecordSet dns_record_sets = 1 [json_name="dnsRecordSets"];
}

// Represents all DNS zones in the shared producer host project and the matching peering zones in the consumer project.
message ListDnsZonesResponse {
  // All pairs of private DNS zones in the shared producer host project and the matching peering zones in the consumer project..
  repeated DnsZonePair dns_zone_pairs = 1 [json_name="dnsZonePairs"];
}

// The response message for Operations.ListOperations.
message ListOperationsResponse {
  // The standard List next-page token.
  string next_page_token = 1 [json_name="nextPageToken"];
  // A list of operations that matches the specified filter in the request.
  repeated .google.longrunning.Operation operations = 2 [json_name="operations"];
}

// Response to list peered DNS domains for a given connection.
message ListPeeredDnsDomainsResponse {
  // The list of peered DNS domains.
  repeated PeeredDnsDomain peered_dns_domains = 1 [json_name="peeredDnsDomains"];
}

// A description of a log type. Example in YAML format: - name: library.googleapis.com/activity_history description: The history of borrowing and returning library items. display_name: Activity labels: - key: /customer_id description: Identifier of a library customer
message LogDescriptor {
  // A human-readable description of this log. This information appears in the documentation and can contain details.
  string description = 1 [json_name="description"];
  // The human-readable name for this log. This information appears on the user interface and should be concise.
  string display_name = 2 [json_name="displayName"];
  // The set of labels that are available to describe a specific log entry. Runtime requests that contain labels not specified here are considered invalid.
  repeated LabelDescriptor labels = 3 [json_name="labels"];
  // The name of the log. It must be less than 512 characters long and can include the following characters: upper- and lower-case alphanumeric characters [A-Za-z0-9], and punctuation characters including slash, underscore, hyphen, period [/_-.].
  string name = 4 [json_name="name"];
}

// Logging configuration of the service. The following example shows how to configure logs to be sent to the producer and consumer projects. In the example, the `activity_history` log is sent to both the producer and consumer projects, whereas the `purchase_history` log is only sent to the producer project. monitored_resources: - type: library.googleapis.com/branch labels: - key: /city description: The city where the library branch is located in. - key: /name description: The name of the branch. logs: - name: activity_history labels: - key: /customer_id - name: purchase_history logging: producer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history - purchase_history consumer_destinations: - monitored_resource: library.googleapis.com/branch logs: - activity_history
message Logging {
  // Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.
  repeated LoggingDestination consumer_destinations = 1 [json_name="consumerDestinations"];
  // Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.
  repeated LoggingDestination producer_destinations = 2 [json_name="producerDestinations"];
}

// Configuration of a specific logging destination (the producer project or the consumer project).
message LoggingDestination {
  // Names of the logs to be sent to this destination. Each name must be defined in the Service.logs section. If the log name is not a domain scoped name, it will be automatically prefixed with the service name followed by "/".
  repeated string logs = 1 [json_name="logs"];
  // The monitored resource type. The type must be defined in the Service.monitored_resources section.
  string monitored_resource = 2 [json_name="monitoredResource"];
}

// Describes settings to use when generating API methods that use the long-running operation pattern. All default values below are from those used in the client library generators (e.g. [Java](https://github.com/googleapis/gapic-generator-java/blob/04c2faa191a9b5a10b92392fe8482279c4404803/src/main/java/com/google/api/generator/gapic/composer/common/RetrySettingsComposer.java)).
message LongRunning {
  // Initial delay after which the first poll request will be made. Default value: 5 seconds.
  .google.protobuf.Duration initial_poll_delay = 1 [json_name="initialPollDelay"];
  // Maximum time between two subsequent poll requests. Default value: 45 seconds.
  .google.protobuf.Duration max_poll_delay = 2 [json_name="maxPollDelay"];
  // Multiplier to gradually increase delay between subsequent polls until it reaches max_poll_delay. Default value: 1.5.
  float poll_delay_multiplier = 3 [json_name="pollDelayMultiplier"];
  // Total polling timeout. Default value: 5 minutes.
  .google.protobuf.Duration total_poll_timeout = 4 [json_name="totalPollTimeout"];
}

// Method represents a method of an API interface.
message Method {
  // The simple name of this method.
  string name = 1 [json_name="name"];
  // Any metadata attached to the method.
  repeated Option options = 2 [json_name="options"];
  // If true, the request is streamed.
  bool request_streaming = 3 [json_name="requestStreaming"];
  // A URL of the input message type.
  string request_type_url = 4 [json_name="requestTypeUrl"];
  // If true, the response is streamed.
  bool response_streaming = 5 [json_name="responseStreaming"];
  // The URL of the output message type.
  string response_type_url = 6 [json_name="responseTypeUrl"];
  // The source syntax of this method.
  string syntax = 7 [json_name="syntax"];
}

// Defines policies applying to an RPC method.
message MethodPolicy {
  // Policies that are applicable to the request message.
  repeated FieldPolicy request_policies = 1 [json_name="requestPolicies"];
  // Selects a method to which these policies should be enforced, for example, "google.pubsub.v1.Subscriber.CreateSubscription". Refer to selector for syntax details. NOTE: This field must not be set in the proto annotation. It will be automatically filled by the service config compiler .
  string selector = 2 [json_name="selector"];
}

// Describes the generator configuration for a method.
message MethodSettings {
  // List of top-level fields of the request message, that should be automatically populated by the client libraries based on their (google.api.field_info).format. Currently supported format: UUID4. Example of a YAML configuration: publishing: method_settings: - selector: google.example.v1.ExampleService.CreateExample auto_populated_fields: - request_id
  repeated string auto_populated_fields = 1 [json_name="autoPopulatedFields"];
  // Describes settings to use for long-running operations when generating API methods for RPCs. Complements RPCs that use the annotations in google/longrunning/operations.proto. Example of a YAML configuration:: publishing: method_settings: - selector: google.cloud.speech.v2.Speech.BatchRecognize long_running: initial_poll_delay: 60s # 1 minute poll_delay_multiplier: 1.5 max_poll_delay: 360s # 6 minutes total_poll_timeout: 54000s # 90 minutes
  LongRunning long_running = 2 [json_name="longRunning"];
  // The fully qualified name of the method, for which the options below apply. This is used to find the method to apply the options. Example: publishing: method_settings: - selector: google.storage.control.v2.StorageControl.CreateFolder # method settings for CreateFolder...
  string selector = 3 [json_name="selector"];
}

// Defines a metric type and its schema. Once a metric descriptor is created, deleting or altering it stops data collection and makes the metric type's existing data unusable. 
message MetricDescriptor {
  // A detailed description of the metric, which can be used in documentation.
  string description = 1 [json_name="description"];
  // A concise name for the metric, which can be displayed in user interfaces. Use sentence case without an ending period, for example "Request count". This field is optional but it is recommended to be set for any metrics associated with user-visible concepts, such as Quota.
  string display_name = 2 [json_name="displayName"];
  // The set of labels that can be used to describe a specific instance of this metric type. For example, the `appengine.googleapis.com/http/server/response_latencies` metric type has a label for the HTTP response code, `response_code`, so you can look at latencies for successful responses or just for responses that failed.
  repeated LabelDescriptor labels = 3 [json_name="labels"];
  // Optional. The launch stage of the metric definition.
  string launch_stage = 4 [json_name="launchStage"];
  // Optional. Metadata which can be used to guide usage of the metric.
  MetricDescriptorMetadata metadata = 5 [json_name="metadata"];
  // Whether the metric records instantaneous values, changes to a value, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
  string metric_kind = 6 [json_name="metricKind"];
  // Read-only. If present, then a time series, which is identified partially by a metric type and a MonitoredResourceDescriptor, that is associated with this metric type can only be associated with one of the monitored resource types listed here.
  repeated string monitored_resource_types = 7 [json_name="monitoredResourceTypes"];
  // The resource name of the metric descriptor.
  string name = 8 [json_name="name"];
  // The metric type, including its DNS name prefix. The type is not URL-encoded. All user-defined metric types have the DNS name `custom.googleapis.com` or `external.googleapis.com`. Metric types should use a natural hierarchical grouping. For example: "custom.googleapis.com/invoice/paid/amount" "external.googleapis.com/prometheus/up" "appengine.googleapis.com/http/server/response_latencies"
  string type = 9 [json_name="type"];
  // The units in which the metric value is reported. It is only applicable if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines the representation of the stored metric values. Different systems might scale the values to be more easily displayed (so a value of `0.02kBy` _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of the metric is always in thousands of bytes, no matter how it might be displayed. If you want a custom metric to record the exact number of CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses 12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if you want a custom metric to record data in a more granular way, you can create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and write `11.723` (which is `12005/1024`). The supported units are a subset of [The Unified Code for Units of Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour * `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E` exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) * `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`; rates should always be computed at query time from the underlying cumulative or delta value). * `.` multiplication or composition (as an infix operator). For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows: Expression = Component { "." Component } { "/" Component } ; Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{" NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`. If the annotation is used alone, then the unit is equivalent to `1`. For examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a sequence of non-blank printable ASCII characters not containing `{` or `}`. * `1` represents a unitary [dimensionless unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in `1/s`. It is typically used when none of the basic units are appropriate. For example, "new users per day" can be represented as `1/d` or `{new-users}/d` (and a metric value `5` would mean "5 new users). Alternatively, "thousands of page views per day" would be represented as `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would mean "5300 page views per day"). * `%` represents dimensionless value of 1/100, and annotates values giving a percentage (so the metric values are typically in the range of 0..100, and a metric value `3` means "3 percent"). * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1, that will be multiplied by 100 and displayed as a percentage (so a metric value `0.03` means "3 percent").
  string unit = 10 [json_name="unit"];
  // Whether the measurement is an integer, a floating-point number, etc. Some combinations of `metric_kind` and `value_type` might not be supported.
  string value_type = 11 [json_name="valueType"];
}

// Additional annotations that can be used to guide the usage of a metric.
message MetricDescriptorMetadata {
  // The delay of data points caused by ingestion. Data points older than this age are guaranteed to be ingested and available to be read, excluding data loss due to errors.
  .google.protobuf.Duration ingest_delay = 1 [json_name="ingestDelay"];
  // Deprecated. Must use the MetricDescriptor.launch_stage instead.
  string launch_stage = 2 [json_name="launchStage"];
  // The sampling period of metric data points. For metrics which are written periodically, consecutive data points are stored at this time interval, excluding data loss due to errors. Metrics with a higher granularity have a smaller sampling period.
  .google.protobuf.Duration sample_period = 3 [json_name="samplePeriod"];
  // The scope of the timeseries data of the metric.
  repeated string time_series_resource_hierarchy_level = 4 [json_name="timeSeriesResourceHierarchyLevel"];
}

// Bind API methods to metrics. Binding a method to a metric causes that metric's configured quota behaviors to apply to the method call.
message MetricRule {
  // Metrics to update when the selected methods are called, and the associated cost applied to each metric. The key of the map is the metric name, and the values are the amount increased for the metric against which the quota limits are defined. The value must not be negative.
  map<string, int64> metric_costs = 1 [json_name="metricCosts"];
  // Selects the methods to which this rule applies. Refer to selector for syntax details.
  string selector = 2 [json_name="selector"];
}

// Declares an API Interface to be included in this interface. The including interface must redeclare all the methods from the included interface, but documentation and options are inherited as follows: - If after comment and whitespace stripping, the documentation string of the redeclared method is empty, it will be inherited from the original method. - Each annotation belonging to the service config (http, visibility) which is not set in the redeclared method will be inherited. - If an http annotation is inherited, the path pattern will be modified as follows. Any version prefix will be replaced by the version of the including interface plus the root path if specified. Example of a simple mixin: package google.acl.v1; service AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v1/{resource=**}:getAcl"; } } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest) returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns (Data) { option (google.api.http).get = "/v2/{resource=**}"; } } Example of a mixin configuration: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl The mixin construct implies that all methods in `AccessControl` are also declared with same name and request/response types in `Storage`. A documentation generator or annotation processor will see the effective `Storage.GetAcl` method after inheriting documentation and annotations as follows: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/{resource=**}:getAcl"; } ... } Note how the version in the path pattern changed from `v1` to `v2`. If the `root` field in the mixin is specified, it should be a relative path under which inherited HTTP paths are placed. Example: apis: - name: google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root: acls This implies the following inherited HTTP annotation: service Storage { // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option (google.api.http).get = "/v2/acls/{resource=**}:getAcl"; } ... }
message Mixin {
  // The fully qualified name of the interface which is included.
  string name = 1 [json_name="name"];
  // If non-empty specifies a path under which inherited HTTP paths are rooted.
  string root = 2 [json_name="root"];
}

// An object that describes the schema of a MonitoredResource object using a type name and a set of labels. For example, the monitored resource descriptor for Google Compute Engine VM instances has a type of `"gce_instance"` and specifies the use of the labels `"instance_id"` and `"zone"` to identify particular VM instances. Different APIs can support different monitored resource types. APIs generally provide a `list` method that returns the monitored resource descriptors used by the API. 
message MonitoredResourceDescriptor {
  // Optional. A detailed description of the monitored resource type that might be used in documentation.
  string description = 1 [json_name="description"];
  // Optional. A concise name for the monitored resource type that might be displayed in user interfaces. It should be a Title Cased Noun Phrase, without any article or other determiners. For example, `"Google Cloud SQL Database"`.
  string display_name = 2 [json_name="displayName"];
  // Required. A set of labels used to describe instances of this monitored resource type. For example, an individual Google Cloud SQL database is identified by values for the labels `"database_id"` and `"zone"`.
  repeated LabelDescriptor labels = 3 [json_name="labels"];
  // Optional. The launch stage of the monitored resource definition.
  string launch_stage = 4 [json_name="launchStage"];
  // Optional. The resource name of the monitored resource descriptor: `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type} is the value of the `type` field in this object and {project_id} is a project ID that provides API-specific context for accessing the type. APIs that do not use project information can use the resource name format `"monitoredResourceDescriptors/{type}"`.
  string name = 5 [json_name="name"];
  // Required. The monitored resource type. For example, the type `"cloudsql_database"` represents databases in Google Cloud SQL. For a list of types, see [Monitored resource types](https://cloud.google.com/monitoring/api/resources) and [Logging resource types](https://cloud.google.com/logging/docs/api/v2/resource-list).
  string type = 6 [json_name="type"];
}

// Monitoring configuration of the service. The example below shows how to configure monitored resources and metrics for monitoring. In the example, a monitored resource and two metrics are defined. The `library.googleapis.com/book/returned_count` metric is sent to both producer and consumer projects, whereas the `library.googleapis.com/book/num_overdue` metric is only sent to the consumer project. monitored_resources: - type: library.googleapis.com/Branch display_name: "Library Branch" description: "A branch of a library." launch_stage: GA labels: - key: resource_container description: "The Cloud container (ie. project id) for the Branch." - key: location description: "The location of the library branch." - key: branch_id description: "The id of the branch." metrics: - name: library.googleapis.com/book/returned_count display_name: "Books Returned" description: "The count of books that have been returned." launch_stage: GA metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." - name: library.googleapis.com/book/num_overdue display_name: "Books Overdue" description: "The current number of overdue books." launch_stage: GA metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id description: "The id of the customer." monitoring: producer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count consumer_destinations: - monitored_resource: library.googleapis.com/Branch metrics: - library.googleapis.com/book/returned_count - library.googleapis.com/book/num_overdue
message Monitoring {
  // Monitoring configurations for sending metrics to the consumer project. There can be multiple consumer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
  repeated MonitoringDestination consumer_destinations = 1 [json_name="consumerDestinations"];
  // Monitoring configurations for sending metrics to the producer project. There can be multiple producer destinations. A monitored resource type may appear in multiple monitoring destinations if different aggregations are needed for different sets of metrics associated with that monitored resource type. A monitored resource and metric pair may only be used once in the Monitoring configuration.
  repeated MonitoringDestination producer_destinations = 2 [json_name="producerDestinations"];
}

// Configuration of a specific monitoring destination (the producer project or the consumer project).
message MonitoringDestination {
  // Types of the metrics to report to this monitoring destination. Each type must be defined in Service.metrics section.
  repeated string metrics = 1 [json_name="metrics"];
  // The monitored resource type. The type must be defined in Service.monitored_resources section.
  string monitored_resource = 2 [json_name="monitoredResource"];
}

// Settings for Node client libraries.
message NodeSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
}

// OAuth scopes are a way to define data and permissions on data. For example, there are scopes defined for "Read-only access to Google Calendar" and "Access to Cloud Platform". Users can consent to a scope for an application, giving it permission to access that data on their behalf. OAuth scope specifications should be fairly coarse grained; a user will need to see and understand the text description of what your scope means. In most cases: use one or at most two OAuth scopes for an entire family of products. If your product has multiple APIs, you should probably be sharing the OAuth scope across all of those APIs. When you need finer grained OAuth consent screens: talk with your product management about how developers will use them in practice. Please note that even though each of the canonical scopes is enough for a request to be accepted and passed to the backend, a request can still fail due to the backend requiring additional scopes or permissions.
message OAuthRequirements {
  // The list of publicly documented OAuth scopes that are allowed access. An OAuth token containing any of these scopes will be accepted. Example: canonical_scopes: https://www.googleapis.com/auth/calendar, https://www.googleapis.com/auth/calendar.read
  string canonical_scopes = 1 [json_name="canonicalScopes"];
}

// A protocol buffer option, which can be attached to a message, field, enumeration, etc.
message Option {
  // The option's name. For protobuf built-in options (options defined in descriptor.proto), this is the short name. For example, `"map_entry"`. For custom options, it should be the fully-qualified name. For example, `"google.api.http"`.
  string name = 1 [json_name="name"];
  // The option's value packed in an Any message. If the value is a primitive, the corresponding wrapper type defined in google/protobuf/wrappers.proto should be used. If the value is an enum, it should be stored as an int32 value using the google.protobuf.Int32Value type.
  map<string, .google.protobuf.Any> value = 2 [json_name="value"];
}

// Represents a documentation page. A page can contain subpages to represent nested documentation set structure.
message Page {
  // The Markdown content of the page. You can use (== include {path} ==) to include content from a Markdown file. The content can be used to produce the documentation page such as HTML format page.
  string content = 1 [json_name="content"];
  // The name of the page. It will be used as an identity of the page to generate URI of the page, text of the link to this page in navigation, etc. The full page name (start from the root page name to this page concatenated with `.`) can be used as reference to the page in your documentation. For example: pages: - name: Tutorial content: (== include tutorial.md ==) subpages: - name: Java content: (== include tutorial_java.md ==) You can reference `Java` page using Markdown reference link syntax: `Java`.
  string name = 2 [json_name="name"];
  // Subpages of this page. The order of subpages specified here will be honored in the generated docset.
  repeated Page subpages = 3 [json_name="subpages"];
}

// Metadata provided through GetOperation request for the LRO generated by Partial Delete Connection API
message PartialDeleteConnectionMetadata {
}

// DNS domain suffix for which requests originating in the producer VPC network are resolved in the associated consumer VPC network.
message PeeredDnsDomain {
  // The DNS domain name suffix e.g. `example.com.`. Cloud DNS requires that a DNS suffix ends with a trailing dot.
  string dns_suffix = 1 [json_name="dnsSuffix"];
  // User assigned name for this resource. Must be unique within the consumer network. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
  string name = 2 [json_name="name"];
}

// Metadata provided through GetOperation request for the LRO generated by CreatePeeredDnsDomain API.
message PeeredDnsDomainMetadata {
}

// Settings for Php client libraries.
message PhpSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
}

// Grouping of IAM role and IAM member.
message PolicyBinding {
  // Required. Member to bind the role with. See /iam/docs/reference/rest/v1/Policy#Binding for how to format each member. Eg. - user:myuser@mydomain.com - serviceAccount:my-service-account@app.gserviceaccount.com
  string member = 1 [json_name="member"];
  // Required. Role to apply. Only allowlisted roles can be used at the specified granularity. The role must be one of the following: - 'roles/container.hostServiceAgentUser' applied on the shared VPC host project - 'roles/compute.securityAdmin' applied on the shared VPC host project - 'roles/compute.networkAdmin' applied on the shared VPC host project - 'roles/tpu.xpnAgent' applied on the shared VPC host project - 'roles/dns.admin' applied on the shared VPC host project - 'roles/logging.admin' applied on the shared VPC host project - 'roles/monitoring.viewer' applied on the shared VPC host project - 'roles/servicemanagement.quotaViewer' applied on the shared VPC host project
  string role = 2 [json_name="role"];
}

// This message configures the settings for publishing [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from the service config.
message Publishing {
  // Used as a tracking tag when collecting data about the APIs developer relations artifacts like docs, packages delivered to package managers, etc. Example: "speech".
  string api_short_name = 1 [json_name="apiShortName"];
  // GitHub teams to be added to CODEOWNERS in the directory in GitHub containing source code for the client libraries for this API.
  repeated string codeowner_github_teams = 2 [json_name="codeownerGithubTeams"];
  // A prefix used in sample code when demarking regions to be included in documentation.
  string doc_tag_prefix = 3 [json_name="docTagPrefix"];
  // Link to product home page. Example: https://cloud.google.com/asset-inventory/docs/overview
  string documentation_uri = 4 [json_name="documentationUri"];
  // GitHub label to apply to issues and pull requests opened for this API.
  string github_label = 5 [json_name="githubLabel"];
  // Client library settings. If the same version string appears multiple times in this list, then the last one wins. Settings from earlier settings with the same version string are discarded.
  repeated ClientLibrarySettings library_settings = 6 [json_name="librarySettings"];
  // A list of API method settings, e.g. the behavior for methods that use the long-running operation pattern.
  repeated MethodSettings method_settings = 7 [json_name="methodSettings"];
  // Link to a *public* URI where users can report issues. Example: https://issuetracker.google.com/issues/new?component=190865&template=1161103
  string new_issue_uri = 8 [json_name="newIssueUri"];
  // For whom the client library is being published.
  string organization = 9 [json_name="organization"];
  // Optional link to proto reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rpc
  string proto_reference_documentation_uri = 10 [json_name="protoReferenceDocumentationUri"];
  // Optional link to REST reference documentation. Example: https://cloud.google.com/pubsub/lite/docs/reference/rest
  string rest_reference_documentation_uri = 11 [json_name="restReferenceDocumentationUri"];
}

// Settings for Python client libraries.
message PythonSettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
  // Experimental features to be included during client library generation.
  ExperimentalFeatures experimental_features = 2 [json_name="experimentalFeatures"];
}

// Quota configuration helps to achieve fairness and budgeting in service usage. The metric based quota configuration works this way: - The service configuration defines a set of metrics. - For API calls, the quota.metric_rules maps methods to metrics with corresponding costs. - The quota.limits defines limits on the metrics, which will be used for quota checks at runtime. An example quota configuration in yaml format: quota: limits: - name: apiWriteQpsPerProject metric: library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for consumer projects values: STANDARD: 10000 (The metric rules bind all methods to the read_calls metric, except for the UpdateBook and DeleteBook methods. These two methods are mapped to the write_calls metric, with the UpdateBook method consuming at twice rate as the DeleteBook method.) metric_rules: - selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector: google.example.library.v1.LibraryService.UpdateBook metric_costs: library.googleapis.com/write_calls: 2 - selector: google.example.library.v1.LibraryService.DeleteBook metric_costs: library.googleapis.com/write_calls: 1 Corresponding Metric definition: metrics: - name: library.googleapis.com/read_calls display_name: Read requests metric_kind: DELTA value_type: INT64 - name: library.googleapis.com/write_calls display_name: Write requests metric_kind: DELTA value_type: INT64 
message Quota {
  // List of QuotaLimit definitions for the service.
  repeated QuotaLimit limits = 1 [json_name="limits"];
  // List of MetricRule definitions, each one mapping a selected method to one or more metrics.
  repeated MetricRule metric_rules = 2 [json_name="metricRules"];
}

// `QuotaLimit` defines a specific limit that applies over a specified duration for a limit type. There can be at most one limit for a duration and limit type combination defined within a `QuotaGroup`.
message QuotaLimit {
  // Default number of tokens that can be consumed during the specified duration. This is the number of tokens assigned when a client application developer activates the service for his/her project. Specifying a value of 0 will block all requests. This can be used if you are provisioning quota to selected consumers and blocking others. Similarly, a value of -1 will indicate an unlimited quota. No other negative values are allowed. Used by group-based quotas only.
  int64 default_limit = 1 [json_name="defaultLimit"];
  // Optional. User-visible, extended description for this quota limit. Should be used only when more context is needed to understand this limit than provided by the limit's display name (see: `display_name`).
  string description = 2 [json_name="description"];
  // User-visible display name for this limit. Optional. If not set, the UI will provide a default display name based on the quota configuration. This field can be used to override the default display name generated from the configuration.
  string display_name = 3 [json_name="displayName"];
  // Duration of this limit in textual notation. Must be "100s" or "1d". Used by group-based quotas only.
  string duration = 4 [json_name="duration"];
  // Free tier value displayed in the Developers Console for this limit. The free tier is the number of tokens that will be subtracted from the billed amount when billing is enabled. This field can only be set on a limit with duration "1d", in a billable group; it is invalid on any other limit. If this field is not set, it defaults to 0, indicating that there is no free tier for this service. Used by group-based quotas only.
  int64 free_tier = 5 [json_name="freeTier"];
  // Maximum number of tokens that can be consumed during the specified duration. Client application developers can override the default limit up to this maximum. If specified, this value cannot be set to a value less than the default limit. If not specified, it is set to the default limit. To allow clients to apply overrides with no upper bound, set this to -1, indicating unlimited maximum quota. Used by group-based quotas only.
  int64 max_limit = 6 [json_name="maxLimit"];
  // The name of the metric this quota limit applies to. The quota limits with the same metric will be checked together during runtime. The metric must be defined within the service config.
  string metric = 7 [json_name="metric"];
  // Name of the quota limit. The name must be provided, and it must be unique within the service. The name can only include alphanumeric characters as well as '-'. The maximum length of the limit name is 64 characters.
  string name = 8 [json_name="name"];
  // Specify the unit of the quota limit. It uses the same syntax as MetricDescriptor.unit. The supported unit kinds are determined by the quota backend system. Here are some examples: * "1/min/{project}" for quota per minute per project. Note: the order of unit components is insignificant. The "1" at the beginning is required to follow the metric unit syntax.
  string unit = 9 [json_name="unit"];
  // Tiered limit values. You must specify this as a key:value pair, with an integer value that is the maximum number of requests allowed for the specified unit. Currently only STANDARD is supported.
  map<string, int64> values = 10 [json_name="values"];
}

// Represents a found unused range.
message Range {
  // CIDR range in "10.x.x.x/y" format that is within the allocated ranges and currently unused.
  string ip_cidr_range = 1 [json_name="ipCidrRange"];
  // In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`
  string network = 2 [json_name="network"];
}

// Represents a range reservation.
message RangeReservation {
  // Required. The size of the desired subnet. Use usual CIDR range notation. For example, '29' to find unused x.x.x.x/29 CIDR range. The goal is to determine if one of the allocated ranges has enough free space for a subnet of the requested size. GCE disallows subnets with prefix_length > 29
  int32 ip_prefix_length = 1 [json_name="ipPrefixLength"];
  // Optional. The name of one or more allocated IP address ranges associated with this private service access connection. If no range names are provided all ranges associated with this connection will be considered. If a CIDR range with the specified IP prefix length is not available within these ranges the validation fails.
  repeated string requested_ranges = 2 [json_name="requestedRanges"];
  // Optional. The size of the desired secondary ranges for the subnet. Use usual CIDR range notation. For example, '29' to find unused x.x.x.x/29 CIDR range. The goal is to determine that the allocated ranges have enough free space for all the requested secondary ranges. GCE disallows subnets with prefix_length > 29
  repeated int32 secondary_range_ip_prefix_lengths = 3 [json_name="secondaryRangeIpPrefixLengths"];
  // Optional. List of subnetwork candidates to validate. The required input fields are `name`, `network`, and `region`. Subnetworks from this list which exist will be returned in the response with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set.
  repeated Subnetwork subnetwork_candidates = 4 [json_name="subnetworkCandidates"];
}

// Metadata provided through GetOperation request for the LRO generated by RemoveDnsRecordSet API
message RemoveDnsRecordSetMetadata {
}

// Request to remove a record set from a private managed DNS zone in the shared producer host project. The name, type, ttl, and data values must all exactly match an existing record set in the specified zone.
message RemoveDnsRecordSetRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
  // Required. The DNS record set to remove.
  DnsRecordSet dns_record_set = 2 [json_name="dnsRecordSet"];
  // Required. The name of the private DNS zone in the shared producer host project from which the record set will be removed.
  string zone = 3 [json_name="zone"];
}

// Blank message response type for RemoveDnsRecordSet API
message RemoveDnsRecordSetResponse {
}

// Metadata provided through GetOperation request for the LRO generated by RemoveDnsZone API
message RemoveDnsZoneMetadata {
}

// Request to remove a private managed DNS zone in the shared producer host project and a matching DNS peering zone in the consumer project.
message RemoveDnsZoneRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
  // Required. The name for both the private zone in the shared producer host project and the peering zone in the consumer project.
  string name = 2 [json_name="name"];
}

// Blank message response type for RemoveDnsZone API
message RemoveDnsZoneResponse {
}

// Represents a route that was created or discovered by a private access management service.
message Route {
  // Destination CIDR range that this route applies to.
  string dest_range = 1 [json_name="destRange"];
  // Route name. See https://cloud.google.com/vpc/docs/routes
  string name = 2 [json_name="name"];
  // Fully-qualified URL of the VPC network in the producer host tenant project that this route applies to. For example: `projects/123456/global/networks/host-network`
  string network = 3 [json_name="network"];
  // Fully-qualified URL of the gateway that should handle matching packets that this route applies to. For example: `projects/123456/global/gateways/default-internet-gateway`
  string next_hop_gateway = 4 [json_name="nextHopGateway"];
}

// Settings for Ruby client libraries.
message RubySettings {
  // Some settings.
  CommonLanguageSettings common = 1 [json_name="common"];
}

// Request to search for an unused range within allocated ranges.
message SearchRangeRequest {
  // Required. The prefix length of the IP range. Use usual CIDR range notation. For example, '30' to find unused x.x.x.x/30 CIDR range. Actual range will be determined using allocated range for the consumer peered network and returned in the result.
  int32 ip_prefix_length = 1 [json_name="ipPrefixLength"];
  // Network name in the consumer project. This network must have been already peered with a shared VPC network using CreateConnection method. Must be in a form 'projects/{project}/global/networks/{network}'. {project} is a project number, as in '12345' {network} is network name.
  string network = 2 [json_name="network"];
}

message SecondaryIpRange {
  // Secondary IP CIDR range in `x.x.x.x/y` format.
  string ip_cidr_range = 1 [json_name="ipCidrRange"];
  // Name of the secondary IP range.
  string range_name = 2 [json_name="rangeName"];
}

message SecondaryIpRangeSpec {
  // Required. The prefix length of the secondary IP range. Use CIDR range notation, such as `30` to provision a secondary IP range with an `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of available ranges in the service consumer's allocated range.
  int32 ip_prefix_length = 1 [json_name="ipPrefixLength"];
  // Optional. Enable outside allocation using public IP addresses. Any public IP range may be specified. If this field is provided, we will not use customer reserved ranges for this secondary IP range.
  string outside_allocation_public_ip_range = 2 [json_name="outsideAllocationPublicIpRange"];
  // Required. A name for the secondary IP range. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
  string range_name = 3 [json_name="rangeName"];
  // Optional. The starting address of a range. The address must be a valid IPv4 address in the x.x.x.x format. This value combined with the IP prefix range is the CIDR range for the secondary IP range. The range must be within the allocated range that is assigned to the private connection. If the CIDR range isn't available, the call fails.
  string requested_address = 4 [json_name="requestedAddress"];
}

// This message is used to configure the generation of a subset of the RPCs in a service for client libraries.
message SelectiveGapicGeneration {
  // An allowlist of the fully qualified names of RPCs that should be included on public client surfaces.
  repeated string methods = 1 [json_name="methods"];
}

// `Service` is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: "google.calendar.v3.*" restriction: PREVIEW backend: rules: - selector: "google.calendar.v3.*" address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: "*" requirements: provider_id: google_calendar_auth
message Service {
  // A list of API interfaces exported by this service. Only the `name` field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
  repeated Api apis = 1 [json_name="apis"];
  // Auth configuration.
  Authentication authentication = 2 [json_name="authentication"];
  // API backend configuration.
  Backend backend = 3 [json_name="backend"];
  // Billing configuration.
  Billing billing = 4 [json_name="billing"];
  // Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to `3`.
  uint32 config_version = 5 [json_name="configVersion"];
  // Context configuration.
  Context context = 6 [json_name="context"];
  // Configuration for the service control plane.
  Control control = 7 [json_name="control"];
  // Custom error configuration.
  CustomError custom_error = 8 [json_name="customError"];
  // Additional API documentation.
  Documentation documentation = 9 [json_name="documentation"];
  // Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
  repeated Endpoint endpoints = 10 [json_name="endpoints"];
  // A list of all enum types included in this API service. Enums referenced directly or indirectly by the `apis` are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
  repeated Enum enums = 11 [json_name="enums"];
  // HTTP configuration.
  Http http = 12 [json_name="http"];
  // A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the server may choose to generate one instead.
  string id = 13 [json_name="id"];
  // Logging configuration.
  Logging logging = 14 [json_name="logging"];
  // Defines the logs used by this service.
  repeated LogDescriptor logs = 15 [json_name="logs"];
  // Defines the metrics used by this service.
  repeated MetricDescriptor metrics = 16 [json_name="metrics"];
  // Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
  repeated MonitoredResourceDescriptor monitored_resources = 17 [json_name="monitoredResources"];
  // Monitoring configuration.
  Monitoring monitoring = 18 [json_name="monitoring"];
  // The service name, which is a DNS-like logical identifier for the service, such as `calendar.googleapis.com`. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
  string name = 19 [json_name="name"];
  // The Google project that owns this service.
  string producer_project_id = 20 [json_name="producerProjectId"];
  // Settings for [Google Cloud Client libraries](https://cloud.google.com/apis/docs/cloud-client-libraries) generated from APIs defined as protocol buffers.
  Publishing publishing = 21 [json_name="publishing"];
  // Quota configuration.
  Quota quota = 22 [json_name="quota"];
  // Output only. The source information for this configuration if available.
  SourceInfo source_info = 23 [json_name="sourceInfo"];
  // System parameter configuration.
  SystemParameters system_parameters = 24 [json_name="systemParameters"];
  // A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
  repeated Type system_types = 25 [json_name="systemTypes"];
  // The product title for this service, it is the name displayed in Google Cloud Console.
  string title = 26 [json_name="title"];
  // A list of all proto message types included in this API service. Types referenced directly or indirectly by the `apis` are automatically included. Messages which are not referenced but shall be included, such as types used by the `google.protobuf.Any` type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
  repeated Type types = 27 [json_name="types"];
  // Configuration controlling usage of this service.
  Usage usage = 28 [json_name="usage"];
}

// `SourceContext` represents information about the source of a protobuf element, like the file in which it is defined.
message SourceContext {
  // The path-qualified name of the .proto file that contained the associated protobuf element. For example: `"google/protobuf/source_context.proto"`.
  string file_name = 1 [json_name="fileName"];
}

// Source information used to create a Service Config
message SourceInfo {
  // All files used during config generation.
  repeated .google.protobuf.Any source_files = 1 [json_name="sourceFiles"];
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
message Status {
  // The status code, which should be an enum value of google.rpc.Code.
  int32 code = 1 [json_name="code"];
  // A list of messages that carry the error details. There is a common set of message types for APIs to use.
  repeated .google.protobuf.Any details = 2 [json_name="details"];
  // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
  string message = 3 [json_name="message"];
}

// Represents a subnet that was created or discovered by a private access management service.
message Subnetwork {
  // Subnetwork CIDR range in `10.x.x.x/y` format.
  string ip_cidr_range = 1 [json_name="ipCidrRange"];
  // Subnetwork name. See https://cloud.google.com/compute/docs/vpc/
  string name = 2 [json_name="name"];
  // In the Shared VPC host project, the VPC network that's peered with the consumer network. For example: `projects/1234321/global/networks/host-network`
  string network = 3 [json_name="network"];
  // This is a discovered subnet that is not within the current consumer allocated ranges.
  bool outside_allocation = 4 [json_name="outsideAllocation"];
  // GCP region where the subnetwork is located.
  string region = 5 [json_name="region"];
  // List of secondary IP ranges in this subnetwork.
  repeated SecondaryIpRange secondary_ip_ranges = 6 [json_name="secondaryIpRanges"];
}

// Define a parameter's name and location. The parameter may be passed as either an HTTP header or a URL query parameter, and if both are passed the behavior is implementation-dependent.
message SystemParameter {
  // Define the HTTP header name to use for the parameter. It is case insensitive.
  string http_header = 1 [json_name="httpHeader"];
  // Define the name of the parameter, such as "api_key" . It is case sensitive.
  string name = 2 [json_name="name"];
  // Define the URL query parameter name to use for the parameter. It is case sensitive.
  string url_query_parameter = 3 [json_name="urlQueryParameter"];
}

// Define a system parameter rule mapping system parameter definitions to methods.
message SystemParameterRule {
  // Define parameters. Multiple names may be defined for a parameter. For a given method call, only one of them should be used. If multiple names are used the behavior is implementation-dependent. If none of the specified names are present the behavior is parameter-dependent.
  repeated SystemParameter parameters = 1 [json_name="parameters"];
  // Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
  string selector = 2 [json_name="selector"];
}

// ### System parameter configuration A system parameter is a special kind of parameter defined by the API system, not by an individual API. It is typically mapped to an HTTP header and/or a URL query parameter. This configuration specifies which methods change the names of the system parameters.
message SystemParameters {
  // Define system parameters. The parameters defined here will override the default parameters implemented by the system. If this field is missing from the service config, default system parameters will be used. Default system parameters and names is implementation-dependent. Example: define api key for all methods system_parameters rules: - selector: "*" parameters: - name: api_key url_query_parameter: api_key Example: define 2 api key names for a specific method. system_parameters rules: - selector: "/ListShelves" parameters: - name: api_key http_header: Api-Key1 - name: api_key http_header: Api-Key2 **NOTE:** All service configuration rules follow "last one wins" order.
  repeated SystemParameterRule rules = 1 [json_name="rules"];
}

// A protocol buffer message type.
message Type {
  // The source edition string, only valid when syntax is SYNTAX_EDITIONS.
  string edition = 1 [json_name="edition"];
  // The list of fields.
  repeated Field fields = 2 [json_name="fields"];
  // The fully qualified message name.
  string name = 3 [json_name="name"];
  // The list of types appearing in `oneof` definitions in this type.
  repeated string oneofs = 4 [json_name="oneofs"];
  // The protocol buffer options.
  repeated Option options = 5 [json_name="options"];
  // The source context.
  SourceContext source_context = 6 [json_name="sourceContext"];
  // The source syntax.
  string syntax = 7 [json_name="syntax"];
}

// Request to update the configuration of a service networking connection including the import/export of custom routes and subnetwork routes with public IP.
message UpdateConsumerConfigRequest {
  // Required. The updated peering config.
  ConsumerConfig consumer_config = 1 [json_name="consumerConfig"];
}

// Metadata provided through GetOperation request for the LRO generated by UpdateDnsRecordSet API
message UpdateDnsRecordSetMetadata {
}

// Request to update a record set from a private managed DNS zone in the shared producer host project. The name, type, ttl, and data values of the existing record set must all exactly match an existing record set in the specified zone.
message UpdateDnsRecordSetRequest {
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is the project number, as in '12345' {network} is the network name.
  string consumer_network = 1 [json_name="consumerNetwork"];
  // Required. The existing DNS record set to update.
  DnsRecordSet existing_dns_record_set = 2 [json_name="existingDnsRecordSet"];
  // Required. The new values that the DNS record set should be updated to hold.
  DnsRecordSet new_dns_record_set = 3 [json_name="newDnsRecordSet"];
  // Required. The name of the private DNS zone in the shared producer host project from which the record set will be removed.
  string zone = 4 [json_name="zone"];
}

// Configuration controlling usage of a service.
message Usage {
  // The full resource name of a channel used for sending notifications to the service producer. Google Service Management currently only supports [Google Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel. To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in https://cloud.google.com/pubsub/docs/overview.
  string producer_notification_channel = 1 [json_name="producerNotificationChannel"];
  // Requirements that must be satisfied before a consumer project can use the service. Each requirement is of the form /; for example 'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of Service requirement must be included here. Google Cloud APIs must include "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include "serviceusage.googleapis.com/tos/universal". Additional ToS can be included based on the business needs.
  repeated string requirements = 2 [json_name="requirements"];
  // A list of usage rules that apply to individual API methods. **NOTE:** All service configuration rules follow "last one wins" order.
  repeated UsageRule rules = 3 [json_name="rules"];
}

// Usage configuration rules for the service. NOTE: Under development. Use this rule to configure unregistered calls for the service. Unregistered calls are calls that do not contain consumer project identity. (Example: calls that do not contain an API key). By default, API methods do not allow unregistered calls, and each method call must be identified by a consumer project identity. Use this rule to allow/disallow unregistered calls. Example of an API that wants to allow unregistered calls for entire service. usage: rules: - selector: "*" allow_unregistered_calls: true Example of a method that wants to allow unregistered calls. usage: rules: - selector: "google.example.library.v1.LibraryService.CreateBook" allow_unregistered_calls: true
message UsageRule {
  // If true, the selected method allows unregistered calls, e.g. calls that don't identify any user or application.
  bool allow_unregistered_calls = 1 [json_name="allowUnregisteredCalls"];
  // Selects the methods to which this rule applies. Use '*' to indicate all methods in all APIs. Refer to selector for syntax details.
  string selector = 2 [json_name="selector"];
  // If true, the selected method should skip service control and the control plane features, such as quota and billing, will not be available. This flag is used by Google Cloud Endpoints to bypass checks for internal methods, such as service health check methods.
  bool skip_service_control = 3 [json_name="skipServiceControl"];
}

message ValidateConsumerConfigRequest {
  // Optional. The IAM permission check determines whether the consumer project has 'servicenetworking.services.use' permission or not.
  bool check_service_networking_use_permission = 1 [json_name="checkServiceNetworkingUsePermission"];
  // Required. The network that the consumer is using to connect with services. Must be in the form of projects/{project}/global/networks/{network} {project} is a project number, as in '12345' {network} is network name.
  string consumer_network = 2 [json_name="consumerNetwork"];
  // NETWORK_NOT_IN_CONSUMERS_PROJECT, NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT, and HOST_PROJECT_NOT_FOUND are done when consumer_project is provided.
  ConsumerProject consumer_project = 3 [json_name="consumerProject"];
  // RANGES_EXHAUSTED, RANGES_EXHAUSTED, and RANGES_DELETED_LATER are done when range_reservation is provided.
  RangeReservation range_reservation = 4 [json_name="rangeReservation"];
  // The validations will be performed in the order listed in the ValidationError enum. The first failure will return. If a validation is not requested, then the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and NETWORK_NOT_PEERED checks are performed for all requests where validation is requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for requests that have validate_network set to true.
  bool validate_network = 5 [json_name="validateNetwork"];
}

message ValidateConsumerConfigResponse {
  // List of subnetwork candidates from the request which exist with the `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation` fields set.
  repeated Subnetwork existing_subnetwork_candidates = 1 [json_name="existingSubnetworkCandidates"];
  // Indicates whether all the requested validations passed.
  bool is_valid = 2 [json_name="isValid"];
  // The first validation which failed.
  string validation_error = 3 [json_name="validationError"];
}

// Response for the get VPC Service Controls request.
message VpcServiceControls {
  // Output only. Indicates whether the VPC Service Controls are enabled or disabled for the connection. If the consumer called the EnableVpcServiceControls method, then this is true. If the consumer called DisableVpcServiceControls, then this is false. The default is false.
  bool enabled = 1 [json_name="enabled"];
}

message AddSubnetworkServiceRequest {
  string parent = 1;
  AddSubnetworkRequest service = 2;
}

message DisableVpcServiceControlsServiceRequest {
  string parent = 1;
  DisableVpcServiceControlsRequest service = 2;
}

message EnableVpcServiceControlsServiceRequest {
  string parent = 1;
  EnableVpcServiceControlsRequest service = 2;
}

message SearchRangeServiceRequest {
  string parent = 1;
  SearchRangeRequest service = 2;
}

message ValidateServiceRequest {
  string parent = 1;
  ValidateConsumerConfigRequest service = 2;
}

message CreateServicesConnectionRequest {
  string parent = 1;
  Connection services_connection = 2;
}

message DeleteConnectionServicesConnectionRequest {
  string name = 1;
  DeleteConnectionRequest services_connection = 2;
}

message ListServicesConnectionsRequest {
  string network = 1;
  string parent = 2;
}

message PatchServicesConnectionRequest {
  bool force = 1;
  string name = 2;
  string update_mask = 3;
  Connection services_connection = 4;
}

message AddServicesDnsRecordSetRequest {
  string parent = 1;
  AddDnsRecordSetRequest services_dns_record_set = 2;
}

message GetServicesDnsRecordSetRequest {
  string consumer_network = 1;
  string domain = 2;
  string parent = 3;
  string type = 4;
  string zone = 5;
}

message ListServicesDnsRecordSetsRequest {
  string consumer_network = 1;
  string parent = 2;
  string zone = 3;
}

message DeleteServicesDnsRecordSetRequest {
  string parent = 1;
  RemoveDnsRecordSetRequest services_dns_record_set = 2;
}

message UpdateServicesDnsRecordSetRequest {
  string parent = 1;
  UpdateDnsRecordSetRequest services_dns_record_set = 2;
}

message AddServicesDnsZoneRequest {
  string parent = 1;
  AddDnsZoneRequest services_dns_zone = 2;
}

message DeleteServicesDnsZoneRequest {
  string parent = 1;
  RemoveDnsZoneRequest services_dns_zone = 2;
}

message GetServicesProjectsGlobalNetworkRequest {
  bool include_used_ip_ranges = 1;
  string name = 2;
}

message GetVpcServiceControlsServicesProjectsGlobalNetworkRequest {
  string name = 1;
}

message UpdateConsumerConfigServicesProjectsGlobalNetworkRequest {
  string parent = 1;
  UpdateConsumerConfigRequest services_projects_global_network = 2;
}

message GetServicesProjectsGlobalNetworksDnsZoneRequest {
  string name = 1;
}

message ListServicesProjectsGlobalNetworksDnsZonesRequest {
  string parent = 1;
}

message CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest {
  string parent = 1;
  PeeredDnsDomain services_projects_global_networks_peered_dns_domain = 2;
}

message DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest {
  string name = 1;
}

message ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest {
  string parent = 1;
}

message AddServicesRoleRequest {
  string parent = 1;
  AddRolesRequest services_role = 2;
}
