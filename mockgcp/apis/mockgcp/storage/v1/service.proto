// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mockgcp.storage.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

import "google/protobuf/empty.proto";

import "mockgcp/storage/v1/storage.proto";
import "mockgcp/storage/v1/storage_resources.proto";

option go_package = "google.golang.org/genproto/googleapis/storage/v1;storage";

service Storage {
  option (google.api.default_host) = "storage.googleapis.com";

  // Returns metadata for the specified bucket.
  rpc GetBucket(GetBucketRequest) returns (Bucket) {
    option (google.api.http) = {
      get: "/storage/v1/b/{bucket}"
    };
  }

  // Creates a new bucket.
  rpc InsertBucket(InsertBucketRequest) returns (Bucket) {
    option (google.api.http) = {
      post: "/storage/v1/b",
      body: "bucket"
    };
  }

  // Permanently deletes an empty bucket.
  rpc DeleteBucket(DeleteBucketRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/storage/v1/b/{bucket}"
    };
  }

  // Updates a bucket.
  rpc PatchBucket(PatchBucketRequest) returns (Bucket) {
    option (google.api.http) = {
      patch: "/storage/v1/b/{bucket}"
    };
  }

}
