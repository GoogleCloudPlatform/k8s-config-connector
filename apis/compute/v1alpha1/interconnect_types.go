// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha1

import (
	refv1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/apis/refs/v1beta1"
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var ComputeInterconnectGVK = GroupVersion.WithKind("ComputeInterconnect")

type Parent struct {
	// +required
	ProjectRef *refv1beta1.ProjectRef `json:"projectRef"`
}

// ComputeInterconnectSpec defines the desired state of ComputeInterconnect
// +kcc:spec:proto=google.cloud.compute.v1.Interconnect
type ComputeInterconnectSpec struct {
	Parent Parent `json:",inline"`
	// The ComputeInterconnect name. If not given, the metadata.name will be used.
	ResourceID *string `json:"resourceID,omitempty"`
	// Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.admin_enabled
	AdminEnabled *bool `json:"adminEnabled,omitempty"`

	// Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.customer_name
	CustomerName *string `json:"customerName,omitempty"`

	// An optional description of this resource. Provide this property when you create the resource.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.description
	Description *string `json:"description,omitempty"`

	// Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
	//  Check the InterconnectType enum for the list of possible values.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.interconnect_type
	InterconnectType *string `json:"interconnectType,omitempty"`

	// A fingerprint for the labels being applied to this Interconnect, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an Interconnect.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.label_fingerprint
	LabelFingerprint *string `json:"labelFingerprint,omitempty"`

	// Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.labels
	Labels map[string]string `json:"labels,omitempty"`

	// Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
	//  Check the LinkType enum for the list of possible values.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.link_type
	LinkType *string `json:"linkType,omitempty"`

	// URL of the InterconnectLocation object that represents where this connection is to be provisioned.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.location
	Location *string `json:"location,omitempty"`

	// Configuration that enables Media Access Control security (MACsec) on the Cloud Interconnect connection between Google and your on-premises router.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.macsec
	Macsec *InterconnectMacsec `json:"macsec,omitempty"`

	// Enable or disable MACsec on this Interconnect connection. MACsec enablement fails if the MACsec object is not specified.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.macsec_enabled
	MacsecEnabled *bool `json:"macsecEnabled,omitempty"`

	// Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.noc_contact_email
	NocContactEmail *string `json:"nocContactEmail,omitempty"`

	// Indicates that this is a Cross-Cloud Interconnect. This field specifies the location outside of Google's network that the interconnect is connected to.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.remote_location
	RemoteLocation *string `json:"remoteLocation,omitempty"`

	// Optional. List of features requested for this Interconnect connection, which can take one of the following values: - IF_MACSEC If specified then the connection is created on MACsec capable hardware ports. If not specified, the default value is false, which allocates non-MACsec capable ports first if available. This parameter can be provided only with Interconnect INSERT. It isn't valid for Interconnect PATCH.
	//  Check the RequestedFeatures enum for the list of possible values.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.requested_features
	RequestedFeatures []string `json:"requestedFeatures,omitempty"`

	// Target number of physical links in the link bundle, as requested by the customer.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.requested_link_count
	RequestedLinkCount *int32 `json:"requestedLinkCount,omitempty"`
}

// ComputeInterconnectStatus defines the config connector machine state of ComputeInterconnect
type ComputeInterconnectStatus struct {
	/* Conditions represent the latest available observations of the
	   object's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`

	// ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	// A unique specifier for the ComputeInterconnect resource in GCP.
	ExternalRef *string `json:"externalRef,omitempty"`

	// ObservedState is the state of the resource as most recently observed in GCP.
	ObservedState *ComputeInterconnectObservedState `json:"observedState,omitempty"`
}

// ComputeInterconnectObservedState is the state of the ComputeInterconnect resource as most recently observed in GCP.
// +kcc:observedstate:proto=google.cloud.compute.v1.Interconnect
type ComputeInterconnectObservedState struct {
	// [Output only] List of features available for this Interconnect connection, which can take one of the following values: - IF_MACSEC If present then the Interconnect connection is provisioned on MACsec capable hardware ports. If not present then the Interconnect connection is provisioned on non-MACsec capable ports and MACsec isn't supported and enabling MACsec fails.
	//  Check the AvailableFeatures enum for the list of possible values.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.available_features
	AvailableFeatures []string `json:"availableFeatures,omitempty"`

	// [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.circuit_infos
	CircuitInfos []InterconnectCircuitInfo `json:"circuitInfos,omitempty"`

	// [Output Only] Creation timestamp in RFC3339 text format.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.creation_timestamp
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`

	// [Output Only] A list of outages expected for this Interconnect.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.expected_outages
	ExpectedOutages []InterconnectOutageNotification `json:"expectedOutages,omitempty"`

	// [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.google_ip_address
	GoogleIPAddress *string `json:"googleIPAddress,omitempty"`

	// [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.google_reference_id
	GoogleReferenceID *string `json:"googleReferenceID,omitempty"`

	// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.id
	ID *uint64 `json:"id,omitempty"`

	// [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.interconnect_attachments
	InterconnectAttachments []string `json:"interconnectAttachments,omitempty"`

	// [Output Only] Type of the resource. Always compute#interconnect for interconnects.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.kind
	Kind *string `json:"kind,omitempty"`

	// [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
	//  Check the OperationalStatus enum for the list of possible values.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.operational_status
	OperationalStatus *string `json:"operationalStatus,omitempty"`

	// [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.peer_ip_address
	PeerIPAddress *string `json:"peerIPAddress,omitempty"`

	// [Output Only] Number of links actually provisioned in this interconnect.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.provisioned_link_count
	ProvisionedLinkCount *int32 `json:"provisionedLinkCount,omitempty"`

	// [Output Only] Reserved for future use.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.satisfies_pzs
	SatisfiesPzs *bool `json:"satisfiesPzs,omitempty"`

	// [Output Only] Server-defined URL for the resource.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.self_link
	SelfLink *string `json:"selfLink,omitempty"`

	// [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
	//  Check the State enum for the list of possible values.
	// +kcc:proto:field=google.cloud.compute.v1.Interconnect.state
	State *string `json:"state,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpcomputeinterconnect;gcpcomputeinterconnects
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// ComputeInterconnect is the Schema for the ComputeInterconnect API
// +k8s:openapi-gen=true
type ComputeInterconnect struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// +required
	Spec   ComputeInterconnectSpec   `json:"spec,omitempty"`
	Status ComputeInterconnectStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// ComputeInterconnectList contains a list of ComputeInterconnect
type ComputeInterconnectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeInterconnect `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeInterconnect{}, &ComputeInterconnectList{})
}
