// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha1


// +kcc:proto=google.cloud.baremetalsolution.v2.Lun
type Lun struct {

	// An identifier for the LUN, generated by the backend.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.id
	ID *string `json:"id,omitempty"`

	// The state of this storage volume.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.state
	State *string `json:"state,omitempty"`

	// The size of this LUN, in gigabytes.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.size_gb
	SizeGB *int64 `json:"sizeGB,omitempty"`

	// The LUN multiprotocol type ensures the characteristics of the LUN are
	//  optimized for each operating system.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.multiprotocol_type
	MultiprotocolType *string `json:"multiprotocolType,omitempty"`

	// Display the storage volume for this LUN.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.storage_volume
	StorageVolume *string `json:"storageVolume,omitempty"`

	// Display if this LUN can be shared between multiple physical servers.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.shareable
	Shareable *bool `json:"shareable,omitempty"`

	// Display if this LUN is a boot LUN.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.boot_lun
	BootLun *bool `json:"bootLun,omitempty"`

	// The storage type for this LUN.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.storage_type
	StorageType *string `json:"storageType,omitempty"`

	// The WWID for this LUN.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.wwid
	Wwid *string `json:"wwid,omitempty"`
}

// +kcc:proto=google.cloud.baremetalsolution.v2.Lun
type LunObservedState struct {
	// Output only. The name of the LUN.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.name
	Name *string `json:"name,omitempty"`

	// Output only. Time after which LUN will be fully deleted.
	//  It is filled only for LUNs in COOL_OFF state.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.expire_time
	ExpireTime *string `json:"expireTime,omitempty"`

	// Output only. Instances this Lun is attached to.
	// +kcc:proto:field=google.cloud.baremetalsolution.v2.Lun.instances
	Instances []string `json:"instances,omitempty"`
}
