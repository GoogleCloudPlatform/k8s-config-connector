//go:build !ignore_autogenerated

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/apis/refs/v1beta1"
	k8sv1alpha1 "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutotuningConfig) DeepCopyInto(out *AutotuningConfig) {
	*out = *in
	if in.Scenarios != nil {
		in, out := &in.Scenarios, &out.Scenarios
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutotuningConfig.
func (in *AutotuningConfig) DeepCopy() *AutotuningConfig {
	if in == nil {
		return nil
	}
	out := new(AutotuningConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BatchIdentity) DeepCopyInto(out *BatchIdentity) {
	*out = *in
	if in.parent != nil {
		in, out := &in.parent, &out.parent
		*out = new(BatchParent)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BatchIdentity.
func (in *BatchIdentity) DeepCopy() *BatchIdentity {
	if in == nil {
		return nil
	}
	out := new(BatchIdentity)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BatchParent) DeepCopyInto(out *BatchParent) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BatchParent.
func (in *BatchParent) DeepCopy() *BatchParent {
	if in == nil {
		return nil
	}
	out := new(BatchParent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BatchRef) DeepCopyInto(out *BatchRef) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BatchRef.
func (in *BatchRef) DeepCopy() *BatchRef {
	if in == nil {
		return nil
	}
	out := new(BatchRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Batch_StateHistory) DeepCopyInto(out *Batch_StateHistory) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Batch_StateHistory.
func (in *Batch_StateHistory) DeepCopy() *Batch_StateHistory {
	if in == nil {
		return nil
	}
	out := new(Batch_StateHistory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Batch_StateHistoryObservedState) DeepCopyInto(out *Batch_StateHistoryObservedState) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.StateMessage != nil {
		in, out := &in.StateMessage, &out.StateMessage
		*out = new(string)
		**out = **in
	}
	if in.StateStartTime != nil {
		in, out := &in.StateStartTime, &out.StateStartTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Batch_StateHistoryObservedState.
func (in *Batch_StateHistoryObservedState) DeepCopy() *Batch_StateHistoryObservedState {
	if in == nil {
		return nil
	}
	out := new(Batch_StateHistoryObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocBatch) DeepCopyInto(out *DataprocBatch) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocBatch.
func (in *DataprocBatch) DeepCopy() *DataprocBatch {
	if in == nil {
		return nil
	}
	out := new(DataprocBatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DataprocBatch) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocBatchList) DeepCopyInto(out *DataprocBatchList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DataprocBatch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocBatchList.
func (in *DataprocBatchList) DeepCopy() *DataprocBatchList {
	if in == nil {
		return nil
	}
	out := new(DataprocBatchList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DataprocBatchList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocBatchObservedState) DeepCopyInto(out *DataprocBatchObservedState) {
	*out = *in
	if in.Uuid != nil {
		in, out := &in.Uuid, &out.Uuid
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.RuntimeInfo != nil {
		in, out := &in.RuntimeInfo, &out.RuntimeInfo
		*out = new(RuntimeInfoObservedState)
		(*in).DeepCopyInto(*out)
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.StateMessage != nil {
		in, out := &in.StateMessage, &out.StateMessage
		*out = new(string)
		**out = **in
	}
	if in.StateTime != nil {
		in, out := &in.StateTime, &out.StateTime
		*out = new(string)
		**out = **in
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		*out = new(string)
		**out = **in
	}
	if in.Operation != nil {
		in, out := &in.Operation, &out.Operation
		*out = new(string)
		**out = **in
	}
	if in.StateHistory != nil {
		in, out := &in.StateHistory, &out.StateHistory
		*out = make([]Batch_StateHistoryObservedState, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocBatchObservedState.
func (in *DataprocBatchObservedState) DeepCopy() *DataprocBatchObservedState {
	if in == nil {
		return nil
	}
	out := new(DataprocBatchObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocBatchSpec) DeepCopyInto(out *DataprocBatchSpec) {
	*out = *in
	if in.PysparkBatch != nil {
		in, out := &in.PysparkBatch, &out.PysparkBatch
		*out = new(PySparkBatch)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkBatch != nil {
		in, out := &in.SparkBatch, &out.SparkBatch
		*out = new(SparkBatch)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkRBatch != nil {
		in, out := &in.SparkRBatch, &out.SparkRBatch
		*out = new(SparkRBatch)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkSQLBatch != nil {
		in, out := &in.SparkSQLBatch, &out.SparkSQLBatch
		*out = new(SparkSQLBatch)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RuntimeConfig != nil {
		in, out := &in.RuntimeConfig, &out.RuntimeConfig
		*out = new(RuntimeConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.EnvironmentConfig != nil {
		in, out := &in.EnvironmentConfig, &out.EnvironmentConfig
		*out = new(EnvironmentConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Parent != nil {
		in, out := &in.Parent, &out.Parent
		*out = new(Parent)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocBatchSpec.
func (in *DataprocBatchSpec) DeepCopy() *DataprocBatchSpec {
	if in == nil {
		return nil
	}
	out := new(DataprocBatchSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocBatchStatus) DeepCopyInto(out *DataprocBatchStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]k8sv1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	if in.ExternalRef != nil {
		in, out := &in.ExternalRef, &out.ExternalRef
		*out = new(string)
		**out = **in
	}
	if in.ObservedState != nil {
		in, out := &in.ObservedState, &out.ObservedState
		*out = new(DataprocBatchObservedState)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocBatchStatus.
func (in *DataprocBatchStatus) DeepCopy() *DataprocBatchStatus {
	if in == nil {
		return nil
	}
	out := new(DataprocBatchStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocJob) DeepCopyInto(out *DataprocJob) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocJob.
func (in *DataprocJob) DeepCopy() *DataprocJob {
	if in == nil {
		return nil
	}
	out := new(DataprocJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DataprocJob) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocJobList) DeepCopyInto(out *DataprocJobList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DataprocJob, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocJobList.
func (in *DataprocJobList) DeepCopy() *DataprocJobList {
	if in == nil {
		return nil
	}
	out := new(DataprocJobList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DataprocJobList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocJobObservedState) DeepCopyInto(out *DataprocJobObservedState) {
	*out = *in
	if in.Placement != nil {
		in, out := &in.Placement, &out.Placement
		*out = new(JobPlacementObservedState)
		(*in).DeepCopyInto(*out)
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(JobStatusObservedState)
		(*in).DeepCopyInto(*out)
	}
	if in.StatusHistory != nil {
		in, out := &in.StatusHistory, &out.StatusHistory
		*out = make([]JobStatusObservedState, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.YarnApplications != nil {
		in, out := &in.YarnApplications, &out.YarnApplications
		*out = make([]YarnApplication, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DriverOutputResourceURI != nil {
		in, out := &in.DriverOutputResourceURI, &out.DriverOutputResourceURI
		*out = new(string)
		**out = **in
	}
	if in.DriverControlFilesURI != nil {
		in, out := &in.DriverControlFilesURI, &out.DriverControlFilesURI
		*out = new(string)
		**out = **in
	}
	if in.JobUUid != nil {
		in, out := &in.JobUUid, &out.JobUUid
		*out = new(string)
		**out = **in
	}
	if in.Done != nil {
		in, out := &in.Done, &out.Done
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocJobObservedState.
func (in *DataprocJobObservedState) DeepCopy() *DataprocJobObservedState {
	if in == nil {
		return nil
	}
	out := new(DataprocJobObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocJobParent) DeepCopyInto(out *DataprocJobParent) {
	*out = *in
	if in.ProjectRef != nil {
		in, out := &in.ProjectRef, &out.ProjectRef
		*out = new(v1beta1.ProjectRef)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocJobParent.
func (in *DataprocJobParent) DeepCopy() *DataprocJobParent {
	if in == nil {
		return nil
	}
	out := new(DataprocJobParent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocJobSpec) DeepCopyInto(out *DataprocJobSpec) {
	*out = *in
	if in.Reference != nil {
		in, out := &in.Reference, &out.Reference
		*out = new(JobReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Placement != nil {
		in, out := &in.Placement, &out.Placement
		*out = new(JobPlacement)
		(*in).DeepCopyInto(*out)
	}
	if in.HadoopJob != nil {
		in, out := &in.HadoopJob, &out.HadoopJob
		*out = new(HadoopJob)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkJob != nil {
		in, out := &in.SparkJob, &out.SparkJob
		*out = new(SparkJob)
		(*in).DeepCopyInto(*out)
	}
	if in.PysparkJob != nil {
		in, out := &in.PysparkJob, &out.PysparkJob
		*out = new(PySparkJob)
		(*in).DeepCopyInto(*out)
	}
	if in.HiveJob != nil {
		in, out := &in.HiveJob, &out.HiveJob
		*out = new(HiveJob)
		(*in).DeepCopyInto(*out)
	}
	if in.PigJob != nil {
		in, out := &in.PigJob, &out.PigJob
		*out = new(PigJob)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkRJob != nil {
		in, out := &in.SparkRJob, &out.SparkRJob
		*out = new(SparkRJob)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkSQLJob != nil {
		in, out := &in.SparkSQLJob, &out.SparkSQLJob
		*out = new(SparkSQLJob)
		(*in).DeepCopyInto(*out)
	}
	if in.PrestoJob != nil {
		in, out := &in.PrestoJob, &out.PrestoJob
		*out = new(PrestoJob)
		(*in).DeepCopyInto(*out)
	}
	if in.TrinoJob != nil {
		in, out := &in.TrinoJob, &out.TrinoJob
		*out = new(TrinoJob)
		(*in).DeepCopyInto(*out)
	}
	if in.FlinkJob != nil {
		in, out := &in.FlinkJob, &out.FlinkJob
		*out = new(FlinkJob)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Scheduling != nil {
		in, out := &in.Scheduling, &out.Scheduling
		*out = new(JobScheduling)
		(*in).DeepCopyInto(*out)
	}
	if in.DriverSchedulingConfig != nil {
		in, out := &in.DriverSchedulingConfig, &out.DriverSchedulingConfig
		*out = new(DriverSchedulingConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.DataprocJobParent != nil {
		in, out := &in.DataprocJobParent, &out.DataprocJobParent
		*out = new(DataprocJobParent)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocJobSpec.
func (in *DataprocJobSpec) DeepCopy() *DataprocJobSpec {
	if in == nil {
		return nil
	}
	out := new(DataprocJobSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataprocJobStatus) DeepCopyInto(out *DataprocJobStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]k8sv1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	if in.ExternalRef != nil {
		in, out := &in.ExternalRef, &out.ExternalRef
		*out = new(string)
		**out = **in
	}
	if in.ObservedState != nil {
		in, out := &in.ObservedState, &out.ObservedState
		*out = new(DataprocJobObservedState)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataprocJobStatus.
func (in *DataprocJobStatus) DeepCopy() *DataprocJobStatus {
	if in == nil {
		return nil
	}
	out := new(DataprocJobStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DriverSchedulingConfig) DeepCopyInto(out *DriverSchedulingConfig) {
	*out = *in
	if in.MemoryMb != nil {
		in, out := &in.MemoryMb, &out.MemoryMb
		*out = new(int32)
		**out = **in
	}
	if in.Vcores != nil {
		in, out := &in.Vcores, &out.Vcores
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DriverSchedulingConfig.
func (in *DriverSchedulingConfig) DeepCopy() *DriverSchedulingConfig {
	if in == nil {
		return nil
	}
	out := new(DriverSchedulingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnvironmentConfig) DeepCopyInto(out *EnvironmentConfig) {
	*out = *in
	if in.ExecutionConfig != nil {
		in, out := &in.ExecutionConfig, &out.ExecutionConfig
		*out = new(ExecutionConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.PeripheralsConfig != nil {
		in, out := &in.PeripheralsConfig, &out.PeripheralsConfig
		*out = new(PeripheralsConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnvironmentConfig.
func (in *EnvironmentConfig) DeepCopy() *EnvironmentConfig {
	if in == nil {
		return nil
	}
	out := new(EnvironmentConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExecutionConfig) DeepCopyInto(out *ExecutionConfig) {
	*out = *in
	if in.ServiceAccountRef != nil {
		in, out := &in.ServiceAccountRef, &out.ServiceAccountRef
		*out = new(v1beta1.IAMServiceAccountRef)
		**out = **in
	}
	if in.NetworkURI != nil {
		in, out := &in.NetworkURI, &out.NetworkURI
		*out = new(string)
		**out = **in
	}
	if in.SubnetworkURI != nil {
		in, out := &in.SubnetworkURI, &out.SubnetworkURI
		*out = new(string)
		**out = **in
	}
	if in.NetworkTags != nil {
		in, out := &in.NetworkTags, &out.NetworkTags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.KMSKeyRef != nil {
		in, out := &in.KMSKeyRef, &out.KMSKeyRef
		*out = new(v1beta1.KMSCryptoKeyRef)
		**out = **in
	}
	if in.IdleTTL != nil {
		in, out := &in.IdleTTL, &out.IdleTTL
		*out = new(string)
		**out = **in
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(string)
		**out = **in
	}
	if in.StagingBucketRef != nil {
		in, out := &in.StagingBucketRef, &out.StagingBucketRef
		*out = new(v1beta1.StorageBucketRef)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExecutionConfig.
func (in *ExecutionConfig) DeepCopy() *ExecutionConfig {
	if in == nil {
		return nil
	}
	out := new(ExecutionConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FlinkJob) DeepCopyInto(out *FlinkJob) {
	*out = *in
	if in.MainJarFileURI != nil {
		in, out := &in.MainJarFileURI, &out.MainJarFileURI
		*out = new(string)
		**out = **in
	}
	if in.MainClass != nil {
		in, out := &in.MainClass, &out.MainClass
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SavepointURI != nil {
		in, out := &in.SavepointURI, &out.SavepointURI
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FlinkJob.
func (in *FlinkJob) DeepCopy() *FlinkJob {
	if in == nil {
		return nil
	}
	out := new(FlinkJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HadoopJob) DeepCopyInto(out *HadoopJob) {
	*out = *in
	if in.MainJarFileURI != nil {
		in, out := &in.MainJarFileURI, &out.MainJarFileURI
		*out = new(string)
		**out = **in
	}
	if in.MainClass != nil {
		in, out := &in.MainClass, &out.MainClass
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HadoopJob.
func (in *HadoopJob) DeepCopy() *HadoopJob {
	if in == nil {
		return nil
	}
	out := new(HadoopJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HiveJob) DeepCopyInto(out *HiveJob) {
	*out = *in
	if in.QueryFileURI != nil {
		in, out := &in.QueryFileURI, &out.QueryFileURI
		*out = new(string)
		**out = **in
	}
	if in.QueryList != nil {
		in, out := &in.QueryList, &out.QueryList
		*out = new(QueryList)
		(*in).DeepCopyInto(*out)
	}
	if in.ContinueOnFailure != nil {
		in, out := &in.ContinueOnFailure, &out.ContinueOnFailure
		*out = new(bool)
		**out = **in
	}
	if in.ScriptVariables != nil {
		in, out := &in.ScriptVariables, &out.ScriptVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HiveJob.
func (in *HiveJob) DeepCopy() *HiveJob {
	if in == nil {
		return nil
	}
	out := new(HiveJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobIdentity) DeepCopyInto(out *JobIdentity) {
	*out = *in
	if in.parent != nil {
		in, out := &in.parent, &out.parent
		*out = new(JobParent)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobIdentity.
func (in *JobIdentity) DeepCopy() *JobIdentity {
	if in == nil {
		return nil
	}
	out := new(JobIdentity)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobParent) DeepCopyInto(out *JobParent) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobParent.
func (in *JobParent) DeepCopy() *JobParent {
	if in == nil {
		return nil
	}
	out := new(JobParent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobPlacement) DeepCopyInto(out *JobPlacement) {
	*out = *in
	if in.ClusterName != nil {
		in, out := &in.ClusterName, &out.ClusterName
		*out = new(string)
		**out = **in
	}
	if in.ClusterLabels != nil {
		in, out := &in.ClusterLabels, &out.ClusterLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobPlacement.
func (in *JobPlacement) DeepCopy() *JobPlacement {
	if in == nil {
		return nil
	}
	out := new(JobPlacement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobPlacementObservedState) DeepCopyInto(out *JobPlacementObservedState) {
	*out = *in
	if in.ClusterUuid != nil {
		in, out := &in.ClusterUuid, &out.ClusterUuid
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobPlacementObservedState.
func (in *JobPlacementObservedState) DeepCopy() *JobPlacementObservedState {
	if in == nil {
		return nil
	}
	out := new(JobPlacementObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobRef) DeepCopyInto(out *JobRef) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobRef.
func (in *JobRef) DeepCopy() *JobRef {
	if in == nil {
		return nil
	}
	out := new(JobRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobReference) DeepCopyInto(out *JobReference) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.JobID != nil {
		in, out := &in.JobID, &out.JobID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobReference.
func (in *JobReference) DeepCopy() *JobReference {
	if in == nil {
		return nil
	}
	out := new(JobReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobScheduling) DeepCopyInto(out *JobScheduling) {
	*out = *in
	if in.MaxFailuresPerHour != nil {
		in, out := &in.MaxFailuresPerHour, &out.MaxFailuresPerHour
		*out = new(int32)
		**out = **in
	}
	if in.MaxFailuresTotal != nil {
		in, out := &in.MaxFailuresTotal, &out.MaxFailuresTotal
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobScheduling.
func (in *JobScheduling) DeepCopy() *JobScheduling {
	if in == nil {
		return nil
	}
	out := new(JobScheduling)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatus) DeepCopyInto(out *JobStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatus.
func (in *JobStatus) DeepCopy() *JobStatus {
	if in == nil {
		return nil
	}
	out := new(JobStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatusObservedState) DeepCopyInto(out *JobStatusObservedState) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Details != nil {
		in, out := &in.Details, &out.Details
		*out = new(string)
		**out = **in
	}
	if in.StateStartTime != nil {
		in, out := &in.StateStartTime, &out.StateStartTime
		*out = new(string)
		**out = **in
	}
	if in.Substate != nil {
		in, out := &in.Substate, &out.Substate
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatusObservedState.
func (in *JobStatusObservedState) DeepCopy() *JobStatusObservedState {
	if in == nil {
		return nil
	}
	out := new(JobStatusObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoggingConfig) DeepCopyInto(out *LoggingConfig) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoggingConfig.
func (in *LoggingConfig) DeepCopy() *LoggingConfig {
	if in == nil {
		return nil
	}
	out := new(LoggingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Parent) DeepCopyInto(out *Parent) {
	*out = *in
	if in.ProjectRef != nil {
		in, out := &in.ProjectRef, &out.ProjectRef
		*out = new(v1beta1.ProjectRef)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Parent.
func (in *Parent) DeepCopy() *Parent {
	if in == nil {
		return nil
	}
	out := new(Parent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PeripheralsConfig) DeepCopyInto(out *PeripheralsConfig) {
	*out = *in
	if in.MetastoreService != nil {
		in, out := &in.MetastoreService, &out.MetastoreService
		*out = new(string)
		**out = **in
	}
	if in.SparkHistoryServerConfig != nil {
		in, out := &in.SparkHistoryServerConfig, &out.SparkHistoryServerConfig
		*out = new(SparkHistoryServerConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PeripheralsConfig.
func (in *PeripheralsConfig) DeepCopy() *PeripheralsConfig {
	if in == nil {
		return nil
	}
	out := new(PeripheralsConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PigJob) DeepCopyInto(out *PigJob) {
	*out = *in
	if in.QueryFileURI != nil {
		in, out := &in.QueryFileURI, &out.QueryFileURI
		*out = new(string)
		**out = **in
	}
	if in.QueryList != nil {
		in, out := &in.QueryList, &out.QueryList
		*out = new(QueryList)
		(*in).DeepCopyInto(*out)
	}
	if in.ContinueOnFailure != nil {
		in, out := &in.ContinueOnFailure, &out.ContinueOnFailure
		*out = new(bool)
		**out = **in
	}
	if in.ScriptVariables != nil {
		in, out := &in.ScriptVariables, &out.ScriptVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PigJob.
func (in *PigJob) DeepCopy() *PigJob {
	if in == nil {
		return nil
	}
	out := new(PigJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrestoJob) DeepCopyInto(out *PrestoJob) {
	*out = *in
	if in.QueryFileURI != nil {
		in, out := &in.QueryFileURI, &out.QueryFileURI
		*out = new(string)
		**out = **in
	}
	if in.QueryList != nil {
		in, out := &in.QueryList, &out.QueryList
		*out = new(QueryList)
		(*in).DeepCopyInto(*out)
	}
	if in.ContinueOnFailure != nil {
		in, out := &in.ContinueOnFailure, &out.ContinueOnFailure
		*out = new(bool)
		**out = **in
	}
	if in.OutputFormat != nil {
		in, out := &in.OutputFormat, &out.OutputFormat
		*out = new(string)
		**out = **in
	}
	if in.ClientTags != nil {
		in, out := &in.ClientTags, &out.ClientTags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrestoJob.
func (in *PrestoJob) DeepCopy() *PrestoJob {
	if in == nil {
		return nil
	}
	out := new(PrestoJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PyPiRepositoryConfig) DeepCopyInto(out *PyPiRepositoryConfig) {
	*out = *in
	if in.PypiRepository != nil {
		in, out := &in.PypiRepository, &out.PypiRepository
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PyPiRepositoryConfig.
func (in *PyPiRepositoryConfig) DeepCopy() *PyPiRepositoryConfig {
	if in == nil {
		return nil
	}
	out := new(PyPiRepositoryConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PySparkBatch) DeepCopyInto(out *PySparkBatch) {
	*out = *in
	if in.MainPythonFileURI != nil {
		in, out := &in.MainPythonFileURI, &out.MainPythonFileURI
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.PythonFileURIs != nil {
		in, out := &in.PythonFileURIs, &out.PythonFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PySparkBatch.
func (in *PySparkBatch) DeepCopy() *PySparkBatch {
	if in == nil {
		return nil
	}
	out := new(PySparkBatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PySparkJob) DeepCopyInto(out *PySparkJob) {
	*out = *in
	if in.MainPythonFileURI != nil {
		in, out := &in.MainPythonFileURI, &out.MainPythonFileURI
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.PythonFileURIs != nil {
		in, out := &in.PythonFileURIs, &out.PythonFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PySparkJob.
func (in *PySparkJob) DeepCopy() *PySparkJob {
	if in == nil {
		return nil
	}
	out := new(PySparkJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryList) DeepCopyInto(out *QueryList) {
	*out = *in
	if in.Queries != nil {
		in, out := &in.Queries, &out.Queries
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryList.
func (in *QueryList) DeepCopy() *QueryList {
	if in == nil {
		return nil
	}
	out := new(QueryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryConfig) DeepCopyInto(out *RepositoryConfig) {
	*out = *in
	if in.PypiRepositoryConfig != nil {
		in, out := &in.PypiRepositoryConfig, &out.PypiRepositoryConfig
		*out = new(PyPiRepositoryConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryConfig.
func (in *RepositoryConfig) DeepCopy() *RepositoryConfig {
	if in == nil {
		return nil
	}
	out := new(RepositoryConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuntimeConfig) DeepCopyInto(out *RuntimeConfig) {
	*out = *in
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.ContainerImage != nil {
		in, out := &in.ContainerImage, &out.ContainerImage
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RepositoryConfig != nil {
		in, out := &in.RepositoryConfig, &out.RepositoryConfig
		*out = new(RepositoryConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.AutotuningConfig != nil {
		in, out := &in.AutotuningConfig, &out.AutotuningConfig
		*out = new(AutotuningConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Cohort != nil {
		in, out := &in.Cohort, &out.Cohort
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuntimeConfig.
func (in *RuntimeConfig) DeepCopy() *RuntimeConfig {
	if in == nil {
		return nil
	}
	out := new(RuntimeConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuntimeInfo) DeepCopyInto(out *RuntimeInfo) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuntimeInfo.
func (in *RuntimeInfo) DeepCopy() *RuntimeInfo {
	if in == nil {
		return nil
	}
	out := new(RuntimeInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RuntimeInfoObservedState) DeepCopyInto(out *RuntimeInfoObservedState) {
	*out = *in
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.OutputURI != nil {
		in, out := &in.OutputURI, &out.OutputURI
		*out = new(string)
		**out = **in
	}
	if in.DiagnosticOutputURI != nil {
		in, out := &in.DiagnosticOutputURI, &out.DiagnosticOutputURI
		*out = new(string)
		**out = **in
	}
	if in.ApproximateUsage != nil {
		in, out := &in.ApproximateUsage, &out.ApproximateUsage
		*out = new(UsageMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.CurrentUsage != nil {
		in, out := &in.CurrentUsage, &out.CurrentUsage
		*out = new(UsageSnapshot)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RuntimeInfoObservedState.
func (in *RuntimeInfoObservedState) DeepCopy() *RuntimeInfoObservedState {
	if in == nil {
		return nil
	}
	out := new(RuntimeInfoObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceRef) DeepCopyInto(out *ServiceRef) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceRef.
func (in *ServiceRef) DeepCopy() *ServiceRef {
	if in == nil {
		return nil
	}
	out := new(ServiceRef)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkBatch) DeepCopyInto(out *SparkBatch) {
	*out = *in
	if in.MainJarFileURI != nil {
		in, out := &in.MainJarFileURI, &out.MainJarFileURI
		*out = new(string)
		**out = **in
	}
	if in.MainClass != nil {
		in, out := &in.MainClass, &out.MainClass
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkBatch.
func (in *SparkBatch) DeepCopy() *SparkBatch {
	if in == nil {
		return nil
	}
	out := new(SparkBatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkHistoryServerConfig) DeepCopyInto(out *SparkHistoryServerConfig) {
	*out = *in
	if in.DataprocClusterRef != nil {
		in, out := &in.DataprocClusterRef, &out.DataprocClusterRef
		*out = new(v1beta1.DataprocClusterRef)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkHistoryServerConfig.
func (in *SparkHistoryServerConfig) DeepCopy() *SparkHistoryServerConfig {
	if in == nil {
		return nil
	}
	out := new(SparkHistoryServerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkJob) DeepCopyInto(out *SparkJob) {
	*out = *in
	if in.MainJarFileURI != nil {
		in, out := &in.MainJarFileURI, &out.MainJarFileURI
		*out = new(string)
		**out = **in
	}
	if in.MainClass != nil {
		in, out := &in.MainClass, &out.MainClass
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkJob.
func (in *SparkJob) DeepCopy() *SparkJob {
	if in == nil {
		return nil
	}
	out := new(SparkJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkRBatch) DeepCopyInto(out *SparkRBatch) {
	*out = *in
	if in.MainRFileURI != nil {
		in, out := &in.MainRFileURI, &out.MainRFileURI
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkRBatch.
func (in *SparkRBatch) DeepCopy() *SparkRBatch {
	if in == nil {
		return nil
	}
	out := new(SparkRBatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkRJob) DeepCopyInto(out *SparkRJob) {
	*out = *in
	if in.MainRFileURI != nil {
		in, out := &in.MainRFileURI, &out.MainRFileURI
		*out = new(string)
		**out = **in
	}
	if in.Args != nil {
		in, out := &in.Args, &out.Args
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileURIs != nil {
		in, out := &in.FileURIs, &out.FileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveURIs != nil {
		in, out := &in.ArchiveURIs, &out.ArchiveURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkRJob.
func (in *SparkRJob) DeepCopy() *SparkRJob {
	if in == nil {
		return nil
	}
	out := new(SparkRJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkSQLBatch) DeepCopyInto(out *SparkSQLBatch) {
	*out = *in
	if in.QueryFileURI != nil {
		in, out := &in.QueryFileURI, &out.QueryFileURI
		*out = new(string)
		**out = **in
	}
	if in.QueryVariables != nil {
		in, out := &in.QueryVariables, &out.QueryVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkSQLBatch.
func (in *SparkSQLBatch) DeepCopy() *SparkSQLBatch {
	if in == nil {
		return nil
	}
	out := new(SparkSQLBatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkSQLJob) DeepCopyInto(out *SparkSQLJob) {
	*out = *in
	if in.QueryFileURI != nil {
		in, out := &in.QueryFileURI, &out.QueryFileURI
		*out = new(string)
		**out = **in
	}
	if in.QueryList != nil {
		in, out := &in.QueryList, &out.QueryList
		*out = new(QueryList)
		(*in).DeepCopyInto(*out)
	}
	if in.ScriptVariables != nil {
		in, out := &in.ScriptVariables, &out.ScriptVariables
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.JarFileURIs != nil {
		in, out := &in.JarFileURIs, &out.JarFileURIs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkSQLJob.
func (in *SparkSQLJob) DeepCopy() *SparkSQLJob {
	if in == nil {
		return nil
	}
	out := new(SparkSQLJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrinoJob) DeepCopyInto(out *TrinoJob) {
	*out = *in
	if in.QueryFileURI != nil {
		in, out := &in.QueryFileURI, &out.QueryFileURI
		*out = new(string)
		**out = **in
	}
	if in.QueryList != nil {
		in, out := &in.QueryList, &out.QueryList
		*out = new(QueryList)
		(*in).DeepCopyInto(*out)
	}
	if in.ContinueOnFailure != nil {
		in, out := &in.ContinueOnFailure, &out.ContinueOnFailure
		*out = new(bool)
		**out = **in
	}
	if in.OutputFormat != nil {
		in, out := &in.OutputFormat, &out.OutputFormat
		*out = new(string)
		**out = **in
	}
	if in.ClientTags != nil {
		in, out := &in.ClientTags, &out.ClientTags
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingConfig != nil {
		in, out := &in.LoggingConfig, &out.LoggingConfig
		*out = new(LoggingConfig)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrinoJob.
func (in *TrinoJob) DeepCopy() *TrinoJob {
	if in == nil {
		return nil
	}
	out := new(TrinoJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UsageMetrics) DeepCopyInto(out *UsageMetrics) {
	*out = *in
	if in.MilliDcuSeconds != nil {
		in, out := &in.MilliDcuSeconds, &out.MilliDcuSeconds
		*out = new(int64)
		**out = **in
	}
	if in.ShuffleStorageGBSeconds != nil {
		in, out := &in.ShuffleStorageGBSeconds, &out.ShuffleStorageGBSeconds
		*out = new(int64)
		**out = **in
	}
	if in.MilliAcceleratorSeconds != nil {
		in, out := &in.MilliAcceleratorSeconds, &out.MilliAcceleratorSeconds
		*out = new(int64)
		**out = **in
	}
	if in.AcceleratorType != nil {
		in, out := &in.AcceleratorType, &out.AcceleratorType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UsageMetrics.
func (in *UsageMetrics) DeepCopy() *UsageMetrics {
	if in == nil {
		return nil
	}
	out := new(UsageMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UsageSnapshot) DeepCopyInto(out *UsageSnapshot) {
	*out = *in
	if in.MilliDcu != nil {
		in, out := &in.MilliDcu, &out.MilliDcu
		*out = new(int64)
		**out = **in
	}
	if in.ShuffleStorageGB != nil {
		in, out := &in.ShuffleStorageGB, &out.ShuffleStorageGB
		*out = new(int64)
		**out = **in
	}
	if in.MilliDcuPremium != nil {
		in, out := &in.MilliDcuPremium, &out.MilliDcuPremium
		*out = new(int64)
		**out = **in
	}
	if in.ShuffleStorageGBPremium != nil {
		in, out := &in.ShuffleStorageGBPremium, &out.ShuffleStorageGBPremium
		*out = new(int64)
		**out = **in
	}
	if in.MilliAccelerator != nil {
		in, out := &in.MilliAccelerator, &out.MilliAccelerator
		*out = new(int64)
		**out = **in
	}
	if in.AcceleratorType != nil {
		in, out := &in.AcceleratorType, &out.AcceleratorType
		*out = new(string)
		**out = **in
	}
	if in.SnapshotTime != nil {
		in, out := &in.SnapshotTime, &out.SnapshotTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UsageSnapshot.
func (in *UsageSnapshot) DeepCopy() *UsageSnapshot {
	if in == nil {
		return nil
	}
	out := new(UsageSnapshot)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *YarnApplication) DeepCopyInto(out *YarnApplication) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.Progress != nil {
		in, out := &in.Progress, &out.Progress
		*out = new(float32)
		**out = **in
	}
	if in.TrackingURL != nil {
		in, out := &in.TrackingURL, &out.TrackingURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new YarnApplication.
func (in *YarnApplication) DeepCopy() *YarnApplication {
	if in == nil {
		return nil
	}
	out := new(YarnApplication)
	in.DeepCopyInto(out)
	return out
}
