//go:build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	refsv1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/apis/refs/v1beta1"
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Access) DeepCopyInto(out *Access) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.UserByEmail != nil {
		in, out := &in.UserByEmail, &out.UserByEmail
		*out = new(string)
		**out = **in
	}
	if in.GroupByEmail != nil {
		in, out := &in.GroupByEmail, &out.GroupByEmail
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.SpecialGroup != nil {
		in, out := &in.SpecialGroup, &out.SpecialGroup
		*out = new(string)
		**out = **in
	}
	if in.IamMember != nil {
		in, out := &in.IamMember, &out.IamMember
		*out = new(string)
		**out = **in
	}
	if in.View != nil {
		in, out := &in.View, &out.View
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Routine != nil {
		in, out := &in.Routine, &out.Routine
		*out = new(RoutineReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Dataset != nil {
		in, out := &in.Dataset, &out.Dataset
		*out = new(DatasetAccessEntry)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Access.
func (in *Access) DeepCopy() *Access {
	if in == nil {
		return nil
	}
	out := new(Access)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AggregationThresholdPolicy) DeepCopyInto(out *AggregationThresholdPolicy) {
	*out = *in
	if in.Threshold != nil {
		in, out := &in.Threshold, &out.Threshold
		*out = new(int64)
		**out = **in
	}
	if in.PrivacyUnitColumns != nil {
		in, out := &in.PrivacyUnitColumns, &out.PrivacyUnitColumns
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AggregationThresholdPolicy.
func (in *AggregationThresholdPolicy) DeepCopy() *AggregationThresholdPolicy {
	if in == nil {
		return nil
	}
	out := new(AggregationThresholdPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AvroOptions) DeepCopyInto(out *AvroOptions) {
	*out = *in
	if in.UseAvroLogicalTypes != nil {
		in, out := &in.UseAvroLogicalTypes, &out.UseAvroLogicalTypes
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AvroOptions.
func (in *AvroOptions) DeepCopy() *AvroOptions {
	if in == nil {
		return nil
	}
	out := new(AvroOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BiEngineReason) DeepCopyInto(out *BiEngineReason) {
	*out = *in
	if in.Code != nil {
		in, out := &in.Code, &out.Code
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BiEngineReason.
func (in *BiEngineReason) DeepCopy() *BiEngineReason {
	if in == nil {
		return nil
	}
	out := new(BiEngineReason)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BiEngineStatistics) DeepCopyInto(out *BiEngineStatistics) {
	*out = *in
	if in.BiEngineMode != nil {
		in, out := &in.BiEngineMode, &out.BiEngineMode
		*out = new(string)
		**out = **in
	}
	if in.AccelerationMode != nil {
		in, out := &in.AccelerationMode, &out.AccelerationMode
		*out = new(string)
		**out = **in
	}
	if in.BiEngineReasons != nil {
		in, out := &in.BiEngineReasons, &out.BiEngineReasons
		*out = make([]BiEngineReason, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BiEngineStatistics.
func (in *BiEngineStatistics) DeepCopy() *BiEngineStatistics {
	if in == nil {
		return nil
	}
	out := new(BiEngineStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigLakeConfiguration) DeepCopyInto(out *BigLakeConfiguration) {
	*out = *in
	if in.ConnectionID != nil {
		in, out := &in.ConnectionID, &out.ConnectionID
		*out = new(string)
		**out = **in
	}
	if in.StorageUri != nil {
		in, out := &in.StorageUri, &out.StorageUri
		*out = new(string)
		**out = **in
	}
	if in.FileFormat != nil {
		in, out := &in.FileFormat, &out.FileFormat
		*out = new(string)
		**out = **in
	}
	if in.TableFormat != nil {
		in, out := &in.TableFormat, &out.TableFormat
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigLakeConfiguration.
func (in *BigLakeConfiguration) DeepCopy() *BigLakeConfiguration {
	if in == nil {
		return nil
	}
	out := new(BigLakeConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigQueryDataset) DeepCopyInto(out *BigQueryDataset) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigQueryDataset.
func (in *BigQueryDataset) DeepCopy() *BigQueryDataset {
	if in == nil {
		return nil
	}
	out := new(BigQueryDataset)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BigQueryDataset) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigQueryDatasetList) DeepCopyInto(out *BigQueryDatasetList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BigQueryDataset, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigQueryDatasetList.
func (in *BigQueryDatasetList) DeepCopy() *BigQueryDatasetList {
	if in == nil {
		return nil
	}
	out := new(BigQueryDatasetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BigQueryDatasetList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigQueryDatasetObservedState) DeepCopyInto(out *BigQueryDatasetObservedState) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigQueryDatasetObservedState.
func (in *BigQueryDatasetObservedState) DeepCopy() *BigQueryDatasetObservedState {
	if in == nil {
		return nil
	}
	out := new(BigQueryDatasetObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigQueryDatasetSpec) DeepCopyInto(out *BigQueryDatasetSpec) {
	*out = *in
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]Access, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultCollation != nil {
		in, out := &in.DefaultCollation, &out.DefaultCollation
		*out = new(string)
		**out = **in
	}
	if in.DefaultEncryptionConfiguration != nil {
		in, out := &in.DefaultEncryptionConfiguration, &out.DefaultEncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultPartitionExpirationMs != nil {
		in, out := &in.DefaultPartitionExpirationMs, &out.DefaultPartitionExpirationMs
		*out = new(int64)
		**out = **in
	}
	if in.DefaultTableExpirationMs != nil {
		in, out := &in.DefaultTableExpirationMs, &out.DefaultTableExpirationMs
		*out = new(int64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.IsCaseInsensitive != nil {
		in, out := &in.IsCaseInsensitive, &out.IsCaseInsensitive
		*out = new(bool)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.MaxTimeTravelHours != nil {
		in, out := &in.MaxTimeTravelHours, &out.MaxTimeTravelHours
		*out = new(string)
		**out = **in
	}
	if in.ProjectRef != nil {
		in, out := &in.ProjectRef, &out.ProjectRef
		*out = new(refsv1beta1.ProjectRef)
		**out = **in
	}
	if in.StorageBillingModel != nil {
		in, out := &in.StorageBillingModel, &out.StorageBillingModel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigQueryDatasetSpec.
func (in *BigQueryDatasetSpec) DeepCopy() *BigQueryDatasetSpec {
	if in == nil {
		return nil
	}
	out := new(BigQueryDatasetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigQueryDatasetStatus) DeepCopyInto(out *BigQueryDatasetStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.LastModifiedTime != nil {
		in, out := &in.LastModifiedTime, &out.LastModifiedTime
		*out = new(int64)
		**out = **in
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	if in.SelfLink != nil {
		in, out := &in.SelfLink, &out.SelfLink
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigQueryDatasetStatus.
func (in *BigQueryDatasetStatus) DeepCopy() *BigQueryDatasetStatus {
	if in == nil {
		return nil
	}
	out := new(BigQueryDatasetStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigtableColumn) DeepCopyInto(out *BigtableColumn) {
	*out = *in
	if in.QualifierEncoded != nil {
		in, out := &in.QualifierEncoded, &out.QualifierEncoded
		*out = new(byte)
		**out = **in
	}
	if in.QualifierString != nil {
		in, out := &in.QualifierString, &out.QualifierString
		*out = new(string)
		**out = **in
	}
	if in.FieldName != nil {
		in, out := &in.FieldName, &out.FieldName
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.OnlyReadLatest != nil {
		in, out := &in.OnlyReadLatest, &out.OnlyReadLatest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigtableColumn.
func (in *BigtableColumn) DeepCopy() *BigtableColumn {
	if in == nil {
		return nil
	}
	out := new(BigtableColumn)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigtableColumnFamily) DeepCopyInto(out *BigtableColumnFamily) {
	*out = *in
	if in.FamilyID != nil {
		in, out := &in.FamilyID, &out.FamilyID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]BigtableColumn, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OnlyReadLatest != nil {
		in, out := &in.OnlyReadLatest, &out.OnlyReadLatest
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigtableColumnFamily.
func (in *BigtableColumnFamily) DeepCopy() *BigtableColumnFamily {
	if in == nil {
		return nil
	}
	out := new(BigtableColumnFamily)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BigtableOptions) DeepCopyInto(out *BigtableOptions) {
	*out = *in
	if in.ColumnFamilies != nil {
		in, out := &in.ColumnFamilies, &out.ColumnFamilies
		*out = make([]BigtableColumnFamily, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreUnspecifiedColumnFamilies != nil {
		in, out := &in.IgnoreUnspecifiedColumnFamilies, &out.IgnoreUnspecifiedColumnFamilies
		*out = new(bool)
		**out = **in
	}
	if in.ReadRowkeyAsString != nil {
		in, out := &in.ReadRowkeyAsString, &out.ReadRowkeyAsString
		*out = new(bool)
		**out = **in
	}
	if in.OutputColumnFamiliesAsJson != nil {
		in, out := &in.OutputColumnFamiliesAsJson, &out.OutputColumnFamiliesAsJson
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BigtableOptions.
func (in *BigtableOptions) DeepCopy() *BigtableOptions {
	if in == nil {
		return nil
	}
	out := new(BigtableOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloneDefinition) DeepCopyInto(out *CloneDefinition) {
	*out = *in
	if in.BaseTableReference != nil {
		in, out := &in.BaseTableReference, &out.BaseTableReference
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.CloneTime != nil {
		in, out := &in.CloneTime, &out.CloneTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloneDefinition.
func (in *CloneDefinition) DeepCopy() *CloneDefinition {
	if in == nil {
		return nil
	}
	out := new(CloneDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Clustering) DeepCopyInto(out *Clustering) {
	*out = *in
	if in.Fields != nil {
		in, out := &in.Fields, &out.Fields
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Clustering.
func (in *Clustering) DeepCopy() *Clustering {
	if in == nil {
		return nil
	}
	out := new(Clustering)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ColumnReference) DeepCopyInto(out *ColumnReference) {
	*out = *in
	if in.ReferencingColumn != nil {
		in, out := &in.ReferencingColumn, &out.ReferencingColumn
		*out = new(string)
		**out = **in
	}
	if in.ReferencedColumn != nil {
		in, out := &in.ReferencedColumn, &out.ReferencedColumn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ColumnReference.
func (in *ColumnReference) DeepCopy() *ColumnReference {
	if in == nil {
		return nil
	}
	out := new(ColumnReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionProperty) DeepCopyInto(out *ConnectionProperty) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionProperty.
func (in *ConnectionProperty) DeepCopy() *ConnectionProperty {
	if in == nil {
		return nil
	}
	out := new(ConnectionProperty)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CopyJobStatistics) DeepCopyInto(out *CopyJobStatistics) {
	*out = *in
	if in.CopiedRows != nil {
		in, out := &in.CopiedRows, &out.CopiedRows
		*out = new(int64)
		**out = **in
	}
	if in.CopiedLogicalBytes != nil {
		in, out := &in.CopiedLogicalBytes, &out.CopiedLogicalBytes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CopyJobStatistics.
func (in *CopyJobStatistics) DeepCopy() *CopyJobStatistics {
	if in == nil {
		return nil
	}
	out := new(CopyJobStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CsvOptions) DeepCopyInto(out *CsvOptions) {
	*out = *in
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.SkipLeadingRows != nil {
		in, out := &in.SkipLeadingRows, &out.SkipLeadingRows
		*out = new(int64)
		**out = **in
	}
	if in.Quote != nil {
		in, out := &in.Quote, &out.Quote
		*out = new(string)
		**out = **in
	}
	if in.AllowQuotedNewlines != nil {
		in, out := &in.AllowQuotedNewlines, &out.AllowQuotedNewlines
		*out = new(bool)
		**out = **in
	}
	if in.AllowJaggedRows != nil {
		in, out := &in.AllowJaggedRows, &out.AllowJaggedRows
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.PreserveAsciiControlCharacters != nil {
		in, out := &in.PreserveAsciiControlCharacters, &out.PreserveAsciiControlCharacters
		*out = new(bool)
		**out = **in
	}
	if in.NullMarker != nil {
		in, out := &in.NullMarker, &out.NullMarker
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CsvOptions.
func (in *CsvOptions) DeepCopy() *CsvOptions {
	if in == nil {
		return nil
	}
	out := new(CsvOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataFormatOptions) DeepCopyInto(out *DataFormatOptions) {
	*out = *in
	if in.UseInt64Timestamp != nil {
		in, out := &in.UseInt64Timestamp, &out.UseInt64Timestamp
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataFormatOptions.
func (in *DataFormatOptions) DeepCopy() *DataFormatOptions {
	if in == nil {
		return nil
	}
	out := new(DataFormatOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataMaskingStatistics) DeepCopyInto(out *DataMaskingStatistics) {
	*out = *in
	if in.DataMaskingApplied != nil {
		in, out := &in.DataMaskingApplied, &out.DataMaskingApplied
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataMaskingStatistics.
func (in *DataMaskingStatistics) DeepCopy() *DataMaskingStatistics {
	if in == nil {
		return nil
	}
	out := new(DataMaskingStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataPolicyOption) DeepCopyInto(out *DataPolicyOption) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataPolicyOption.
func (in *DataPolicyOption) DeepCopy() *DataPolicyOption {
	if in == nil {
		return nil
	}
	out := new(DataPolicyOption)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Dataset) DeepCopyInto(out *Dataset) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.SelfLink != nil {
		in, out := &in.SelfLink, &out.SelfLink
		*out = new(string)
		**out = **in
	}
	if in.DatasetReference != nil {
		in, out := &in.DatasetReference, &out.DatasetReference
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DefaultTableExpirationMs != nil {
		in, out := &in.DefaultTableExpirationMs, &out.DefaultTableExpirationMs
		*out = new(int64)
		**out = **in
	}
	if in.DefaultPartitionExpirationMs != nil {
		in, out := &in.DefaultPartitionExpirationMs, &out.DefaultPartitionExpirationMs
		*out = new(int64)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]Access, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.LastModifiedTime != nil {
		in, out := &in.LastModifiedTime, &out.LastModifiedTime
		*out = new(int64)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.DefaultEncryptionConfiguration != nil {
		in, out := &in.DefaultEncryptionConfiguration, &out.DefaultEncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.SatisfiesPzs != nil {
		in, out := &in.SatisfiesPzs, &out.SatisfiesPzs
		*out = new(bool)
		**out = **in
	}
	if in.SatisfiesPzi != nil {
		in, out := &in.SatisfiesPzi, &out.SatisfiesPzi
		*out = new(bool)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.LinkedDatasetSource != nil {
		in, out := &in.LinkedDatasetSource, &out.LinkedDatasetSource
		*out = new(LinkedDatasetSource)
		(*in).DeepCopyInto(*out)
	}
	if in.LinkedDatasetMetadata != nil {
		in, out := &in.LinkedDatasetMetadata, &out.LinkedDatasetMetadata
		*out = new(LinkedDatasetMetadata)
		**out = **in
	}
	if in.ExternalDatasetReference != nil {
		in, out := &in.ExternalDatasetReference, &out.ExternalDatasetReference
		*out = new(ExternalDatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ExternalCatalogDatasetOptions != nil {
		in, out := &in.ExternalCatalogDatasetOptions, &out.ExternalCatalogDatasetOptions
		*out = new(ExternalCatalogDatasetOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.IsCaseInsensitive != nil {
		in, out := &in.IsCaseInsensitive, &out.IsCaseInsensitive
		*out = new(bool)
		**out = **in
	}
	if in.DefaultCollation != nil {
		in, out := &in.DefaultCollation, &out.DefaultCollation
		*out = new(string)
		**out = **in
	}
	if in.DefaultRoundingMode != nil {
		in, out := &in.DefaultRoundingMode, &out.DefaultRoundingMode
		*out = new(string)
		**out = **in
	}
	if in.MaxTimeTravelHours != nil {
		in, out := &in.MaxTimeTravelHours, &out.MaxTimeTravelHours
		*out = new(int64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make([]GcpTag, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageBillingModel != nil {
		in, out := &in.StorageBillingModel, &out.StorageBillingModel
		*out = new(string)
		**out = **in
	}
	if in.Restrictions != nil {
		in, out := &in.Restrictions, &out.Restrictions
		*out = new(RestrictionConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceTags != nil {
		in, out := &in.ResourceTags, &out.ResourceTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Dataset.
func (in *Dataset) DeepCopy() *Dataset {
	if in == nil {
		return nil
	}
	out := new(Dataset)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatasetAccessEntry) DeepCopyInto(out *DatasetAccessEntry) {
	*out = *in
	if in.Dataset != nil {
		in, out := &in.Dataset, &out.Dataset
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TargetTypes != nil {
		in, out := &in.TargetTypes, &out.TargetTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatasetAccessEntry.
func (in *DatasetAccessEntry) DeepCopy() *DatasetAccessEntry {
	if in == nil {
		return nil
	}
	out := new(DatasetAccessEntry)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatasetList) DeepCopyInto(out *DatasetList) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.NextPageToken != nil {
		in, out := &in.NextPageToken, &out.NextPageToken
		*out = new(string)
		**out = **in
	}
	if in.Datasets != nil {
		in, out := &in.Datasets, &out.Datasets
		*out = make([]ListFormatDataset, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unreachable != nil {
		in, out := &in.Unreachable, &out.Unreachable
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatasetList.
func (in *DatasetList) DeepCopy() *DatasetList {
	if in == nil {
		return nil
	}
	out := new(DatasetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatasetReference) DeepCopyInto(out *DatasetReference) {
	*out = *in
	if in.DatasetId != nil {
		in, out := &in.DatasetId, &out.DatasetId
		*out = new(string)
		**out = **in
	}
	if in.ProjectId != nil {
		in, out := &in.ProjectId, &out.ProjectId
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatasetReference.
func (in *DatasetReference) DeepCopy() *DatasetReference {
	if in == nil {
		return nil
	}
	out := new(DatasetReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DestinationTableProperties) DeepCopyInto(out *DestinationTableProperties) {
	*out = *in
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DestinationTableProperties.
func (in *DestinationTableProperties) DeepCopy() *DestinationTableProperties {
	if in == nil {
		return nil
	}
	out := new(DestinationTableProperties)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DifferentialPrivacyPolicy) DeepCopyInto(out *DifferentialPrivacyPolicy) {
	*out = *in
	if in.MaxEpsilonPerQuery != nil {
		in, out := &in.MaxEpsilonPerQuery, &out.MaxEpsilonPerQuery
		*out = new(float64)
		**out = **in
	}
	if in.DeltaPerQuery != nil {
		in, out := &in.DeltaPerQuery, &out.DeltaPerQuery
		*out = new(float64)
		**out = **in
	}
	if in.MaxGroupsContributed != nil {
		in, out := &in.MaxGroupsContributed, &out.MaxGroupsContributed
		*out = new(int64)
		**out = **in
	}
	if in.PrivacyUnitColumn != nil {
		in, out := &in.PrivacyUnitColumn, &out.PrivacyUnitColumn
		*out = new(string)
		**out = **in
	}
	if in.EpsilonBudget != nil {
		in, out := &in.EpsilonBudget, &out.EpsilonBudget
		*out = new(float64)
		**out = **in
	}
	if in.DeltaBudget != nil {
		in, out := &in.DeltaBudget, &out.DeltaBudget
		*out = new(float64)
		**out = **in
	}
	if in.EpsilonBudgetRemaining != nil {
		in, out := &in.EpsilonBudgetRemaining, &out.EpsilonBudgetRemaining
		*out = new(float64)
		**out = **in
	}
	if in.DeltaBudgetRemaining != nil {
		in, out := &in.DeltaBudgetRemaining, &out.DeltaBudgetRemaining
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DifferentialPrivacyPolicy.
func (in *DifferentialPrivacyPolicy) DeepCopy() *DifferentialPrivacyPolicy {
	if in == nil {
		return nil
	}
	out := new(DifferentialPrivacyPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DmlStats) DeepCopyInto(out *DmlStats) {
	*out = *in
	if in.InsertedRowCount != nil {
		in, out := &in.InsertedRowCount, &out.InsertedRowCount
		*out = new(int64)
		**out = **in
	}
	if in.DeletedRowCount != nil {
		in, out := &in.DeletedRowCount, &out.DeletedRowCount
		*out = new(int64)
		**out = **in
	}
	if in.UpdatedRowCount != nil {
		in, out := &in.UpdatedRowCount, &out.UpdatedRowCount
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DmlStats.
func (in *DmlStats) DeepCopy() *DmlStats {
	if in == nil {
		return nil
	}
	out := new(DmlStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EncryptionConfiguration) DeepCopyInto(out *EncryptionConfiguration) {
	*out = *in
	if in.KmsKeyRef != nil {
		in, out := &in.KmsKeyRef, &out.KmsKeyRef
		*out = new(refsv1beta1.KMSCryptoKeyRef)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EncryptionConfiguration.
func (in *EncryptionConfiguration) DeepCopy() *EncryptionConfiguration {
	if in == nil {
		return nil
	}
	out := new(EncryptionConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorProto) DeepCopyInto(out *ErrorProto) {
	*out = *in
	if in.Reason != nil {
		in, out := &in.Reason, &out.Reason
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.DebugInfo != nil {
		in, out := &in.DebugInfo, &out.DebugInfo
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorProto.
func (in *ErrorProto) DeepCopy() *ErrorProto {
	if in == nil {
		return nil
	}
	out := new(ErrorProto)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExplainQueryStage) DeepCopyInto(out *ExplainQueryStage) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(int64)
		**out = **in
	}
	if in.StartMs != nil {
		in, out := &in.StartMs, &out.StartMs
		*out = new(int64)
		**out = **in
	}
	if in.EndMs != nil {
		in, out := &in.EndMs, &out.EndMs
		*out = new(int64)
		**out = **in
	}
	if in.InputStages != nil {
		in, out := &in.InputStages, &out.InputStages
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.WaitRatioAvg != nil {
		in, out := &in.WaitRatioAvg, &out.WaitRatioAvg
		*out = new(float64)
		**out = **in
	}
	if in.WaitMsAvg != nil {
		in, out := &in.WaitMsAvg, &out.WaitMsAvg
		*out = new(int64)
		**out = **in
	}
	if in.WaitRatioMax != nil {
		in, out := &in.WaitRatioMax, &out.WaitRatioMax
		*out = new(float64)
		**out = **in
	}
	if in.WaitMsMax != nil {
		in, out := &in.WaitMsMax, &out.WaitMsMax
		*out = new(int64)
		**out = **in
	}
	if in.ReadRatioAvg != nil {
		in, out := &in.ReadRatioAvg, &out.ReadRatioAvg
		*out = new(float64)
		**out = **in
	}
	if in.ReadMsAvg != nil {
		in, out := &in.ReadMsAvg, &out.ReadMsAvg
		*out = new(int64)
		**out = **in
	}
	if in.ReadRatioMax != nil {
		in, out := &in.ReadRatioMax, &out.ReadRatioMax
		*out = new(float64)
		**out = **in
	}
	if in.ReadMsMax != nil {
		in, out := &in.ReadMsMax, &out.ReadMsMax
		*out = new(int64)
		**out = **in
	}
	if in.ComputeRatioAvg != nil {
		in, out := &in.ComputeRatioAvg, &out.ComputeRatioAvg
		*out = new(float64)
		**out = **in
	}
	if in.ComputeMsAvg != nil {
		in, out := &in.ComputeMsAvg, &out.ComputeMsAvg
		*out = new(int64)
		**out = **in
	}
	if in.ComputeRatioMax != nil {
		in, out := &in.ComputeRatioMax, &out.ComputeRatioMax
		*out = new(float64)
		**out = **in
	}
	if in.ComputeMsMax != nil {
		in, out := &in.ComputeMsMax, &out.ComputeMsMax
		*out = new(int64)
		**out = **in
	}
	if in.WriteRatioAvg != nil {
		in, out := &in.WriteRatioAvg, &out.WriteRatioAvg
		*out = new(float64)
		**out = **in
	}
	if in.WriteMsAvg != nil {
		in, out := &in.WriteMsAvg, &out.WriteMsAvg
		*out = new(int64)
		**out = **in
	}
	if in.WriteRatioMax != nil {
		in, out := &in.WriteRatioMax, &out.WriteRatioMax
		*out = new(float64)
		**out = **in
	}
	if in.WriteMsMax != nil {
		in, out := &in.WriteMsMax, &out.WriteMsMax
		*out = new(int64)
		**out = **in
	}
	if in.ShuffleOutputBytes != nil {
		in, out := &in.ShuffleOutputBytes, &out.ShuffleOutputBytes
		*out = new(int64)
		**out = **in
	}
	if in.ShuffleOutputBytesSpilled != nil {
		in, out := &in.ShuffleOutputBytesSpilled, &out.ShuffleOutputBytesSpilled
		*out = new(int64)
		**out = **in
	}
	if in.RecordsRead != nil {
		in, out := &in.RecordsRead, &out.RecordsRead
		*out = new(int64)
		**out = **in
	}
	if in.RecordsWritten != nil {
		in, out := &in.RecordsWritten, &out.RecordsWritten
		*out = new(int64)
		**out = **in
	}
	if in.ParallelInputs != nil {
		in, out := &in.ParallelInputs, &out.ParallelInputs
		*out = new(int64)
		**out = **in
	}
	if in.CompletedParallelInputs != nil {
		in, out := &in.CompletedParallelInputs, &out.CompletedParallelInputs
		*out = new(int64)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.Steps != nil {
		in, out := &in.Steps, &out.Steps
		*out = make([]ExplainQueryStep, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SlotMs != nil {
		in, out := &in.SlotMs, &out.SlotMs
		*out = new(int64)
		**out = **in
	}
	if in.ComputeMode != nil {
		in, out := &in.ComputeMode, &out.ComputeMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExplainQueryStage.
func (in *ExplainQueryStage) DeepCopy() *ExplainQueryStage {
	if in == nil {
		return nil
	}
	out := new(ExplainQueryStage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExplainQueryStep) DeepCopyInto(out *ExplainQueryStep) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Substeps != nil {
		in, out := &in.Substeps, &out.Substeps
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExplainQueryStep.
func (in *ExplainQueryStep) DeepCopy() *ExplainQueryStep {
	if in == nil {
		return nil
	}
	out := new(ExplainQueryStep)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExportDataStatistics) DeepCopyInto(out *ExportDataStatistics) {
	*out = *in
	if in.FileCount != nil {
		in, out := &in.FileCount, &out.FileCount
		*out = new(int64)
		**out = **in
	}
	if in.RowCount != nil {
		in, out := &in.RowCount, &out.RowCount
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExportDataStatistics.
func (in *ExportDataStatistics) DeepCopy() *ExportDataStatistics {
	if in == nil {
		return nil
	}
	out := new(ExportDataStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalCatalogDatasetOptions) DeepCopyInto(out *ExternalCatalogDatasetOptions) {
	*out = *in
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DefaultStorageLocationUri != nil {
		in, out := &in.DefaultStorageLocationUri, &out.DefaultStorageLocationUri
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalCatalogDatasetOptions.
func (in *ExternalCatalogDatasetOptions) DeepCopy() *ExternalCatalogDatasetOptions {
	if in == nil {
		return nil
	}
	out := new(ExternalCatalogDatasetOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalCatalogTableOptions) DeepCopyInto(out *ExternalCatalogTableOptions) {
	*out = *in
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.StorageDescriptor != nil {
		in, out := &in.StorageDescriptor, &out.StorageDescriptor
		*out = new(StorageDescriptor)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionID != nil {
		in, out := &in.ConnectionID, &out.ConnectionID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalCatalogTableOptions.
func (in *ExternalCatalogTableOptions) DeepCopy() *ExternalCatalogTableOptions {
	if in == nil {
		return nil
	}
	out := new(ExternalCatalogTableOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalDataConfiguration) DeepCopyInto(out *ExternalDataConfiguration) {
	*out = *in
	if in.SourceUris != nil {
		in, out := &in.SourceUris, &out.SourceUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileSetSpecType != nil {
		in, out := &in.FileSetSpecType, &out.FileSetSpecType
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(TableSchema)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceFormat != nil {
		in, out := &in.SourceFormat, &out.SourceFormat
		*out = new(string)
		**out = **in
	}
	if in.MaxBadRecords != nil {
		in, out := &in.MaxBadRecords, &out.MaxBadRecords
		*out = new(int32)
		**out = **in
	}
	if in.Autodetect != nil {
		in, out := &in.Autodetect, &out.Autodetect
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreUnknownValues != nil {
		in, out := &in.IgnoreUnknownValues, &out.IgnoreUnknownValues
		*out = new(bool)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.CsvOptions != nil {
		in, out := &in.CsvOptions, &out.CsvOptions
		*out = new(CsvOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.JsonOptions != nil {
		in, out := &in.JsonOptions, &out.JsonOptions
		*out = new(JsonOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.BigtableOptions != nil {
		in, out := &in.BigtableOptions, &out.BigtableOptions
		*out = new(BigtableOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.GoogleSheetsOptions != nil {
		in, out := &in.GoogleSheetsOptions, &out.GoogleSheetsOptions
		*out = new(GoogleSheetsOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.HivePartitioningOptions != nil {
		in, out := &in.HivePartitioningOptions, &out.HivePartitioningOptions
		*out = new(HivePartitioningOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionID != nil {
		in, out := &in.ConnectionID, &out.ConnectionID
		*out = new(string)
		**out = **in
	}
	if in.DecimalTargetTypes != nil {
		in, out := &in.DecimalTargetTypes, &out.DecimalTargetTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AvroOptions != nil {
		in, out := &in.AvroOptions, &out.AvroOptions
		*out = new(AvroOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.JsonExtension != nil {
		in, out := &in.JsonExtension, &out.JsonExtension
		*out = new(string)
		**out = **in
	}
	if in.ParquetOptions != nil {
		in, out := &in.ParquetOptions, &out.ParquetOptions
		*out = new(ParquetOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ObjectMetadata != nil {
		in, out := &in.ObjectMetadata, &out.ObjectMetadata
		*out = new(string)
		**out = **in
	}
	if in.ReferenceFileSchemaUri != nil {
		in, out := &in.ReferenceFileSchemaUri, &out.ReferenceFileSchemaUri
		*out = new(string)
		**out = **in
	}
	if in.MetadataCacheMode != nil {
		in, out := &in.MetadataCacheMode, &out.MetadataCacheMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalDataConfiguration.
func (in *ExternalDataConfiguration) DeepCopy() *ExternalDataConfiguration {
	if in == nil {
		return nil
	}
	out := new(ExternalDataConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalDatasetReference) DeepCopyInto(out *ExternalDatasetReference) {
	*out = *in
	if in.ExternalSource != nil {
		in, out := &in.ExternalSource, &out.ExternalSource
		*out = new(string)
		**out = **in
	}
	if in.Connection != nil {
		in, out := &in.Connection, &out.Connection
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalDatasetReference.
func (in *ExternalDatasetReference) DeepCopy() *ExternalDatasetReference {
	if in == nil {
		return nil
	}
	out := new(ExternalDatasetReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalServiceCost) DeepCopyInto(out *ExternalServiceCost) {
	*out = *in
	if in.ExternalService != nil {
		in, out := &in.ExternalService, &out.ExternalService
		*out = new(string)
		**out = **in
	}
	if in.BytesProcessed != nil {
		in, out := &in.BytesProcessed, &out.BytesProcessed
		*out = new(int64)
		**out = **in
	}
	if in.BytesBilled != nil {
		in, out := &in.BytesBilled, &out.BytesBilled
		*out = new(int64)
		**out = **in
	}
	if in.SlotMs != nil {
		in, out := &in.SlotMs, &out.SlotMs
		*out = new(int64)
		**out = **in
	}
	if in.ReservedSlotCount != nil {
		in, out := &in.ReservedSlotCount, &out.ReservedSlotCount
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalServiceCost.
func (in *ExternalServiceCost) DeepCopy() *ExternalServiceCost {
	if in == nil {
		return nil
	}
	out := new(ExternalServiceCost)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ForeignKey) DeepCopyInto(out *ForeignKey) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ReferencedTable != nil {
		in, out := &in.ReferencedTable, &out.ReferencedTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ColumnReferences != nil {
		in, out := &in.ColumnReferences, &out.ColumnReferences
		*out = make([]ColumnReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ForeignKey.
func (in *ForeignKey) DeepCopy() *ForeignKey {
	if in == nil {
		return nil
	}
	out := new(ForeignKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ForeignTypeInfo) DeepCopyInto(out *ForeignTypeInfo) {
	*out = *in
	if in.TypeSystem != nil {
		in, out := &in.TypeSystem, &out.TypeSystem
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ForeignTypeInfo.
func (in *ForeignTypeInfo) DeepCopy() *ForeignTypeInfo {
	if in == nil {
		return nil
	}
	out := new(ForeignTypeInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ForeignViewDefinition) DeepCopyInto(out *ForeignViewDefinition) {
	*out = *in
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.Dialect != nil {
		in, out := &in.Dialect, &out.Dialect
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ForeignViewDefinition.
func (in *ForeignViewDefinition) DeepCopy() *ForeignViewDefinition {
	if in == nil {
		return nil
	}
	out := new(ForeignViewDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GcpTag) DeepCopyInto(out *GcpTag) {
	*out = *in
	if in.TagKey != nil {
		in, out := &in.TagKey, &out.TagKey
		*out = new(string)
		**out = **in
	}
	if in.TagValue != nil {
		in, out := &in.TagValue, &out.TagValue
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GcpTag.
func (in *GcpTag) DeepCopy() *GcpTag {
	if in == nil {
		return nil
	}
	out := new(GcpTag)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoogleSheetsOptions) DeepCopyInto(out *GoogleSheetsOptions) {
	*out = *in
	if in.SkipLeadingRows != nil {
		in, out := &in.SkipLeadingRows, &out.SkipLeadingRows
		*out = new(int64)
		**out = **in
	}
	if in.Range != nil {
		in, out := &in.Range, &out.Range
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoogleSheetsOptions.
func (in *GoogleSheetsOptions) DeepCopy() *GoogleSheetsOptions {
	if in == nil {
		return nil
	}
	out := new(GoogleSheetsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HighCardinalityJoin) DeepCopyInto(out *HighCardinalityJoin) {
	*out = *in
	if in.LeftRows != nil {
		in, out := &in.LeftRows, &out.LeftRows
		*out = new(int64)
		**out = **in
	}
	if in.RightRows != nil {
		in, out := &in.RightRows, &out.RightRows
		*out = new(int64)
		**out = **in
	}
	if in.OutputRows != nil {
		in, out := &in.OutputRows, &out.OutputRows
		*out = new(int64)
		**out = **in
	}
	if in.StepIndex != nil {
		in, out := &in.StepIndex, &out.StepIndex
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HighCardinalityJoin.
func (in *HighCardinalityJoin) DeepCopy() *HighCardinalityJoin {
	if in == nil {
		return nil
	}
	out := new(HighCardinalityJoin)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HivePartitioningOptions) DeepCopyInto(out *HivePartitioningOptions) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SourceUriPrefix != nil {
		in, out := &in.SourceUriPrefix, &out.SourceUriPrefix
		*out = new(string)
		**out = **in
	}
	if in.RequirePartitionFilter != nil {
		in, out := &in.RequirePartitionFilter, &out.RequirePartitionFilter
		*out = new(bool)
		**out = **in
	}
	if in.Fields != nil {
		in, out := &in.Fields, &out.Fields
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HivePartitioningOptions.
func (in *HivePartitioningOptions) DeepCopy() *HivePartitioningOptions {
	if in == nil {
		return nil
	}
	out := new(HivePartitioningOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IndexUnusedReason) DeepCopyInto(out *IndexUnusedReason) {
	*out = *in
	if in.Code != nil {
		in, out := &in.Code, &out.Code
		*out = new(string)
		**out = **in
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		*out = new(string)
		**out = **in
	}
	if in.BaseTable != nil {
		in, out := &in.BaseTable, &out.BaseTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.IndexName != nil {
		in, out := &in.IndexName, &out.IndexName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IndexUnusedReason.
func (in *IndexUnusedReason) DeepCopy() *IndexUnusedReason {
	if in == nil {
		return nil
	}
	out := new(IndexUnusedReason)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InputDataChange) DeepCopyInto(out *InputDataChange) {
	*out = *in
	if in.RecordsReadDiffPercentage != nil {
		in, out := &in.RecordsReadDiffPercentage, &out.RecordsReadDiffPercentage
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InputDataChange.
func (in *InputDataChange) DeepCopy() *InputDataChange {
	if in == nil {
		return nil
	}
	out := new(InputDataChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Job) DeepCopyInto(out *Job) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.SelfLink != nil {
		in, out := &in.SelfLink, &out.SelfLink
		*out = new(string)
		**out = **in
	}
	if in.UserEmail != nil {
		in, out := &in.UserEmail, &out.UserEmail
		*out = new(string)
		**out = **in
	}
	if in.Configuration != nil {
		in, out := &in.Configuration, &out.Configuration
		*out = new(JobConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.JobReference != nil {
		in, out := &in.JobReference, &out.JobReference
		*out = new(JobReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Statistics != nil {
		in, out := &in.Statistics, &out.Statistics
		*out = new(JobStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(JobStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.PrincipalSubject != nil {
		in, out := &in.PrincipalSubject, &out.PrincipalSubject
		*out = new(string)
		**out = **in
	}
	if in.JobCreationReason != nil {
		in, out := &in.JobCreationReason, &out.JobCreationReason
		*out = new(JobCreationReason)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Job.
func (in *Job) DeepCopy() *Job {
	if in == nil {
		return nil
	}
	out := new(Job)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfiguration) DeepCopyInto(out *JobConfiguration) {
	*out = *in
	if in.JobType != nil {
		in, out := &in.JobType, &out.JobType
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(JobConfigurationQuery)
		(*in).DeepCopyInto(*out)
	}
	if in.Load != nil {
		in, out := &in.Load, &out.Load
		*out = new(JobConfigurationLoad)
		(*in).DeepCopyInto(*out)
	}
	if in.Copy != nil {
		in, out := &in.Copy, &out.Copy
		*out = new(JobConfigurationTableCopy)
		(*in).DeepCopyInto(*out)
	}
	if in.Extract != nil {
		in, out := &in.Extract, &out.Extract
		*out = new(JobConfigurationExtract)
		(*in).DeepCopyInto(*out)
	}
	if in.DryRun != nil {
		in, out := &in.DryRun, &out.DryRun
		*out = new(bool)
		**out = **in
	}
	if in.JobTimeoutMs != nil {
		in, out := &in.JobTimeoutMs, &out.JobTimeoutMs
		*out = new(int64)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfiguration.
func (in *JobConfiguration) DeepCopy() *JobConfiguration {
	if in == nil {
		return nil
	}
	out := new(JobConfiguration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfigurationExtract) DeepCopyInto(out *JobConfigurationExtract) {
	*out = *in
	if in.SourceTable != nil {
		in, out := &in.SourceTable, &out.SourceTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceModel != nil {
		in, out := &in.SourceModel, &out.SourceModel
		*out = new(ModelReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DestinationUris != nil {
		in, out := &in.DestinationUris, &out.DestinationUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.PrintHeader != nil {
		in, out := &in.PrintHeader, &out.PrintHeader
		*out = new(bool)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.DestinationFormat != nil {
		in, out := &in.DestinationFormat, &out.DestinationFormat
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.UseAvroLogicalTypes != nil {
		in, out := &in.UseAvroLogicalTypes, &out.UseAvroLogicalTypes
		*out = new(bool)
		**out = **in
	}
	if in.ModelExtractOptions != nil {
		in, out := &in.ModelExtractOptions, &out.ModelExtractOptions
		*out = new(JobConfigurationExtract_ModelExtractOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfigurationExtract.
func (in *JobConfigurationExtract) DeepCopy() *JobConfigurationExtract {
	if in == nil {
		return nil
	}
	out := new(JobConfigurationExtract)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfigurationExtract_ModelExtractOptions) DeepCopyInto(out *JobConfigurationExtract_ModelExtractOptions) {
	*out = *in
	if in.TrialID != nil {
		in, out := &in.TrialID, &out.TrialID
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfigurationExtract_ModelExtractOptions.
func (in *JobConfigurationExtract_ModelExtractOptions) DeepCopy() *JobConfigurationExtract_ModelExtractOptions {
	if in == nil {
		return nil
	}
	out := new(JobConfigurationExtract_ModelExtractOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfigurationLoad) DeepCopyInto(out *JobConfigurationLoad) {
	*out = *in
	if in.SourceUris != nil {
		in, out := &in.SourceUris, &out.SourceUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileSetSpecType != nil {
		in, out := &in.FileSetSpecType, &out.FileSetSpecType
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(TableSchema)
		(*in).DeepCopyInto(*out)
	}
	if in.DestinationTable != nil {
		in, out := &in.DestinationTable, &out.DestinationTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DestinationTableProperties != nil {
		in, out := &in.DestinationTableProperties, &out.DestinationTableProperties
		*out = new(DestinationTableProperties)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateDisposition != nil {
		in, out := &in.CreateDisposition, &out.CreateDisposition
		*out = new(string)
		**out = **in
	}
	if in.WriteDisposition != nil {
		in, out := &in.WriteDisposition, &out.WriteDisposition
		*out = new(string)
		**out = **in
	}
	if in.NullMarker != nil {
		in, out := &in.NullMarker, &out.NullMarker
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.SkipLeadingRows != nil {
		in, out := &in.SkipLeadingRows, &out.SkipLeadingRows
		*out = new(int32)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.Quote != nil {
		in, out := &in.Quote, &out.Quote
		*out = new(string)
		**out = **in
	}
	if in.MaxBadRecords != nil {
		in, out := &in.MaxBadRecords, &out.MaxBadRecords
		*out = new(int32)
		**out = **in
	}
	if in.AllowQuotedNewlines != nil {
		in, out := &in.AllowQuotedNewlines, &out.AllowQuotedNewlines
		*out = new(bool)
		**out = **in
	}
	if in.SourceFormat != nil {
		in, out := &in.SourceFormat, &out.SourceFormat
		*out = new(string)
		**out = **in
	}
	if in.AllowJaggedRows != nil {
		in, out := &in.AllowJaggedRows, &out.AllowJaggedRows
		*out = new(bool)
		**out = **in
	}
	if in.IgnoreUnknownValues != nil {
		in, out := &in.IgnoreUnknownValues, &out.IgnoreUnknownValues
		*out = new(bool)
		**out = **in
	}
	if in.ProjectionFields != nil {
		in, out := &in.ProjectionFields, &out.ProjectionFields
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Autodetect != nil {
		in, out := &in.Autodetect, &out.Autodetect
		*out = new(bool)
		**out = **in
	}
	if in.SchemaUpdateOptions != nil {
		in, out := &in.SchemaUpdateOptions, &out.SchemaUpdateOptions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TimePartitioning != nil {
		in, out := &in.TimePartitioning, &out.TimePartitioning
		*out = new(TimePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.RangePartitioning != nil {
		in, out := &in.RangePartitioning, &out.RangePartitioning
		*out = new(RangePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.Clustering != nil {
		in, out := &in.Clustering, &out.Clustering
		*out = new(Clustering)
		(*in).DeepCopyInto(*out)
	}
	if in.DestinationEncryptionConfiguration != nil {
		in, out := &in.DestinationEncryptionConfiguration, &out.DestinationEncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.UseAvroLogicalTypes != nil {
		in, out := &in.UseAvroLogicalTypes, &out.UseAvroLogicalTypes
		*out = new(bool)
		**out = **in
	}
	if in.ReferenceFileSchemaUri != nil {
		in, out := &in.ReferenceFileSchemaUri, &out.ReferenceFileSchemaUri
		*out = new(string)
		**out = **in
	}
	if in.HivePartitioningOptions != nil {
		in, out := &in.HivePartitioningOptions, &out.HivePartitioningOptions
		*out = new(HivePartitioningOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.DecimalTargetTypes != nil {
		in, out := &in.DecimalTargetTypes, &out.DecimalTargetTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JsonExtension != nil {
		in, out := &in.JsonExtension, &out.JsonExtension
		*out = new(string)
		**out = **in
	}
	if in.ParquetOptions != nil {
		in, out := &in.ParquetOptions, &out.ParquetOptions
		*out = new(ParquetOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.PreserveAsciiControlCharacters != nil {
		in, out := &in.PreserveAsciiControlCharacters, &out.PreserveAsciiControlCharacters
		*out = new(bool)
		**out = **in
	}
	if in.ConnectionProperties != nil {
		in, out := &in.ConnectionProperties, &out.ConnectionProperties
		*out = make([]ConnectionProperty, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreateSession != nil {
		in, out := &in.CreateSession, &out.CreateSession
		*out = new(bool)
		**out = **in
	}
	if in.ColumnNameCharacterMap != nil {
		in, out := &in.ColumnNameCharacterMap, &out.ColumnNameCharacterMap
		*out = new(string)
		**out = **in
	}
	if in.CopyFilesOnly != nil {
		in, out := &in.CopyFilesOnly, &out.CopyFilesOnly
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfigurationLoad.
func (in *JobConfigurationLoad) DeepCopy() *JobConfigurationLoad {
	if in == nil {
		return nil
	}
	out := new(JobConfigurationLoad)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfigurationQuery) DeepCopyInto(out *JobConfigurationQuery) {
	*out = *in
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.DestinationTable != nil {
		in, out := &in.DestinationTable, &out.DestinationTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.UserDefinedFunctionResources != nil {
		in, out := &in.UserDefinedFunctionResources, &out.UserDefinedFunctionResources
		*out = make([]UserDefinedFunctionResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreateDisposition != nil {
		in, out := &in.CreateDisposition, &out.CreateDisposition
		*out = new(string)
		**out = **in
	}
	if in.WriteDisposition != nil {
		in, out := &in.WriteDisposition, &out.WriteDisposition
		*out = new(string)
		**out = **in
	}
	if in.DefaultDataset != nil {
		in, out := &in.DefaultDataset, &out.DefaultDataset
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(string)
		**out = **in
	}
	if in.AllowLargeResults != nil {
		in, out := &in.AllowLargeResults, &out.AllowLargeResults
		*out = new(bool)
		**out = **in
	}
	if in.UseQueryCache != nil {
		in, out := &in.UseQueryCache, &out.UseQueryCache
		*out = new(bool)
		**out = **in
	}
	if in.FlattenResults != nil {
		in, out := &in.FlattenResults, &out.FlattenResults
		*out = new(bool)
		**out = **in
	}
	if in.MaximumBytesBilled != nil {
		in, out := &in.MaximumBytesBilled, &out.MaximumBytesBilled
		*out = new(int64)
		**out = **in
	}
	if in.UseLegacySql != nil {
		in, out := &in.UseLegacySql, &out.UseLegacySql
		*out = new(bool)
		**out = **in
	}
	if in.ParameterMode != nil {
		in, out := &in.ParameterMode, &out.ParameterMode
		*out = new(string)
		**out = **in
	}
	if in.QueryParameters != nil {
		in, out := &in.QueryParameters, &out.QueryParameters
		*out = make([]QueryParameter, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SystemVariables != nil {
		in, out := &in.SystemVariables, &out.SystemVariables
		*out = new(SystemVariables)
		(*in).DeepCopyInto(*out)
	}
	if in.SchemaUpdateOptions != nil {
		in, out := &in.SchemaUpdateOptions, &out.SchemaUpdateOptions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TimePartitioning != nil {
		in, out := &in.TimePartitioning, &out.TimePartitioning
		*out = new(TimePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.RangePartitioning != nil {
		in, out := &in.RangePartitioning, &out.RangePartitioning
		*out = new(RangePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.Clustering != nil {
		in, out := &in.Clustering, &out.Clustering
		*out = new(Clustering)
		(*in).DeepCopyInto(*out)
	}
	if in.DestinationEncryptionConfiguration != nil {
		in, out := &in.DestinationEncryptionConfiguration, &out.DestinationEncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.ScriptOptions != nil {
		in, out := &in.ScriptOptions, &out.ScriptOptions
		*out = new(ScriptOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionProperties != nil {
		in, out := &in.ConnectionProperties, &out.ConnectionProperties
		*out = make([]ConnectionProperty, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreateSession != nil {
		in, out := &in.CreateSession, &out.CreateSession
		*out = new(bool)
		**out = **in
	}
	if in.Continuous != nil {
		in, out := &in.Continuous, &out.Continuous
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfigurationQuery.
func (in *JobConfigurationQuery) DeepCopy() *JobConfigurationQuery {
	if in == nil {
		return nil
	}
	out := new(JobConfigurationQuery)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobConfigurationTableCopy) DeepCopyInto(out *JobConfigurationTableCopy) {
	*out = *in
	if in.SourceTable != nil {
		in, out := &in.SourceTable, &out.SourceTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.SourceTables != nil {
		in, out := &in.SourceTables, &out.SourceTables
		*out = make([]TableReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DestinationTable != nil {
		in, out := &in.DestinationTable, &out.DestinationTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.CreateDisposition != nil {
		in, out := &in.CreateDisposition, &out.CreateDisposition
		*out = new(string)
		**out = **in
	}
	if in.WriteDisposition != nil {
		in, out := &in.WriteDisposition, &out.WriteDisposition
		*out = new(string)
		**out = **in
	}
	if in.DestinationEncryptionConfiguration != nil {
		in, out := &in.DestinationEncryptionConfiguration, &out.DestinationEncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.OperationType != nil {
		in, out := &in.OperationType, &out.OperationType
		*out = new(string)
		**out = **in
	}
	if in.DestinationExpirationTime != nil {
		in, out := &in.DestinationExpirationTime, &out.DestinationExpirationTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobConfigurationTableCopy.
func (in *JobConfigurationTableCopy) DeepCopy() *JobConfigurationTableCopy {
	if in == nil {
		return nil
	}
	out := new(JobConfigurationTableCopy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobCreationReason) DeepCopyInto(out *JobCreationReason) {
	*out = *in
	if in.Code != nil {
		in, out := &in.Code, &out.Code
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobCreationReason.
func (in *JobCreationReason) DeepCopy() *JobCreationReason {
	if in == nil {
		return nil
	}
	out := new(JobCreationReason)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobList) DeepCopyInto(out *JobList) {
	*out = *in
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.NextPageToken != nil {
		in, out := &in.NextPageToken, &out.NextPageToken
		*out = new(string)
		**out = **in
	}
	if in.Jobs != nil {
		in, out := &in.Jobs, &out.Jobs
		*out = make([]ListFormatJob, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Unreachable != nil {
		in, out := &in.Unreachable, &out.Unreachable
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobList.
func (in *JobList) DeepCopy() *JobList {
	if in == nil {
		return nil
	}
	out := new(JobList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobReference) DeepCopyInto(out *JobReference) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.JobID != nil {
		in, out := &in.JobID, &out.JobID
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.LocationAlternative != nil {
		in, out := &in.LocationAlternative, &out.LocationAlternative
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobReference.
func (in *JobReference) DeepCopy() *JobReference {
	if in == nil {
		return nil
	}
	out := new(JobReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatistics) DeepCopyInto(out *JobStatistics) {
	*out = *in
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(int64)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(int64)
		**out = **in
	}
	if in.TotalBytesProcessed != nil {
		in, out := &in.TotalBytesProcessed, &out.TotalBytesProcessed
		*out = new(int64)
		**out = **in
	}
	if in.CompletionRatio != nil {
		in, out := &in.CompletionRatio, &out.CompletionRatio
		*out = new(float64)
		**out = **in
	}
	if in.QuotaDeferments != nil {
		in, out := &in.QuotaDeferments, &out.QuotaDeferments
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(JobStatistics2)
		(*in).DeepCopyInto(*out)
	}
	if in.Load != nil {
		in, out := &in.Load, &out.Load
		*out = new(JobStatistics3)
		(*in).DeepCopyInto(*out)
	}
	if in.Extract != nil {
		in, out := &in.Extract, &out.Extract
		*out = new(JobStatistics4)
		(*in).DeepCopyInto(*out)
	}
	if in.Copy != nil {
		in, out := &in.Copy, &out.Copy
		*out = new(CopyJobStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.TotalSlotMs != nil {
		in, out := &in.TotalSlotMs, &out.TotalSlotMs
		*out = new(int64)
		**out = **in
	}
	if in.ReservationID != nil {
		in, out := &in.ReservationID, &out.ReservationID
		*out = new(string)
		**out = **in
	}
	if in.NumChildJobs != nil {
		in, out := &in.NumChildJobs, &out.NumChildJobs
		*out = new(int64)
		**out = **in
	}
	if in.ParentJobID != nil {
		in, out := &in.ParentJobID, &out.ParentJobID
		*out = new(string)
		**out = **in
	}
	if in.ScriptStatistics != nil {
		in, out := &in.ScriptStatistics, &out.ScriptStatistics
		*out = new(ScriptStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.RowLevelSecurityStatistics != nil {
		in, out := &in.RowLevelSecurityStatistics, &out.RowLevelSecurityStatistics
		*out = new(RowLevelSecurityStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.DataMaskingStatistics != nil {
		in, out := &in.DataMaskingStatistics, &out.DataMaskingStatistics
		*out = new(DataMaskingStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.TransactionInfo != nil {
		in, out := &in.TransactionInfo, &out.TransactionInfo
		*out = new(JobStatistics_TransactionInfo)
		(*in).DeepCopyInto(*out)
	}
	if in.SessionInfo != nil {
		in, out := &in.SessionInfo, &out.SessionInfo
		*out = new(SessionInfo)
		(*in).DeepCopyInto(*out)
	}
	if in.FinalExecutionDurationMs != nil {
		in, out := &in.FinalExecutionDurationMs, &out.FinalExecutionDurationMs
		*out = new(int64)
		**out = **in
	}
	if in.Edition != nil {
		in, out := &in.Edition, &out.Edition
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatistics.
func (in *JobStatistics) DeepCopy() *JobStatistics {
	if in == nil {
		return nil
	}
	out := new(JobStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatistics2) DeepCopyInto(out *JobStatistics2) {
	*out = *in
	if in.QueryPlan != nil {
		in, out := &in.QueryPlan, &out.QueryPlan
		*out = make([]ExplainQueryStage, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EstimatedBytesProcessed != nil {
		in, out := &in.EstimatedBytesProcessed, &out.EstimatedBytesProcessed
		*out = new(int64)
		**out = **in
	}
	if in.Timeline != nil {
		in, out := &in.Timeline, &out.Timeline
		*out = make([]QueryTimelineSample, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TotalPartitionsProcessed != nil {
		in, out := &in.TotalPartitionsProcessed, &out.TotalPartitionsProcessed
		*out = new(int64)
		**out = **in
	}
	if in.TotalBytesProcessed != nil {
		in, out := &in.TotalBytesProcessed, &out.TotalBytesProcessed
		*out = new(int64)
		**out = **in
	}
	if in.TotalBytesProcessedAccuracy != nil {
		in, out := &in.TotalBytesProcessedAccuracy, &out.TotalBytesProcessedAccuracy
		*out = new(string)
		**out = **in
	}
	if in.TotalBytesBilled != nil {
		in, out := &in.TotalBytesBilled, &out.TotalBytesBilled
		*out = new(int64)
		**out = **in
	}
	if in.BillingTier != nil {
		in, out := &in.BillingTier, &out.BillingTier
		*out = new(int32)
		**out = **in
	}
	if in.TotalSlotMs != nil {
		in, out := &in.TotalSlotMs, &out.TotalSlotMs
		*out = new(int64)
		**out = **in
	}
	if in.CacheHit != nil {
		in, out := &in.CacheHit, &out.CacheHit
		*out = new(bool)
		**out = **in
	}
	if in.ReferencedTables != nil {
		in, out := &in.ReferencedTables, &out.ReferencedTables
		*out = make([]TableReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ReferencedRoutines != nil {
		in, out := &in.ReferencedRoutines, &out.ReferencedRoutines
		*out = make([]RoutineReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(TableSchema)
		(*in).DeepCopyInto(*out)
	}
	if in.NumDmlAffectedRows != nil {
		in, out := &in.NumDmlAffectedRows, &out.NumDmlAffectedRows
		*out = new(int64)
		**out = **in
	}
	if in.DmlStats != nil {
		in, out := &in.DmlStats, &out.DmlStats
		*out = new(DmlStats)
		(*in).DeepCopyInto(*out)
	}
	if in.UndeclaredQueryParameters != nil {
		in, out := &in.UndeclaredQueryParameters, &out.UndeclaredQueryParameters
		*out = make([]QueryParameter, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StatementType != nil {
		in, out := &in.StatementType, &out.StatementType
		*out = new(string)
		**out = **in
	}
	if in.DdlOperationPerformed != nil {
		in, out := &in.DdlOperationPerformed, &out.DdlOperationPerformed
		*out = new(string)
		**out = **in
	}
	if in.DdlTargetTable != nil {
		in, out := &in.DdlTargetTable, &out.DdlTargetTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DdlDestinationTable != nil {
		in, out := &in.DdlDestinationTable, &out.DdlDestinationTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DdlTargetRowAccessPolicy != nil {
		in, out := &in.DdlTargetRowAccessPolicy, &out.DdlTargetRowAccessPolicy
		*out = new(RowAccessPolicyReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DdlAffectedRowAccessPolicyCount != nil {
		in, out := &in.DdlAffectedRowAccessPolicyCount, &out.DdlAffectedRowAccessPolicyCount
		*out = new(int64)
		**out = **in
	}
	if in.DdlTargetRoutine != nil {
		in, out := &in.DdlTargetRoutine, &out.DdlTargetRoutine
		*out = new(RoutineReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DdlTargetDataset != nil {
		in, out := &in.DdlTargetDataset, &out.DdlTargetDataset
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.MlStatistics != nil {
		in, out := &in.MlStatistics, &out.MlStatistics
		*out = new(MlStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.ExportDataStatistics != nil {
		in, out := &in.ExportDataStatistics, &out.ExportDataStatistics
		*out = new(ExportDataStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.ExternalServiceCosts != nil {
		in, out := &in.ExternalServiceCosts, &out.ExternalServiceCosts
		*out = make([]ExternalServiceCost, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BiEngineStatistics != nil {
		in, out := &in.BiEngineStatistics, &out.BiEngineStatistics
		*out = new(BiEngineStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.LoadQueryStatistics != nil {
		in, out := &in.LoadQueryStatistics, &out.LoadQueryStatistics
		*out = new(LoadQueryStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.DclTargetTable != nil {
		in, out := &in.DclTargetTable, &out.DclTargetTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DclTargetView != nil {
		in, out := &in.DclTargetView, &out.DclTargetView
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.DclTargetDataset != nil {
		in, out := &in.DclTargetDataset, &out.DclTargetDataset
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.SearchStatistics != nil {
		in, out := &in.SearchStatistics, &out.SearchStatistics
		*out = new(SearchStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.VectorSearchStatistics != nil {
		in, out := &in.VectorSearchStatistics, &out.VectorSearchStatistics
		*out = new(VectorSearchStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.PerformanceInsights != nil {
		in, out := &in.PerformanceInsights, &out.PerformanceInsights
		*out = new(PerformanceInsights)
		(*in).DeepCopyInto(*out)
	}
	if in.QueryInfo != nil {
		in, out := &in.QueryInfo, &out.QueryInfo
		*out = new(QueryInfo)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkStatistics != nil {
		in, out := &in.SparkStatistics, &out.SparkStatistics
		*out = new(SparkStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.TransferredBytes != nil {
		in, out := &in.TransferredBytes, &out.TransferredBytes
		*out = new(int64)
		**out = **in
	}
	if in.MaterializedViewStatistics != nil {
		in, out := &in.MaterializedViewStatistics, &out.MaterializedViewStatistics
		*out = new(MaterializedViewStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.MetadataCacheStatistics != nil {
		in, out := &in.MetadataCacheStatistics, &out.MetadataCacheStatistics
		*out = new(MetadataCacheStatistics)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatistics2.
func (in *JobStatistics2) DeepCopy() *JobStatistics2 {
	if in == nil {
		return nil
	}
	out := new(JobStatistics2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatistics3) DeepCopyInto(out *JobStatistics3) {
	*out = *in
	if in.InputFiles != nil {
		in, out := &in.InputFiles, &out.InputFiles
		*out = new(int64)
		**out = **in
	}
	if in.InputFileBytes != nil {
		in, out := &in.InputFileBytes, &out.InputFileBytes
		*out = new(int64)
		**out = **in
	}
	if in.OutputRows != nil {
		in, out := &in.OutputRows, &out.OutputRows
		*out = new(int64)
		**out = **in
	}
	if in.OutputBytes != nil {
		in, out := &in.OutputBytes, &out.OutputBytes
		*out = new(int64)
		**out = **in
	}
	if in.BadRecords != nil {
		in, out := &in.BadRecords, &out.BadRecords
		*out = new(int64)
		**out = **in
	}
	if in.Timeline != nil {
		in, out := &in.Timeline, &out.Timeline
		*out = make([]QueryTimelineSample, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatistics3.
func (in *JobStatistics3) DeepCopy() *JobStatistics3 {
	if in == nil {
		return nil
	}
	out := new(JobStatistics3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatistics4) DeepCopyInto(out *JobStatistics4) {
	*out = *in
	if in.DestinationUriFileCounts != nil {
		in, out := &in.DestinationUriFileCounts, &out.DestinationUriFileCounts
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.InputBytes != nil {
		in, out := &in.InputBytes, &out.InputBytes
		*out = new(int64)
		**out = **in
	}
	if in.Timeline != nil {
		in, out := &in.Timeline, &out.Timeline
		*out = make([]QueryTimelineSample, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatistics4.
func (in *JobStatistics4) DeepCopy() *JobStatistics4 {
	if in == nil {
		return nil
	}
	out := new(JobStatistics4)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatistics_TransactionInfo) DeepCopyInto(out *JobStatistics_TransactionInfo) {
	*out = *in
	if in.TransactionID != nil {
		in, out := &in.TransactionID, &out.TransactionID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatistics_TransactionInfo.
func (in *JobStatistics_TransactionInfo) DeepCopy() *JobStatistics_TransactionInfo {
	if in == nil {
		return nil
	}
	out := new(JobStatistics_TransactionInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JobStatus) DeepCopyInto(out *JobStatus) {
	*out = *in
	if in.ErrorResult != nil {
		in, out := &in.ErrorResult, &out.ErrorResult
		*out = new(ErrorProto)
		(*in).DeepCopyInto(*out)
	}
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]ErrorProto, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JobStatus.
func (in *JobStatus) DeepCopy() *JobStatus {
	if in == nil {
		return nil
	}
	out := new(JobStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JoinRestrictionPolicy) DeepCopyInto(out *JoinRestrictionPolicy) {
	*out = *in
	if in.JoinCondition != nil {
		in, out := &in.JoinCondition, &out.JoinCondition
		*out = new(string)
		**out = **in
	}
	if in.JoinAllowedColumns != nil {
		in, out := &in.JoinAllowedColumns, &out.JoinAllowedColumns
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JoinRestrictionPolicy.
func (in *JoinRestrictionPolicy) DeepCopy() *JoinRestrictionPolicy {
	if in == nil {
		return nil
	}
	out := new(JoinRestrictionPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JsonOptions) DeepCopyInto(out *JsonOptions) {
	*out = *in
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JsonOptions.
func (in *JsonOptions) DeepCopy() *JsonOptions {
	if in == nil {
		return nil
	}
	out := new(JsonOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedDatasetMetadata) DeepCopyInto(out *LinkedDatasetMetadata) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedDatasetMetadata.
func (in *LinkedDatasetMetadata) DeepCopy() *LinkedDatasetMetadata {
	if in == nil {
		return nil
	}
	out := new(LinkedDatasetMetadata)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LinkedDatasetSource) DeepCopyInto(out *LinkedDatasetSource) {
	*out = *in
	if in.SourceDataset != nil {
		in, out := &in.SourceDataset, &out.SourceDataset
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LinkedDatasetSource.
func (in *LinkedDatasetSource) DeepCopy() *LinkedDatasetSource {
	if in == nil {
		return nil
	}
	out := new(LinkedDatasetSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListFormatDataset) DeepCopyInto(out *ListFormatDataset) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.DatasetReference != nil {
		in, out := &in.DatasetReference, &out.DatasetReference
		*out = new(DatasetReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListFormatDataset.
func (in *ListFormatDataset) DeepCopy() *ListFormatDataset {
	if in == nil {
		return nil
	}
	out := new(ListFormatDataset)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListFormatJob) DeepCopyInto(out *ListFormatJob) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.JobReference != nil {
		in, out := &in.JobReference, &out.JobReference
		*out = new(JobReference)
		(*in).DeepCopyInto(*out)
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.ErrorResult != nil {
		in, out := &in.ErrorResult, &out.ErrorResult
		*out = new(ErrorProto)
		(*in).DeepCopyInto(*out)
	}
	if in.Statistics != nil {
		in, out := &in.Statistics, &out.Statistics
		*out = new(JobStatistics)
		(*in).DeepCopyInto(*out)
	}
	if in.Configuration != nil {
		in, out := &in.Configuration, &out.Configuration
		*out = new(JobConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(JobStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.UserEmail != nil {
		in, out := &in.UserEmail, &out.UserEmail
		*out = new(string)
		**out = **in
	}
	if in.PrincipalSubject != nil {
		in, out := &in.PrincipalSubject, &out.PrincipalSubject
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListFormatJob.
func (in *ListFormatJob) DeepCopy() *ListFormatJob {
	if in == nil {
		return nil
	}
	out := new(ListFormatJob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListFormatTable) DeepCopyInto(out *ListFormatTable) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.TableReference != nil {
		in, out := &in.TableReference, &out.TableReference
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.TimePartitioning != nil {
		in, out := &in.TimePartitioning, &out.TimePartitioning
		*out = new(TimePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.RangePartitioning != nil {
		in, out := &in.RangePartitioning, &out.RangePartitioning
		*out = new(RangePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.Clustering != nil {
		in, out := &in.Clustering, &out.Clustering
		*out = new(Clustering)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.View != nil {
		in, out := &in.View, &out.View
		*out = new(ListFormatView)
		(*in).DeepCopyInto(*out)
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.ExpirationTime != nil {
		in, out := &in.ExpirationTime, &out.ExpirationTime
		*out = new(int64)
		**out = **in
	}
	if in.RequirePartitionFilter != nil {
		in, out := &in.RequirePartitionFilter, &out.RequirePartitionFilter
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListFormatTable.
func (in *ListFormatTable) DeepCopy() *ListFormatTable {
	if in == nil {
		return nil
	}
	out := new(ListFormatTable)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListFormatView) DeepCopyInto(out *ListFormatView) {
	*out = *in
	if in.UseLegacySql != nil {
		in, out := &in.UseLegacySql, &out.UseLegacySql
		*out = new(bool)
		**out = **in
	}
	if in.PrivacyPolicy != nil {
		in, out := &in.PrivacyPolicy, &out.PrivacyPolicy
		*out = new(PrivacyPolicy)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListFormatView.
func (in *ListFormatView) DeepCopy() *ListFormatView {
	if in == nil {
		return nil
	}
	out := new(ListFormatView)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LoadQueryStatistics) DeepCopyInto(out *LoadQueryStatistics) {
	*out = *in
	if in.InputFiles != nil {
		in, out := &in.InputFiles, &out.InputFiles
		*out = new(int64)
		**out = **in
	}
	if in.InputFileBytes != nil {
		in, out := &in.InputFileBytes, &out.InputFileBytes
		*out = new(int64)
		**out = **in
	}
	if in.OutputRows != nil {
		in, out := &in.OutputRows, &out.OutputRows
		*out = new(int64)
		**out = **in
	}
	if in.OutputBytes != nil {
		in, out := &in.OutputBytes, &out.OutputBytes
		*out = new(int64)
		**out = **in
	}
	if in.BadRecords != nil {
		in, out := &in.BadRecords, &out.BadRecords
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LoadQueryStatistics.
func (in *LoadQueryStatistics) DeepCopy() *LoadQueryStatistics {
	if in == nil {
		return nil
	}
	out := new(LoadQueryStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaterializedView) DeepCopyInto(out *MaterializedView) {
	*out = *in
	if in.TableReference != nil {
		in, out := &in.TableReference, &out.TableReference
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.Chosen != nil {
		in, out := &in.Chosen, &out.Chosen
		*out = new(bool)
		**out = **in
	}
	if in.EstimatedBytesSaved != nil {
		in, out := &in.EstimatedBytesSaved, &out.EstimatedBytesSaved
		*out = new(int64)
		**out = **in
	}
	if in.RejectedReason != nil {
		in, out := &in.RejectedReason, &out.RejectedReason
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaterializedView.
func (in *MaterializedView) DeepCopy() *MaterializedView {
	if in == nil {
		return nil
	}
	out := new(MaterializedView)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaterializedViewDefinition) DeepCopyInto(out *MaterializedViewDefinition) {
	*out = *in
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.LastRefreshTime != nil {
		in, out := &in.LastRefreshTime, &out.LastRefreshTime
		*out = new(int64)
		**out = **in
	}
	if in.EnableRefresh != nil {
		in, out := &in.EnableRefresh, &out.EnableRefresh
		*out = new(bool)
		**out = **in
	}
	if in.RefreshIntervalMs != nil {
		in, out := &in.RefreshIntervalMs, &out.RefreshIntervalMs
		*out = new(uint64)
		**out = **in
	}
	if in.AllowNonIncrementalDefinition != nil {
		in, out := &in.AllowNonIncrementalDefinition, &out.AllowNonIncrementalDefinition
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaterializedViewDefinition.
func (in *MaterializedViewDefinition) DeepCopy() *MaterializedViewDefinition {
	if in == nil {
		return nil
	}
	out := new(MaterializedViewDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaterializedViewStatistics) DeepCopyInto(out *MaterializedViewStatistics) {
	*out = *in
	if in.MaterializedView != nil {
		in, out := &in.MaterializedView, &out.MaterializedView
		*out = make([]MaterializedView, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaterializedViewStatistics.
func (in *MaterializedViewStatistics) DeepCopy() *MaterializedViewStatistics {
	if in == nil {
		return nil
	}
	out := new(MaterializedViewStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaterializedViewStatus) DeepCopyInto(out *MaterializedViewStatus) {
	*out = *in
	if in.RefreshWatermark != nil {
		in, out := &in.RefreshWatermark, &out.RefreshWatermark
		*out = new(string)
		**out = **in
	}
	if in.LastRefreshStatus != nil {
		in, out := &in.LastRefreshStatus, &out.LastRefreshStatus
		*out = new(ErrorProto)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaterializedViewStatus.
func (in *MaterializedViewStatus) DeepCopy() *MaterializedViewStatus {
	if in == nil {
		return nil
	}
	out := new(MaterializedViewStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MetadataCacheStatistics) DeepCopyInto(out *MetadataCacheStatistics) {
	*out = *in
	if in.TableMetadataCacheUsage != nil {
		in, out := &in.TableMetadataCacheUsage, &out.TableMetadataCacheUsage
		*out = make([]TableMetadataCacheUsage, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MetadataCacheStatistics.
func (in *MetadataCacheStatistics) DeepCopy() *MetadataCacheStatistics {
	if in == nil {
		return nil
	}
	out := new(MetadataCacheStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MlStatistics) DeepCopyInto(out *MlStatistics) {
	*out = *in
	if in.MaxIterations != nil {
		in, out := &in.MaxIterations, &out.MaxIterations
		*out = new(int64)
		**out = **in
	}
	if in.IterationResults != nil {
		in, out := &in.IterationResults, &out.IterationResults
		*out = make([]Model_TrainingRun_IterationResult, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ModelType != nil {
		in, out := &in.ModelType, &out.ModelType
		*out = new(string)
		**out = **in
	}
	if in.TrainingType != nil {
		in, out := &in.TrainingType, &out.TrainingType
		*out = new(string)
		**out = **in
	}
	if in.HparamTrials != nil {
		in, out := &in.HparamTrials, &out.HparamTrials
		*out = make([]Model_HparamTuningTrial, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MlStatistics.
func (in *MlStatistics) DeepCopy() *MlStatistics {
	if in == nil {
		return nil
	}
	out := new(MlStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model) DeepCopyInto(out *Model) {
	*out = *in
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ModelReference != nil {
		in, out := &in.ModelReference, &out.ModelReference
		*out = new(ModelReference)
		(*in).DeepCopyInto(*out)
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.LastModifiedTime != nil {
		in, out := &in.LastModifiedTime, &out.LastModifiedTime
		*out = new(int64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ExpirationTime != nil {
		in, out := &in.ExpirationTime, &out.ExpirationTime
		*out = new(int64)
		**out = **in
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.EncryptionConfiguration != nil {
		in, out := &in.EncryptionConfiguration, &out.EncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.ModelType != nil {
		in, out := &in.ModelType, &out.ModelType
		*out = new(string)
		**out = **in
	}
	if in.TrainingRuns != nil {
		in, out := &in.TrainingRuns, &out.TrainingRuns
		*out = make([]Model_TrainingRun, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FeatureColumns != nil {
		in, out := &in.FeatureColumns, &out.FeatureColumns
		*out = make([]StandardSqlField, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LabelColumns != nil {
		in, out := &in.LabelColumns, &out.LabelColumns
		*out = make([]StandardSqlField, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TransformColumns != nil {
		in, out := &in.TransformColumns, &out.TransformColumns
		*out = make([]TransformColumn, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HparamSearchSpaces != nil {
		in, out := &in.HparamSearchSpaces, &out.HparamSearchSpaces
		*out = new(Model_HparamSearchSpaces)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultTrialID != nil {
		in, out := &in.DefaultTrialID, &out.DefaultTrialID
		*out = new(int64)
		**out = **in
	}
	if in.HparamTrials != nil {
		in, out := &in.HparamTrials, &out.HparamTrials
		*out = make([]Model_HparamTuningTrial, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OptimalTrialIds != nil {
		in, out := &in.OptimalTrialIds, &out.OptimalTrialIds
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.RemoteModelInfo != nil {
		in, out := &in.RemoteModelInfo, &out.RemoteModelInfo
		*out = new(RemoteModelInfo)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model.
func (in *Model) DeepCopy() *Model {
	if in == nil {
		return nil
	}
	out := new(Model)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ModelReference) DeepCopyInto(out *ModelReference) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.DatasetID != nil {
		in, out := &in.DatasetID, &out.DatasetID
		*out = new(string)
		**out = **in
	}
	if in.ModelID != nil {
		in, out := &in.ModelID, &out.ModelID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ModelReference.
func (in *ModelReference) DeepCopy() *ModelReference {
	if in == nil {
		return nil
	}
	out := new(ModelReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_AggregateClassificationMetrics) DeepCopyInto(out *Model_AggregateClassificationMetrics) {
	*out = *in
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(float64)
		**out = **in
	}
	if in.Recall != nil {
		in, out := &in.Recall, &out.Recall
		*out = new(float64)
		**out = **in
	}
	if in.Accuracy != nil {
		in, out := &in.Accuracy, &out.Accuracy
		*out = new(float64)
		**out = **in
	}
	if in.Threshold != nil {
		in, out := &in.Threshold, &out.Threshold
		*out = new(float64)
		**out = **in
	}
	if in.F1Score != nil {
		in, out := &in.F1Score, &out.F1Score
		*out = new(float64)
		**out = **in
	}
	if in.LogLoss != nil {
		in, out := &in.LogLoss, &out.LogLoss
		*out = new(float64)
		**out = **in
	}
	if in.RocAuc != nil {
		in, out := &in.RocAuc, &out.RocAuc
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_AggregateClassificationMetrics.
func (in *Model_AggregateClassificationMetrics) DeepCopy() *Model_AggregateClassificationMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_AggregateClassificationMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ArimaFittingMetrics) DeepCopyInto(out *Model_ArimaFittingMetrics) {
	*out = *in
	if in.LogLikelihood != nil {
		in, out := &in.LogLikelihood, &out.LogLikelihood
		*out = new(float64)
		**out = **in
	}
	if in.Aic != nil {
		in, out := &in.Aic, &out.Aic
		*out = new(float64)
		**out = **in
	}
	if in.Variance != nil {
		in, out := &in.Variance, &out.Variance
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ArimaFittingMetrics.
func (in *Model_ArimaFittingMetrics) DeepCopy() *Model_ArimaFittingMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_ArimaFittingMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ArimaForecastingMetrics) DeepCopyInto(out *Model_ArimaForecastingMetrics) {
	*out = *in
	if in.ArimaSingleModelForecastingMetrics != nil {
		in, out := &in.ArimaSingleModelForecastingMetrics, &out.ArimaSingleModelForecastingMetrics
		*out = make([]Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ArimaForecastingMetrics.
func (in *Model_ArimaForecastingMetrics) DeepCopy() *Model_ArimaForecastingMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_ArimaForecastingMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics) DeepCopyInto(out *Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics) {
	*out = *in
	if in.NonSeasonalOrder != nil {
		in, out := &in.NonSeasonalOrder, &out.NonSeasonalOrder
		*out = new(Model_ArimaOrder)
		(*in).DeepCopyInto(*out)
	}
	if in.ArimaFittingMetrics != nil {
		in, out := &in.ArimaFittingMetrics, &out.ArimaFittingMetrics
		*out = new(Model_ArimaFittingMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.HasDrift != nil {
		in, out := &in.HasDrift, &out.HasDrift
		*out = new(bool)
		**out = **in
	}
	if in.TimeSeriesID != nil {
		in, out := &in.TimeSeriesID, &out.TimeSeriesID
		*out = new(string)
		**out = **in
	}
	if in.TimeSeriesIds != nil {
		in, out := &in.TimeSeriesIds, &out.TimeSeriesIds
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SeasonalPeriods != nil {
		in, out := &in.SeasonalPeriods, &out.SeasonalPeriods
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.HasHolidayEffect != nil {
		in, out := &in.HasHolidayEffect, &out.HasHolidayEffect
		*out = new(bool)
		**out = **in
	}
	if in.HasSpikesAndDips != nil {
		in, out := &in.HasSpikesAndDips, &out.HasSpikesAndDips
		*out = new(bool)
		**out = **in
	}
	if in.HasStepChanges != nil {
		in, out := &in.HasStepChanges, &out.HasStepChanges
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics.
func (in *Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics) DeepCopy() *Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_ArimaForecastingMetrics_ArimaSingleModelForecastingMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ArimaOrder) DeepCopyInto(out *Model_ArimaOrder) {
	*out = *in
	if in.P != nil {
		in, out := &in.P, &out.P
		*out = new(int64)
		**out = **in
	}
	if in.D != nil {
		in, out := &in.D, &out.D
		*out = new(int64)
		**out = **in
	}
	if in.Q != nil {
		in, out := &in.Q, &out.Q
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ArimaOrder.
func (in *Model_ArimaOrder) DeepCopy() *Model_ArimaOrder {
	if in == nil {
		return nil
	}
	out := new(Model_ArimaOrder)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_BinaryClassificationMetrics) DeepCopyInto(out *Model_BinaryClassificationMetrics) {
	*out = *in
	if in.AggregateClassificationMetrics != nil {
		in, out := &in.AggregateClassificationMetrics, &out.AggregateClassificationMetrics
		*out = new(Model_AggregateClassificationMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.BinaryConfusionMatrixList != nil {
		in, out := &in.BinaryConfusionMatrixList, &out.BinaryConfusionMatrixList
		*out = make([]Model_BinaryClassificationMetrics_BinaryConfusionMatrix, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PositiveLabel != nil {
		in, out := &in.PositiveLabel, &out.PositiveLabel
		*out = new(string)
		**out = **in
	}
	if in.NegativeLabel != nil {
		in, out := &in.NegativeLabel, &out.NegativeLabel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_BinaryClassificationMetrics.
func (in *Model_BinaryClassificationMetrics) DeepCopy() *Model_BinaryClassificationMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_BinaryClassificationMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_BinaryClassificationMetrics_BinaryConfusionMatrix) DeepCopyInto(out *Model_BinaryClassificationMetrics_BinaryConfusionMatrix) {
	*out = *in
	if in.PositiveClassThreshold != nil {
		in, out := &in.PositiveClassThreshold, &out.PositiveClassThreshold
		*out = new(float64)
		**out = **in
	}
	if in.TruePositives != nil {
		in, out := &in.TruePositives, &out.TruePositives
		*out = new(int64)
		**out = **in
	}
	if in.FalsePositives != nil {
		in, out := &in.FalsePositives, &out.FalsePositives
		*out = new(int64)
		**out = **in
	}
	if in.TrueNegatives != nil {
		in, out := &in.TrueNegatives, &out.TrueNegatives
		*out = new(int64)
		**out = **in
	}
	if in.FalseNegatives != nil {
		in, out := &in.FalseNegatives, &out.FalseNegatives
		*out = new(int64)
		**out = **in
	}
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(float64)
		**out = **in
	}
	if in.Recall != nil {
		in, out := &in.Recall, &out.Recall
		*out = new(float64)
		**out = **in
	}
	if in.F1Score != nil {
		in, out := &in.F1Score, &out.F1Score
		*out = new(float64)
		**out = **in
	}
	if in.Accuracy != nil {
		in, out := &in.Accuracy, &out.Accuracy
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_BinaryClassificationMetrics_BinaryConfusionMatrix.
func (in *Model_BinaryClassificationMetrics_BinaryConfusionMatrix) DeepCopy() *Model_BinaryClassificationMetrics_BinaryConfusionMatrix {
	if in == nil {
		return nil
	}
	out := new(Model_BinaryClassificationMetrics_BinaryConfusionMatrix)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_BoostedTreeOptionEnums) DeepCopyInto(out *Model_BoostedTreeOptionEnums) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_BoostedTreeOptionEnums.
func (in *Model_BoostedTreeOptionEnums) DeepCopy() *Model_BoostedTreeOptionEnums {
	if in == nil {
		return nil
	}
	out := new(Model_BoostedTreeOptionEnums)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_CategoryEncodingMethod) DeepCopyInto(out *Model_CategoryEncodingMethod) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_CategoryEncodingMethod.
func (in *Model_CategoryEncodingMethod) DeepCopy() *Model_CategoryEncodingMethod {
	if in == nil {
		return nil
	}
	out := new(Model_CategoryEncodingMethod)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ClusteringMetrics) DeepCopyInto(out *Model_ClusteringMetrics) {
	*out = *in
	if in.DaviesBouldinIndex != nil {
		in, out := &in.DaviesBouldinIndex, &out.DaviesBouldinIndex
		*out = new(float64)
		**out = **in
	}
	if in.MeanSquaredDistance != nil {
		in, out := &in.MeanSquaredDistance, &out.MeanSquaredDistance
		*out = new(float64)
		**out = **in
	}
	if in.Clusters != nil {
		in, out := &in.Clusters, &out.Clusters
		*out = make([]Model_ClusteringMetrics_Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ClusteringMetrics.
func (in *Model_ClusteringMetrics) DeepCopy() *Model_ClusteringMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_ClusteringMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ClusteringMetrics_Cluster) DeepCopyInto(out *Model_ClusteringMetrics_Cluster) {
	*out = *in
	if in.CentroidID != nil {
		in, out := &in.CentroidID, &out.CentroidID
		*out = new(int64)
		**out = **in
	}
	if in.FeatureValues != nil {
		in, out := &in.FeatureValues, &out.FeatureValues
		*out = make([]Model_ClusteringMetrics_Cluster_FeatureValue, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ClusteringMetrics_Cluster.
func (in *Model_ClusteringMetrics_Cluster) DeepCopy() *Model_ClusteringMetrics_Cluster {
	if in == nil {
		return nil
	}
	out := new(Model_ClusteringMetrics_Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ClusteringMetrics_Cluster_FeatureValue) DeepCopyInto(out *Model_ClusteringMetrics_Cluster_FeatureValue) {
	*out = *in
	if in.FeatureColumn != nil {
		in, out := &in.FeatureColumn, &out.FeatureColumn
		*out = new(string)
		**out = **in
	}
	if in.NumericalValue != nil {
		in, out := &in.NumericalValue, &out.NumericalValue
		*out = new(float64)
		**out = **in
	}
	if in.CategoricalValue != nil {
		in, out := &in.CategoricalValue, &out.CategoricalValue
		*out = new(Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ClusteringMetrics_Cluster_FeatureValue.
func (in *Model_ClusteringMetrics_Cluster_FeatureValue) DeepCopy() *Model_ClusteringMetrics_Cluster_FeatureValue {
	if in == nil {
		return nil
	}
	out := new(Model_ClusteringMetrics_Cluster_FeatureValue)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue) DeepCopyInto(out *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue) {
	*out = *in
	if in.CategoryCounts != nil {
		in, out := &in.CategoryCounts, &out.CategoryCounts
		*out = make([]Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue.
func (in *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue) DeepCopy() *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue {
	if in == nil {
		return nil
	}
	out := new(Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount) DeepCopyInto(out *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount) {
	*out = *in
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount.
func (in *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount) DeepCopy() *Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount {
	if in == nil {
		return nil
	}
	out := new(Model_ClusteringMetrics_Cluster_FeatureValue_CategoricalValue_CategoryCount)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_DataSplitResult) DeepCopyInto(out *Model_DataSplitResult) {
	*out = *in
	if in.TrainingTable != nil {
		in, out := &in.TrainingTable, &out.TrainingTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.EvaluationTable != nil {
		in, out := &in.EvaluationTable, &out.EvaluationTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.TestTable != nil {
		in, out := &in.TestTable, &out.TestTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_DataSplitResult.
func (in *Model_DataSplitResult) DeepCopy() *Model_DataSplitResult {
	if in == nil {
		return nil
	}
	out := new(Model_DataSplitResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_DimensionalityReductionMetrics) DeepCopyInto(out *Model_DimensionalityReductionMetrics) {
	*out = *in
	if in.TotalExplainedVarianceRatio != nil {
		in, out := &in.TotalExplainedVarianceRatio, &out.TotalExplainedVarianceRatio
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_DimensionalityReductionMetrics.
func (in *Model_DimensionalityReductionMetrics) DeepCopy() *Model_DimensionalityReductionMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_DimensionalityReductionMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_EvaluationMetrics) DeepCopyInto(out *Model_EvaluationMetrics) {
	*out = *in
	if in.RegressionMetrics != nil {
		in, out := &in.RegressionMetrics, &out.RegressionMetrics
		*out = new(Model_RegressionMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.BinaryClassificationMetrics != nil {
		in, out := &in.BinaryClassificationMetrics, &out.BinaryClassificationMetrics
		*out = new(Model_BinaryClassificationMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.MultiClassClassificationMetrics != nil {
		in, out := &in.MultiClassClassificationMetrics, &out.MultiClassClassificationMetrics
		*out = new(Model_MultiClassClassificationMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusteringMetrics != nil {
		in, out := &in.ClusteringMetrics, &out.ClusteringMetrics
		*out = new(Model_ClusteringMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.RankingMetrics != nil {
		in, out := &in.RankingMetrics, &out.RankingMetrics
		*out = new(Model_RankingMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.ArimaForecastingMetrics != nil {
		in, out := &in.ArimaForecastingMetrics, &out.ArimaForecastingMetrics
		*out = new(Model_ArimaForecastingMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.DimensionalityReductionMetrics != nil {
		in, out := &in.DimensionalityReductionMetrics, &out.DimensionalityReductionMetrics
		*out = new(Model_DimensionalityReductionMetrics)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_EvaluationMetrics.
func (in *Model_EvaluationMetrics) DeepCopy() *Model_EvaluationMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_EvaluationMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_GlobalExplanation) DeepCopyInto(out *Model_GlobalExplanation) {
	*out = *in
	if in.Explanations != nil {
		in, out := &in.Explanations, &out.Explanations
		*out = make([]Model_GlobalExplanation_Explanation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClassLabel != nil {
		in, out := &in.ClassLabel, &out.ClassLabel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_GlobalExplanation.
func (in *Model_GlobalExplanation) DeepCopy() *Model_GlobalExplanation {
	if in == nil {
		return nil
	}
	out := new(Model_GlobalExplanation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_GlobalExplanation_Explanation) DeepCopyInto(out *Model_GlobalExplanation_Explanation) {
	*out = *in
	if in.FeatureName != nil {
		in, out := &in.FeatureName, &out.FeatureName
		*out = new(string)
		**out = **in
	}
	if in.Attribution != nil {
		in, out := &in.Attribution, &out.Attribution
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_GlobalExplanation_Explanation.
func (in *Model_GlobalExplanation_Explanation) DeepCopy() *Model_GlobalExplanation_Explanation {
	if in == nil {
		return nil
	}
	out := new(Model_GlobalExplanation_Explanation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_HparamSearchSpaces) DeepCopyInto(out *Model_HparamSearchSpaces) {
	*out = *in
	if in.LearnRate != nil {
		in, out := &in.LearnRate, &out.LearnRate
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.L1Reg != nil {
		in, out := &in.L1Reg, &out.L1Reg
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.L2Reg != nil {
		in, out := &in.L2Reg, &out.L2Reg
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.NumClusters != nil {
		in, out := &in.NumClusters, &out.NumClusters
		*out = new(Model_IntHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.NumFactors != nil {
		in, out := &in.NumFactors, &out.NumFactors
		*out = new(Model_IntHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.HiddenUnits != nil {
		in, out := &in.HiddenUnits, &out.HiddenUnits
		*out = new(Model_IntArrayHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.BatchSize != nil {
		in, out := &in.BatchSize, &out.BatchSize
		*out = new(Model_IntHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.Dropout != nil {
		in, out := &in.Dropout, &out.Dropout
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.MaxTreeDepth != nil {
		in, out := &in.MaxTreeDepth, &out.MaxTreeDepth
		*out = new(Model_IntHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.Subsample != nil {
		in, out := &in.Subsample, &out.Subsample
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.MinSplitLoss != nil {
		in, out := &in.MinSplitLoss, &out.MinSplitLoss
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.WalsAlpha != nil {
		in, out := &in.WalsAlpha, &out.WalsAlpha
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.BoosterType != nil {
		in, out := &in.BoosterType, &out.BoosterType
		*out = new(Model_StringHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.NumParallelTree != nil {
		in, out := &in.NumParallelTree, &out.NumParallelTree
		*out = new(Model_IntHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.DartNormalizeType != nil {
		in, out := &in.DartNormalizeType, &out.DartNormalizeType
		*out = new(Model_StringHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.TreeMethod != nil {
		in, out := &in.TreeMethod, &out.TreeMethod
		*out = new(Model_StringHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.MinTreeChildWeight != nil {
		in, out := &in.MinTreeChildWeight, &out.MinTreeChildWeight
		*out = new(Model_IntHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.ColsampleBytree != nil {
		in, out := &in.ColsampleBytree, &out.ColsampleBytree
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.ColsampleBylevel != nil {
		in, out := &in.ColsampleBylevel, &out.ColsampleBylevel
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.ColsampleBynode != nil {
		in, out := &in.ColsampleBynode, &out.ColsampleBynode
		*out = new(Model_float64HparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.ActivationFn != nil {
		in, out := &in.ActivationFn, &out.ActivationFn
		*out = new(Model_StringHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
	if in.Optimizer != nil {
		in, out := &in.Optimizer, &out.Optimizer
		*out = new(Model_StringHparamSearchSpace)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_HparamSearchSpaces.
func (in *Model_HparamSearchSpaces) DeepCopy() *Model_HparamSearchSpaces {
	if in == nil {
		return nil
	}
	out := new(Model_HparamSearchSpaces)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_HparamTuningEnums) DeepCopyInto(out *Model_HparamTuningEnums) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_HparamTuningEnums.
func (in *Model_HparamTuningEnums) DeepCopy() *Model_HparamTuningEnums {
	if in == nil {
		return nil
	}
	out := new(Model_HparamTuningEnums)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_HparamTuningTrial) DeepCopyInto(out *Model_HparamTuningTrial) {
	*out = *in
	if in.TrialID != nil {
		in, out := &in.TrialID, &out.TrialID
		*out = new(int64)
		**out = **in
	}
	if in.StartTimeMs != nil {
		in, out := &in.StartTimeMs, &out.StartTimeMs
		*out = new(int64)
		**out = **in
	}
	if in.EndTimeMs != nil {
		in, out := &in.EndTimeMs, &out.EndTimeMs
		*out = new(int64)
		**out = **in
	}
	if in.Hparams != nil {
		in, out := &in.Hparams, &out.Hparams
		*out = new(Model_TrainingRun_TrainingOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.EvaluationMetrics != nil {
		in, out := &in.EvaluationMetrics, &out.EvaluationMetrics
		*out = new(Model_EvaluationMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.ErrorMessage != nil {
		in, out := &in.ErrorMessage, &out.ErrorMessage
		*out = new(string)
		**out = **in
	}
	if in.TrainingLoss != nil {
		in, out := &in.TrainingLoss, &out.TrainingLoss
		*out = new(float64)
		**out = **in
	}
	if in.EvalLoss != nil {
		in, out := &in.EvalLoss, &out.EvalLoss
		*out = new(float64)
		**out = **in
	}
	if in.HparamTuningEvaluationMetrics != nil {
		in, out := &in.HparamTuningEvaluationMetrics, &out.HparamTuningEvaluationMetrics
		*out = new(Model_EvaluationMetrics)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_HparamTuningTrial.
func (in *Model_HparamTuningTrial) DeepCopy() *Model_HparamTuningTrial {
	if in == nil {
		return nil
	}
	out := new(Model_HparamTuningTrial)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_IntArrayHparamSearchSpace) DeepCopyInto(out *Model_IntArrayHparamSearchSpace) {
	*out = *in
	if in.Candidates != nil {
		in, out := &in.Candidates, &out.Candidates
		*out = make([]Model_IntArrayHparamSearchSpace_IntArray, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_IntArrayHparamSearchSpace.
func (in *Model_IntArrayHparamSearchSpace) DeepCopy() *Model_IntArrayHparamSearchSpace {
	if in == nil {
		return nil
	}
	out := new(Model_IntArrayHparamSearchSpace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_IntArrayHparamSearchSpace_IntArray) DeepCopyInto(out *Model_IntArrayHparamSearchSpace_IntArray) {
	*out = *in
	if in.Elements != nil {
		in, out := &in.Elements, &out.Elements
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_IntArrayHparamSearchSpace_IntArray.
func (in *Model_IntArrayHparamSearchSpace_IntArray) DeepCopy() *Model_IntArrayHparamSearchSpace_IntArray {
	if in == nil {
		return nil
	}
	out := new(Model_IntArrayHparamSearchSpace_IntArray)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_IntHparamSearchSpace) DeepCopyInto(out *Model_IntHparamSearchSpace) {
	*out = *in
	if in.Range != nil {
		in, out := &in.Range, &out.Range
		*out = new(Model_IntHparamSearchSpace_IntRange)
		(*in).DeepCopyInto(*out)
	}
	if in.Candidates != nil {
		in, out := &in.Candidates, &out.Candidates
		*out = new(Model_IntHparamSearchSpace_IntCandidates)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_IntHparamSearchSpace.
func (in *Model_IntHparamSearchSpace) DeepCopy() *Model_IntHparamSearchSpace {
	if in == nil {
		return nil
	}
	out := new(Model_IntHparamSearchSpace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_IntHparamSearchSpace_IntCandidates) DeepCopyInto(out *Model_IntHparamSearchSpace_IntCandidates) {
	*out = *in
	if in.Candidates != nil {
		in, out := &in.Candidates, &out.Candidates
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_IntHparamSearchSpace_IntCandidates.
func (in *Model_IntHparamSearchSpace_IntCandidates) DeepCopy() *Model_IntHparamSearchSpace_IntCandidates {
	if in == nil {
		return nil
	}
	out := new(Model_IntHparamSearchSpace_IntCandidates)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_IntHparamSearchSpace_IntRange) DeepCopyInto(out *Model_IntHparamSearchSpace_IntRange) {
	*out = *in
	if in.Min != nil {
		in, out := &in.Min, &out.Min
		*out = new(int64)
		**out = **in
	}
	if in.Max != nil {
		in, out := &in.Max, &out.Max
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_IntHparamSearchSpace_IntRange.
func (in *Model_IntHparamSearchSpace_IntRange) DeepCopy() *Model_IntHparamSearchSpace_IntRange {
	if in == nil {
		return nil
	}
	out := new(Model_IntHparamSearchSpace_IntRange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_KmeansEnums) DeepCopyInto(out *Model_KmeansEnums) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_KmeansEnums.
func (in *Model_KmeansEnums) DeepCopy() *Model_KmeansEnums {
	if in == nil {
		return nil
	}
	out := new(Model_KmeansEnums)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_ModelRegistryOptionEnums) DeepCopyInto(out *Model_ModelRegistryOptionEnums) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_ModelRegistryOptionEnums.
func (in *Model_ModelRegistryOptionEnums) DeepCopy() *Model_ModelRegistryOptionEnums {
	if in == nil {
		return nil
	}
	out := new(Model_ModelRegistryOptionEnums)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_MultiClassClassificationMetrics) DeepCopyInto(out *Model_MultiClassClassificationMetrics) {
	*out = *in
	if in.AggregateClassificationMetrics != nil {
		in, out := &in.AggregateClassificationMetrics, &out.AggregateClassificationMetrics
		*out = new(Model_AggregateClassificationMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.ConfusionMatrixList != nil {
		in, out := &in.ConfusionMatrixList, &out.ConfusionMatrixList
		*out = make([]Model_MultiClassClassificationMetrics_ConfusionMatrix, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_MultiClassClassificationMetrics.
func (in *Model_MultiClassClassificationMetrics) DeepCopy() *Model_MultiClassClassificationMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_MultiClassClassificationMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_MultiClassClassificationMetrics_ConfusionMatrix) DeepCopyInto(out *Model_MultiClassClassificationMetrics_ConfusionMatrix) {
	*out = *in
	if in.ConfidenceThreshold != nil {
		in, out := &in.ConfidenceThreshold, &out.ConfidenceThreshold
		*out = new(float64)
		**out = **in
	}
	if in.Rows != nil {
		in, out := &in.Rows, &out.Rows
		*out = make([]Model_MultiClassClassificationMetrics_ConfusionMatrix_Row, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_MultiClassClassificationMetrics_ConfusionMatrix.
func (in *Model_MultiClassClassificationMetrics_ConfusionMatrix) DeepCopy() *Model_MultiClassClassificationMetrics_ConfusionMatrix {
	if in == nil {
		return nil
	}
	out := new(Model_MultiClassClassificationMetrics_ConfusionMatrix)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry) DeepCopyInto(out *Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry) {
	*out = *in
	if in.PredictedLabel != nil {
		in, out := &in.PredictedLabel, &out.PredictedLabel
		*out = new(string)
		**out = **in
	}
	if in.ItemCount != nil {
		in, out := &in.ItemCount, &out.ItemCount
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry.
func (in *Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry) DeepCopy() *Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry {
	if in == nil {
		return nil
	}
	out := new(Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_MultiClassClassificationMetrics_ConfusionMatrix_Row) DeepCopyInto(out *Model_MultiClassClassificationMetrics_ConfusionMatrix_Row) {
	*out = *in
	if in.ActualLabel != nil {
		in, out := &in.ActualLabel, &out.ActualLabel
		*out = new(string)
		**out = **in
	}
	if in.Entries != nil {
		in, out := &in.Entries, &out.Entries
		*out = make([]Model_MultiClassClassificationMetrics_ConfusionMatrix_Entry, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_MultiClassClassificationMetrics_ConfusionMatrix_Row.
func (in *Model_MultiClassClassificationMetrics_ConfusionMatrix_Row) DeepCopy() *Model_MultiClassClassificationMetrics_ConfusionMatrix_Row {
	if in == nil {
		return nil
	}
	out := new(Model_MultiClassClassificationMetrics_ConfusionMatrix_Row)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_PcaSolverOptionEnums) DeepCopyInto(out *Model_PcaSolverOptionEnums) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_PcaSolverOptionEnums.
func (in *Model_PcaSolverOptionEnums) DeepCopy() *Model_PcaSolverOptionEnums {
	if in == nil {
		return nil
	}
	out := new(Model_PcaSolverOptionEnums)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_RankingMetrics) DeepCopyInto(out *Model_RankingMetrics) {
	*out = *in
	if in.MeanAveragePrecision != nil {
		in, out := &in.MeanAveragePrecision, &out.MeanAveragePrecision
		*out = new(float64)
		**out = **in
	}
	if in.MeanSquaredError != nil {
		in, out := &in.MeanSquaredError, &out.MeanSquaredError
		*out = new(float64)
		**out = **in
	}
	if in.NormalizedDiscountedCumulativeGain != nil {
		in, out := &in.NormalizedDiscountedCumulativeGain, &out.NormalizedDiscountedCumulativeGain
		*out = new(float64)
		**out = **in
	}
	if in.AverageRank != nil {
		in, out := &in.AverageRank, &out.AverageRank
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_RankingMetrics.
func (in *Model_RankingMetrics) DeepCopy() *Model_RankingMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_RankingMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_RegressionMetrics) DeepCopyInto(out *Model_RegressionMetrics) {
	*out = *in
	if in.MeanAbsoluteError != nil {
		in, out := &in.MeanAbsoluteError, &out.MeanAbsoluteError
		*out = new(float64)
		**out = **in
	}
	if in.MeanSquaredError != nil {
		in, out := &in.MeanSquaredError, &out.MeanSquaredError
		*out = new(float64)
		**out = **in
	}
	if in.MeanSquaredLogError != nil {
		in, out := &in.MeanSquaredLogError, &out.MeanSquaredLogError
		*out = new(float64)
		**out = **in
	}
	if in.MedianAbsoluteError != nil {
		in, out := &in.MedianAbsoluteError, &out.MedianAbsoluteError
		*out = new(float64)
		**out = **in
	}
	if in.RSquared != nil {
		in, out := &in.RSquared, &out.RSquared
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_RegressionMetrics.
func (in *Model_RegressionMetrics) DeepCopy() *Model_RegressionMetrics {
	if in == nil {
		return nil
	}
	out := new(Model_RegressionMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_SeasonalPeriod) DeepCopyInto(out *Model_SeasonalPeriod) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_SeasonalPeriod.
func (in *Model_SeasonalPeriod) DeepCopy() *Model_SeasonalPeriod {
	if in == nil {
		return nil
	}
	out := new(Model_SeasonalPeriod)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_StringHparamSearchSpace) DeepCopyInto(out *Model_StringHparamSearchSpace) {
	*out = *in
	if in.Candidates != nil {
		in, out := &in.Candidates, &out.Candidates
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_StringHparamSearchSpace.
func (in *Model_StringHparamSearchSpace) DeepCopy() *Model_StringHparamSearchSpace {
	if in == nil {
		return nil
	}
	out := new(Model_StringHparamSearchSpace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun) DeepCopyInto(out *Model_TrainingRun) {
	*out = *in
	if in.TrainingOptions != nil {
		in, out := &in.TrainingOptions, &out.TrainingOptions
		*out = new(Model_TrainingRun_TrainingOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = new(string)
		**out = **in
	}
	if in.Results != nil {
		in, out := &in.Results, &out.Results
		*out = make([]Model_TrainingRun_IterationResult, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EvaluationMetrics != nil {
		in, out := &in.EvaluationMetrics, &out.EvaluationMetrics
		*out = new(Model_EvaluationMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.DataSplitResult != nil {
		in, out := &in.DataSplitResult, &out.DataSplitResult
		*out = new(Model_DataSplitResult)
		(*in).DeepCopyInto(*out)
	}
	if in.ModelLevelGlobalExplanation != nil {
		in, out := &in.ModelLevelGlobalExplanation, &out.ModelLevelGlobalExplanation
		*out = new(Model_GlobalExplanation)
		(*in).DeepCopyInto(*out)
	}
	if in.ClassLevelGlobalExplanations != nil {
		in, out := &in.ClassLevelGlobalExplanations, &out.ClassLevelGlobalExplanations
		*out = make([]Model_GlobalExplanation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VertexAiModelID != nil {
		in, out := &in.VertexAiModelID, &out.VertexAiModelID
		*out = new(string)
		**out = **in
	}
	if in.VertexAiModelVersion != nil {
		in, out := &in.VertexAiModelVersion, &out.VertexAiModelVersion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun.
func (in *Model_TrainingRun) DeepCopy() *Model_TrainingRun {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_IterationResult) DeepCopyInto(out *Model_TrainingRun_IterationResult) {
	*out = *in
	if in.Index != nil {
		in, out := &in.Index, &out.Index
		*out = new(int32)
		**out = **in
	}
	if in.DurationMs != nil {
		in, out := &in.DurationMs, &out.DurationMs
		*out = new(int64)
		**out = **in
	}
	if in.TrainingLoss != nil {
		in, out := &in.TrainingLoss, &out.TrainingLoss
		*out = new(float64)
		**out = **in
	}
	if in.EvalLoss != nil {
		in, out := &in.EvalLoss, &out.EvalLoss
		*out = new(float64)
		**out = **in
	}
	if in.LearnRate != nil {
		in, out := &in.LearnRate, &out.LearnRate
		*out = new(float64)
		**out = **in
	}
	if in.ClusterInfos != nil {
		in, out := &in.ClusterInfos, &out.ClusterInfos
		*out = make([]Model_TrainingRun_IterationResult_ClusterInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ArimaResult != nil {
		in, out := &in.ArimaResult, &out.ArimaResult
		*out = new(Model_TrainingRun_IterationResult_ArimaResult)
		(*in).DeepCopyInto(*out)
	}
	if in.PrincipalComponentInfos != nil {
		in, out := &in.PrincipalComponentInfos, &out.PrincipalComponentInfos
		*out = make([]Model_TrainingRun_IterationResult_PrincipalComponentInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_IterationResult.
func (in *Model_TrainingRun_IterationResult) DeepCopy() *Model_TrainingRun_IterationResult {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_IterationResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_IterationResult_ArimaResult) DeepCopyInto(out *Model_TrainingRun_IterationResult_ArimaResult) {
	*out = *in
	if in.ArimaModelInfo != nil {
		in, out := &in.ArimaModelInfo, &out.ArimaModelInfo
		*out = make([]Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SeasonalPeriods != nil {
		in, out := &in.SeasonalPeriods, &out.SeasonalPeriods
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_IterationResult_ArimaResult.
func (in *Model_TrainingRun_IterationResult_ArimaResult) DeepCopy() *Model_TrainingRun_IterationResult_ArimaResult {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_IterationResult_ArimaResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients) DeepCopyInto(out *Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients) {
	*out = *in
	if in.AutoRegressiveCoefficients != nil {
		in, out := &in.AutoRegressiveCoefficients, &out.AutoRegressiveCoefficients
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
	if in.MovingAverageCoefficients != nil {
		in, out := &in.MovingAverageCoefficients, &out.MovingAverageCoefficients
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
	if in.InterceptCoefficient != nil {
		in, out := &in.InterceptCoefficient, &out.InterceptCoefficient
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients.
func (in *Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients) DeepCopy() *Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo) DeepCopyInto(out *Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo) {
	*out = *in
	if in.NonSeasonalOrder != nil {
		in, out := &in.NonSeasonalOrder, &out.NonSeasonalOrder
		*out = new(Model_ArimaOrder)
		(*in).DeepCopyInto(*out)
	}
	if in.ArimaCoefficients != nil {
		in, out := &in.ArimaCoefficients, &out.ArimaCoefficients
		*out = new(Model_TrainingRun_IterationResult_ArimaResult_ArimaCoefficients)
		(*in).DeepCopyInto(*out)
	}
	if in.ArimaFittingMetrics != nil {
		in, out := &in.ArimaFittingMetrics, &out.ArimaFittingMetrics
		*out = new(Model_ArimaFittingMetrics)
		(*in).DeepCopyInto(*out)
	}
	if in.HasDrift != nil {
		in, out := &in.HasDrift, &out.HasDrift
		*out = new(bool)
		**out = **in
	}
	if in.TimeSeriesID != nil {
		in, out := &in.TimeSeriesID, &out.TimeSeriesID
		*out = new(string)
		**out = **in
	}
	if in.TimeSeriesIds != nil {
		in, out := &in.TimeSeriesIds, &out.TimeSeriesIds
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SeasonalPeriods != nil {
		in, out := &in.SeasonalPeriods, &out.SeasonalPeriods
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.HasHolidayEffect != nil {
		in, out := &in.HasHolidayEffect, &out.HasHolidayEffect
		*out = new(bool)
		**out = **in
	}
	if in.HasSpikesAndDips != nil {
		in, out := &in.HasSpikesAndDips, &out.HasSpikesAndDips
		*out = new(bool)
		**out = **in
	}
	if in.HasStepChanges != nil {
		in, out := &in.HasStepChanges, &out.HasStepChanges
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo.
func (in *Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo) DeepCopy() *Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_IterationResult_ArimaResult_ArimaModelInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_IterationResult_ClusterInfo) DeepCopyInto(out *Model_TrainingRun_IterationResult_ClusterInfo) {
	*out = *in
	if in.CentroidID != nil {
		in, out := &in.CentroidID, &out.CentroidID
		*out = new(int64)
		**out = **in
	}
	if in.ClusterRadius != nil {
		in, out := &in.ClusterRadius, &out.ClusterRadius
		*out = new(float64)
		**out = **in
	}
	if in.ClusterSize != nil {
		in, out := &in.ClusterSize, &out.ClusterSize
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_IterationResult_ClusterInfo.
func (in *Model_TrainingRun_IterationResult_ClusterInfo) DeepCopy() *Model_TrainingRun_IterationResult_ClusterInfo {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_IterationResult_ClusterInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_IterationResult_PrincipalComponentInfo) DeepCopyInto(out *Model_TrainingRun_IterationResult_PrincipalComponentInfo) {
	*out = *in
	if in.PrincipalComponentID != nil {
		in, out := &in.PrincipalComponentID, &out.PrincipalComponentID
		*out = new(int64)
		**out = **in
	}
	if in.ExplainedVariance != nil {
		in, out := &in.ExplainedVariance, &out.ExplainedVariance
		*out = new(float64)
		**out = **in
	}
	if in.ExplainedVarianceRatio != nil {
		in, out := &in.ExplainedVarianceRatio, &out.ExplainedVarianceRatio
		*out = new(float64)
		**out = **in
	}
	if in.CumulativeExplainedVarianceRatio != nil {
		in, out := &in.CumulativeExplainedVarianceRatio, &out.CumulativeExplainedVarianceRatio
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_IterationResult_PrincipalComponentInfo.
func (in *Model_TrainingRun_IterationResult_PrincipalComponentInfo) DeepCopy() *Model_TrainingRun_IterationResult_PrincipalComponentInfo {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_IterationResult_PrincipalComponentInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_TrainingRun_TrainingOptions) DeepCopyInto(out *Model_TrainingRun_TrainingOptions) {
	*out = *in
	if in.MaxIterations != nil {
		in, out := &in.MaxIterations, &out.MaxIterations
		*out = new(int64)
		**out = **in
	}
	if in.LossType != nil {
		in, out := &in.LossType, &out.LossType
		*out = new(string)
		**out = **in
	}
	if in.LearnRate != nil {
		in, out := &in.LearnRate, &out.LearnRate
		*out = new(float64)
		**out = **in
	}
	if in.L1Regularization != nil {
		in, out := &in.L1Regularization, &out.L1Regularization
		*out = new(float64)
		**out = **in
	}
	if in.L2Regularization != nil {
		in, out := &in.L2Regularization, &out.L2Regularization
		*out = new(float64)
		**out = **in
	}
	if in.MinRelativeProgress != nil {
		in, out := &in.MinRelativeProgress, &out.MinRelativeProgress
		*out = new(float64)
		**out = **in
	}
	if in.WarmStart != nil {
		in, out := &in.WarmStart, &out.WarmStart
		*out = new(bool)
		**out = **in
	}
	if in.EarlyStop != nil {
		in, out := &in.EarlyStop, &out.EarlyStop
		*out = new(bool)
		**out = **in
	}
	if in.InputLabelColumns != nil {
		in, out := &in.InputLabelColumns, &out.InputLabelColumns
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DataSplitMethod != nil {
		in, out := &in.DataSplitMethod, &out.DataSplitMethod
		*out = new(string)
		**out = **in
	}
	if in.DataSplitEvalFraction != nil {
		in, out := &in.DataSplitEvalFraction, &out.DataSplitEvalFraction
		*out = new(float64)
		**out = **in
	}
	if in.DataSplitColumn != nil {
		in, out := &in.DataSplitColumn, &out.DataSplitColumn
		*out = new(string)
		**out = **in
	}
	if in.LearnRateStrategy != nil {
		in, out := &in.LearnRateStrategy, &out.LearnRateStrategy
		*out = new(string)
		**out = **in
	}
	if in.InitialLearnRate != nil {
		in, out := &in.InitialLearnRate, &out.InitialLearnRate
		*out = new(float64)
		**out = **in
	}
	if in.UserColumn != nil {
		in, out := &in.UserColumn, &out.UserColumn
		*out = new(string)
		**out = **in
	}
	if in.ItemColumn != nil {
		in, out := &in.ItemColumn, &out.ItemColumn
		*out = new(string)
		**out = **in
	}
	if in.DistanceType != nil {
		in, out := &in.DistanceType, &out.DistanceType
		*out = new(string)
		**out = **in
	}
	if in.NumClusters != nil {
		in, out := &in.NumClusters, &out.NumClusters
		*out = new(int64)
		**out = **in
	}
	if in.ModelUri != nil {
		in, out := &in.ModelUri, &out.ModelUri
		*out = new(string)
		**out = **in
	}
	if in.OptimizationStrategy != nil {
		in, out := &in.OptimizationStrategy, &out.OptimizationStrategy
		*out = new(string)
		**out = **in
	}
	if in.HiddenUnits != nil {
		in, out := &in.HiddenUnits, &out.HiddenUnits
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	if in.BatchSize != nil {
		in, out := &in.BatchSize, &out.BatchSize
		*out = new(int64)
		**out = **in
	}
	if in.Dropout != nil {
		in, out := &in.Dropout, &out.Dropout
		*out = new(float64)
		**out = **in
	}
	if in.MaxTreeDepth != nil {
		in, out := &in.MaxTreeDepth, &out.MaxTreeDepth
		*out = new(int64)
		**out = **in
	}
	if in.Subsample != nil {
		in, out := &in.Subsample, &out.Subsample
		*out = new(float64)
		**out = **in
	}
	if in.MinSplitLoss != nil {
		in, out := &in.MinSplitLoss, &out.MinSplitLoss
		*out = new(float64)
		**out = **in
	}
	if in.BoosterType != nil {
		in, out := &in.BoosterType, &out.BoosterType
		*out = new(string)
		**out = **in
	}
	if in.NumParallelTree != nil {
		in, out := &in.NumParallelTree, &out.NumParallelTree
		*out = new(int64)
		**out = **in
	}
	if in.DartNormalizeType != nil {
		in, out := &in.DartNormalizeType, &out.DartNormalizeType
		*out = new(string)
		**out = **in
	}
	if in.TreeMethod != nil {
		in, out := &in.TreeMethod, &out.TreeMethod
		*out = new(string)
		**out = **in
	}
	if in.MinTreeChildWeight != nil {
		in, out := &in.MinTreeChildWeight, &out.MinTreeChildWeight
		*out = new(int64)
		**out = **in
	}
	if in.ColsampleBytree != nil {
		in, out := &in.ColsampleBytree, &out.ColsampleBytree
		*out = new(float64)
		**out = **in
	}
	if in.ColsampleBylevel != nil {
		in, out := &in.ColsampleBylevel, &out.ColsampleBylevel
		*out = new(float64)
		**out = **in
	}
	if in.ColsampleBynode != nil {
		in, out := &in.ColsampleBynode, &out.ColsampleBynode
		*out = new(float64)
		**out = **in
	}
	if in.NumFactors != nil {
		in, out := &in.NumFactors, &out.NumFactors
		*out = new(int64)
		**out = **in
	}
	if in.FeedbackType != nil {
		in, out := &in.FeedbackType, &out.FeedbackType
		*out = new(string)
		**out = **in
	}
	if in.WalsAlpha != nil {
		in, out := &in.WalsAlpha, &out.WalsAlpha
		*out = new(float64)
		**out = **in
	}
	if in.KmeansInitializationMethod != nil {
		in, out := &in.KmeansInitializationMethod, &out.KmeansInitializationMethod
		*out = new(string)
		**out = **in
	}
	if in.KmeansInitializationColumn != nil {
		in, out := &in.KmeansInitializationColumn, &out.KmeansInitializationColumn
		*out = new(string)
		**out = **in
	}
	if in.TimeSeriesTimestampColumn != nil {
		in, out := &in.TimeSeriesTimestampColumn, &out.TimeSeriesTimestampColumn
		*out = new(string)
		**out = **in
	}
	if in.TimeSeriesDataColumn != nil {
		in, out := &in.TimeSeriesDataColumn, &out.TimeSeriesDataColumn
		*out = new(string)
		**out = **in
	}
	if in.AutoArima != nil {
		in, out := &in.AutoArima, &out.AutoArima
		*out = new(bool)
		**out = **in
	}
	if in.NonSeasonalOrder != nil {
		in, out := &in.NonSeasonalOrder, &out.NonSeasonalOrder
		*out = new(Model_ArimaOrder)
		(*in).DeepCopyInto(*out)
	}
	if in.DataFrequency != nil {
		in, out := &in.DataFrequency, &out.DataFrequency
		*out = new(string)
		**out = **in
	}
	if in.CalculatePValues != nil {
		in, out := &in.CalculatePValues, &out.CalculatePValues
		*out = new(bool)
		**out = **in
	}
	if in.IncludeDrift != nil {
		in, out := &in.IncludeDrift, &out.IncludeDrift
		*out = new(bool)
		**out = **in
	}
	if in.HolidayRegion != nil {
		in, out := &in.HolidayRegion, &out.HolidayRegion
		*out = new(string)
		**out = **in
	}
	if in.HolidayRegions != nil {
		in, out := &in.HolidayRegions, &out.HolidayRegions
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TimeSeriesIDColumn != nil {
		in, out := &in.TimeSeriesIDColumn, &out.TimeSeriesIDColumn
		*out = new(string)
		**out = **in
	}
	if in.TimeSeriesIDColumns != nil {
		in, out := &in.TimeSeriesIDColumns, &out.TimeSeriesIDColumns
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Horizon != nil {
		in, out := &in.Horizon, &out.Horizon
		*out = new(int64)
		**out = **in
	}
	if in.AutoArimaMaxOrder != nil {
		in, out := &in.AutoArimaMaxOrder, &out.AutoArimaMaxOrder
		*out = new(int64)
		**out = **in
	}
	if in.AutoArimaMinOrder != nil {
		in, out := &in.AutoArimaMinOrder, &out.AutoArimaMinOrder
		*out = new(int64)
		**out = **in
	}
	if in.NumTrials != nil {
		in, out := &in.NumTrials, &out.NumTrials
		*out = new(int64)
		**out = **in
	}
	if in.MaxParallelTrials != nil {
		in, out := &in.MaxParallelTrials, &out.MaxParallelTrials
		*out = new(int64)
		**out = **in
	}
	if in.HparamTuningObjectives != nil {
		in, out := &in.HparamTuningObjectives, &out.HparamTuningObjectives
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DecomposeTimeSeries != nil {
		in, out := &in.DecomposeTimeSeries, &out.DecomposeTimeSeries
		*out = new(bool)
		**out = **in
	}
	if in.CleanSpikesAndDips != nil {
		in, out := &in.CleanSpikesAndDips, &out.CleanSpikesAndDips
		*out = new(bool)
		**out = **in
	}
	if in.AdjustStepChanges != nil {
		in, out := &in.AdjustStepChanges, &out.AdjustStepChanges
		*out = new(bool)
		**out = **in
	}
	if in.EnableGlobalExplain != nil {
		in, out := &in.EnableGlobalExplain, &out.EnableGlobalExplain
		*out = new(bool)
		**out = **in
	}
	if in.SampledShapleyNumPaths != nil {
		in, out := &in.SampledShapleyNumPaths, &out.SampledShapleyNumPaths
		*out = new(int64)
		**out = **in
	}
	if in.IntegratedGradientsNumSteps != nil {
		in, out := &in.IntegratedGradientsNumSteps, &out.IntegratedGradientsNumSteps
		*out = new(int64)
		**out = **in
	}
	if in.CategoryEncodingMethod != nil {
		in, out := &in.CategoryEncodingMethod, &out.CategoryEncodingMethod
		*out = new(string)
		**out = **in
	}
	if in.TfVersion != nil {
		in, out := &in.TfVersion, &out.TfVersion
		*out = new(string)
		**out = **in
	}
	if in.ColorSpace != nil {
		in, out := &in.ColorSpace, &out.ColorSpace
		*out = new(string)
		**out = **in
	}
	if in.InstanceWeightColumn != nil {
		in, out := &in.InstanceWeightColumn, &out.InstanceWeightColumn
		*out = new(string)
		**out = **in
	}
	if in.TrendSmoothingWindowSize != nil {
		in, out := &in.TrendSmoothingWindowSize, &out.TrendSmoothingWindowSize
		*out = new(int64)
		**out = **in
	}
	if in.TimeSeriesLengthFraction != nil {
		in, out := &in.TimeSeriesLengthFraction, &out.TimeSeriesLengthFraction
		*out = new(float64)
		**out = **in
	}
	if in.MinTimeSeriesLength != nil {
		in, out := &in.MinTimeSeriesLength, &out.MinTimeSeriesLength
		*out = new(int64)
		**out = **in
	}
	if in.MaxTimeSeriesLength != nil {
		in, out := &in.MaxTimeSeriesLength, &out.MaxTimeSeriesLength
		*out = new(int64)
		**out = **in
	}
	if in.XgboostVersion != nil {
		in, out := &in.XgboostVersion, &out.XgboostVersion
		*out = new(string)
		**out = **in
	}
	if in.ApproxGlobalFeatureContrib != nil {
		in, out := &in.ApproxGlobalFeatureContrib, &out.ApproxGlobalFeatureContrib
		*out = new(bool)
		**out = **in
	}
	if in.FitIntercept != nil {
		in, out := &in.FitIntercept, &out.FitIntercept
		*out = new(bool)
		**out = **in
	}
	if in.NumPrincipalComponents != nil {
		in, out := &in.NumPrincipalComponents, &out.NumPrincipalComponents
		*out = new(int64)
		**out = **in
	}
	if in.PcaExplainedVarianceRatio != nil {
		in, out := &in.PcaExplainedVarianceRatio, &out.PcaExplainedVarianceRatio
		*out = new(float64)
		**out = **in
	}
	if in.ScaleFeatures != nil {
		in, out := &in.ScaleFeatures, &out.ScaleFeatures
		*out = new(bool)
		**out = **in
	}
	if in.PcaSolver != nil {
		in, out := &in.PcaSolver, &out.PcaSolver
		*out = new(string)
		**out = **in
	}
	if in.AutoClassWeights != nil {
		in, out := &in.AutoClassWeights, &out.AutoClassWeights
		*out = new(bool)
		**out = **in
	}
	if in.ActivationFn != nil {
		in, out := &in.ActivationFn, &out.ActivationFn
		*out = new(string)
		**out = **in
	}
	if in.Optimizer != nil {
		in, out := &in.Optimizer, &out.Optimizer
		*out = new(string)
		**out = **in
	}
	if in.BudgetHours != nil {
		in, out := &in.BudgetHours, &out.BudgetHours
		*out = new(float64)
		**out = **in
	}
	if in.StandardizeFeatures != nil {
		in, out := &in.StandardizeFeatures, &out.StandardizeFeatures
		*out = new(bool)
		**out = **in
	}
	if in.L1RegActivation != nil {
		in, out := &in.L1RegActivation, &out.L1RegActivation
		*out = new(float64)
		**out = **in
	}
	if in.ModelRegistry != nil {
		in, out := &in.ModelRegistry, &out.ModelRegistry
		*out = new(string)
		**out = **in
	}
	if in.VertexAiModelVersionAliases != nil {
		in, out := &in.VertexAiModelVersionAliases, &out.VertexAiModelVersionAliases
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_TrainingRun_TrainingOptions.
func (in *Model_TrainingRun_TrainingOptions) DeepCopy() *Model_TrainingRun_TrainingOptions {
	if in == nil {
		return nil
	}
	out := new(Model_TrainingRun_TrainingOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_float64HparamSearchSpace) DeepCopyInto(out *Model_float64HparamSearchSpace) {
	*out = *in
	if in.Range != nil {
		in, out := &in.Range, &out.Range
		*out = new(Model_float64HparamSearchSpace_float64Range)
		(*in).DeepCopyInto(*out)
	}
	if in.Candidates != nil {
		in, out := &in.Candidates, &out.Candidates
		*out = new(Model_float64HparamSearchSpace_float64Candidates)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_float64HparamSearchSpace.
func (in *Model_float64HparamSearchSpace) DeepCopy() *Model_float64HparamSearchSpace {
	if in == nil {
		return nil
	}
	out := new(Model_float64HparamSearchSpace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_float64HparamSearchSpace_float64Candidates) DeepCopyInto(out *Model_float64HparamSearchSpace_float64Candidates) {
	*out = *in
	if in.Candidates != nil {
		in, out := &in.Candidates, &out.Candidates
		*out = make([]float64, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_float64HparamSearchSpace_float64Candidates.
func (in *Model_float64HparamSearchSpace_float64Candidates) DeepCopy() *Model_float64HparamSearchSpace_float64Candidates {
	if in == nil {
		return nil
	}
	out := new(Model_float64HparamSearchSpace_float64Candidates)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Model_float64HparamSearchSpace_float64Range) DeepCopyInto(out *Model_float64HparamSearchSpace_float64Range) {
	*out = *in
	if in.Min != nil {
		in, out := &in.Min, &out.Min
		*out = new(float64)
		**out = **in
	}
	if in.Max != nil {
		in, out := &in.Max, &out.Max
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Model_float64HparamSearchSpace_float64Range.
func (in *Model_float64HparamSearchSpace_float64Range) DeepCopy() *Model_float64HparamSearchSpace_float64Range {
	if in == nil {
		return nil
	}
	out := new(Model_float64HparamSearchSpace_float64Range)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParquetOptions) DeepCopyInto(out *ParquetOptions) {
	*out = *in
	if in.EnumAsString != nil {
		in, out := &in.EnumAsString, &out.EnumAsString
		*out = new(bool)
		**out = **in
	}
	if in.EnableListInference != nil {
		in, out := &in.EnableListInference, &out.EnableListInference
		*out = new(bool)
		**out = **in
	}
	if in.MapTargetType != nil {
		in, out := &in.MapTargetType, &out.MapTargetType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParquetOptions.
func (in *ParquetOptions) DeepCopy() *ParquetOptions {
	if in == nil {
		return nil
	}
	out := new(ParquetOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionSkew) DeepCopyInto(out *PartitionSkew) {
	*out = *in
	if in.SkewSources != nil {
		in, out := &in.SkewSources, &out.SkewSources
		*out = make([]PartitionSkew_SkewSource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionSkew.
func (in *PartitionSkew) DeepCopy() *PartitionSkew {
	if in == nil {
		return nil
	}
	out := new(PartitionSkew)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionSkew_SkewSource) DeepCopyInto(out *PartitionSkew_SkewSource) {
	*out = *in
	if in.StageID != nil {
		in, out := &in.StageID, &out.StageID
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionSkew_SkewSource.
func (in *PartitionSkew_SkewSource) DeepCopy() *PartitionSkew_SkewSource {
	if in == nil {
		return nil
	}
	out := new(PartitionSkew_SkewSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionedColumn) DeepCopyInto(out *PartitionedColumn) {
	*out = *in
	if in.Field != nil {
		in, out := &in.Field, &out.Field
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionedColumn.
func (in *PartitionedColumn) DeepCopy() *PartitionedColumn {
	if in == nil {
		return nil
	}
	out := new(PartitionedColumn)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitioningDefinition) DeepCopyInto(out *PartitioningDefinition) {
	*out = *in
	if in.PartitionedColumn != nil {
		in, out := &in.PartitionedColumn, &out.PartitionedColumn
		*out = make([]PartitionedColumn, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitioningDefinition.
func (in *PartitioningDefinition) DeepCopy() *PartitioningDefinition {
	if in == nil {
		return nil
	}
	out := new(PartitioningDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceInsights) DeepCopyInto(out *PerformanceInsights) {
	*out = *in
	if in.AvgPreviousExecutionMs != nil {
		in, out := &in.AvgPreviousExecutionMs, &out.AvgPreviousExecutionMs
		*out = new(int64)
		**out = **in
	}
	if in.StagePerformanceStandaloneInsights != nil {
		in, out := &in.StagePerformanceStandaloneInsights, &out.StagePerformanceStandaloneInsights
		*out = make([]StagePerformanceStandaloneInsight, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StagePerformanceChangeInsights != nil {
		in, out := &in.StagePerformanceChangeInsights, &out.StagePerformanceChangeInsights
		*out = make([]StagePerformanceChangeInsight, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceInsights.
func (in *PerformanceInsights) DeepCopy() *PerformanceInsights {
	if in == nil {
		return nil
	}
	out := new(PerformanceInsights)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryKey) DeepCopyInto(out *PrimaryKey) {
	*out = *in
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryKey.
func (in *PrimaryKey) DeepCopy() *PrimaryKey {
	if in == nil {
		return nil
	}
	out := new(PrimaryKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivacyPolicy) DeepCopyInto(out *PrivacyPolicy) {
	*out = *in
	if in.AggregationThresholdPolicy != nil {
		in, out := &in.AggregationThresholdPolicy, &out.AggregationThresholdPolicy
		*out = new(AggregationThresholdPolicy)
		(*in).DeepCopyInto(*out)
	}
	if in.DifferentialPrivacyPolicy != nil {
		in, out := &in.DifferentialPrivacyPolicy, &out.DifferentialPrivacyPolicy
		*out = new(DifferentialPrivacyPolicy)
		(*in).DeepCopyInto(*out)
	}
	if in.JoinRestrictionPolicy != nil {
		in, out := &in.JoinRestrictionPolicy, &out.JoinRestrictionPolicy
		*out = new(JoinRestrictionPolicy)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivacyPolicy.
func (in *PrivacyPolicy) DeepCopy() *PrivacyPolicy {
	if in == nil {
		return nil
	}
	out := new(PrivacyPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryInfo) DeepCopyInto(out *QueryInfo) {
	*out = *in
	if in.OptimizationDetails != nil {
		in, out := &in.OptimizationDetails, &out.OptimizationDetails
		*out = new(google_protobuf_Struct)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryInfo.
func (in *QueryInfo) DeepCopy() *QueryInfo {
	if in == nil {
		return nil
	}
	out := new(QueryInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryParameter) DeepCopyInto(out *QueryParameter) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ParameterType != nil {
		in, out := &in.ParameterType, &out.ParameterType
		*out = new(QueryParameterType)
		(*in).DeepCopyInto(*out)
	}
	if in.ParameterValue != nil {
		in, out := &in.ParameterValue, &out.ParameterValue
		*out = new(QueryParameterValue)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryParameter.
func (in *QueryParameter) DeepCopy() *QueryParameter {
	if in == nil {
		return nil
	}
	out := new(QueryParameter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryParameterStructType) DeepCopyInto(out *QueryParameterStructType) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(QueryParameterType)
		(*in).DeepCopyInto(*out)
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryParameterStructType.
func (in *QueryParameterStructType) DeepCopy() *QueryParameterStructType {
	if in == nil {
		return nil
	}
	out := new(QueryParameterStructType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryParameterType) DeepCopyInto(out *QueryParameterType) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ArrayType != nil {
		in, out := &in.ArrayType, &out.ArrayType
		*out = new(QueryParameterType)
		(*in).DeepCopyInto(*out)
	}
	if in.StructTypes != nil {
		in, out := &in.StructTypes, &out.StructTypes
		*out = make([]QueryParameterStructType, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RangeElementType != nil {
		in, out := &in.RangeElementType, &out.RangeElementType
		*out = new(QueryParameterType)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryParameterType.
func (in *QueryParameterType) DeepCopy() *QueryParameterType {
	if in == nil {
		return nil
	}
	out := new(QueryParameterType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryParameterValue) DeepCopyInto(out *QueryParameterValue) {
	*out = *in
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
	if in.ArrayValues != nil {
		in, out := &in.ArrayValues, &out.ArrayValues
		*out = make([]QueryParameterValue, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RangeValue != nil {
		in, out := &in.RangeValue, &out.RangeValue
		*out = new(RangeValue)
		(*in).DeepCopyInto(*out)
	}
	if in.AltStructValues != nil {
		in, out := &in.AltStructValues, &out.AltStructValues
		*out = make([]google_protobuf_Value, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryParameterValue.
func (in *QueryParameterValue) DeepCopy() *QueryParameterValue {
	if in == nil {
		return nil
	}
	out := new(QueryParameterValue)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QueryTimelineSample) DeepCopyInto(out *QueryTimelineSample) {
	*out = *in
	if in.ElapsedMs != nil {
		in, out := &in.ElapsedMs, &out.ElapsedMs
		*out = new(int64)
		**out = **in
	}
	if in.TotalSlotMs != nil {
		in, out := &in.TotalSlotMs, &out.TotalSlotMs
		*out = new(int64)
		**out = **in
	}
	if in.PendingUnits != nil {
		in, out := &in.PendingUnits, &out.PendingUnits
		*out = new(int64)
		**out = **in
	}
	if in.CompletedUnits != nil {
		in, out := &in.CompletedUnits, &out.CompletedUnits
		*out = new(int64)
		**out = **in
	}
	if in.ActiveUnits != nil {
		in, out := &in.ActiveUnits, &out.ActiveUnits
		*out = new(int64)
		**out = **in
	}
	if in.EstimatedRunnableUnits != nil {
		in, out := &in.EstimatedRunnableUnits, &out.EstimatedRunnableUnits
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QueryTimelineSample.
func (in *QueryTimelineSample) DeepCopy() *QueryTimelineSample {
	if in == nil {
		return nil
	}
	out := new(QueryTimelineSample)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RangePartitioning) DeepCopyInto(out *RangePartitioning) {
	*out = *in
	if in.Field != nil {
		in, out := &in.Field, &out.Field
		*out = new(string)
		**out = **in
	}
	if in.Range != nil {
		in, out := &in.Range, &out.Range
		*out = new(RangePartitioning_Range)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RangePartitioning.
func (in *RangePartitioning) DeepCopy() *RangePartitioning {
	if in == nil {
		return nil
	}
	out := new(RangePartitioning)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RangePartitioning_Range) DeepCopyInto(out *RangePartitioning_Range) {
	*out = *in
	if in.Start != nil {
		in, out := &in.Start, &out.Start
		*out = new(string)
		**out = **in
	}
	if in.End != nil {
		in, out := &in.End, &out.End
		*out = new(string)
		**out = **in
	}
	if in.Interval != nil {
		in, out := &in.Interval, &out.Interval
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RangePartitioning_Range.
func (in *RangePartitioning_Range) DeepCopy() *RangePartitioning_Range {
	if in == nil {
		return nil
	}
	out := new(RangePartitioning_Range)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RangeValue) DeepCopyInto(out *RangeValue) {
	*out = *in
	if in.Start != nil {
		in, out := &in.Start, &out.Start
		*out = new(QueryParameterValue)
		(*in).DeepCopyInto(*out)
	}
	if in.End != nil {
		in, out := &in.End, &out.End
		*out = new(QueryParameterValue)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RangeValue.
func (in *RangeValue) DeepCopy() *RangeValue {
	if in == nil {
		return nil
	}
	out := new(RangeValue)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteModelInfo) DeepCopyInto(out *RemoteModelInfo) {
	*out = *in
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.RemoteServiceType != nil {
		in, out := &in.RemoteServiceType, &out.RemoteServiceType
		*out = new(string)
		**out = **in
	}
	if in.Connection != nil {
		in, out := &in.Connection, &out.Connection
		*out = new(string)
		**out = **in
	}
	if in.MaxBatchingRows != nil {
		in, out := &in.MaxBatchingRows, &out.MaxBatchingRows
		*out = new(int64)
		**out = **in
	}
	if in.RemoteModelVersion != nil {
		in, out := &in.RemoteModelVersion, &out.RemoteModelVersion
		*out = new(string)
		**out = **in
	}
	if in.SpeechRecognizer != nil {
		in, out := &in.SpeechRecognizer, &out.SpeechRecognizer
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RemoteModelInfo.
func (in *RemoteModelInfo) DeepCopy() *RemoteModelInfo {
	if in == nil {
		return nil
	}
	out := new(RemoteModelInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestrictionConfig) DeepCopyInto(out *RestrictionConfig) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestrictionConfig.
func (in *RestrictionConfig) DeepCopy() *RestrictionConfig {
	if in == nil {
		return nil
	}
	out := new(RestrictionConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Routine) DeepCopyInto(out *Routine) {
	*out = *in
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.RoutineReference != nil {
		in, out := &in.RoutineReference, &out.RoutineReference
		*out = new(RoutineReference)
		(*in).DeepCopyInto(*out)
	}
	if in.RoutineType != nil {
		in, out := &in.RoutineType, &out.RoutineType
		*out = new(string)
		**out = **in
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.LastModifiedTime != nil {
		in, out := &in.LastModifiedTime, &out.LastModifiedTime
		*out = new(int64)
		**out = **in
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		*out = new(string)
		**out = **in
	}
	if in.Arguments != nil {
		in, out := &in.Arguments, &out.Arguments
		*out = make([]Routine_Argument, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ReturnType != nil {
		in, out := &in.ReturnType, &out.ReturnType
		*out = new(StandardSqlDataType)
		(*in).DeepCopyInto(*out)
	}
	if in.ReturnTableType != nil {
		in, out := &in.ReturnTableType, &out.ReturnTableType
		*out = new(StandardSqlTableType)
		(*in).DeepCopyInto(*out)
	}
	if in.ImportedLibraries != nil {
		in, out := &in.ImportedLibraries, &out.ImportedLibraries
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.DefinitionBody != nil {
		in, out := &in.DefinitionBody, &out.DefinitionBody
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DeterminismLevel != nil {
		in, out := &in.DeterminismLevel, &out.DeterminismLevel
		*out = new(string)
		**out = **in
	}
	if in.SecurityMode != nil {
		in, out := &in.SecurityMode, &out.SecurityMode
		*out = new(string)
		**out = **in
	}
	if in.StrictMode != nil {
		in, out := &in.StrictMode, &out.StrictMode
		*out = new(bool)
		**out = **in
	}
	if in.RemoteFunctionOptions != nil {
		in, out := &in.RemoteFunctionOptions, &out.RemoteFunctionOptions
		*out = new(Routine_RemoteFunctionOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.SparkOptions != nil {
		in, out := &in.SparkOptions, &out.SparkOptions
		*out = new(SparkOptions)
		(*in).DeepCopyInto(*out)
	}
	if in.DataGovernanceType != nil {
		in, out := &in.DataGovernanceType, &out.DataGovernanceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Routine.
func (in *Routine) DeepCopy() *Routine {
	if in == nil {
		return nil
	}
	out := new(Routine)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutineReference) DeepCopyInto(out *RoutineReference) {
	*out = *in
	if in.ProjectId != nil {
		in, out := &in.ProjectId, &out.ProjectId
		*out = new(string)
		**out = **in
	}
	if in.DatasetId != nil {
		in, out := &in.DatasetId, &out.DatasetId
		*out = new(string)
		**out = **in
	}
	if in.RoutineId != nil {
		in, out := &in.RoutineId, &out.RoutineId
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutineReference.
func (in *RoutineReference) DeepCopy() *RoutineReference {
	if in == nil {
		return nil
	}
	out := new(RoutineReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Routine_Argument) DeepCopyInto(out *Routine_Argument) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ArgumentKind != nil {
		in, out := &in.ArgumentKind, &out.ArgumentKind
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.DataType != nil {
		in, out := &in.DataType, &out.DataType
		*out = new(StandardSqlDataType)
		(*in).DeepCopyInto(*out)
	}
	if in.IsAggregate != nil {
		in, out := &in.IsAggregate, &out.IsAggregate
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Routine_Argument.
func (in *Routine_Argument) DeepCopy() *Routine_Argument {
	if in == nil {
		return nil
	}
	out := new(Routine_Argument)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Routine_RemoteFunctionOptions) DeepCopyInto(out *Routine_RemoteFunctionOptions) {
	*out = *in
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Connection != nil {
		in, out := &in.Connection, &out.Connection
		*out = new(string)
		**out = **in
	}
	if in.UserDefinedContext != nil {
		in, out := &in.UserDefinedContext, &out.UserDefinedContext
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MaxBatchingRows != nil {
		in, out := &in.MaxBatchingRows, &out.MaxBatchingRows
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Routine_RemoteFunctionOptions.
func (in *Routine_RemoteFunctionOptions) DeepCopy() *Routine_RemoteFunctionOptions {
	if in == nil {
		return nil
	}
	out := new(Routine_RemoteFunctionOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RowAccessPolicy) DeepCopyInto(out *RowAccessPolicy) {
	*out = *in
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.RowAccessPolicyReference != nil {
		in, out := &in.RowAccessPolicyReference, &out.RowAccessPolicyReference
		*out = new(RowAccessPolicyReference)
		(*in).DeepCopyInto(*out)
	}
	if in.FilterPredicate != nil {
		in, out := &in.FilterPredicate, &out.FilterPredicate
		*out = new(string)
		**out = **in
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(string)
		**out = **in
	}
	if in.LastModifiedTime != nil {
		in, out := &in.LastModifiedTime, &out.LastModifiedTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RowAccessPolicy.
func (in *RowAccessPolicy) DeepCopy() *RowAccessPolicy {
	if in == nil {
		return nil
	}
	out := new(RowAccessPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RowAccessPolicyReference) DeepCopyInto(out *RowAccessPolicyReference) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.DatasetID != nil {
		in, out := &in.DatasetID, &out.DatasetID
		*out = new(string)
		**out = **in
	}
	if in.TableID != nil {
		in, out := &in.TableID, &out.TableID
		*out = new(string)
		**out = **in
	}
	if in.PolicyID != nil {
		in, out := &in.PolicyID, &out.PolicyID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RowAccessPolicyReference.
func (in *RowAccessPolicyReference) DeepCopy() *RowAccessPolicyReference {
	if in == nil {
		return nil
	}
	out := new(RowAccessPolicyReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RowLevelSecurityStatistics) DeepCopyInto(out *RowLevelSecurityStatistics) {
	*out = *in
	if in.RowLevelSecurityApplied != nil {
		in, out := &in.RowLevelSecurityApplied, &out.RowLevelSecurityApplied
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RowLevelSecurityStatistics.
func (in *RowLevelSecurityStatistics) DeepCopy() *RowLevelSecurityStatistics {
	if in == nil {
		return nil
	}
	out := new(RowLevelSecurityStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptOptions) DeepCopyInto(out *ScriptOptions) {
	*out = *in
	if in.StatementTimeoutMs != nil {
		in, out := &in.StatementTimeoutMs, &out.StatementTimeoutMs
		*out = new(int64)
		**out = **in
	}
	if in.StatementByteBudget != nil {
		in, out := &in.StatementByteBudget, &out.StatementByteBudget
		*out = new(int64)
		**out = **in
	}
	if in.KeyResultStatement != nil {
		in, out := &in.KeyResultStatement, &out.KeyResultStatement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptOptions.
func (in *ScriptOptions) DeepCopy() *ScriptOptions {
	if in == nil {
		return nil
	}
	out := new(ScriptOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptStatistics) DeepCopyInto(out *ScriptStatistics) {
	*out = *in
	if in.EvaluationKind != nil {
		in, out := &in.EvaluationKind, &out.EvaluationKind
		*out = new(string)
		**out = **in
	}
	if in.StackFrames != nil {
		in, out := &in.StackFrames, &out.StackFrames
		*out = make([]ScriptStatistics_ScriptStackFrame, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptStatistics.
func (in *ScriptStatistics) DeepCopy() *ScriptStatistics {
	if in == nil {
		return nil
	}
	out := new(ScriptStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScriptStatistics_ScriptStackFrame) DeepCopyInto(out *ScriptStatistics_ScriptStackFrame) {
	*out = *in
	if in.StartLine != nil {
		in, out := &in.StartLine, &out.StartLine
		*out = new(int32)
		**out = **in
	}
	if in.StartColumn != nil {
		in, out := &in.StartColumn, &out.StartColumn
		*out = new(int32)
		**out = **in
	}
	if in.EndLine != nil {
		in, out := &in.EndLine, &out.EndLine
		*out = new(int32)
		**out = **in
	}
	if in.EndColumn != nil {
		in, out := &in.EndColumn, &out.EndColumn
		*out = new(int32)
		**out = **in
	}
	if in.ProcedureID != nil {
		in, out := &in.ProcedureID, &out.ProcedureID
		*out = new(string)
		**out = **in
	}
	if in.Text != nil {
		in, out := &in.Text, &out.Text
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScriptStatistics_ScriptStackFrame.
func (in *ScriptStatistics_ScriptStackFrame) DeepCopy() *ScriptStatistics_ScriptStackFrame {
	if in == nil {
		return nil
	}
	out := new(ScriptStatistics_ScriptStackFrame)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchStatistics) DeepCopyInto(out *SearchStatistics) {
	*out = *in
	if in.IndexUsageMode != nil {
		in, out := &in.IndexUsageMode, &out.IndexUsageMode
		*out = new(string)
		**out = **in
	}
	if in.IndexUnusedReasons != nil {
		in, out := &in.IndexUnusedReasons, &out.IndexUnusedReasons
		*out = make([]IndexUnusedReason, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchStatistics.
func (in *SearchStatistics) DeepCopy() *SearchStatistics {
	if in == nil {
		return nil
	}
	out := new(SearchStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SerDeInfo) DeepCopyInto(out *SerDeInfo) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SerializationLibrary != nil {
		in, out := &in.SerializationLibrary, &out.SerializationLibrary
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SerDeInfo.
func (in *SerDeInfo) DeepCopy() *SerDeInfo {
	if in == nil {
		return nil
	}
	out := new(SerDeInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SessionInfo) DeepCopyInto(out *SessionInfo) {
	*out = *in
	if in.SessionID != nil {
		in, out := &in.SessionID, &out.SessionID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SessionInfo.
func (in *SessionInfo) DeepCopy() *SessionInfo {
	if in == nil {
		return nil
	}
	out := new(SessionInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SnapshotDefinition) DeepCopyInto(out *SnapshotDefinition) {
	*out = *in
	if in.BaseTableReference != nil {
		in, out := &in.BaseTableReference, &out.BaseTableReference
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.SnapshotTime != nil {
		in, out := &in.SnapshotTime, &out.SnapshotTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SnapshotDefinition.
func (in *SnapshotDefinition) DeepCopy() *SnapshotDefinition {
	if in == nil {
		return nil
	}
	out := new(SnapshotDefinition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkOptions) DeepCopyInto(out *SparkOptions) {
	*out = *in
	if in.Connection != nil {
		in, out := &in.Connection, &out.Connection
		*out = new(string)
		**out = **in
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ContainerImage != nil {
		in, out := &in.ContainerImage, &out.ContainerImage
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MainFileUri != nil {
		in, out := &in.MainFileUri, &out.MainFileUri
		*out = new(string)
		**out = **in
	}
	if in.PyFileUris != nil {
		in, out := &in.PyFileUris, &out.PyFileUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.JarUris != nil {
		in, out := &in.JarUris, &out.JarUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.FileUris != nil {
		in, out := &in.FileUris, &out.FileUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ArchiveUris != nil {
		in, out := &in.ArchiveUris, &out.ArchiveUris
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MainClass != nil {
		in, out := &in.MainClass, &out.MainClass
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkOptions.
func (in *SparkOptions) DeepCopy() *SparkOptions {
	if in == nil {
		return nil
	}
	out := new(SparkOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkStatistics) DeepCopyInto(out *SparkStatistics) {
	*out = *in
	if in.SparkJobID != nil {
		in, out := &in.SparkJobID, &out.SparkJobID
		*out = new(string)
		**out = **in
	}
	if in.SparkJobLocation != nil {
		in, out := &in.SparkJobLocation, &out.SparkJobLocation
		*out = new(string)
		**out = **in
	}
	if in.Endpoints != nil {
		in, out := &in.Endpoints, &out.Endpoints
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.LoggingInfo != nil {
		in, out := &in.LoggingInfo, &out.LoggingInfo
		*out = new(SparkStatistics_LoggingInfo)
		(*in).DeepCopyInto(*out)
	}
	if in.KmsKeyName != nil {
		in, out := &in.KmsKeyName, &out.KmsKeyName
		*out = new(string)
		**out = **in
	}
	if in.GcsStagingBucket != nil {
		in, out := &in.GcsStagingBucket, &out.GcsStagingBucket
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkStatistics.
func (in *SparkStatistics) DeepCopy() *SparkStatistics {
	if in == nil {
		return nil
	}
	out := new(SparkStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SparkStatistics_LoggingInfo) DeepCopyInto(out *SparkStatistics_LoggingInfo) {
	*out = *in
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SparkStatistics_LoggingInfo.
func (in *SparkStatistics_LoggingInfo) DeepCopy() *SparkStatistics_LoggingInfo {
	if in == nil {
		return nil
	}
	out := new(SparkStatistics_LoggingInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StagePerformanceChangeInsight) DeepCopyInto(out *StagePerformanceChangeInsight) {
	*out = *in
	if in.StageID != nil {
		in, out := &in.StageID, &out.StageID
		*out = new(int64)
		**out = **in
	}
	if in.InputDataChange != nil {
		in, out := &in.InputDataChange, &out.InputDataChange
		*out = new(InputDataChange)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StagePerformanceChangeInsight.
func (in *StagePerformanceChangeInsight) DeepCopy() *StagePerformanceChangeInsight {
	if in == nil {
		return nil
	}
	out := new(StagePerformanceChangeInsight)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StagePerformanceStandaloneInsight) DeepCopyInto(out *StagePerformanceStandaloneInsight) {
	*out = *in
	if in.StageID != nil {
		in, out := &in.StageID, &out.StageID
		*out = new(int64)
		**out = **in
	}
	if in.SlotContention != nil {
		in, out := &in.SlotContention, &out.SlotContention
		*out = new(bool)
		**out = **in
	}
	if in.InsufficientShuffleQuota != nil {
		in, out := &in.InsufficientShuffleQuota, &out.InsufficientShuffleQuota
		*out = new(bool)
		**out = **in
	}
	if in.BiEngineReasons != nil {
		in, out := &in.BiEngineReasons, &out.BiEngineReasons
		*out = make([]BiEngineReason, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HighCardinalityJoins != nil {
		in, out := &in.HighCardinalityJoins, &out.HighCardinalityJoins
		*out = make([]HighCardinalityJoin, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PartitionSkew != nil {
		in, out := &in.PartitionSkew, &out.PartitionSkew
		*out = new(PartitionSkew)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StagePerformanceStandaloneInsight.
func (in *StagePerformanceStandaloneInsight) DeepCopy() *StagePerformanceStandaloneInsight {
	if in == nil {
		return nil
	}
	out := new(StagePerformanceStandaloneInsight)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandardSqlDataType) DeepCopyInto(out *StandardSqlDataType) {
	*out = *in
	if in.TypeKind != nil {
		in, out := &in.TypeKind, &out.TypeKind
		*out = new(string)
		**out = **in
	}
	if in.ArrayElementType != nil {
		in, out := &in.ArrayElementType, &out.ArrayElementType
		*out = new(StandardSqlDataType)
		(*in).DeepCopyInto(*out)
	}
	if in.StructType != nil {
		in, out := &in.StructType, &out.StructType
		*out = new(StandardSqlStructType)
		(*in).DeepCopyInto(*out)
	}
	if in.RangeElementType != nil {
		in, out := &in.RangeElementType, &out.RangeElementType
		*out = new(StandardSqlDataType)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandardSqlDataType.
func (in *StandardSqlDataType) DeepCopy() *StandardSqlDataType {
	if in == nil {
		return nil
	}
	out := new(StandardSqlDataType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandardSqlField) DeepCopyInto(out *StandardSqlField) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(StandardSqlDataType)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandardSqlField.
func (in *StandardSqlField) DeepCopy() *StandardSqlField {
	if in == nil {
		return nil
	}
	out := new(StandardSqlField)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandardSqlStructType) DeepCopyInto(out *StandardSqlStructType) {
	*out = *in
	if in.Fields != nil {
		in, out := &in.Fields, &out.Fields
		*out = make([]StandardSqlField, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandardSqlStructType.
func (in *StandardSqlStructType) DeepCopy() *StandardSqlStructType {
	if in == nil {
		return nil
	}
	out := new(StandardSqlStructType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StandardSqlTableType) DeepCopyInto(out *StandardSqlTableType) {
	*out = *in
	if in.Columns != nil {
		in, out := &in.Columns, &out.Columns
		*out = make([]StandardSqlField, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StandardSqlTableType.
func (in *StandardSqlTableType) DeepCopy() *StandardSqlTableType {
	if in == nil {
		return nil
	}
	out := new(StandardSqlTableType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageDescriptor) DeepCopyInto(out *StorageDescriptor) {
	*out = *in
	if in.LocationUri != nil {
		in, out := &in.LocationUri, &out.LocationUri
		*out = new(string)
		**out = **in
	}
	if in.InputFormat != nil {
		in, out := &in.InputFormat, &out.InputFormat
		*out = new(string)
		**out = **in
	}
	if in.OutputFormat != nil {
		in, out := &in.OutputFormat, &out.OutputFormat
		*out = new(string)
		**out = **in
	}
	if in.SerdeInfo != nil {
		in, out := &in.SerdeInfo, &out.SerdeInfo
		*out = new(SerDeInfo)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageDescriptor.
func (in *StorageDescriptor) DeepCopy() *StorageDescriptor {
	if in == nil {
		return nil
	}
	out := new(StorageDescriptor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Streamingbuffer) DeepCopyInto(out *Streamingbuffer) {
	*out = *in
	if in.EstimatedBytes != nil {
		in, out := &in.EstimatedBytes, &out.EstimatedBytes
		*out = new(uint64)
		**out = **in
	}
	if in.EstimatedRows != nil {
		in, out := &in.EstimatedRows, &out.EstimatedRows
		*out = new(uint64)
		**out = **in
	}
	if in.OldestEntryTime != nil {
		in, out := &in.OldestEntryTime, &out.OldestEntryTime
		*out = new(uint64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Streamingbuffer.
func (in *Streamingbuffer) DeepCopy() *Streamingbuffer {
	if in == nil {
		return nil
	}
	out := new(Streamingbuffer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemVariables) DeepCopyInto(out *SystemVariables) {
	*out = *in
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = new(google_protobuf_Struct)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemVariables.
func (in *SystemVariables) DeepCopy() *SystemVariables {
	if in == nil {
		return nil
	}
	out := new(SystemVariables)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Table) DeepCopyInto(out *Table) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.SelfLink != nil {
		in, out := &in.SelfLink, &out.SelfLink
		*out = new(string)
		**out = **in
	}
	if in.TableReference != nil {
		in, out := &in.TableReference, &out.TableReference
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.FriendlyName != nil {
		in, out := &in.FriendlyName, &out.FriendlyName
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(TableSchema)
		(*in).DeepCopyInto(*out)
	}
	if in.TimePartitioning != nil {
		in, out := &in.TimePartitioning, &out.TimePartitioning
		*out = new(TimePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.RangePartitioning != nil {
		in, out := &in.RangePartitioning, &out.RangePartitioning
		*out = new(RangePartitioning)
		(*in).DeepCopyInto(*out)
	}
	if in.Clustering != nil {
		in, out := &in.Clustering, &out.Clustering
		*out = new(Clustering)
		(*in).DeepCopyInto(*out)
	}
	if in.RequirePartitionFilter != nil {
		in, out := &in.RequirePartitionFilter, &out.RequirePartitionFilter
		*out = new(bool)
		**out = **in
	}
	if in.PartitionDefinition != nil {
		in, out := &in.PartitionDefinition, &out.PartitionDefinition
		*out = new(PartitioningDefinition)
		(*in).DeepCopyInto(*out)
	}
	if in.NumBytes != nil {
		in, out := &in.NumBytes, &out.NumBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumPhysicalBytes != nil {
		in, out := &in.NumPhysicalBytes, &out.NumPhysicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumLongTermBytes != nil {
		in, out := &in.NumLongTermBytes, &out.NumLongTermBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumRows != nil {
		in, out := &in.NumRows, &out.NumRows
		*out = new(uint64)
		**out = **in
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(int64)
		**out = **in
	}
	if in.ExpirationTime != nil {
		in, out := &in.ExpirationTime, &out.ExpirationTime
		*out = new(int64)
		**out = **in
	}
	if in.LastModifiedTime != nil {
		in, out := &in.LastModifiedTime, &out.LastModifiedTime
		*out = new(uint64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.View != nil {
		in, out := &in.View, &out.View
		*out = new(ViewDefinition)
		(*in).DeepCopyInto(*out)
	}
	if in.MaterializedView != nil {
		in, out := &in.MaterializedView, &out.MaterializedView
		*out = new(MaterializedViewDefinition)
		(*in).DeepCopyInto(*out)
	}
	if in.MaterializedViewStatus != nil {
		in, out := &in.MaterializedViewStatus, &out.MaterializedViewStatus
		*out = new(MaterializedViewStatus)
		(*in).DeepCopyInto(*out)
	}
	if in.ExternalDataConfiguration != nil {
		in, out := &in.ExternalDataConfiguration, &out.ExternalDataConfiguration
		*out = new(ExternalDataConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.BiglakeConfiguration != nil {
		in, out := &in.BiglakeConfiguration, &out.BiglakeConfiguration
		*out = new(BigLakeConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		*out = new(string)
		**out = **in
	}
	if in.StreamingBuffer != nil {
		in, out := &in.StreamingBuffer, &out.StreamingBuffer
		*out = new(Streamingbuffer)
		(*in).DeepCopyInto(*out)
	}
	if in.EncryptionConfiguration != nil {
		in, out := &in.EncryptionConfiguration, &out.EncryptionConfiguration
		*out = new(EncryptionConfiguration)
		(*in).DeepCopyInto(*out)
	}
	if in.SnapshotDefinition != nil {
		in, out := &in.SnapshotDefinition, &out.SnapshotDefinition
		*out = new(SnapshotDefinition)
		(*in).DeepCopyInto(*out)
	}
	if in.DefaultCollation != nil {
		in, out := &in.DefaultCollation, &out.DefaultCollation
		*out = new(string)
		**out = **in
	}
	if in.DefaultRoundingMode != nil {
		in, out := &in.DefaultRoundingMode, &out.DefaultRoundingMode
		*out = new(string)
		**out = **in
	}
	if in.CloneDefinition != nil {
		in, out := &in.CloneDefinition, &out.CloneDefinition
		*out = new(CloneDefinition)
		(*in).DeepCopyInto(*out)
	}
	if in.NumTimeTravelPhysicalBytes != nil {
		in, out := &in.NumTimeTravelPhysicalBytes, &out.NumTimeTravelPhysicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumTotalLogicalBytes != nil {
		in, out := &in.NumTotalLogicalBytes, &out.NumTotalLogicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumActiveLogicalBytes != nil {
		in, out := &in.NumActiveLogicalBytes, &out.NumActiveLogicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumLongTermLogicalBytes != nil {
		in, out := &in.NumLongTermLogicalBytes, &out.NumLongTermLogicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumCurrentPhysicalBytes != nil {
		in, out := &in.NumCurrentPhysicalBytes, &out.NumCurrentPhysicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumTotalPhysicalBytes != nil {
		in, out := &in.NumTotalPhysicalBytes, &out.NumTotalPhysicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumActivePhysicalBytes != nil {
		in, out := &in.NumActivePhysicalBytes, &out.NumActivePhysicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumLongTermPhysicalBytes != nil {
		in, out := &in.NumLongTermPhysicalBytes, &out.NumLongTermPhysicalBytes
		*out = new(int64)
		**out = **in
	}
	if in.NumPartitions != nil {
		in, out := &in.NumPartitions, &out.NumPartitions
		*out = new(int64)
		**out = **in
	}
	if in.MaxStaleness != nil {
		in, out := &in.MaxStaleness, &out.MaxStaleness
		*out = new(string)
		**out = **in
	}
	if in.Restrictions != nil {
		in, out := &in.Restrictions, &out.Restrictions
		*out = new(RestrictionConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.TableConstraints != nil {
		in, out := &in.TableConstraints, &out.TableConstraints
		*out = new(TableConstraints)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceTags != nil {
		in, out := &in.ResourceTags, &out.ResourceTags
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.TableReplicationInfo != nil {
		in, out := &in.TableReplicationInfo, &out.TableReplicationInfo
		*out = new(TableReplicationInfo)
		(*in).DeepCopyInto(*out)
	}
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = make([]TableReference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ExternalCatalogTableOptions != nil {
		in, out := &in.ExternalCatalogTableOptions, &out.ExternalCatalogTableOptions
		*out = new(ExternalCatalogTableOptions)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Table.
func (in *Table) DeepCopy() *Table {
	if in == nil {
		return nil
	}
	out := new(Table)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableConstraints) DeepCopyInto(out *TableConstraints) {
	*out = *in
	if in.PrimaryKey != nil {
		in, out := &in.PrimaryKey, &out.PrimaryKey
		*out = new(PrimaryKey)
		(*in).DeepCopyInto(*out)
	}
	if in.ForeignKeys != nil {
		in, out := &in.ForeignKeys, &out.ForeignKeys
		*out = make([]ForeignKey, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableConstraints.
func (in *TableConstraints) DeepCopy() *TableConstraints {
	if in == nil {
		return nil
	}
	out := new(TableConstraints)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableFieldSchema) DeepCopyInto(out *TableFieldSchema) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.Fields != nil {
		in, out := &in.Fields, &out.Fields
		*out = make([]TableFieldSchema, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.PolicyTags != nil {
		in, out := &in.PolicyTags, &out.PolicyTags
		*out = new(TableFieldSchema_PolicyTagList)
		(*in).DeepCopyInto(*out)
	}
	if in.DataPolicies != nil {
		in, out := &in.DataPolicies, &out.DataPolicies
		*out = make([]DataPolicyOption, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaxLength != nil {
		in, out := &in.MaxLength, &out.MaxLength
		*out = new(int64)
		**out = **in
	}
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(int64)
		**out = **in
	}
	if in.Scale != nil {
		in, out := &in.Scale, &out.Scale
		*out = new(int64)
		**out = **in
	}
	if in.RoundingMode != nil {
		in, out := &in.RoundingMode, &out.RoundingMode
		*out = new(string)
		**out = **in
	}
	if in.Collation != nil {
		in, out := &in.Collation, &out.Collation
		*out = new(string)
		**out = **in
	}
	if in.DefaultValueExpression != nil {
		in, out := &in.DefaultValueExpression, &out.DefaultValueExpression
		*out = new(string)
		**out = **in
	}
	if in.RangeElementType != nil {
		in, out := &in.RangeElementType, &out.RangeElementType
		*out = new(TableFieldSchema_FieldElementType)
		(*in).DeepCopyInto(*out)
	}
	if in.ForeignTypeDefinition != nil {
		in, out := &in.ForeignTypeDefinition, &out.ForeignTypeDefinition
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableFieldSchema.
func (in *TableFieldSchema) DeepCopy() *TableFieldSchema {
	if in == nil {
		return nil
	}
	out := new(TableFieldSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableFieldSchema_FieldElementType) DeepCopyInto(out *TableFieldSchema_FieldElementType) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableFieldSchema_FieldElementType.
func (in *TableFieldSchema_FieldElementType) DeepCopy() *TableFieldSchema_FieldElementType {
	if in == nil {
		return nil
	}
	out := new(TableFieldSchema_FieldElementType)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableFieldSchema_PolicyTagList) DeepCopyInto(out *TableFieldSchema_PolicyTagList) {
	*out = *in
	if in.Names != nil {
		in, out := &in.Names, &out.Names
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableFieldSchema_PolicyTagList.
func (in *TableFieldSchema_PolicyTagList) DeepCopy() *TableFieldSchema_PolicyTagList {
	if in == nil {
		return nil
	}
	out := new(TableFieldSchema_PolicyTagList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableList) DeepCopyInto(out *TableList) {
	*out = *in
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.NextPageToken != nil {
		in, out := &in.NextPageToken, &out.NextPageToken
		*out = new(string)
		**out = **in
	}
	if in.Tables != nil {
		in, out := &in.Tables, &out.Tables
		*out = make([]ListFormatTable, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TotalItems != nil {
		in, out := &in.TotalItems, &out.TotalItems
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableList.
func (in *TableList) DeepCopy() *TableList {
	if in == nil {
		return nil
	}
	out := new(TableList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableMetadataCacheUsage) DeepCopyInto(out *TableMetadataCacheUsage) {
	*out = *in
	if in.TableReference != nil {
		in, out := &in.TableReference, &out.TableReference
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.UnusedReason != nil {
		in, out := &in.UnusedReason, &out.UnusedReason
		*out = new(string)
		**out = **in
	}
	if in.Explanation != nil {
		in, out := &in.Explanation, &out.Explanation
		*out = new(string)
		**out = **in
	}
	if in.Staleness != nil {
		in, out := &in.Staleness, &out.Staleness
		*out = new(string)
		**out = **in
	}
	if in.TableType != nil {
		in, out := &in.TableType, &out.TableType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableMetadataCacheUsage.
func (in *TableMetadataCacheUsage) DeepCopy() *TableMetadataCacheUsage {
	if in == nil {
		return nil
	}
	out := new(TableMetadataCacheUsage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableReference) DeepCopyInto(out *TableReference) {
	*out = *in
	if in.ProjectId != nil {
		in, out := &in.ProjectId, &out.ProjectId
		*out = new(string)
		**out = **in
	}
	if in.DatasetId != nil {
		in, out := &in.DatasetId, &out.DatasetId
		*out = new(string)
		**out = **in
	}
	if in.TableId != nil {
		in, out := &in.TableId, &out.TableId
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableReference.
func (in *TableReference) DeepCopy() *TableReference {
	if in == nil {
		return nil
	}
	out := new(TableReference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableReplicationInfo) DeepCopyInto(out *TableReplicationInfo) {
	*out = *in
	if in.SourceTable != nil {
		in, out := &in.SourceTable, &out.SourceTable
		*out = new(TableReference)
		(*in).DeepCopyInto(*out)
	}
	if in.ReplicationIntervalMs != nil {
		in, out := &in.ReplicationIntervalMs, &out.ReplicationIntervalMs
		*out = new(int64)
		**out = **in
	}
	if in.ReplicatedSourceLastRefreshTime != nil {
		in, out := &in.ReplicatedSourceLastRefreshTime, &out.ReplicatedSourceLastRefreshTime
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationStatus != nil {
		in, out := &in.ReplicationStatus, &out.ReplicationStatus
		*out = new(string)
		**out = **in
	}
	if in.ReplicationError != nil {
		in, out := &in.ReplicationError, &out.ReplicationError
		*out = new(ErrorProto)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableReplicationInfo.
func (in *TableReplicationInfo) DeepCopy() *TableReplicationInfo {
	if in == nil {
		return nil
	}
	out := new(TableReplicationInfo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TableSchema) DeepCopyInto(out *TableSchema) {
	*out = *in
	if in.Fields != nil {
		in, out := &in.Fields, &out.Fields
		*out = make([]TableFieldSchema, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ForeignTypeInfo != nil {
		in, out := &in.ForeignTypeInfo, &out.ForeignTypeInfo
		*out = new(ForeignTypeInfo)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TableSchema.
func (in *TableSchema) DeepCopy() *TableSchema {
	if in == nil {
		return nil
	}
	out := new(TableSchema)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TimePartitioning) DeepCopyInto(out *TimePartitioning) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ExpirationMs != nil {
		in, out := &in.ExpirationMs, &out.ExpirationMs
		*out = new(int64)
		**out = **in
	}
	if in.Field != nil {
		in, out := &in.Field, &out.Field
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TimePartitioning.
func (in *TimePartitioning) DeepCopy() *TimePartitioning {
	if in == nil {
		return nil
	}
	out := new(TimePartitioning)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransformColumn) DeepCopyInto(out *TransformColumn) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(StandardSqlDataType)
		(*in).DeepCopyInto(*out)
	}
	if in.TransformSql != nil {
		in, out := &in.TransformSql, &out.TransformSql
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransformColumn.
func (in *TransformColumn) DeepCopy() *TransformColumn {
	if in == nil {
		return nil
	}
	out := new(TransformColumn)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserDefinedFunctionResource) DeepCopyInto(out *UserDefinedFunctionResource) {
	*out = *in
	if in.ResourceUri != nil {
		in, out := &in.ResourceUri, &out.ResourceUri
		*out = new(string)
		**out = **in
	}
	if in.InlineCode != nil {
		in, out := &in.InlineCode, &out.InlineCode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserDefinedFunctionResource.
func (in *UserDefinedFunctionResource) DeepCopy() *UserDefinedFunctionResource {
	if in == nil {
		return nil
	}
	out := new(UserDefinedFunctionResource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VectorSearchStatistics) DeepCopyInto(out *VectorSearchStatistics) {
	*out = *in
	if in.IndexUsageMode != nil {
		in, out := &in.IndexUsageMode, &out.IndexUsageMode
		*out = new(string)
		**out = **in
	}
	if in.IndexUnusedReasons != nil {
		in, out := &in.IndexUnusedReasons, &out.IndexUnusedReasons
		*out = make([]IndexUnusedReason, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VectorSearchStatistics.
func (in *VectorSearchStatistics) DeepCopy() *VectorSearchStatistics {
	if in == nil {
		return nil
	}
	out := new(VectorSearchStatistics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ViewDefinition) DeepCopyInto(out *ViewDefinition) {
	*out = *in
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.UserDefinedFunctionResources != nil {
		in, out := &in.UserDefinedFunctionResources, &out.UserDefinedFunctionResources
		*out = make([]UserDefinedFunctionResource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UseLegacySql != nil {
		in, out := &in.UseLegacySql, &out.UseLegacySql
		*out = new(bool)
		**out = **in
	}
	if in.UseExplicitColumnNames != nil {
		in, out := &in.UseExplicitColumnNames, &out.UseExplicitColumnNames
		*out = new(bool)
		**out = **in
	}
	if in.PrivacyPolicy != nil {
		in, out := &in.PrivacyPolicy, &out.PrivacyPolicy
		*out = new(PrivacyPolicy)
		(*in).DeepCopyInto(*out)
	}
	if in.ForeignDefinitions != nil {
		in, out := &in.ForeignDefinitions, &out.ForeignDefinitions
		*out = make([]ForeignViewDefinition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ViewDefinition.
func (in *ViewDefinition) DeepCopy() *ViewDefinition {
	if in == nil {
		return nil
	}
	out := new(ViewDefinition)
	in.DeepCopyInto(out)
	return out
}
