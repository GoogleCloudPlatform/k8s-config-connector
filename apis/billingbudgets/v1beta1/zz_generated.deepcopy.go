//go:build !ignore_autogenerated

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/apis/billing/v1alpha1"
	monitoringv1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/apis/monitoring/v1beta1"
	pubsubv1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/apis/pubsub/v1beta1"
	refsv1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/apis/refs/v1beta1"
	k8sv1alpha1 "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AllUpdatesRule) DeepCopyInto(out *AllUpdatesRule) {
	*out = *in
	if in.PubsubTopicRef != nil {
		in, out := &in.PubsubTopicRef, &out.PubsubTopicRef
		*out = new(pubsubv1beta1.PubSubTopicRef)
		**out = **in
	}
	if in.SchemaVersion != nil {
		in, out := &in.SchemaVersion, &out.SchemaVersion
		*out = new(string)
		**out = **in
	}
	if in.MonitoringNotificationChannelRefs != nil {
		in, out := &in.MonitoringNotificationChannelRefs, &out.MonitoringNotificationChannelRefs
		*out = make([]*monitoringv1beta1.NotificationChannelRef, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(monitoringv1beta1.NotificationChannelRef)
				**out = **in
			}
		}
	}
	if in.DisableDefaultIAMRecipients != nil {
		in, out := &in.DisableDefaultIAMRecipients, &out.DisableDefaultIAMRecipients
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AllUpdatesRule.
func (in *AllUpdatesRule) DeepCopy() *AllUpdatesRule {
	if in == nil {
		return nil
	}
	out := new(AllUpdatesRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BillingBudgetsBudget) DeepCopyInto(out *BillingBudgetsBudget) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BillingBudgetsBudget.
func (in *BillingBudgetsBudget) DeepCopy() *BillingBudgetsBudget {
	if in == nil {
		return nil
	}
	out := new(BillingBudgetsBudget)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BillingBudgetsBudget) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BillingBudgetsBudgetList) DeepCopyInto(out *BillingBudgetsBudgetList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BillingBudgetsBudget, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BillingBudgetsBudgetList.
func (in *BillingBudgetsBudgetList) DeepCopy() *BillingBudgetsBudgetList {
	if in == nil {
		return nil
	}
	out := new(BillingBudgetsBudgetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BillingBudgetsBudgetList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BillingBudgetsBudgetObservedState) DeepCopyInto(out *BillingBudgetsBudgetObservedState) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BillingBudgetsBudgetObservedState.
func (in *BillingBudgetsBudgetObservedState) DeepCopy() *BillingBudgetsBudgetObservedState {
	if in == nil {
		return nil
	}
	out := new(BillingBudgetsBudgetObservedState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BillingBudgetsBudgetSpec) DeepCopyInto(out *BillingBudgetsBudgetSpec) {
	*out = *in
	if in.BillingAccountRef != nil {
		in, out := &in.BillingAccountRef, &out.BillingAccountRef
		*out = new(v1alpha1.BillingAccountRef)
		**out = **in
	}
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.BudgetFilter != nil {
		in, out := &in.BudgetFilter, &out.BudgetFilter
		*out = new(Filter)
		(*in).DeepCopyInto(*out)
	}
	if in.Amount != nil {
		in, out := &in.Amount, &out.Amount
		*out = new(BudgetAmount)
		(*in).DeepCopyInto(*out)
	}
	if in.ThresholdRules != nil {
		in, out := &in.ThresholdRules, &out.ThresholdRules
		*out = make([]*ThresholdRule, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(ThresholdRule)
				(*in).DeepCopyInto(*out)
			}
		}
	}
	if in.AllUpdatesRule != nil {
		in, out := &in.AllUpdatesRule, &out.AllUpdatesRule
		*out = new(AllUpdatesRule)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BillingBudgetsBudgetSpec.
func (in *BillingBudgetsBudgetSpec) DeepCopy() *BillingBudgetsBudgetSpec {
	if in == nil {
		return nil
	}
	out := new(BillingBudgetsBudgetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BillingBudgetsBudgetStatus) DeepCopyInto(out *BillingBudgetsBudgetStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]k8sv1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	if in.Etag != nil {
		in, out := &in.Etag, &out.Etag
		*out = new(string)
		**out = **in
	}
	if in.ExternalRef != nil {
		in, out := &in.ExternalRef, &out.ExternalRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BillingBudgetsBudgetStatus.
func (in *BillingBudgetsBudgetStatus) DeepCopy() *BillingBudgetsBudgetStatus {
	if in == nil {
		return nil
	}
	out := new(BillingBudgetsBudgetStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BudgetAmount) DeepCopyInto(out *BudgetAmount) {
	*out = *in
	if in.SpecifiedAmount != nil {
		in, out := &in.SpecifiedAmount, &out.SpecifiedAmount
		*out = new(Money)
		(*in).DeepCopyInto(*out)
	}
	if in.LastPeriodAmount != nil {
		in, out := &in.LastPeriodAmount, &out.LastPeriodAmount
		*out = new(LastPeriodAmount)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BudgetAmount.
func (in *BudgetAmount) DeepCopy() *BudgetAmount {
	if in == nil {
		return nil
	}
	out := new(BudgetAmount)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomPeriod) DeepCopyInto(out *CustomPeriod) {
	*out = *in
	if in.StartDate != nil {
		in, out := &in.StartDate, &out.StartDate
		*out = new(Date)
		(*in).DeepCopyInto(*out)
	}
	if in.EndDate != nil {
		in, out := &in.EndDate, &out.EndDate
		*out = new(Date)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomPeriod.
func (in *CustomPeriod) DeepCopy() *CustomPeriod {
	if in == nil {
		return nil
	}
	out := new(CustomPeriod)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Date) DeepCopyInto(out *Date) {
	*out = *in
	if in.Year != nil {
		in, out := &in.Year, &out.Year
		*out = new(int32)
		**out = **in
	}
	if in.Month != nil {
		in, out := &in.Month, &out.Month
		*out = new(int32)
		**out = **in
	}
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Date.
func (in *Date) DeepCopy() *Date {
	if in == nil {
		return nil
	}
	out := new(Date)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Filter) DeepCopyInto(out *Filter) {
	*out = *in
	if in.ProjectRefs != nil {
		in, out := &in.ProjectRefs, &out.ProjectRefs
		*out = make([]*refsv1beta1.ProjectRef, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(refsv1beta1.ProjectRef)
				**out = **in
			}
		}
	}
	if in.CreditTypes != nil {
		in, out := &in.CreditTypes, &out.CreditTypes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CreditTypesTreatment != nil {
		in, out := &in.CreditTypesTreatment, &out.CreditTypesTreatment
		*out = new(string)
		**out = **in
	}
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Subaccounts != nil {
		in, out := &in.Subaccounts, &out.Subaccounts
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.CalendarPeriod != nil {
		in, out := &in.CalendarPeriod, &out.CalendarPeriod
		*out = new(string)
		**out = **in
	}
	if in.CustomPeriod != nil {
		in, out := &in.CustomPeriod, &out.CustomPeriod
		*out = new(CustomPeriod)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Filter.
func (in *Filter) DeepCopy() *Filter {
	if in == nil {
		return nil
	}
	out := new(Filter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LastPeriodAmount) DeepCopyInto(out *LastPeriodAmount) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LastPeriodAmount.
func (in *LastPeriodAmount) DeepCopy() *LastPeriodAmount {
	if in == nil {
		return nil
	}
	out := new(LastPeriodAmount)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListValue) DeepCopyInto(out *ListValue) {
	*out = *in
	if in.Values != nil {
		in, out := &in.Values, &out.Values
		*out = make([]Value, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListValue.
func (in *ListValue) DeepCopy() *ListValue {
	if in == nil {
		return nil
	}
	out := new(ListValue)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Money) DeepCopyInto(out *Money) {
	*out = *in
	if in.CurrencyCode != nil {
		in, out := &in.CurrencyCode, &out.CurrencyCode
		*out = new(string)
		**out = **in
	}
	if in.Units != nil {
		in, out := &in.Units, &out.Units
		*out = new(int64)
		**out = **in
	}
	if in.Nanos != nil {
		in, out := &in.Nanos, &out.Nanos
		*out = new(int32)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Money.
func (in *Money) DeepCopy() *Money {
	if in == nil {
		return nil
	}
	out := new(Money)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThresholdRule) DeepCopyInto(out *ThresholdRule) {
	*out = *in
	if in.ThresholdPercent != nil {
		in, out := &in.ThresholdPercent, &out.ThresholdPercent
		*out = new(float64)
		**out = **in
	}
	if in.SpendBasis != nil {
		in, out := &in.SpendBasis, &out.SpendBasis
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThresholdRule.
func (in *ThresholdRule) DeepCopy() *ThresholdRule {
	if in == nil {
		return nil
	}
	out := new(ThresholdRule)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Value) DeepCopyInto(out *Value) {
	*out = *in
	if in.NullValue != nil {
		in, out := &in.NullValue, &out.NullValue
		*out = new(string)
		**out = **in
	}
	if in.NumberValue != nil {
		in, out := &in.NumberValue, &out.NumberValue
		*out = new(float64)
		**out = **in
	}
	if in.StringValue != nil {
		in, out := &in.StringValue, &out.StringValue
		*out = new(string)
		**out = **in
	}
	if in.BoolValue != nil {
		in, out := &in.BoolValue, &out.BoolValue
		*out = new(bool)
		**out = **in
	}
	if in.StructValue != nil {
		in, out := &in.StructValue, &out.StructValue
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ListValue != nil {
		in, out := &in.ListValue, &out.ListValue
		*out = new(ListValue)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Value.
func (in *Value) DeepCopy() *Value {
	if in == nil {
		return nil
	}
	out := new(Value)
	in.DeepCopyInto(out)
	return out
}
