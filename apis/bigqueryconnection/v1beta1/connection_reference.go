// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1beta1

import (
	"context"
	"fmt"
	"strings"

	"github.com/GoogleCloudPlatform/k8s-config-connector/apis/common"
	refsv1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/apis/refs/v1beta1"
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/k8s"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// NewBigQueryConnectionConnectionRef builds a BigQueryConnectionConnectionRef from the ConfigConnector BigQueryConnectionConnection object.
func NewBigQueryConnectionConnectionRef(ctx context.Context, reader client.Reader, obj *BigQueryConnectionConnection) (*BigQueryConnectionConnectionRef, error) {
	id := &BigQueryConnectionConnectionRef{}

	projectRef, err := refsv1beta1.ResolveProject(ctx, reader, obj.Namespace, obj.Spec.ProjectRef)
	if err != nil {
		return nil, err
	}
	projectID := projectRef.ProjectID
	if projectID == "" {
		return nil, fmt.Errorf("cannot resolve project")
	}
	// Get location
	location := obj.Spec.Location

	// Get desired connection ID from spec
	desiredID := common.ValueOf(obj.Spec.ResourceID)

	// Validate status.externalRef
	externalRef := common.ValueOf(obj.Status.ExternalRef)
	if externalRef != "" {
		actualProject, actualLocation, actualID, err := parseExternal(externalRef)
		if err != nil {
			return nil, err
		}
		// Validate spec parent and resourceID field if the resource is already reconcilied with a GCP Connection resource.
		if projectID != actualProject {
			return nil, fmt.Errorf("spec.projectRef changed, expect %s, got %s", projectID, actualProject)
		}
		if location != actualLocation {
			return nil, fmt.Errorf("spec.location changed, expect %s, got %s", location, actualLocation)
		}
		if desiredID != "" && desiredID != actualID {
			// Connection ID shall not be reset in the same BigQueryConnectionConnection.
			// TODO: what if multiple BigQueryConnectionConnection points to the same GCP Connection?
			return nil, fmt.Errorf("cannot reset `spec.resourceID` to %s, since it has already acquired the Connection %s",
				desiredID, actualID)
		}
		id.External = externalRef
		return id, nil
	}
	id.External = "projects/" + projectID + "/locations/" + location + "/connections/" + desiredID
	return id, nil
}

var _ refsv1beta1.ExternalNormalizer = &BigQueryConnectionConnectionRef{}

// BigQueryConnectionConnectionRef defines the resource reference to BigQueryConnectionConnection, which "External" field
// holds the GCP identifier for the KRM object.
type BigQueryConnectionConnectionRef struct {
	// A reference to an externally managed BigQueryConnectionConnection resource.
	// Should be in the format `projects/{{projectID}}/locations/{{location}}/connections/{{connectionID}}`.
	External string `json:"external,omitempty"`

	// The `name` of a `BigQueryConnectionConnection` resource.
	Name string `json:"name,omitempty"`
	// The `namespace` of a `BigQueryConnectionConnection` resource.
	Namespace string `json:"namespace,omitempty"`
}

func parseExternal(external string) (string, string, string, error) {
	tokens := strings.Split(external, "/")
	if len(tokens) != 6 || tokens[0] != "projects" || tokens[2] != "locations" || tokens[4] != "connections" {
		return "", "", "", fmt.Errorf("external should be projects/{{project}}/locations/{{location}}/connections/{{Connection}}, got %s", external)
	}
	return tokens[1], tokens[3], tokens[5], nil
}

func (r *BigQueryConnectionConnectionRef) Parent() (string, error) {
	if r.External != "" {
		r.External = strings.TrimPrefix(r.External, "/")
		project, location, _, err := parseExternal(r.External)
		if err != nil {
			return "", err
		}
		return "projects/" + project + "/locations/" + location, nil
	}
	return "", fmt.Errorf("BigQueryConnectionConnectionRef not normalized to External form or not created from `New()`")
}

// ConnectionID returns the connection ID, a boolean indicating whether the connection ID is specified by user (or generated by service), and an error.
func (r *BigQueryConnectionConnectionRef) ConnectionID() (string, bool, error) {
	if r.External != "" {
		_, _, id, err := parseExternal(r.External)
		if err != nil {
			return "", false, err
		}
		return id, id != "", nil
	}
	return "", false, fmt.Errorf("BigQueryConnectionConnectionRef not normalized to External form or not created from `New()`")
}

// NormalizedExternal provision the "External" value.
// If the "External" comes from the ConfigConnector object, it has to acquire or reconcile with the GCP resource already.
func (r *BigQueryConnectionConnectionRef) NormalizedExternal(ctx context.Context, reader client.Reader, othernamespace string) (string, error) {
	if r.External != "" && r.Name != "" {
		return "", fmt.Errorf("cannot specify both name and external on %s reference", BigQueryConnectionConnectionGVK.Kind)
	}
	if r.External != "" {
		r.External = strings.TrimPrefix(r.External, "/")
		tokens := strings.Split(r.External, "/")
		if len(tokens) != 6 || tokens[0] != "projects" || tokens[2] != "locations" || tokens[4] != "connections" {
			return "", fmt.Errorf("format of BigQueryConnectionConnection external=%q was not known (use projects/{{projectId}}/locations/{{location}}/connections/{{connectionID}})", r.External)
		}
		return r.External, nil
	}
	key := types.NamespacedName{Name: r.Name, Namespace: r.Namespace}
	u := &unstructured.Unstructured{}
	u.SetGroupVersionKind(BigQueryConnectionConnectionGVK)
	if err := reader.Get(ctx, key, u); err != nil {
		if apierrors.IsNotFound(err) {
			return "", k8s.NewReferenceNotFoundError(u.GroupVersionKind(), key)
		}
		return "", fmt.Errorf("reading referenced %s %s: %w", BigQueryConnectionConnectionGVK, key, err)
	}
	// Get external from status.externalRef. This is the most trustworthy place.
	actualExternalRef, _, err := unstructured.NestedString(u.Object, "status", "externalRef")
	if err != nil {
		return "", fmt.Errorf("reading status.externalRef: %w", err)
	}
	if actualExternalRef == "" {
		return "", fmt.Errorf("BigQueryConnectionConnection is not ready yet")
	}
	r.External = actualExternalRef
	return r.External, nil
}

// BigQueryConnectionServiceAccountRef specifies a reference to a service account generated by the BigQueryConnectionConnection resource.
// Supported connection types are: cloudSQL, spark, and cloudResource.
type BigQueryConnectionServiceAccountRef struct {
	Namespace string `json:"namespace,omitempty"`
	Name      string `json:"name"`
	// Type field specifies the connection type of the BigQueryConnectionConnection resource, whose service account is to be bound to the role.
	// +kubebuilder:validation:Enum=spark;cloudSQL;cloudResource
	Type string `json:"type"`
}

// ResolveServiceAccountID resolves the service account ID from a BigQueryConnection resource reference.
// Supported connection types are: cloudSQL, spark, and cloudResource.
// This function extracts the service account ID from the referenced BigQueryConnection resource based on the connection type.
//
// Input parameters:
//   - namespace: Default namespace to use if not specified in the reference. This is usually the namespace of the resource referencing the BigQueryConnection
//   - ref: Reference to the BigQueryConnection (Name, Namespace, Type)
func ResolveServiceAccountID(ctx context.Context, reader client.Reader, namespace string, ref *BigQueryConnectionServiceAccountRef) (string, error) {
	key := types.NamespacedName{
		Name:      ref.Name,
		Namespace: ref.Namespace,
	}
	if key.Namespace == "" { // use the namespace of the IAM resource if a namespace is not provided in the reference
		key.Namespace = namespace
	}
	u := &unstructured.Unstructured{}
	u.SetGroupVersionKind(BigQueryConnectionConnectionGVK)
	if err := reader.Get(ctx, key, u); err != nil {
		if apierrors.IsNotFound(err) {
			return "", k8s.NewReferenceNotFoundError(u.GroupVersionKind(), key)
		}
		return "", fmt.Errorf("reading referenced %s %s: %w", BigQueryConnectionConnectionGVK, key, err)

	}

	// a map of supported connection types to the corresponding status paths to service acocunt ID
	serviceAccountPaths := map[string][]string{
		"cloudSQL":      {"status", "observedState", "cloudSQL", "serviceAccountID"},
		"spark":         {"status", "observedState", "spark", "serviceAccountID"},
		"cloudResource": {"status", "observedState", "cloudResource", "serviceAccountID"},
	}
	path, supported := serviceAccountPaths[ref.Type]
	if !supported {
		return "", fmt.Errorf("invalid bigqueryconnectionconnectionRef.type '%s'. Supported types are: cloudSQL, spark, cloudResource", ref.Type)
	}

	sa, found, err := unstructured.NestedString(u.Object, path...)
	if err != nil {
		return "", fmt.Errorf("failed to access serviceAccountID field in BigQueryConnection %s/%s: %w", key.Namespace, key.Name, err)
	}
	if !found {
		pathStr := strings.Join(path, ".")
		return "", fmt.Errorf("BigQueryConnection %s is not ready - field '%s' is missing", key.String(), pathStr)
	}

	return sa, nil
}
