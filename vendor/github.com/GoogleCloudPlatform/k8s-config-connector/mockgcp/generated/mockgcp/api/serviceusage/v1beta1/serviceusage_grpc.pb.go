// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/api/serviceusage/v1beta1/serviceusage.proto

package serviceusage

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceUsageClient is the client API for ServiceUsage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceUsageClient interface {
	// Deprecated: Do not use.
	// Enables a service so that it can be used with a project.
	//
	// Operation response type: `google.protobuf.Empty`
	EnableService(ctx context.Context, in *EnableServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deprecated: Do not use.
	// Disables a service so that it can no longer be used with a project.
	// This prevents unintended usage that may cause unexpected billing
	// charges or security leaks.
	//
	// It is not valid to call the disable method on a service that is not
	// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
	// the target service is not currently enabled.
	//
	// Operation response type: `google.protobuf.Empty`
	DisableService(ctx context.Context, in *DisableServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deprecated: Do not use.
	// Returns the service configuration and enabled state for a given service.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error)
	// Deprecated: Do not use.
	// Lists all services available to the specified project, and the current
	// state of those services with respect to the project. The list includes
	// all public services, all services for which the calling user has the
	// `servicemanagement.services.bind` permission, and all services that have
	// already been enabled on the project. The list can be filtered to
	// only include services in a specific state, for example to only include
	// services enabled on the project.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	// Deprecated: Do not use.
	// Enables multiple services on a project. The operation is atomic: if
	// enabling any service fails, then the entire batch fails, and no state
	// changes occur.
	//
	// Operation response type: `google.protobuf.Empty`
	BatchEnableServices(ctx context.Context, in *BatchEnableServicesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves a summary of all quota information visible to the service
	// consumer, organized by service metric. Each metric includes information
	// about all of its defined limits. Each limit includes the limit
	// configuration (quota unit, preciseness, default value), the current
	// effective limit value, and all of the overrides applied to the limit.
	ListConsumerQuotaMetrics(ctx context.Context, in *ListConsumerQuotaMetricsRequest, opts ...grpc.CallOption) (*ListConsumerQuotaMetricsResponse, error)
	// Retrieves a summary of quota information for a specific quota metric
	GetConsumerQuotaMetric(ctx context.Context, in *GetConsumerQuotaMetricRequest, opts ...grpc.CallOption) (*ConsumerQuotaMetric, error)
	// Retrieves a summary of quota information for a specific quota limit.
	GetConsumerQuotaLimit(ctx context.Context, in *GetConsumerQuotaLimitRequest, opts ...grpc.CallOption) (*ConsumerQuotaLimit, error)
	// Creates an admin override.
	// An admin override is applied by an administrator of a parent folder or
	// parent organization of the consumer receiving the override. An admin
	// override is intended to limit the amount of quota the consumer can use out
	// of the total quota pool allocated to all children of the folder or
	// organization.
	CreateAdminOverride(ctx context.Context, in *CreateAdminOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an admin override.
	UpdateAdminOverride(ctx context.Context, in *UpdateAdminOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an admin override.
	DeleteAdminOverride(ctx context.Context, in *DeleteAdminOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all admin overrides on this limit.
	ListAdminOverrides(ctx context.Context, in *ListAdminOverridesRequest, opts ...grpc.CallOption) (*ListAdminOverridesResponse, error)
	// Creates or updates multiple admin overrides atomically, all on the
	// same consumer, but on many different metrics or limits.
	// The name field in the quota override message should not be set.
	ImportAdminOverrides(ctx context.Context, in *ImportAdminOverridesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a consumer override.
	// A consumer override is applied to the consumer on its own authority to
	// limit its own quota usage. Consumer overrides cannot be used to grant more
	// quota than would be allowed by admin overrides, producer overrides, or the
	// default limit of the service.
	CreateConsumerOverride(ctx context.Context, in *CreateConsumerOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a consumer override.
	UpdateConsumerOverride(ctx context.Context, in *UpdateConsumerOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a consumer override.
	DeleteConsumerOverride(ctx context.Context, in *DeleteConsumerOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all consumer overrides on this limit.
	ListConsumerOverrides(ctx context.Context, in *ListConsumerOverridesRequest, opts ...grpc.CallOption) (*ListConsumerOverridesResponse, error)
	// Creates or updates multiple consumer overrides atomically, all on the
	// same consumer, but on many different metrics or limits.
	// The name field in the quota override message should not be set.
	ImportConsumerOverrides(ctx context.Context, in *ImportConsumerOverridesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Generates service identity for service.
	GenerateServiceIdentity(ctx context.Context, in *GenerateServiceIdentityRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type serviceUsageClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceUsageClient(cc grpc.ClientConnInterface) ServiceUsageClient {
	return &serviceUsageClient{cc}
}

// Deprecated: Do not use.
func (c *serviceUsageClient) EnableService(ctx context.Context, in *EnableServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/EnableService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *serviceUsageClient) DisableService(ctx context.Context, in *DisableServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/DisableService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *serviceUsageClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *serviceUsageClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *serviceUsageClient) BatchEnableServices(ctx context.Context, in *BatchEnableServicesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/BatchEnableServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) ListConsumerQuotaMetrics(ctx context.Context, in *ListConsumerQuotaMetricsRequest, opts ...grpc.CallOption) (*ListConsumerQuotaMetricsResponse, error) {
	out := new(ListConsumerQuotaMetricsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListConsumerQuotaMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) GetConsumerQuotaMetric(ctx context.Context, in *GetConsumerQuotaMetricRequest, opts ...grpc.CallOption) (*ConsumerQuotaMetric, error) {
	out := new(ConsumerQuotaMetric)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GetConsumerQuotaMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) GetConsumerQuotaLimit(ctx context.Context, in *GetConsumerQuotaLimitRequest, opts ...grpc.CallOption) (*ConsumerQuotaLimit, error) {
	out := new(ConsumerQuotaLimit)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GetConsumerQuotaLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) CreateAdminOverride(ctx context.Context, in *CreateAdminOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/CreateAdminOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) UpdateAdminOverride(ctx context.Context, in *UpdateAdminOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/UpdateAdminOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) DeleteAdminOverride(ctx context.Context, in *DeleteAdminOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/DeleteAdminOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) ListAdminOverrides(ctx context.Context, in *ListAdminOverridesRequest, opts ...grpc.CallOption) (*ListAdminOverridesResponse, error) {
	out := new(ListAdminOverridesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListAdminOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) ImportAdminOverrides(ctx context.Context, in *ImportAdminOverridesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ImportAdminOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) CreateConsumerOverride(ctx context.Context, in *CreateConsumerOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/CreateConsumerOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) UpdateConsumerOverride(ctx context.Context, in *UpdateConsumerOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/UpdateConsumerOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) DeleteConsumerOverride(ctx context.Context, in *DeleteConsumerOverrideRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/DeleteConsumerOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) ListConsumerOverrides(ctx context.Context, in *ListConsumerOverridesRequest, opts ...grpc.CallOption) (*ListConsumerOverridesResponse, error) {
	out := new(ListConsumerOverridesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListConsumerOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) ImportConsumerOverrides(ctx context.Context, in *ImportConsumerOverridesRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ImportConsumerOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceUsageClient) GenerateServiceIdentity(ctx context.Context, in *GenerateServiceIdentityRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GenerateServiceIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceUsageServer is the server API for ServiceUsage service.
// All implementations must embed UnimplementedServiceUsageServer
// for forward compatibility
type ServiceUsageServer interface {
	// Deprecated: Do not use.
	// Enables a service so that it can be used with a project.
	//
	// Operation response type: `google.protobuf.Empty`
	EnableService(context.Context, *EnableServiceRequest) (*longrunningpb.Operation, error)
	// Deprecated: Do not use.
	// Disables a service so that it can no longer be used with a project.
	// This prevents unintended usage that may cause unexpected billing
	// charges or security leaks.
	//
	// It is not valid to call the disable method on a service that is not
	// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
	// the target service is not currently enabled.
	//
	// Operation response type: `google.protobuf.Empty`
	DisableService(context.Context, *DisableServiceRequest) (*longrunningpb.Operation, error)
	// Deprecated: Do not use.
	// Returns the service configuration and enabled state for a given service.
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	// Deprecated: Do not use.
	// Lists all services available to the specified project, and the current
	// state of those services with respect to the project. The list includes
	// all public services, all services for which the calling user has the
	// `servicemanagement.services.bind` permission, and all services that have
	// already been enabled on the project. The list can be filtered to
	// only include services in a specific state, for example to only include
	// services enabled on the project.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// Deprecated: Do not use.
	// Enables multiple services on a project. The operation is atomic: if
	// enabling any service fails, then the entire batch fails, and no state
	// changes occur.
	//
	// Operation response type: `google.protobuf.Empty`
	BatchEnableServices(context.Context, *BatchEnableServicesRequest) (*longrunningpb.Operation, error)
	// Retrieves a summary of all quota information visible to the service
	// consumer, organized by service metric. Each metric includes information
	// about all of its defined limits. Each limit includes the limit
	// configuration (quota unit, preciseness, default value), the current
	// effective limit value, and all of the overrides applied to the limit.
	ListConsumerQuotaMetrics(context.Context, *ListConsumerQuotaMetricsRequest) (*ListConsumerQuotaMetricsResponse, error)
	// Retrieves a summary of quota information for a specific quota metric
	GetConsumerQuotaMetric(context.Context, *GetConsumerQuotaMetricRequest) (*ConsumerQuotaMetric, error)
	// Retrieves a summary of quota information for a specific quota limit.
	GetConsumerQuotaLimit(context.Context, *GetConsumerQuotaLimitRequest) (*ConsumerQuotaLimit, error)
	// Creates an admin override.
	// An admin override is applied by an administrator of a parent folder or
	// parent organization of the consumer receiving the override. An admin
	// override is intended to limit the amount of quota the consumer can use out
	// of the total quota pool allocated to all children of the folder or
	// organization.
	CreateAdminOverride(context.Context, *CreateAdminOverrideRequest) (*longrunningpb.Operation, error)
	// Updates an admin override.
	UpdateAdminOverride(context.Context, *UpdateAdminOverrideRequest) (*longrunningpb.Operation, error)
	// Deletes an admin override.
	DeleteAdminOverride(context.Context, *DeleteAdminOverrideRequest) (*longrunningpb.Operation, error)
	// Lists all admin overrides on this limit.
	ListAdminOverrides(context.Context, *ListAdminOverridesRequest) (*ListAdminOverridesResponse, error)
	// Creates or updates multiple admin overrides atomically, all on the
	// same consumer, but on many different metrics or limits.
	// The name field in the quota override message should not be set.
	ImportAdminOverrides(context.Context, *ImportAdminOverridesRequest) (*longrunningpb.Operation, error)
	// Creates a consumer override.
	// A consumer override is applied to the consumer on its own authority to
	// limit its own quota usage. Consumer overrides cannot be used to grant more
	// quota than would be allowed by admin overrides, producer overrides, or the
	// default limit of the service.
	CreateConsumerOverride(context.Context, *CreateConsumerOverrideRequest) (*longrunningpb.Operation, error)
	// Updates a consumer override.
	UpdateConsumerOverride(context.Context, *UpdateConsumerOverrideRequest) (*longrunningpb.Operation, error)
	// Deletes a consumer override.
	DeleteConsumerOverride(context.Context, *DeleteConsumerOverrideRequest) (*longrunningpb.Operation, error)
	// Lists all consumer overrides on this limit.
	ListConsumerOverrides(context.Context, *ListConsumerOverridesRequest) (*ListConsumerOverridesResponse, error)
	// Creates or updates multiple consumer overrides atomically, all on the
	// same consumer, but on many different metrics or limits.
	// The name field in the quota override message should not be set.
	ImportConsumerOverrides(context.Context, *ImportConsumerOverridesRequest) (*longrunningpb.Operation, error)
	// Generates service identity for service.
	GenerateServiceIdentity(context.Context, *GenerateServiceIdentityRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedServiceUsageServer()
}

// UnimplementedServiceUsageServer must be embedded to have forward compatible implementations.
type UnimplementedServiceUsageServer struct {
}

func (UnimplementedServiceUsageServer) EnableService(context.Context, *EnableServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableService not implemented")
}
func (UnimplementedServiceUsageServer) DisableService(context.Context, *DisableServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableService not implemented")
}
func (UnimplementedServiceUsageServer) GetService(context.Context, *GetServiceRequest) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedServiceUsageServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedServiceUsageServer) BatchEnableServices(context.Context, *BatchEnableServicesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEnableServices not implemented")
}
func (UnimplementedServiceUsageServer) ListConsumerQuotaMetrics(context.Context, *ListConsumerQuotaMetricsRequest) (*ListConsumerQuotaMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerQuotaMetrics not implemented")
}
func (UnimplementedServiceUsageServer) GetConsumerQuotaMetric(context.Context, *GetConsumerQuotaMetricRequest) (*ConsumerQuotaMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerQuotaMetric not implemented")
}
func (UnimplementedServiceUsageServer) GetConsumerQuotaLimit(context.Context, *GetConsumerQuotaLimitRequest) (*ConsumerQuotaLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerQuotaLimit not implemented")
}
func (UnimplementedServiceUsageServer) CreateAdminOverride(context.Context, *CreateAdminOverrideRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminOverride not implemented")
}
func (UnimplementedServiceUsageServer) UpdateAdminOverride(context.Context, *UpdateAdminOverrideRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminOverride not implemented")
}
func (UnimplementedServiceUsageServer) DeleteAdminOverride(context.Context, *DeleteAdminOverrideRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminOverride not implemented")
}
func (UnimplementedServiceUsageServer) ListAdminOverrides(context.Context, *ListAdminOverridesRequest) (*ListAdminOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminOverrides not implemented")
}
func (UnimplementedServiceUsageServer) ImportAdminOverrides(context.Context, *ImportAdminOverridesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAdminOverrides not implemented")
}
func (UnimplementedServiceUsageServer) CreateConsumerOverride(context.Context, *CreateConsumerOverrideRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerOverride not implemented")
}
func (UnimplementedServiceUsageServer) UpdateConsumerOverride(context.Context, *UpdateConsumerOverrideRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumerOverride not implemented")
}
func (UnimplementedServiceUsageServer) DeleteConsumerOverride(context.Context, *DeleteConsumerOverrideRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerOverride not implemented")
}
func (UnimplementedServiceUsageServer) ListConsumerOverrides(context.Context, *ListConsumerOverridesRequest) (*ListConsumerOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerOverrides not implemented")
}
func (UnimplementedServiceUsageServer) ImportConsumerOverrides(context.Context, *ImportConsumerOverridesRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportConsumerOverrides not implemented")
}
func (UnimplementedServiceUsageServer) GenerateServiceIdentity(context.Context, *GenerateServiceIdentityRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateServiceIdentity not implemented")
}
func (UnimplementedServiceUsageServer) mustEmbedUnimplementedServiceUsageServer() {}

// UnsafeServiceUsageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceUsageServer will
// result in compilation errors.
type UnsafeServiceUsageServer interface {
	mustEmbedUnimplementedServiceUsageServer()
}

func RegisterServiceUsageServer(s grpc.ServiceRegistrar, srv ServiceUsageServer) {
	s.RegisterService(&ServiceUsage_ServiceDesc, srv)
}

func _ServiceUsage_EnableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).EnableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/EnableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).EnableService(ctx, req.(*EnableServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_DisableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).DisableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/DisableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).DisableService(ctx, req.(*DisableServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_BatchEnableServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchEnableServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).BatchEnableServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/BatchEnableServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).BatchEnableServices(ctx, req.(*BatchEnableServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_ListConsumerQuotaMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerQuotaMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).ListConsumerQuotaMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListConsumerQuotaMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).ListConsumerQuotaMetrics(ctx, req.(*ListConsumerQuotaMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_GetConsumerQuotaMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerQuotaMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).GetConsumerQuotaMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GetConsumerQuotaMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).GetConsumerQuotaMetric(ctx, req.(*GetConsumerQuotaMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_GetConsumerQuotaLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerQuotaLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).GetConsumerQuotaLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GetConsumerQuotaLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).GetConsumerQuotaLimit(ctx, req.(*GetConsumerQuotaLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_CreateAdminOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).CreateAdminOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/CreateAdminOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).CreateAdminOverride(ctx, req.(*CreateAdminOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_UpdateAdminOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).UpdateAdminOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/UpdateAdminOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).UpdateAdminOverride(ctx, req.(*UpdateAdminOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_DeleteAdminOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).DeleteAdminOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/DeleteAdminOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).DeleteAdminOverride(ctx, req.(*DeleteAdminOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_ListAdminOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).ListAdminOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListAdminOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).ListAdminOverrides(ctx, req.(*ListAdminOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_ImportAdminOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAdminOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).ImportAdminOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ImportAdminOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).ImportAdminOverrides(ctx, req.(*ImportAdminOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_CreateConsumerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsumerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).CreateConsumerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/CreateConsumerOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).CreateConsumerOverride(ctx, req.(*CreateConsumerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_UpdateConsumerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).UpdateConsumerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/UpdateConsumerOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).UpdateConsumerOverride(ctx, req.(*UpdateConsumerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_DeleteConsumerOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConsumerOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).DeleteConsumerOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/DeleteConsumerOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).DeleteConsumerOverride(ctx, req.(*DeleteConsumerOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_ListConsumerOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).ListConsumerOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ListConsumerOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).ListConsumerOverrides(ctx, req.(*ListConsumerOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_ImportConsumerOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportConsumerOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).ImportConsumerOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/ImportConsumerOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).ImportConsumerOverrides(ctx, req.(*ImportConsumerOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceUsage_GenerateServiceIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateServiceIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceUsageServer).GenerateServiceIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.api.serviceusage.v1beta1.ServiceUsage/GenerateServiceIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceUsageServer).GenerateServiceIdentity(ctx, req.(*GenerateServiceIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceUsage_ServiceDesc is the grpc.ServiceDesc for ServiceUsage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceUsage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.api.serviceusage.v1beta1.ServiceUsage",
	HandlerType: (*ServiceUsageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnableService",
			Handler:    _ServiceUsage_EnableService_Handler,
		},
		{
			MethodName: "DisableService",
			Handler:    _ServiceUsage_DisableService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServiceUsage_GetService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ServiceUsage_ListServices_Handler,
		},
		{
			MethodName: "BatchEnableServices",
			Handler:    _ServiceUsage_BatchEnableServices_Handler,
		},
		{
			MethodName: "ListConsumerQuotaMetrics",
			Handler:    _ServiceUsage_ListConsumerQuotaMetrics_Handler,
		},
		{
			MethodName: "GetConsumerQuotaMetric",
			Handler:    _ServiceUsage_GetConsumerQuotaMetric_Handler,
		},
		{
			MethodName: "GetConsumerQuotaLimit",
			Handler:    _ServiceUsage_GetConsumerQuotaLimit_Handler,
		},
		{
			MethodName: "CreateAdminOverride",
			Handler:    _ServiceUsage_CreateAdminOverride_Handler,
		},
		{
			MethodName: "UpdateAdminOverride",
			Handler:    _ServiceUsage_UpdateAdminOverride_Handler,
		},
		{
			MethodName: "DeleteAdminOverride",
			Handler:    _ServiceUsage_DeleteAdminOverride_Handler,
		},
		{
			MethodName: "ListAdminOverrides",
			Handler:    _ServiceUsage_ListAdminOverrides_Handler,
		},
		{
			MethodName: "ImportAdminOverrides",
			Handler:    _ServiceUsage_ImportAdminOverrides_Handler,
		},
		{
			MethodName: "CreateConsumerOverride",
			Handler:    _ServiceUsage_CreateConsumerOverride_Handler,
		},
		{
			MethodName: "UpdateConsumerOverride",
			Handler:    _ServiceUsage_UpdateConsumerOverride_Handler,
		},
		{
			MethodName: "DeleteConsumerOverride",
			Handler:    _ServiceUsage_DeleteConsumerOverride_Handler,
		},
		{
			MethodName: "ListConsumerOverrides",
			Handler:    _ServiceUsage_ListConsumerOverrides_Handler,
		},
		{
			MethodName: "ImportConsumerOverrides",
			Handler:    _ServiceUsage_ImportConsumerOverrides_Handler,
		},
		{
			MethodName: "GenerateServiceIdentity",
			Handler:    _ServiceUsage_GenerateServiceIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/api/serviceusage/v1beta1/serviceusage.proto",
}
