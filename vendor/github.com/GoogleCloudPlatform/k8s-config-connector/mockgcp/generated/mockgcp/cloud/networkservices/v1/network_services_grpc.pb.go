// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/networkservices/v1/network_services.proto

package networkservicespb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkServicesClient is the client API for NetworkServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServicesClient interface {
	// Lists EndpointPolicies in a given project and location.
	ListEndpointPolicies(ctx context.Context, in *ListEndpointPoliciesRequest, opts ...grpc.CallOption) (*ListEndpointPoliciesResponse, error)
	// Gets details of a single EndpointPolicy.
	GetEndpointPolicy(ctx context.Context, in *GetEndpointPolicyRequest, opts ...grpc.CallOption) (*EndpointPolicy, error)
	// Creates a new EndpointPolicy in a given project and location.
	CreateEndpointPolicy(ctx context.Context, in *CreateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single EndpointPolicy.
	UpdateEndpointPolicy(ctx context.Context, in *UpdateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single EndpointPolicy.
	DeleteEndpointPolicy(ctx context.Context, in *DeleteEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Gateways in a given project and location.
	ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// Gets details of a single Gateway.
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Creates a new Gateway in a given project and location.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Gateway.
	DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists GrpcRoutes in a given project and location.
	ListGrpcRoutes(ctx context.Context, in *ListGrpcRoutesRequest, opts ...grpc.CallOption) (*ListGrpcRoutesResponse, error)
	// Gets details of a single GrpcRoute.
	GetGrpcRoute(ctx context.Context, in *GetGrpcRouteRequest, opts ...grpc.CallOption) (*GrpcRoute, error)
	// Creates a new GrpcRoute in a given project and location.
	CreateGrpcRoute(ctx context.Context, in *CreateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single GrpcRoute.
	UpdateGrpcRoute(ctx context.Context, in *UpdateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single GrpcRoute.
	DeleteGrpcRoute(ctx context.Context, in *DeleteGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists HttpRoute in a given project and location.
	ListHttpRoutes(ctx context.Context, in *ListHttpRoutesRequest, opts ...grpc.CallOption) (*ListHttpRoutesResponse, error)
	// Gets details of a single HttpRoute.
	GetHttpRoute(ctx context.Context, in *GetHttpRouteRequest, opts ...grpc.CallOption) (*HttpRoute, error)
	// Creates a new HttpRoute in a given project and location.
	CreateHttpRoute(ctx context.Context, in *CreateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single HttpRoute.
	UpdateHttpRoute(ctx context.Context, in *UpdateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single HttpRoute.
	DeleteHttpRoute(ctx context.Context, in *DeleteHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists TcpRoute in a given project and location.
	ListTcpRoutes(ctx context.Context, in *ListTcpRoutesRequest, opts ...grpc.CallOption) (*ListTcpRoutesResponse, error)
	// Gets details of a single TcpRoute.
	GetTcpRoute(ctx context.Context, in *GetTcpRouteRequest, opts ...grpc.CallOption) (*TcpRoute, error)
	// Creates a new TcpRoute in a given project and location.
	CreateTcpRoute(ctx context.Context, in *CreateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TcpRoute.
	UpdateTcpRoute(ctx context.Context, in *UpdateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single TcpRoute.
	DeleteTcpRoute(ctx context.Context, in *DeleteTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists TlsRoute in a given project and location.
	ListTlsRoutes(ctx context.Context, in *ListTlsRoutesRequest, opts ...grpc.CallOption) (*ListTlsRoutesResponse, error)
	// Gets details of a single TlsRoute.
	GetTlsRoute(ctx context.Context, in *GetTlsRouteRequest, opts ...grpc.CallOption) (*TlsRoute, error)
	// Creates a new TlsRoute in a given project and location.
	CreateTlsRoute(ctx context.Context, in *CreateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TlsRoute.
	UpdateTlsRoute(ctx context.Context, in *UpdateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single TlsRoute.
	DeleteTlsRoute(ctx context.Context, in *DeleteTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists ServiceBinding in a given project and location.
	ListServiceBindings(ctx context.Context, in *ListServiceBindingsRequest, opts ...grpc.CallOption) (*ListServiceBindingsResponse, error)
	// Gets details of a single ServiceBinding.
	GetServiceBinding(ctx context.Context, in *GetServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBinding, error)
	// Creates a new ServiceBinding in a given project and location.
	CreateServiceBinding(ctx context.Context, in *CreateServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServiceBinding.
	DeleteServiceBinding(ctx context.Context, in *DeleteServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists Meshes in a given project and location.
	ListMeshes(ctx context.Context, in *ListMeshesRequest, opts ...grpc.CallOption) (*ListMeshesResponse, error)
	// Gets details of a single Mesh.
	GetMesh(ctx context.Context, in *GetMeshRequest, opts ...grpc.CallOption) (*Mesh, error)
	// Creates a new Mesh in a given project and location.
	CreateMesh(ctx context.Context, in *CreateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Mesh.
	UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Mesh.
	DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type networkServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServicesClient(cc grpc.ClientConnInterface) NetworkServicesClient {
	return &networkServicesClient{cc}
}

func (c *networkServicesClient) ListEndpointPolicies(ctx context.Context, in *ListEndpointPoliciesRequest, opts ...grpc.CallOption) (*ListEndpointPoliciesResponse, error) {
	out := new(ListEndpointPoliciesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListEndpointPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetEndpointPolicy(ctx context.Context, in *GetEndpointPolicyRequest, opts ...grpc.CallOption) (*EndpointPolicy, error) {
	out := new(EndpointPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetEndpointPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateEndpointPolicy(ctx context.Context, in *CreateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateEndpointPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateEndpointPolicy(ctx context.Context, in *UpdateEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateEndpointPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteEndpointPolicy(ctx context.Context, in *DeleteEndpointPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteEndpointPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListGrpcRoutes(ctx context.Context, in *ListGrpcRoutesRequest, opts ...grpc.CallOption) (*ListGrpcRoutesResponse, error) {
	out := new(ListGrpcRoutesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListGrpcRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetGrpcRoute(ctx context.Context, in *GetGrpcRouteRequest, opts ...grpc.CallOption) (*GrpcRoute, error) {
	out := new(GrpcRoute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetGrpcRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateGrpcRoute(ctx context.Context, in *CreateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateGrpcRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateGrpcRoute(ctx context.Context, in *UpdateGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateGrpcRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteGrpcRoute(ctx context.Context, in *DeleteGrpcRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteGrpcRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListHttpRoutes(ctx context.Context, in *ListHttpRoutesRequest, opts ...grpc.CallOption) (*ListHttpRoutesResponse, error) {
	out := new(ListHttpRoutesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListHttpRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetHttpRoute(ctx context.Context, in *GetHttpRouteRequest, opts ...grpc.CallOption) (*HttpRoute, error) {
	out := new(HttpRoute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetHttpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateHttpRoute(ctx context.Context, in *CreateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateHttpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateHttpRoute(ctx context.Context, in *UpdateHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateHttpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteHttpRoute(ctx context.Context, in *DeleteHttpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteHttpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListTcpRoutes(ctx context.Context, in *ListTcpRoutesRequest, opts ...grpc.CallOption) (*ListTcpRoutesResponse, error) {
	out := new(ListTcpRoutesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListTcpRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetTcpRoute(ctx context.Context, in *GetTcpRouteRequest, opts ...grpc.CallOption) (*TcpRoute, error) {
	out := new(TcpRoute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetTcpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateTcpRoute(ctx context.Context, in *CreateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateTcpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateTcpRoute(ctx context.Context, in *UpdateTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateTcpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteTcpRoute(ctx context.Context, in *DeleteTcpRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteTcpRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListTlsRoutes(ctx context.Context, in *ListTlsRoutesRequest, opts ...grpc.CallOption) (*ListTlsRoutesResponse, error) {
	out := new(ListTlsRoutesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListTlsRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetTlsRoute(ctx context.Context, in *GetTlsRouteRequest, opts ...grpc.CallOption) (*TlsRoute, error) {
	out := new(TlsRoute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetTlsRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateTlsRoute(ctx context.Context, in *CreateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateTlsRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateTlsRoute(ctx context.Context, in *UpdateTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateTlsRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteTlsRoute(ctx context.Context, in *DeleteTlsRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteTlsRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListServiceBindings(ctx context.Context, in *ListServiceBindingsRequest, opts ...grpc.CallOption) (*ListServiceBindingsResponse, error) {
	out := new(ListServiceBindingsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListServiceBindings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetServiceBinding(ctx context.Context, in *GetServiceBindingRequest, opts ...grpc.CallOption) (*ServiceBinding, error) {
	out := new(ServiceBinding)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetServiceBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateServiceBinding(ctx context.Context, in *CreateServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateServiceBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteServiceBinding(ctx context.Context, in *DeleteServiceBindingRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteServiceBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) ListMeshes(ctx context.Context, in *ListMeshesRequest, opts ...grpc.CallOption) (*ListMeshesResponse, error) {
	out := new(ListMeshesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/ListMeshes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) GetMesh(ctx context.Context, in *GetMeshRequest, opts ...grpc.CallOption) (*Mesh, error) {
	out := new(Mesh)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/GetMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) CreateMesh(ctx context.Context, in *CreateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) UpdateMesh(ctx context.Context, in *UpdateMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServicesClient) DeleteMesh(ctx context.Context, in *DeleteMeshRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteMesh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServicesServer is the server API for NetworkServices service.
// All implementations must embed UnimplementedNetworkServicesServer
// for forward compatibility
type NetworkServicesServer interface {
	// Lists EndpointPolicies in a given project and location.
	ListEndpointPolicies(context.Context, *ListEndpointPoliciesRequest) (*ListEndpointPoliciesResponse, error)
	// Gets details of a single EndpointPolicy.
	GetEndpointPolicy(context.Context, *GetEndpointPolicyRequest) (*EndpointPolicy, error)
	// Creates a new EndpointPolicy in a given project and location.
	CreateEndpointPolicy(context.Context, *CreateEndpointPolicyRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single EndpointPolicy.
	UpdateEndpointPolicy(context.Context, *UpdateEndpointPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single EndpointPolicy.
	DeleteEndpointPolicy(context.Context, *DeleteEndpointPolicyRequest) (*longrunningpb.Operation, error)
	// Lists Gateways in a given project and location.
	ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error)
	// Gets details of a single Gateway.
	GetGateway(context.Context, *GetGatewayRequest) (*Gateway, error)
	// Creates a new Gateway in a given project and location.
	CreateGateway(context.Context, *CreateGatewayRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*longrunningpb.Operation, error)
	// Deletes a single Gateway.
	DeleteGateway(context.Context, *DeleteGatewayRequest) (*longrunningpb.Operation, error)
	// Lists GrpcRoutes in a given project and location.
	ListGrpcRoutes(context.Context, *ListGrpcRoutesRequest) (*ListGrpcRoutesResponse, error)
	// Gets details of a single GrpcRoute.
	GetGrpcRoute(context.Context, *GetGrpcRouteRequest) (*GrpcRoute, error)
	// Creates a new GrpcRoute in a given project and location.
	CreateGrpcRoute(context.Context, *CreateGrpcRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single GrpcRoute.
	UpdateGrpcRoute(context.Context, *UpdateGrpcRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single GrpcRoute.
	DeleteGrpcRoute(context.Context, *DeleteGrpcRouteRequest) (*longrunningpb.Operation, error)
	// Lists HttpRoute in a given project and location.
	ListHttpRoutes(context.Context, *ListHttpRoutesRequest) (*ListHttpRoutesResponse, error)
	// Gets details of a single HttpRoute.
	GetHttpRoute(context.Context, *GetHttpRouteRequest) (*HttpRoute, error)
	// Creates a new HttpRoute in a given project and location.
	CreateHttpRoute(context.Context, *CreateHttpRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single HttpRoute.
	UpdateHttpRoute(context.Context, *UpdateHttpRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single HttpRoute.
	DeleteHttpRoute(context.Context, *DeleteHttpRouteRequest) (*longrunningpb.Operation, error)
	// Lists TcpRoute in a given project and location.
	ListTcpRoutes(context.Context, *ListTcpRoutesRequest) (*ListTcpRoutesResponse, error)
	// Gets details of a single TcpRoute.
	GetTcpRoute(context.Context, *GetTcpRouteRequest) (*TcpRoute, error)
	// Creates a new TcpRoute in a given project and location.
	CreateTcpRoute(context.Context, *CreateTcpRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TcpRoute.
	UpdateTcpRoute(context.Context, *UpdateTcpRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single TcpRoute.
	DeleteTcpRoute(context.Context, *DeleteTcpRouteRequest) (*longrunningpb.Operation, error)
	// Lists TlsRoute in a given project and location.
	ListTlsRoutes(context.Context, *ListTlsRoutesRequest) (*ListTlsRoutesResponse, error)
	// Gets details of a single TlsRoute.
	GetTlsRoute(context.Context, *GetTlsRouteRequest) (*TlsRoute, error)
	// Creates a new TlsRoute in a given project and location.
	CreateTlsRoute(context.Context, *CreateTlsRouteRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single TlsRoute.
	UpdateTlsRoute(context.Context, *UpdateTlsRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single TlsRoute.
	DeleteTlsRoute(context.Context, *DeleteTlsRouteRequest) (*longrunningpb.Operation, error)
	// Lists ServiceBinding in a given project and location.
	ListServiceBindings(context.Context, *ListServiceBindingsRequest) (*ListServiceBindingsResponse, error)
	// Gets details of a single ServiceBinding.
	GetServiceBinding(context.Context, *GetServiceBindingRequest) (*ServiceBinding, error)
	// Creates a new ServiceBinding in a given project and location.
	CreateServiceBinding(context.Context, *CreateServiceBindingRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServiceBinding.
	DeleteServiceBinding(context.Context, *DeleteServiceBindingRequest) (*longrunningpb.Operation, error)
	// Lists Meshes in a given project and location.
	ListMeshes(context.Context, *ListMeshesRequest) (*ListMeshesResponse, error)
	// Gets details of a single Mesh.
	GetMesh(context.Context, *GetMeshRequest) (*Mesh, error)
	// Creates a new Mesh in a given project and location.
	CreateMesh(context.Context, *CreateMeshRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single Mesh.
	UpdateMesh(context.Context, *UpdateMeshRequest) (*longrunningpb.Operation, error)
	// Deletes a single Mesh.
	DeleteMesh(context.Context, *DeleteMeshRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedNetworkServicesServer()
}

// UnimplementedNetworkServicesServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServicesServer struct {
}

func (UnimplementedNetworkServicesServer) ListEndpointPolicies(context.Context, *ListEndpointPoliciesRequest) (*ListEndpointPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEndpointPolicies not implemented")
}
func (UnimplementedNetworkServicesServer) GetEndpointPolicy(context.Context, *GetEndpointPolicyRequest) (*EndpointPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) CreateEndpointPolicy(context.Context, *CreateEndpointPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateEndpointPolicy(context.Context, *UpdateEndpointPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteEndpointPolicy(context.Context, *DeleteEndpointPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEndpointPolicy not implemented")
}
func (UnimplementedNetworkServicesServer) ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (UnimplementedNetworkServicesServer) GetGateway(context.Context, *GetGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedNetworkServicesServer) CreateGateway(context.Context, *CreateGatewayRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGateway not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateGateway(context.Context, *UpdateGatewayRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteGateway(context.Context, *DeleteGatewayRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGateway not implemented")
}
func (UnimplementedNetworkServicesServer) ListGrpcRoutes(context.Context, *ListGrpcRoutesRequest) (*ListGrpcRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrpcRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetGrpcRoute(context.Context, *GetGrpcRouteRequest) (*GrpcRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateGrpcRoute(context.Context, *CreateGrpcRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateGrpcRoute(context.Context, *UpdateGrpcRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteGrpcRoute(context.Context, *DeleteGrpcRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrpcRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListHttpRoutes(context.Context, *ListHttpRoutesRequest) (*ListHttpRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHttpRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetHttpRoute(context.Context, *GetHttpRouteRequest) (*HttpRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateHttpRoute(context.Context, *CreateHttpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateHttpRoute(context.Context, *UpdateHttpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteHttpRoute(context.Context, *DeleteHttpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHttpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListTcpRoutes(context.Context, *ListTcpRoutesRequest) (*ListTcpRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTcpRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetTcpRoute(context.Context, *GetTcpRouteRequest) (*TcpRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateTcpRoute(context.Context, *CreateTcpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateTcpRoute(context.Context, *UpdateTcpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteTcpRoute(context.Context, *DeleteTcpRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTcpRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListTlsRoutes(context.Context, *ListTlsRoutesRequest) (*ListTlsRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTlsRoutes not implemented")
}
func (UnimplementedNetworkServicesServer) GetTlsRoute(context.Context, *GetTlsRouteRequest) (*TlsRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) CreateTlsRoute(context.Context, *CreateTlsRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateTlsRoute(context.Context, *UpdateTlsRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteTlsRoute(context.Context, *DeleteTlsRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTlsRoute not implemented")
}
func (UnimplementedNetworkServicesServer) ListServiceBindings(context.Context, *ListServiceBindingsRequest) (*ListServiceBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceBindings not implemented")
}
func (UnimplementedNetworkServicesServer) GetServiceBinding(context.Context, *GetServiceBindingRequest) (*ServiceBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) CreateServiceBinding(context.Context, *CreateServiceBindingRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteServiceBinding(context.Context, *DeleteServiceBindingRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceBinding not implemented")
}
func (UnimplementedNetworkServicesServer) ListMeshes(context.Context, *ListMeshesRequest) (*ListMeshesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeshes not implemented")
}
func (UnimplementedNetworkServicesServer) GetMesh(context.Context, *GetMeshRequest) (*Mesh, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMesh not implemented")
}
func (UnimplementedNetworkServicesServer) CreateMesh(context.Context, *CreateMeshRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMesh not implemented")
}
func (UnimplementedNetworkServicesServer) UpdateMesh(context.Context, *UpdateMeshRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMesh not implemented")
}
func (UnimplementedNetworkServicesServer) DeleteMesh(context.Context, *DeleteMeshRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMesh not implemented")
}
func (UnimplementedNetworkServicesServer) mustEmbedUnimplementedNetworkServicesServer() {}

// UnsafeNetworkServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServicesServer will
// result in compilation errors.
type UnsafeNetworkServicesServer interface {
	mustEmbedUnimplementedNetworkServicesServer()
}

func RegisterNetworkServicesServer(s grpc.ServiceRegistrar, srv NetworkServicesServer) {
	s.RegisterService(&NetworkServices_ServiceDesc, srv)
}

func _NetworkServices_ListEndpointPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEndpointPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListEndpointPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListEndpointPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListEndpointPolicies(ctx, req.(*ListEndpointPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetEndpointPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetEndpointPolicy(ctx, req.(*GetEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateEndpointPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateEndpointPolicy(ctx, req.(*CreateEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateEndpointPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateEndpointPolicy(ctx, req.(*UpdateEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteEndpointPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndpointPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteEndpointPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteEndpointPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteEndpointPolicy(ctx, req.(*DeleteEndpointPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListGateways(ctx, req.(*ListGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteGateway(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListGrpcRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrpcRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListGrpcRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListGrpcRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListGrpcRoutes(ctx, req.(*ListGrpcRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetGrpcRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetGrpcRoute(ctx, req.(*GetGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateGrpcRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateGrpcRoute(ctx, req.(*CreateGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateGrpcRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateGrpcRoute(ctx, req.(*UpdateGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteGrpcRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGrpcRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteGrpcRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteGrpcRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteGrpcRoute(ctx, req.(*DeleteGrpcRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListHttpRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHttpRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListHttpRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListHttpRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListHttpRoutes(ctx, req.(*ListHttpRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetHttpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetHttpRoute(ctx, req.(*GetHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateHttpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateHttpRoute(ctx, req.(*CreateHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateHttpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateHttpRoute(ctx, req.(*UpdateHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteHttpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHttpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteHttpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteHttpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteHttpRoute(ctx, req.(*DeleteHttpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListTcpRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTcpRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListTcpRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListTcpRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListTcpRoutes(ctx, req.(*ListTcpRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetTcpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetTcpRoute(ctx, req.(*GetTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateTcpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateTcpRoute(ctx, req.(*CreateTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateTcpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateTcpRoute(ctx, req.(*UpdateTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteTcpRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTcpRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteTcpRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteTcpRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteTcpRoute(ctx, req.(*DeleteTcpRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListTlsRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTlsRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListTlsRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListTlsRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListTlsRoutes(ctx, req.(*ListTlsRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetTlsRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetTlsRoute(ctx, req.(*GetTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateTlsRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateTlsRoute(ctx, req.(*CreateTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateTlsRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateTlsRoute(ctx, req.(*UpdateTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteTlsRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTlsRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteTlsRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteTlsRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteTlsRoute(ctx, req.(*DeleteTlsRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListServiceBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListServiceBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListServiceBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListServiceBindings(ctx, req.(*ListServiceBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetServiceBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetServiceBinding(ctx, req.(*GetServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateServiceBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateServiceBinding(ctx, req.(*CreateServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteServiceBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteServiceBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteServiceBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteServiceBinding(ctx, req.(*DeleteServiceBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_ListMeshes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeshesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).ListMeshes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/ListMeshes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).ListMeshes(ctx, req.(*ListMeshesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_GetMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).GetMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/GetMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).GetMesh(ctx, req.(*GetMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_CreateMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).CreateMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/CreateMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).CreateMesh(ctx, req.(*CreateMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_UpdateMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).UpdateMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/UpdateMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).UpdateMesh(ctx, req.(*UpdateMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServices_DeleteMesh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServicesServer).DeleteMesh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkservices.v1.NetworkServices/DeleteMesh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServicesServer).DeleteMesh(ctx, req.(*DeleteMeshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkServices_ServiceDesc is the grpc.ServiceDesc for NetworkServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkservices.v1.NetworkServices",
	HandlerType: (*NetworkServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEndpointPolicies",
			Handler:    _NetworkServices_ListEndpointPolicies_Handler,
		},
		{
			MethodName: "GetEndpointPolicy",
			Handler:    _NetworkServices_GetEndpointPolicy_Handler,
		},
		{
			MethodName: "CreateEndpointPolicy",
			Handler:    _NetworkServices_CreateEndpointPolicy_Handler,
		},
		{
			MethodName: "UpdateEndpointPolicy",
			Handler:    _NetworkServices_UpdateEndpointPolicy_Handler,
		},
		{
			MethodName: "DeleteEndpointPolicy",
			Handler:    _NetworkServices_DeleteEndpointPolicy_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _NetworkServices_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _NetworkServices_GetGateway_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _NetworkServices_CreateGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _NetworkServices_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _NetworkServices_DeleteGateway_Handler,
		},
		{
			MethodName: "ListGrpcRoutes",
			Handler:    _NetworkServices_ListGrpcRoutes_Handler,
		},
		{
			MethodName: "GetGrpcRoute",
			Handler:    _NetworkServices_GetGrpcRoute_Handler,
		},
		{
			MethodName: "CreateGrpcRoute",
			Handler:    _NetworkServices_CreateGrpcRoute_Handler,
		},
		{
			MethodName: "UpdateGrpcRoute",
			Handler:    _NetworkServices_UpdateGrpcRoute_Handler,
		},
		{
			MethodName: "DeleteGrpcRoute",
			Handler:    _NetworkServices_DeleteGrpcRoute_Handler,
		},
		{
			MethodName: "ListHttpRoutes",
			Handler:    _NetworkServices_ListHttpRoutes_Handler,
		},
		{
			MethodName: "GetHttpRoute",
			Handler:    _NetworkServices_GetHttpRoute_Handler,
		},
		{
			MethodName: "CreateHttpRoute",
			Handler:    _NetworkServices_CreateHttpRoute_Handler,
		},
		{
			MethodName: "UpdateHttpRoute",
			Handler:    _NetworkServices_UpdateHttpRoute_Handler,
		},
		{
			MethodName: "DeleteHttpRoute",
			Handler:    _NetworkServices_DeleteHttpRoute_Handler,
		},
		{
			MethodName: "ListTcpRoutes",
			Handler:    _NetworkServices_ListTcpRoutes_Handler,
		},
		{
			MethodName: "GetTcpRoute",
			Handler:    _NetworkServices_GetTcpRoute_Handler,
		},
		{
			MethodName: "CreateTcpRoute",
			Handler:    _NetworkServices_CreateTcpRoute_Handler,
		},
		{
			MethodName: "UpdateTcpRoute",
			Handler:    _NetworkServices_UpdateTcpRoute_Handler,
		},
		{
			MethodName: "DeleteTcpRoute",
			Handler:    _NetworkServices_DeleteTcpRoute_Handler,
		},
		{
			MethodName: "ListTlsRoutes",
			Handler:    _NetworkServices_ListTlsRoutes_Handler,
		},
		{
			MethodName: "GetTlsRoute",
			Handler:    _NetworkServices_GetTlsRoute_Handler,
		},
		{
			MethodName: "CreateTlsRoute",
			Handler:    _NetworkServices_CreateTlsRoute_Handler,
		},
		{
			MethodName: "UpdateTlsRoute",
			Handler:    _NetworkServices_UpdateTlsRoute_Handler,
		},
		{
			MethodName: "DeleteTlsRoute",
			Handler:    _NetworkServices_DeleteTlsRoute_Handler,
		},
		{
			MethodName: "ListServiceBindings",
			Handler:    _NetworkServices_ListServiceBindings_Handler,
		},
		{
			MethodName: "GetServiceBinding",
			Handler:    _NetworkServices_GetServiceBinding_Handler,
		},
		{
			MethodName: "CreateServiceBinding",
			Handler:    _NetworkServices_CreateServiceBinding_Handler,
		},
		{
			MethodName: "DeleteServiceBinding",
			Handler:    _NetworkServices_DeleteServiceBinding_Handler,
		},
		{
			MethodName: "ListMeshes",
			Handler:    _NetworkServices_ListMeshes_Handler,
		},
		{
			MethodName: "GetMesh",
			Handler:    _NetworkServices_GetMesh_Handler,
		},
		{
			MethodName: "CreateMesh",
			Handler:    _NetworkServices_CreateMesh_Handler,
		},
		{
			MethodName: "UpdateMesh",
			Handler:    _NetworkServices_UpdateMesh_Handler,
		},
		{
			MethodName: "DeleteMesh",
			Handler:    _NetworkServices_DeleteMesh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkservices/v1/network_services.proto",
}
