// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/aiplatform/v1beta1/specialist_pool_service.proto

package aiplatformpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpecialistPoolServiceClient is the client API for SpecialistPoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecialistPoolServiceClient interface {
	// Creates a SpecialistPool.
	CreateSpecialistPool(ctx context.Context, in *CreateSpecialistPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a SpecialistPool.
	GetSpecialistPool(ctx context.Context, in *GetSpecialistPoolRequest, opts ...grpc.CallOption) (*SpecialistPool, error)
	// Lists SpecialistPools in a Location.
	ListSpecialistPools(ctx context.Context, in *ListSpecialistPoolsRequest, opts ...grpc.CallOption) (*ListSpecialistPoolsResponse, error)
	// Deletes a SpecialistPool as well as all Specialists in the pool.
	DeleteSpecialistPool(ctx context.Context, in *DeleteSpecialistPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a SpecialistPool.
	UpdateSpecialistPool(ctx context.Context, in *UpdateSpecialistPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type specialistPoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecialistPoolServiceClient(cc grpc.ClientConnInterface) SpecialistPoolServiceClient {
	return &specialistPoolServiceClient{cc}
}

func (c *specialistPoolServiceClient) CreateSpecialistPool(ctx context.Context, in *CreateSpecialistPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/CreateSpecialistPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistPoolServiceClient) GetSpecialistPool(ctx context.Context, in *GetSpecialistPoolRequest, opts ...grpc.CallOption) (*SpecialistPool, error) {
	out := new(SpecialistPool)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/GetSpecialistPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistPoolServiceClient) ListSpecialistPools(ctx context.Context, in *ListSpecialistPoolsRequest, opts ...grpc.CallOption) (*ListSpecialistPoolsResponse, error) {
	out := new(ListSpecialistPoolsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/ListSpecialistPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistPoolServiceClient) DeleteSpecialistPool(ctx context.Context, in *DeleteSpecialistPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/DeleteSpecialistPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialistPoolServiceClient) UpdateSpecialistPool(ctx context.Context, in *UpdateSpecialistPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/UpdateSpecialistPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecialistPoolServiceServer is the server API for SpecialistPoolService service.
// All implementations must embed UnimplementedSpecialistPoolServiceServer
// for forward compatibility
type SpecialistPoolServiceServer interface {
	// Creates a SpecialistPool.
	CreateSpecialistPool(context.Context, *CreateSpecialistPoolRequest) (*longrunningpb.Operation, error)
	// Gets a SpecialistPool.
	GetSpecialistPool(context.Context, *GetSpecialistPoolRequest) (*SpecialistPool, error)
	// Lists SpecialistPools in a Location.
	ListSpecialistPools(context.Context, *ListSpecialistPoolsRequest) (*ListSpecialistPoolsResponse, error)
	// Deletes a SpecialistPool as well as all Specialists in the pool.
	DeleteSpecialistPool(context.Context, *DeleteSpecialistPoolRequest) (*longrunningpb.Operation, error)
	// Updates a SpecialistPool.
	UpdateSpecialistPool(context.Context, *UpdateSpecialistPoolRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedSpecialistPoolServiceServer()
}

// UnimplementedSpecialistPoolServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpecialistPoolServiceServer struct {
}

func (UnimplementedSpecialistPoolServiceServer) CreateSpecialistPool(context.Context, *CreateSpecialistPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialistPool not implemented")
}
func (UnimplementedSpecialistPoolServiceServer) GetSpecialistPool(context.Context, *GetSpecialistPoolRequest) (*SpecialistPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialistPool not implemented")
}
func (UnimplementedSpecialistPoolServiceServer) ListSpecialistPools(context.Context, *ListSpecialistPoolsRequest) (*ListSpecialistPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpecialistPools not implemented")
}
func (UnimplementedSpecialistPoolServiceServer) DeleteSpecialistPool(context.Context, *DeleteSpecialistPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialistPool not implemented")
}
func (UnimplementedSpecialistPoolServiceServer) UpdateSpecialistPool(context.Context, *UpdateSpecialistPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialistPool not implemented")
}
func (UnimplementedSpecialistPoolServiceServer) mustEmbedUnimplementedSpecialistPoolServiceServer() {}

// UnsafeSpecialistPoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecialistPoolServiceServer will
// result in compilation errors.
type UnsafeSpecialistPoolServiceServer interface {
	mustEmbedUnimplementedSpecialistPoolServiceServer()
}

func RegisterSpecialistPoolServiceServer(s grpc.ServiceRegistrar, srv SpecialistPoolServiceServer) {
	s.RegisterService(&SpecialistPoolService_ServiceDesc, srv)
}

func _SpecialistPoolService_CreateSpecialistPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecialistPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistPoolServiceServer).CreateSpecialistPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/CreateSpecialistPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistPoolServiceServer).CreateSpecialistPool(ctx, req.(*CreateSpecialistPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistPoolService_GetSpecialistPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialistPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistPoolServiceServer).GetSpecialistPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/GetSpecialistPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistPoolServiceServer).GetSpecialistPool(ctx, req.(*GetSpecialistPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistPoolService_ListSpecialistPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpecialistPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistPoolServiceServer).ListSpecialistPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/ListSpecialistPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistPoolServiceServer).ListSpecialistPools(ctx, req.(*ListSpecialistPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistPoolService_DeleteSpecialistPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpecialistPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistPoolServiceServer).DeleteSpecialistPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/DeleteSpecialistPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistPoolServiceServer).DeleteSpecialistPool(ctx, req.(*DeleteSpecialistPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecialistPoolService_UpdateSpecialistPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecialistPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialistPoolServiceServer).UpdateSpecialistPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService/UpdateSpecialistPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialistPoolServiceServer).UpdateSpecialistPool(ctx, req.(*UpdateSpecialistPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpecialistPoolService_ServiceDesc is the grpc.ServiceDesc for SpecialistPoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpecialistPoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.aiplatform.v1beta1.SpecialistPoolService",
	HandlerType: (*SpecialistPoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpecialistPool",
			Handler:    _SpecialistPoolService_CreateSpecialistPool_Handler,
		},
		{
			MethodName: "GetSpecialistPool",
			Handler:    _SpecialistPoolService_GetSpecialistPool_Handler,
		},
		{
			MethodName: "ListSpecialistPools",
			Handler:    _SpecialistPoolService_ListSpecialistPools_Handler,
		},
		{
			MethodName: "DeleteSpecialistPool",
			Handler:    _SpecialistPoolService_DeleteSpecialistPool_Handler,
		},
		{
			MethodName: "UpdateSpecialistPool",
			Handler:    _SpecialistPoolService_UpdateSpecialistPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/aiplatform/v1beta1/specialist_pool_service.proto",
}
