# Copyright 2024 Google LLC. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
info:
  title: BinaryAuthorization/Attestor
  description: The BinaryAuthorization Attestor resource
  x-dcl-struct-name: Attestor
  x-dcl-has-iam: false
paths:
  get:
    description: The function used to get information about a Attestor
    parameters:
    - name: attestor
      required: true
      description: A full instance of a Attestor
  apply:
    description: The function used to apply information about a Attestor
    parameters:
    - name: attestor
      required: true
      description: A full instance of a Attestor
  delete:
    description: The function used to delete a Attestor
    parameters:
    - name: attestor
      required: true
      description: A full instance of a Attestor
  deleteAll:
    description: The function used to delete all Attestor
    parameters:
    - name: project
      required: true
      schema:
        type: string
  list:
    description: The function used to list information about many Attestor
    parameters:
    - name: project
      required: true
      schema:
        type: string
components:
  schemas:
    Attestor:
      title: Attestor
      x-dcl-id: projects/{{project}}/attestors/{{name}}
      x-dcl-parent-container: project
      x-dcl-has-create: true
      x-dcl-has-iam: false
      x-dcl-read-timeout: 0
      x-dcl-apply-timeout: 0
      x-dcl-delete-timeout: 0
      type: object
      required:
      - name
      - project
      properties:
        description:
          type: string
          x-dcl-go-name: Description
          description: Optional. A descriptive comment. This field may be updated.
            The field may be displayed in chooser dialogs.
        name:
          type: string
          x-dcl-go-name: Name
          description: 'Required. The resource name, in the format: `projects/*/attestors/*`.
            This field may not be updated.'
          x-kubernetes-immutable: true
        project:
          type: string
          x-dcl-go-name: Project
          description: The project for the resource
          x-kubernetes-immutable: true
          x-dcl-references:
          - resource: Cloudresourcemanager/Project
            field: name
            parent: true
        updateTime:
          type: string
          format: date-time
          x-dcl-go-name: UpdateTime
          readOnly: true
          description: Output only. Time when the attestor was last updated.
          x-kubernetes-immutable: true
        userOwnedDrydockNote:
          type: object
          x-dcl-go-name: UserOwnedDrydockNote
          x-dcl-go-type: AttestorUserOwnedDrydockNote
          description: This specifies how an attestation will be read, and how it
            will be used during policy enforcement.
          required:
          - noteReference
          properties:
            delegationServiceAccountEmail:
              type: string
              x-dcl-go-name: DelegationServiceAccountEmail
              readOnly: true
              description: Output only. This field will contain the service account
                email address that this Attestor will use as the principal when querying
                Container Analysis. Attestor administrators must grant this service
                account the IAM role needed to read attestations from the in Container
                Analysis (`containeranalysis.notes.occurrences.viewer`). This email
                address is fixed for the lifetime of the Attestor, but callers should
                not make any other assumptions about the service account email; future
                versions may use an email based on a different naming pattern.
              x-kubernetes-immutable: true
            noteReference:
              type: string
              x-dcl-go-name: NoteReference
              description: 'Required. The Drydock resource name of a Attestation.
                Authority Note, created by the user, in the format: `projects/*/notes/*`.
                This field may not be updated. An attestation by this attestor is
                stored as a Grafeas Attestation. Authority Occurrence that names a
                container image and that links to this Note. Grafeas is an external
                dependency.'
              x-kubernetes-immutable: true
              x-dcl-references:
              - resource: Containeranalysis/Note
                field: name
            publicKeys:
              type: array
              x-dcl-go-name: PublicKeys
              description: Optional. Public keys that verify attestations signed by
                this attestor. This field may be updated. If this field is non-empty,
                one of the specified public keys must verify that an attestation was
                signed by this attestor for the image specified in the admission request.
                If this field is empty, this attestor always returns that no valid
                attestations exist.
              x-dcl-send-empty: true
              x-dcl-list-type: list
              items:
                type: object
                x-dcl-go-type: AttestorUserOwnedDrydockNotePublicKeys
                properties:
                  asciiArmoredPgpPublicKey:
                    type: string
                    x-dcl-go-name: AsciiArmoredPgpPublicKey
                    description: ASCII-armored representation of a PGP public key,
                      as the entire output by the command `gpg --export --armor foo@example.com`
                      (either LF or CRLF line endings). When using this field, `id`
                      should be left blank. The BinAuthz API handlers will calculate
                      the ID and fill it in automatically. BinAuthz computes this
                      ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case
                      hex. If `id` is provided by the caller, it will be overwritten
                      by the API-calculated ID.
                  comment:
                    type: string
                    x-dcl-go-name: Comment
                    description: Optional. A descriptive comment. This field may be
                      updated.
                  id:
                    type: string
                    x-dcl-go-name: Id
                    description: The ID of this public key. Signatures verified by
                      BinAuthz must include the ID of the public key that can be used
                      to verify them, and that ID must match the contents of this
                      field exactly. Additional restrictions on this field can be
                      imposed based on which public key type is encapsulated. See
                      the documentation on `public_key` cases below for details.
                    x-dcl-server-default: true
                  pkixPublicKey:
                    type: object
                    x-dcl-go-name: PkixPublicKey
                    x-dcl-go-type: AttestorUserOwnedDrydockNotePublicKeysPkixPublicKey
                    description: 'A raw PKIX SubjectPublicKeyInfo format public key.
                      NOTE: `id` may be explicitly provided by the caller when using
                      this type of public key, but it MUST be a valid RFC3986 URI.
                      If `id` is left blank, a default one will be computed based
                      on the digest of the DER encoding of the public key.'
                    properties:
                      publicKeyPem:
                        type: string
                        x-dcl-go-name: PublicKeyPem
                        description: A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13
                      signatureAlgorithm:
                        type: string
                        x-dcl-go-name: SignatureAlgorithm
                        x-dcl-go-type: AttestorUserOwnedDrydockNotePublicKeysPkixPublicKeySignatureAlgorithmEnum
                        description: 'The signature algorithm used to verify a message
                          against a signature using this key. These signature algorithm
                          must match the structure and any object identifiers encoded
                          in `public_key_pem` (i.e. this algorithm must match that
                          of the public key). Possible values: SIGNATURE_ALGORITHM_UNSPECIFIED,
                          RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256,
                          RSA_PSS_4096_SHA512, RSA_SIGN_PKCS1_2048_SHA256, RSA_SIGN_PKCS1_3072_SHA256,
                          RSA_SIGN_PKCS1_4096_SHA256, RSA_SIGN_PKCS1_4096_SHA512,
                          ECDSA_P256_SHA256, EC_SIGN_P256_SHA256, ECDSA_P384_SHA384,
                          EC_SIGN_P384_SHA384, ECDSA_P521_SHA512, EC_SIGN_P521_SHA512'
                        enum:
                        - SIGNATURE_ALGORITHM_UNSPECIFIED
                        - RSA_PSS_2048_SHA256
                        - RSA_PSS_3072_SHA256
                        - RSA_PSS_4096_SHA256
                        - RSA_PSS_4096_SHA512
                        - RSA_SIGN_PKCS1_2048_SHA256
                        - RSA_SIGN_PKCS1_3072_SHA256
                        - RSA_SIGN_PKCS1_4096_SHA256
                        - RSA_SIGN_PKCS1_4096_SHA512
                        - ECDSA_P256_SHA256
                        - EC_SIGN_P256_SHA256
                        - ECDSA_P384_SHA384
                        - EC_SIGN_P384_SHA384
                        - ECDSA_P521_SHA512
                        - EC_SIGN_P521_SHA512
