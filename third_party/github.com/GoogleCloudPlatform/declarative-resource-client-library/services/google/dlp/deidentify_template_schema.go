// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package dlp

import (
	"github.com/GoogleCloudPlatform/declarative-resource-client-library/dcl"
)

func DCLDeidentifyTemplateSchema() *dcl.Schema {
	return &dcl.Schema{
		Info: &dcl.Info{
			Title:       "Dlp/DeidentifyTemplate",
			Description: "The Dlp DeidentifyTemplate resource",
			StructName:  "DeidentifyTemplate",
		},
		Paths: &dcl.Paths{
			Get: &dcl.Path{
				Description: "The function used to get information about a DeidentifyTemplate",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "deidentifyTemplate",
						Required:    true,
						Description: "A full instance of a DeidentifyTemplate",
					},
				},
			},
			Apply: &dcl.Path{
				Description: "The function used to apply information about a DeidentifyTemplate",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "deidentifyTemplate",
						Required:    true,
						Description: "A full instance of a DeidentifyTemplate",
					},
				},
			},
			Delete: &dcl.Path{
				Description: "The function used to delete a DeidentifyTemplate",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:        "deidentifyTemplate",
						Required:    true,
						Description: "A full instance of a DeidentifyTemplate",
					},
				},
			},
			DeleteAll: &dcl.Path{
				Description: "The function used to delete all DeidentifyTemplate",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:     "location",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
					dcl.PathParameters{
						Name:     "parent",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
				},
			},
			List: &dcl.Path{
				Description: "The function used to list information about many DeidentifyTemplate",
				Parameters: []dcl.PathParameters{
					dcl.PathParameters{
						Name:     "location",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
					dcl.PathParameters{
						Name:     "parent",
						Required: true,
						Schema: &dcl.PathParametersSchema{
							Type: "string",
						},
					},
				},
			},
		},
		Components: &dcl.Components{
			Schemas: map[string]*dcl.Component{
				"DeidentifyTemplate": &dcl.Component{
					Title: "DeidentifyTemplate",
					ID:    "{{parent}}/deidentifyTemplates/{{name}}",
					Locations: []string{
						"region",
					},
					HasCreate: true,
					SchemaProperty: dcl.Property{
						Type: "object",
						Required: []string{
							"parent",
						},
						Properties: map[string]*dcl.Property{
							"createTime": &dcl.Property{
								Type:        "string",
								Format:      "date-time",
								GoName:      "CreateTime",
								ReadOnly:    true,
								Description: "Output only. The creation timestamp of an inspectTemplate.",
								Immutable:   true,
							},
							"deidentifyConfig": &dcl.Property{
								Type:        "object",
								GoName:      "DeidentifyConfig",
								GoType:      "DeidentifyTemplateDeidentifyConfig",
								Description: "The core content of the template.",
								Properties: map[string]*dcl.Property{
									"infoTypeTransformations": &dcl.Property{
										Type:        "object",
										GoName:      "InfoTypeTransformations",
										GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformations",
										Description: "Treat the dataset as free-form text and apply the same free text transformation everywhere.",
										Conflicts: []string{
											"recordTransformations",
										},
										Required: []string{
											"transformations",
										},
										Properties: map[string]*dcl.Property{
											"transformations": &dcl.Property{
												Type:        "array",
												GoName:      "Transformations",
												Description: "Required. Transformation for each infoType. Cannot specify more than one for a given infoType.",
												SendEmpty:   true,
												ListType:    "list",
												Items: &dcl.Property{
													Type:   "object",
													GoType: "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformations",
													Required: []string{
														"primitiveTransformation",
													},
													Properties: map[string]*dcl.Property{
														"infoTypes": &dcl.Property{
															Type:        "array",
															GoName:      "InfoTypes",
															Description: "InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.",
															SendEmpty:   true,
															ListType:    "list",
															Items: &dcl.Property{
																Type:   "object",
																GoType: "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsInfoTypes",
																Properties: map[string]*dcl.Property{
																	"name": &dcl.Property{
																		Type:        "string",
																		GoName:      "Name",
																		Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																	},
																},
															},
														},
														"primitiveTransformation": &dcl.Property{
															Type:        "object",
															GoName:      "PrimitiveTransformation",
															GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformation",
															Description: "Required. Primitive transformation to apply to the infoType.",
															Properties: map[string]*dcl.Property{
																"bucketingConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "BucketingConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfig",
																	Description: "Bucketing",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"buckets": &dcl.Property{
																			Type:        "array",
																			GoName:      "Buckets",
																			Description: "Set of buckets. Ranges must be non-overlapping.",
																			SendEmpty:   true,
																			ListType:    "list",
																			Items: &dcl.Property{
																				Type:   "object",
																				GoType: "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBuckets",
																				Required: []string{
																					"replacementValue",
																				},
																				Properties: map[string]*dcl.Property{
																					"max": &dcl.Property{
																						Type:        "object",
																						GoName:      "Max",
																						GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMax",
																						Description: "Upper bound of the range, exclusive; type must match min.",
																						Properties: map[string]*dcl.Property{
																							"booleanValue": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "BooleanValue",
																								Description: "boolean",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"dateValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "DateValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValue",
																								Description: "date",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"day": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Day",
																										Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																									},
																									"month": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Month",
																										Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																									},
																									"year": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Year",
																										Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																									},
																								},
																							},
																							"dayOfWeekValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "DayOfWeekValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDayOfWeekValueEnum",
																								Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																								},
																								Enum: []string{
																									"DAY_OF_WEEK_UNSPECIFIED",
																									"MONDAY",
																									"TUESDAY",
																									"WEDNESDAY",
																									"THURSDAY",
																									"FRIDAY",
																									"SATURDAY",
																									"SUNDAY",
																								},
																							},
																							"floatValue": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "FloatValue",
																								Description: "float",
																								Conflicts: []string{
																									"integerValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"integerValue": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "IntegerValue",
																								Description: "integer",
																								Conflicts: []string{
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"stringValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "StringValue",
																								Description: "string",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"timeValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "TimeValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValue",
																								Description: "time of day",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"hours": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Hours",
																										Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																									},
																									"minutes": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Minutes",
																										Description: "Minutes of hour of day. Must be from 0 to 59.",
																									},
																									"nanos": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Nanos",
																										Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																									},
																									"seconds": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Seconds",
																										Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																									},
																								},
																							},
																							"timestampValue": &dcl.Property{
																								Type:        "string",
																								Format:      "date-time",
																								GoName:      "TimestampValue",
																								Description: "timestamp",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																						},
																					},
																					"min": &dcl.Property{
																						Type:        "object",
																						GoName:      "Min",
																						GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMin",
																						Description: "Lower bound of the range, inclusive. Type should be the same as max if used.",
																						Properties: map[string]*dcl.Property{
																							"booleanValue": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "BooleanValue",
																								Description: "boolean",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"dateValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "DateValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValue",
																								Description: "date",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"day": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Day",
																										Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																									},
																									"month": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Month",
																										Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																									},
																									"year": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Year",
																										Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																									},
																								},
																							},
																							"dayOfWeekValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "DayOfWeekValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMinDayOfWeekValueEnum",
																								Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																								},
																								Enum: []string{
																									"DAY_OF_WEEK_UNSPECIFIED",
																									"MONDAY",
																									"TUESDAY",
																									"WEDNESDAY",
																									"THURSDAY",
																									"FRIDAY",
																									"SATURDAY",
																									"SUNDAY",
																								},
																							},
																							"floatValue": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "FloatValue",
																								Description: "float",
																								Conflicts: []string{
																									"integerValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"integerValue": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "IntegerValue",
																								Description: "integer",
																								Conflicts: []string{
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"stringValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "StringValue",
																								Description: "string",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"timeValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "TimeValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValue",
																								Description: "time of day",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"hours": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Hours",
																										Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																									},
																									"minutes": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Minutes",
																										Description: "Minutes of hour of day. Must be from 0 to 59.",
																									},
																									"nanos": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Nanos",
																										Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																									},
																									"seconds": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Seconds",
																										Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																									},
																								},
																							},
																							"timestampValue": &dcl.Property{
																								Type:        "string",
																								Format:      "date-time",
																								GoName:      "TimestampValue",
																								Description: "timestamp",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																						},
																					},
																					"replacementValue": &dcl.Property{
																						Type:        "object",
																						GoName:      "ReplacementValue",
																						GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValue",
																						Description: "Required. Replacement value for this bucket.",
																						Properties: map[string]*dcl.Property{
																							"booleanValue": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "BooleanValue",
																								Description: "boolean",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"dateValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "DateValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValue",
																								Description: "date",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"day": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Day",
																										Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																									},
																									"month": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Month",
																										Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																									},
																									"year": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Year",
																										Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																									},
																								},
																							},
																							"dayOfWeekValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "DayOfWeekValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDayOfWeekValueEnum",
																								Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																								},
																								Enum: []string{
																									"DAY_OF_WEEK_UNSPECIFIED",
																									"MONDAY",
																									"TUESDAY",
																									"WEDNESDAY",
																									"THURSDAY",
																									"FRIDAY",
																									"SATURDAY",
																									"SUNDAY",
																								},
																							},
																							"floatValue": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "FloatValue",
																								Description: "float",
																								Conflicts: []string{
																									"integerValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"integerValue": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "IntegerValue",
																								Description: "integer",
																								Conflicts: []string{
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"stringValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "StringValue",
																								Description: "string",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"timeValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "TimeValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValue",
																								Description: "time of day",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"hours": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Hours",
																										Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																									},
																									"minutes": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Minutes",
																										Description: "Minutes of hour of day. Must be from 0 to 59.",
																									},
																									"nanos": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Nanos",
																										Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																									},
																									"seconds": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Seconds",
																										Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																									},
																								},
																							},
																							"timestampValue": &dcl.Property{
																								Type:        "string",
																								Format:      "date-time",
																								GoName:      "TimestampValue",
																								Description: "timestamp",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																"characterMaskConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CharacterMaskConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfig",
																	Description: "Mask",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"charactersToIgnore": &dcl.Property{
																			Type:        "array",
																			GoName:      "CharactersToIgnore",
																			Description: "When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.",
																			SendEmpty:   true,
																			ListType:    "list",
																			Items: &dcl.Property{
																				Type:   "object",
																				GoType: "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnore",
																				Properties: map[string]*dcl.Property{
																					"charactersToSkip": &dcl.Property{
																						Type:        "string",
																						GoName:      "CharactersToSkip",
																						Description: "Characters to not transform when masking.",
																						Conflicts: []string{
																							"commonCharactersToIgnore",
																						},
																					},
																					"commonCharactersToIgnore": &dcl.Property{
																						Type:        "string",
																						GoName:      "CommonCharactersToIgnore",
																						GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreCommonCharactersToIgnoreEnum",
																						Description: "Common characters to not transform when masking. Useful to avoid removing punctuation. Possible values: COMMON_CHARS_TO_IGNORE_UNSPECIFIED, NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE",
																						Conflicts: []string{
																							"charactersToSkip",
																						},
																						Enum: []string{
																							"COMMON_CHARS_TO_IGNORE_UNSPECIFIED",
																							"NUMERIC",
																							"ALPHA_UPPER_CASE",
																							"ALPHA_LOWER_CASE",
																							"PUNCTUATION",
																							"WHITESPACE",
																						},
																					},
																				},
																			},
																		},
																		"maskingCharacter": &dcl.Property{
																			Type:        "string",
																			GoName:      "MaskingCharacter",
																			Description: "Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.",
																		},
																		"numberToMask": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "NumberToMask",
																			Description: "Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.",
																		},
																		"reverseOrder": &dcl.Property{
																			Type:        "boolean",
																			GoName:      "ReverseOrder",
																			Description: "Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.",
																		},
																	},
																},
																"cryptoDeterministicConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CryptoDeterministicConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfig",
																	Description: "Deterministic Crypto",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"context": &dcl.Property{
																			Type:        "object",
																			GoName:      "Context",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigContext",
																			Description: "A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and non-structured `ContentItem`s.",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name describing the field.",
																				},
																			},
																		},
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKey",
																			Description: "The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																		"surrogateInfoType": &dcl.Property{
																			Type:        "object",
																			GoName:      "SurrogateInfoType",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType",
																			Description: "The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																				},
																			},
																		},
																	},
																},
																"cryptoHashConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CryptoHashConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfig",
																	Description: "Crypto",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKey",
																			Description: "The key used by the hash function.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																"cryptoReplaceFfxFpeConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CryptoReplaceFfxFpeConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfig",
																	Description: "Ffx-Fpe",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Required: []string{
																		"cryptoKey",
																	},
																	Properties: map[string]*dcl.Property{
																		"commonAlphabet": &dcl.Property{
																			Type:        "string",
																			GoName:      "CommonAlphabet",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCommonAlphabetEnum",
																			Description: "Common alphabets. Possible values: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC",
																			Conflicts: []string{
																				"customAlphabet",
																				"radix",
																			},
																			Enum: []string{
																				"FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED",
																				"NUMERIC",
																				"HEXADECIMAL",
																				"UPPER_CASE_ALPHA_NUMERIC",
																				"ALPHA_NUMERIC",
																			},
																		},
																		"context": &dcl.Property{
																			Type:        "object",
																			GoName:      "Context",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContext",
																			Description: "The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and non-structured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name describing the field.",
																				},
																			},
																		},
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey",
																			Description: "Required. The key used by the encryption algorithm.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																		"customAlphabet": &dcl.Property{
																			Type:        "string",
																			GoName:      "CustomAlphabet",
																			Description: "This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: ``0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;\"'<,>.?/``",
																			Conflicts: []string{
																				"commonAlphabet",
																				"radix",
																			},
																		},
																		"radix": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "Radix",
																			Description: "The native way to select the alphabet. Must be in the range [2, 95].",
																			Conflicts: []string{
																				"commonAlphabet",
																				"customAlphabet",
																			},
																		},
																		"surrogateInfoType": &dcl.Property{
																			Type:        "object",
																			GoName:      "SurrogateInfoType",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType",
																			Description: "The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																				},
																			},
																		},
																	},
																},
																"dateShiftConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "DateShiftConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfig",
																	Description: "Date Shift",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"cryptoDeterministicConfig",
																	},
																	Required: []string{
																		"upperBoundDays",
																		"lowerBoundDays",
																	},
																	Properties: map[string]*dcl.Property{
																		"context": &dcl.Property{
																			Type:        "object",
																			GoName:      "Context",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigContext",
																			Description: "Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name describing the field.",
																				},
																			},
																		},
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKey",
																			Description: "Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																		"lowerBoundDays": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "LowerBoundDays",
																			Description: "Required. For example, -5 means shift date to at most 5 days back in the past.",
																		},
																		"upperBoundDays": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "UpperBoundDays",
																			Description: "Required. Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.",
																		},
																	},
																},
																"fixedSizeBucketingConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "FixedSizeBucketingConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfig",
																	Description: "Fixed size bucketing",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Required: []string{
																		"lowerBound",
																		"upperBound",
																		"bucketSize",
																	},
																	Properties: map[string]*dcl.Property{
																		"bucketSize": &dcl.Property{
																			Type:        "number",
																			Format:      "double",
																			GoName:      "BucketSize",
																			Description: "Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.",
																		},
																		"lowerBound": &dcl.Property{
																			Type:        "object",
																			GoName:      "LowerBound",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBound",
																			Description: "Required. Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value \"-10\".",
																			Properties: map[string]*dcl.Property{
																				"booleanValue": &dcl.Property{
																					Type:        "boolean",
																					GoName:      "BooleanValue",
																					Description: "boolean",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"dateValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "DateValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValue",
																					Description: "date",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"day": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Day",
																							Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																						},
																						"month": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Month",
																							Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																						},
																						"year": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Year",
																							Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																						},
																					},
																				},
																				"dayOfWeekValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "DayOfWeekValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDayOfWeekValueEnum",
																					Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																					},
																					Enum: []string{
																						"DAY_OF_WEEK_UNSPECIFIED",
																						"MONDAY",
																						"TUESDAY",
																						"WEDNESDAY",
																						"THURSDAY",
																						"FRIDAY",
																						"SATURDAY",
																						"SUNDAY",
																					},
																				},
																				"floatValue": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "FloatValue",
																					Description: "float",
																					Conflicts: []string{
																						"integerValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"integerValue": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "IntegerValue",
																					Description: "integer",
																					Conflicts: []string{
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"stringValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "StringValue",
																					Description: "string",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"timeValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValue",
																					Description: "time of day",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"hours": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Hours",
																							Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																						},
																						"minutes": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Minutes",
																							Description: "Minutes of hour of day. Must be from 0 to 59.",
																						},
																						"nanos": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Nanos",
																							Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																						},
																						"seconds": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Seconds",
																							Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																						},
																					},
																				},
																				"timestampValue": &dcl.Property{
																					Type:        "string",
																					Format:      "date-time",
																					GoName:      "TimestampValue",
																					Description: "timestamp",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																			},
																		},
																		"upperBound": &dcl.Property{
																			Type:        "object",
																			GoName:      "UpperBound",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBound",
																			Description: "Required. Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value \"89+\".",
																			Properties: map[string]*dcl.Property{
																				"booleanValue": &dcl.Property{
																					Type:        "boolean",
																					GoName:      "BooleanValue",
																					Description: "boolean",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"dateValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "DateValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValue",
																					Description: "date",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"day": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Day",
																							Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																						},
																						"month": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Month",
																							Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																						},
																						"year": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Year",
																							Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																						},
																					},
																				},
																				"dayOfWeekValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "DayOfWeekValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDayOfWeekValueEnum",
																					Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																					},
																					Enum: []string{
																						"DAY_OF_WEEK_UNSPECIFIED",
																						"MONDAY",
																						"TUESDAY",
																						"WEDNESDAY",
																						"THURSDAY",
																						"FRIDAY",
																						"SATURDAY",
																						"SUNDAY",
																					},
																				},
																				"floatValue": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "FloatValue",
																					Description: "float",
																					Conflicts: []string{
																						"integerValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"integerValue": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "IntegerValue",
																					Description: "integer",
																					Conflicts: []string{
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"stringValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "StringValue",
																					Description: "string",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"timeValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValue",
																					Description: "time of day",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"hours": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Hours",
																							Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																						},
																						"minutes": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Minutes",
																							Description: "Minutes of hour of day. Must be from 0 to 59.",
																						},
																						"nanos": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Nanos",
																							Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																						},
																						"seconds": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Seconds",
																							Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																						},
																					},
																				},
																				"timestampValue": &dcl.Property{
																					Type:        "string",
																					Format:      "date-time",
																					GoName:      "TimestampValue",
																					Description: "timestamp",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																			},
																		},
																	},
																},
																"redactConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "RedactConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationRedactConfig",
																	Description: "Redact",
																	Conflicts: []string{
																		"replaceConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	SendEmpty:  true,
																	Properties: map[string]*dcl.Property{},
																},
																"replaceConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "ReplaceConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfig",
																	Description: "Replace with a specified value.",
																	Conflicts: []string{
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"newValue": &dcl.Property{
																			Type:        "object",
																			GoName:      "NewValue",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValue",
																			Description: "Value to replace it with.",
																			Properties: map[string]*dcl.Property{
																				"booleanValue": &dcl.Property{
																					Type:        "boolean",
																					GoName:      "BooleanValue",
																					Description: "boolean",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"dateValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "DateValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueDateValue",
																					Description: "date",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"day": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Day",
																							Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																						},
																						"month": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Month",
																							Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																						},
																						"year": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Year",
																							Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																						},
																					},
																				},
																				"dayOfWeekValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "DayOfWeekValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueDayOfWeekValueEnum",
																					Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																					},
																					Enum: []string{
																						"DAY_OF_WEEK_UNSPECIFIED",
																						"MONDAY",
																						"TUESDAY",
																						"WEDNESDAY",
																						"THURSDAY",
																						"FRIDAY",
																						"SATURDAY",
																						"SUNDAY",
																					},
																				},
																				"floatValue": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "FloatValue",
																					Description: "float",
																					Conflicts: []string{
																						"integerValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"integerValue": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "IntegerValue",
																					Description: "integer",
																					Conflicts: []string{
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"stringValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "StringValue",
																					Description: "string",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"timeValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValue",
																					Description: "time of day",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"hours": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Hours",
																							Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																						},
																						"minutes": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Minutes",
																							Description: "Minutes of hour of day. Must be from 0 to 59.",
																						},
																						"nanos": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Nanos",
																							Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																						},
																						"seconds": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Seconds",
																							Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																						},
																					},
																				},
																				"timestampValue": &dcl.Property{
																					Type:        "string",
																					Format:      "date-time",
																					GoName:      "TimestampValue",
																					Description: "timestamp",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																			},
																		},
																	},
																},
																"replaceWithInfoTypeConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "ReplaceWithInfoTypeConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceWithInfoTypeConfig",
																	Description: "Replace with infotype",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	SendEmpty:  true,
																	Properties: map[string]*dcl.Property{},
																},
																"timePartConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "TimePartConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationTimePartConfig",
																	Description: "Time extraction",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"partToExtract": &dcl.Property{
																			Type:        "string",
																			GoName:      "PartToExtract",
																			GoType:      "DeidentifyTemplateDeidentifyConfigInfoTypeTransformationsTransformationsPrimitiveTransformationTimePartConfigPartToExtractEnum",
																			Description: "The part of the time to keep. Possible values: TIME_PART_UNSPECIFIED, YEAR, MONTH, DAY_OF_MONTH, DAY_OF_WEEK, WEEK_OF_YEAR, HOUR_OF_DAY",
																			Enum: []string{
																				"TIME_PART_UNSPECIFIED",
																				"YEAR",
																				"MONTH",
																				"DAY_OF_MONTH",
																				"DAY_OF_WEEK",
																				"WEEK_OF_YEAR",
																				"HOUR_OF_DAY",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"recordTransformations": &dcl.Property{
										Type:        "object",
										GoName:      "RecordTransformations",
										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformations",
										Description: "Treat the dataset as structured. Transformations can be applied to specific locations within structured datasets, such as transforming a column within a table.",
										Conflicts: []string{
											"infoTypeTransformations",
										},
										Properties: map[string]*dcl.Property{
											"fieldTransformations": &dcl.Property{
												Type:        "array",
												GoName:      "FieldTransformations",
												Description: "Transform the record by applying various field transformations.",
												SendEmpty:   true,
												ListType:    "list",
												Items: &dcl.Property{
													Type:   "object",
													GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformations",
													Required: []string{
														"fields",
													},
													Properties: map[string]*dcl.Property{
														"condition": &dcl.Property{
															Type:        "object",
															GoName:      "Condition",
															GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsCondition",
															Description: "Only apply the transformation if the condition evaluates to true for the given `RecordCondition`. The conditions are allowed to reference fields that are not used in the actual transformation. Example Use Cases: - Apply a different bucket transformation to an age column if the zip code column for the same record is within a specific range. - Redact a field if the date of birth field is greater than 85.",
															Properties: map[string]*dcl.Property{
																"expressions": &dcl.Property{
																	Type:        "object",
																	GoName:      "Expressions",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressions",
																	Description: "An expression.",
																	Properties: map[string]*dcl.Property{
																		"conditions": &dcl.Property{
																			Type:        "object",
																			GoName:      "Conditions",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditions",
																			Description: "Conditions to apply to the expression.",
																			Properties: map[string]*dcl.Property{
																				"conditions": &dcl.Property{
																					Type:        "array",
																					GoName:      "Conditions",
																					Description: "A collection of conditions.",
																					SendEmpty:   true,
																					ListType:    "list",
																					Items: &dcl.Property{
																						Type:   "object",
																						GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditions",
																						Required: []string{
																							"field",
																							"operator",
																						},
																						Properties: map[string]*dcl.Property{
																							"field": &dcl.Property{
																								Type:        "object",
																								GoName:      "Field",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditionsField",
																								Description: "Required. Field within the record this condition is evaluated against.",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name describing the field.",
																									},
																								},
																							},
																							"operator": &dcl.Property{
																								Type:        "string",
																								GoName:      "Operator",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditionsOperatorEnum",
																								Description: "Required. Operator used to compare the field or infoType to the value. Possible values: LOGICAL_OPERATOR_UNSPECIFIED, AND",
																								Enum: []string{
																									"LOGICAL_OPERATOR_UNSPECIFIED",
																									"AND",
																								},
																							},
																							"value": &dcl.Property{
																								Type:        "object",
																								GoName:      "Value",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditionsValue",
																								Description: "Value to compare against. [Mandatory, except for `EXISTS` tests.]",
																								Properties: map[string]*dcl.Property{
																									"booleanValue": &dcl.Property{
																										Type:        "boolean",
																										GoName:      "BooleanValue",
																										Description: "boolean",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"dateValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "DateValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditionsValueDateValue",
																										Description: "date",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"day": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Day",
																												Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																											},
																											"month": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Month",
																												Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																											},
																											"year": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Year",
																												Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																											},
																										},
																									},
																									"dayOfWeekValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "DayOfWeekValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditionsValueDayOfWeekValueEnum",
																										Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																										},
																										Enum: []string{
																											"DAY_OF_WEEK_UNSPECIFIED",
																											"MONDAY",
																											"TUESDAY",
																											"WEDNESDAY",
																											"THURSDAY",
																											"FRIDAY",
																											"SATURDAY",
																											"SUNDAY",
																										},
																									},
																									"floatValue": &dcl.Property{
																										Type:        "number",
																										Format:      "double",
																										GoName:      "FloatValue",
																										Description: "float",
																										Conflicts: []string{
																											"integerValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"integerValue": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "IntegerValue",
																										Description: "integer",
																										Conflicts: []string{
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"stringValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "StringValue",
																										Description: "string",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"timeValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "TimeValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsConditionsConditionsValueTimeValue",
																										Description: "time of day",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"hours": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Hours",
																												Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																											},
																											"minutes": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Minutes",
																												Description: "Minutes of hour of day. Must be from 0 to 59.",
																											},
																											"nanos": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Nanos",
																												Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																											},
																											"seconds": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Seconds",
																												Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																											},
																										},
																									},
																									"timestampValue": &dcl.Property{
																										Type:        "string",
																										Format:      "date-time",
																										GoName:      "TimestampValue",
																										Description: "timestamp",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		"logicalOperator": &dcl.Property{
																			Type:        "string",
																			GoName:      "LogicalOperator",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsConditionExpressionsLogicalOperatorEnum",
																			Description: "The operator to apply to the result of conditions. Default and currently only supported value is `AND`. Possible values: LOGICAL_OPERATOR_UNSPECIFIED, AND",
																			Enum: []string{
																				"LOGICAL_OPERATOR_UNSPECIFIED",
																				"AND",
																			},
																		},
																	},
																},
															},
														},
														"fields": &dcl.Property{
															Type:        "array",
															GoName:      "Fields",
															Description: "Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \"contact.nums[0].type\", use \"contact.nums.type\".",
															SendEmpty:   true,
															ListType:    "list",
															Items: &dcl.Property{
																Type:   "object",
																GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsFields",
																Properties: map[string]*dcl.Property{
																	"name": &dcl.Property{
																		Type:        "string",
																		GoName:      "Name",
																		Description: "Name describing the field.",
																	},
																},
															},
														},
														"infoTypeTransformations": &dcl.Property{
															Type:        "object",
															GoName:      "InfoTypeTransformations",
															GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformations",
															Description: "Treat the contents of the field as free text, and selectively transform content that matches an `InfoType`.",
															Conflicts: []string{
																"primitiveTransformation",
															},
															Required: []string{
																"transformations",
															},
															Properties: map[string]*dcl.Property{
																"transformations": &dcl.Property{
																	Type:        "array",
																	GoName:      "Transformations",
																	Description: "Required. Transformation for each infoType. Cannot specify more than one for a given infoType.",
																	SendEmpty:   true,
																	ListType:    "list",
																	Items: &dcl.Property{
																		Type:   "object",
																		GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformations",
																		Required: []string{
																			"primitiveTransformation",
																		},
																		Properties: map[string]*dcl.Property{
																			"infoTypes": &dcl.Property{
																				Type:        "array",
																				GoName:      "InfoTypes",
																				Description: "InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.",
																				SendEmpty:   true,
																				ListType:    "list",
																				Items: &dcl.Property{
																					Type:   "object",
																					GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsInfoTypes",
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																						},
																					},
																				},
																			},
																			"primitiveTransformation": &dcl.Property{
																				Type:        "object",
																				GoName:      "PrimitiveTransformation",
																				GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformation",
																				Description: "Required. Primitive transformation to apply to the infoType.",
																				Properties: map[string]*dcl.Property{
																					"bucketingConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "BucketingConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfig",
																						Description: "Bucketing",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Properties: map[string]*dcl.Property{
																							"buckets": &dcl.Property{
																								Type:        "array",
																								GoName:      "Buckets",
																								Description: "Set of buckets. Ranges must be non-overlapping.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "object",
																									GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBuckets",
																									Required: []string{
																										"replacementValue",
																									},
																									Properties: map[string]*dcl.Property{
																										"max": &dcl.Property{
																											Type:        "object",
																											GoName:      "Max",
																											GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMax",
																											Description: "Upper bound of the range, exclusive; type must match min.",
																											Properties: map[string]*dcl.Property{
																												"booleanValue": &dcl.Property{
																													Type:        "boolean",
																													GoName:      "BooleanValue",
																													Description: "boolean",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"dateValue": &dcl.Property{
																													Type:        "object",
																													GoName:      "DateValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValue",
																													Description: "date",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dayOfWeekValue",
																													},
																													Properties: map[string]*dcl.Property{
																														"day": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Day",
																															Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																														},
																														"month": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Month",
																															Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																														},
																														"year": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Year",
																															Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																														},
																													},
																												},
																												"dayOfWeekValue": &dcl.Property{
																													Type:        "string",
																													GoName:      "DayOfWeekValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDayOfWeekValueEnum",
																													Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																													},
																													Enum: []string{
																														"DAY_OF_WEEK_UNSPECIFIED",
																														"MONDAY",
																														"TUESDAY",
																														"WEDNESDAY",
																														"THURSDAY",
																														"FRIDAY",
																														"SATURDAY",
																														"SUNDAY",
																													},
																												},
																												"floatValue": &dcl.Property{
																													Type:        "number",
																													Format:      "double",
																													GoName:      "FloatValue",
																													Description: "float",
																													Conflicts: []string{
																														"integerValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"integerValue": &dcl.Property{
																													Type:        "integer",
																													Format:      "int64",
																													GoName:      "IntegerValue",
																													Description: "integer",
																													Conflicts: []string{
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"stringValue": &dcl.Property{
																													Type:        "string",
																													GoName:      "StringValue",
																													Description: "string",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"timeValue": &dcl.Property{
																													Type:        "object",
																													GoName:      "TimeValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValue",
																													Description: "time of day",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																													Properties: map[string]*dcl.Property{
																														"hours": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Hours",
																															Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																														},
																														"minutes": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Minutes",
																															Description: "Minutes of hour of day. Must be from 0 to 59.",
																														},
																														"nanos": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Nanos",
																															Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																														},
																														"seconds": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Seconds",
																															Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																														},
																													},
																												},
																												"timestampValue": &dcl.Property{
																													Type:        "string",
																													Format:      "date-time",
																													GoName:      "TimestampValue",
																													Description: "timestamp",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																											},
																										},
																										"min": &dcl.Property{
																											Type:        "object",
																											GoName:      "Min",
																											GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMin",
																											Description: "Lower bound of the range, inclusive. Type should be the same as max if used.",
																											Properties: map[string]*dcl.Property{
																												"booleanValue": &dcl.Property{
																													Type:        "boolean",
																													GoName:      "BooleanValue",
																													Description: "boolean",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"dateValue": &dcl.Property{
																													Type:        "object",
																													GoName:      "DateValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValue",
																													Description: "date",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dayOfWeekValue",
																													},
																													Properties: map[string]*dcl.Property{
																														"day": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Day",
																															Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																														},
																														"month": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Month",
																															Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																														},
																														"year": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Year",
																															Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																														},
																													},
																												},
																												"dayOfWeekValue": &dcl.Property{
																													Type:        "string",
																													GoName:      "DayOfWeekValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMinDayOfWeekValueEnum",
																													Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																													},
																													Enum: []string{
																														"DAY_OF_WEEK_UNSPECIFIED",
																														"MONDAY",
																														"TUESDAY",
																														"WEDNESDAY",
																														"THURSDAY",
																														"FRIDAY",
																														"SATURDAY",
																														"SUNDAY",
																													},
																												},
																												"floatValue": &dcl.Property{
																													Type:        "number",
																													Format:      "double",
																													GoName:      "FloatValue",
																													Description: "float",
																													Conflicts: []string{
																														"integerValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"integerValue": &dcl.Property{
																													Type:        "integer",
																													Format:      "int64",
																													GoName:      "IntegerValue",
																													Description: "integer",
																													Conflicts: []string{
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"stringValue": &dcl.Property{
																													Type:        "string",
																													GoName:      "StringValue",
																													Description: "string",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"timeValue": &dcl.Property{
																													Type:        "object",
																													GoName:      "TimeValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValue",
																													Description: "time of day",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																													Properties: map[string]*dcl.Property{
																														"hours": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Hours",
																															Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																														},
																														"minutes": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Minutes",
																															Description: "Minutes of hour of day. Must be from 0 to 59.",
																														},
																														"nanos": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Nanos",
																															Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																														},
																														"seconds": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Seconds",
																															Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																														},
																													},
																												},
																												"timestampValue": &dcl.Property{
																													Type:        "string",
																													Format:      "date-time",
																													GoName:      "TimestampValue",
																													Description: "timestamp",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																											},
																										},
																										"replacementValue": &dcl.Property{
																											Type:        "object",
																											GoName:      "ReplacementValue",
																											GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValue",
																											Description: "Required. Replacement value for this bucket.",
																											Properties: map[string]*dcl.Property{
																												"booleanValue": &dcl.Property{
																													Type:        "boolean",
																													GoName:      "BooleanValue",
																													Description: "boolean",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"dateValue": &dcl.Property{
																													Type:        "object",
																													GoName:      "DateValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValue",
																													Description: "date",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dayOfWeekValue",
																													},
																													Properties: map[string]*dcl.Property{
																														"day": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Day",
																															Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																														},
																														"month": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Month",
																															Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																														},
																														"year": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Year",
																															Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																														},
																													},
																												},
																												"dayOfWeekValue": &dcl.Property{
																													Type:        "string",
																													GoName:      "DayOfWeekValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDayOfWeekValueEnum",
																													Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																													},
																													Enum: []string{
																														"DAY_OF_WEEK_UNSPECIFIED",
																														"MONDAY",
																														"TUESDAY",
																														"WEDNESDAY",
																														"THURSDAY",
																														"FRIDAY",
																														"SATURDAY",
																														"SUNDAY",
																													},
																												},
																												"floatValue": &dcl.Property{
																													Type:        "number",
																													Format:      "double",
																													GoName:      "FloatValue",
																													Description: "float",
																													Conflicts: []string{
																														"integerValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"integerValue": &dcl.Property{
																													Type:        "integer",
																													Format:      "int64",
																													GoName:      "IntegerValue",
																													Description: "integer",
																													Conflicts: []string{
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"stringValue": &dcl.Property{
																													Type:        "string",
																													GoName:      "StringValue",
																													Description: "string",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"booleanValue",
																														"timestampValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																												"timeValue": &dcl.Property{
																													Type:        "object",
																													GoName:      "TimeValue",
																													GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValue",
																													Description: "time of day",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timestampValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																													Properties: map[string]*dcl.Property{
																														"hours": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Hours",
																															Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																														},
																														"minutes": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Minutes",
																															Description: "Minutes of hour of day. Must be from 0 to 59.",
																														},
																														"nanos": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Nanos",
																															Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																														},
																														"seconds": &dcl.Property{
																															Type:        "integer",
																															Format:      "int64",
																															GoName:      "Seconds",
																															Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																														},
																													},
																												},
																												"timestampValue": &dcl.Property{
																													Type:        "string",
																													Format:      "date-time",
																													GoName:      "TimestampValue",
																													Description: "timestamp",
																													Conflicts: []string{
																														"integerValue",
																														"floatValue",
																														"stringValue",
																														"booleanValue",
																														"timeValue",
																														"dateValue",
																														"dayOfWeekValue",
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					"characterMaskConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "CharacterMaskConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfig",
																						Description: "Mask",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Properties: map[string]*dcl.Property{
																							"charactersToIgnore": &dcl.Property{
																								Type:        "array",
																								GoName:      "CharactersToIgnore",
																								Description: "When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.",
																								SendEmpty:   true,
																								ListType:    "list",
																								Items: &dcl.Property{
																									Type:   "object",
																									GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnore",
																									Properties: map[string]*dcl.Property{
																										"charactersToSkip": &dcl.Property{
																											Type:        "string",
																											GoName:      "CharactersToSkip",
																											Description: "Characters to not transform when masking.",
																											Conflicts: []string{
																												"commonCharactersToIgnore",
																											},
																										},
																										"commonCharactersToIgnore": &dcl.Property{
																											Type:        "string",
																											GoName:      "CommonCharactersToIgnore",
																											GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreCommonCharactersToIgnoreEnum",
																											Description: "Common characters to not transform when masking. Useful to avoid removing punctuation. Possible values: COMMON_CHARS_TO_IGNORE_UNSPECIFIED, NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE",
																											Conflicts: []string{
																												"charactersToSkip",
																											},
																											Enum: []string{
																												"COMMON_CHARS_TO_IGNORE_UNSPECIFIED",
																												"NUMERIC",
																												"ALPHA_UPPER_CASE",
																												"ALPHA_LOWER_CASE",
																												"PUNCTUATION",
																												"WHITESPACE",
																											},
																										},
																									},
																								},
																							},
																							"maskingCharacter": &dcl.Property{
																								Type:        "string",
																								GoName:      "MaskingCharacter",
																								Description: "Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.",
																							},
																							"numberToMask": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "NumberToMask",
																								Description: "Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.",
																							},
																							"reverseOrder": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "ReverseOrder",
																								Description: "Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.",
																							},
																						},
																					},
																					"cryptoDeterministicConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "CryptoDeterministicConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfig",
																						Description: "Deterministic Crypto",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																						},
																						Properties: map[string]*dcl.Property{
																							"context": &dcl.Property{
																								Type:        "object",
																								GoName:      "Context",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigContext",
																								Description: "A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and non-structured `ContentItem`s.",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name describing the field.",
																									},
																								},
																							},
																							"cryptoKey": &dcl.Property{
																								Type:        "object",
																								GoName:      "CryptoKey",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKey",
																								Description: "The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.",
																								Properties: map[string]*dcl.Property{
																									"kmsWrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "KmsWrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped",
																										Description: "Key wrapped using Cloud KMS",
																										Conflicts: []string{
																											"transient",
																											"unwrapped",
																										},
																										Required: []string{
																											"wrappedKey",
																											"cryptoKeyName",
																										},
																										Properties: map[string]*dcl.Property{
																											"cryptoKeyName": &dcl.Property{
																												Type:        "string",
																												GoName:      "CryptoKeyName",
																												Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																												ResourceReferences: []*dcl.PropertyResourceReference{
																													&dcl.PropertyResourceReference{
																														Resource: "Cloudkms/CryptoKey",
																														Field:    "name",
																													},
																												},
																											},
																											"wrappedKey": &dcl.Property{
																												Type:        "string",
																												GoName:      "WrappedKey",
																												Description: "Required. The wrapped data crypto key.",
																											},
																										},
																									},
																									"transient": &dcl.Property{
																										Type:        "object",
																										GoName:      "Transient",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransient",
																										Description: "Transient crypto key",
																										Conflicts: []string{
																											"unwrapped",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"name",
																										},
																										Properties: map[string]*dcl.Property{
																											"name": &dcl.Property{
																												Type:        "string",
																												GoName:      "Name",
																												Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																											},
																										},
																									},
																									"unwrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "Unwrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrapped",
																										Description: "Unwrapped crypto key",
																										Conflicts: []string{
																											"transient",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"key",
																										},
																										Properties: map[string]*dcl.Property{
																											"key": &dcl.Property{
																												Type:        "string",
																												GoName:      "Key",
																												Description: "Required. A 128/192/256 bit key.",
																											},
																										},
																									},
																								},
																							},
																							"surrogateInfoType": &dcl.Property{
																								Type:        "object",
																								GoName:      "SurrogateInfoType",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType",
																								Description: "The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																									},
																								},
																							},
																						},
																					},
																					"cryptoHashConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "CryptoHashConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfig",
																						Description: "Crypto",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Properties: map[string]*dcl.Property{
																							"cryptoKey": &dcl.Property{
																								Type:        "object",
																								GoName:      "CryptoKey",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKey",
																								Description: "The key used by the hash function.",
																								Properties: map[string]*dcl.Property{
																									"kmsWrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "KmsWrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped",
																										Description: "Key wrapped using Cloud KMS",
																										Conflicts: []string{
																											"transient",
																											"unwrapped",
																										},
																										Required: []string{
																											"wrappedKey",
																											"cryptoKeyName",
																										},
																										Properties: map[string]*dcl.Property{
																											"cryptoKeyName": &dcl.Property{
																												Type:        "string",
																												GoName:      "CryptoKeyName",
																												Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																												ResourceReferences: []*dcl.PropertyResourceReference{
																													&dcl.PropertyResourceReference{
																														Resource: "Cloudkms/CryptoKey",
																														Field:    "name",
																													},
																												},
																											},
																											"wrappedKey": &dcl.Property{
																												Type:        "string",
																												GoName:      "WrappedKey",
																												Description: "Required. The wrapped data crypto key.",
																											},
																										},
																									},
																									"transient": &dcl.Property{
																										Type:        "object",
																										GoName:      "Transient",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransient",
																										Description: "Transient crypto key",
																										Conflicts: []string{
																											"unwrapped",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"name",
																										},
																										Properties: map[string]*dcl.Property{
																											"name": &dcl.Property{
																												Type:        "string",
																												GoName:      "Name",
																												Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																											},
																										},
																									},
																									"unwrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "Unwrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrapped",
																										Description: "Unwrapped crypto key",
																										Conflicts: []string{
																											"transient",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"key",
																										},
																										Properties: map[string]*dcl.Property{
																											"key": &dcl.Property{
																												Type:        "string",
																												GoName:      "Key",
																												Description: "Required. A 128/192/256 bit key.",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					"cryptoReplaceFfxFpeConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "CryptoReplaceFfxFpeConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfig",
																						Description: "Ffx-Fpe",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Required: []string{
																							"cryptoKey",
																						},
																						Properties: map[string]*dcl.Property{
																							"commonAlphabet": &dcl.Property{
																								Type:        "string",
																								GoName:      "CommonAlphabet",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCommonAlphabetEnum",
																								Description: "Common alphabets. Possible values: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC",
																								Conflicts: []string{
																									"customAlphabet",
																									"radix",
																								},
																								Enum: []string{
																									"FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED",
																									"NUMERIC",
																									"HEXADECIMAL",
																									"UPPER_CASE_ALPHA_NUMERIC",
																									"ALPHA_NUMERIC",
																								},
																							},
																							"context": &dcl.Property{
																								Type:        "object",
																								GoName:      "Context",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContext",
																								Description: "The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and non-structured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name describing the field.",
																									},
																								},
																							},
																							"cryptoKey": &dcl.Property{
																								Type:        "object",
																								GoName:      "CryptoKey",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey",
																								Description: "Required. The key used by the encryption algorithm.",
																								Properties: map[string]*dcl.Property{
																									"kmsWrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "KmsWrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped",
																										Description: "Key wrapped using Cloud KMS",
																										Conflicts: []string{
																											"transient",
																											"unwrapped",
																										},
																										Required: []string{
																											"wrappedKey",
																											"cryptoKeyName",
																										},
																										Properties: map[string]*dcl.Property{
																											"cryptoKeyName": &dcl.Property{
																												Type:        "string",
																												GoName:      "CryptoKeyName",
																												Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																												ResourceReferences: []*dcl.PropertyResourceReference{
																													&dcl.PropertyResourceReference{
																														Resource: "Cloudkms/CryptoKey",
																														Field:    "name",
																													},
																												},
																											},
																											"wrappedKey": &dcl.Property{
																												Type:        "string",
																												GoName:      "WrappedKey",
																												Description: "Required. The wrapped data crypto key.",
																											},
																										},
																									},
																									"transient": &dcl.Property{
																										Type:        "object",
																										GoName:      "Transient",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransient",
																										Description: "Transient crypto key",
																										Conflicts: []string{
																											"unwrapped",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"name",
																										},
																										Properties: map[string]*dcl.Property{
																											"name": &dcl.Property{
																												Type:        "string",
																												GoName:      "Name",
																												Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																											},
																										},
																									},
																									"unwrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "Unwrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrapped",
																										Description: "Unwrapped crypto key",
																										Conflicts: []string{
																											"transient",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"key",
																										},
																										Properties: map[string]*dcl.Property{
																											"key": &dcl.Property{
																												Type:        "string",
																												GoName:      "Key",
																												Description: "Required. A 128/192/256 bit key.",
																											},
																										},
																									},
																								},
																							},
																							"customAlphabet": &dcl.Property{
																								Type:        "string",
																								GoName:      "CustomAlphabet",
																								Description: "This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: ``0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;\"'<,>.?/``",
																								Conflicts: []string{
																									"commonAlphabet",
																									"radix",
																								},
																							},
																							"radix": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "Radix",
																								Description: "The native way to select the alphabet. Must be in the range [2, 95].",
																								Conflicts: []string{
																									"commonAlphabet",
																									"customAlphabet",
																								},
																							},
																							"surrogateInfoType": &dcl.Property{
																								Type:        "object",
																								GoName:      "SurrogateInfoType",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType",
																								Description: "The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																									},
																								},
																							},
																						},
																					},
																					"dateShiftConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "DateShiftConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfig",
																						Description: "Date Shift",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"cryptoDeterministicConfig",
																						},
																						Required: []string{
																							"upperBoundDays",
																							"lowerBoundDays",
																						},
																						Properties: map[string]*dcl.Property{
																							"context": &dcl.Property{
																								Type:        "object",
																								GoName:      "Context",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigContext",
																								Description: "Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name describing the field.",
																									},
																								},
																							},
																							"cryptoKey": &dcl.Property{
																								Type:        "object",
																								GoName:      "CryptoKey",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKey",
																								Description: "Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.",
																								Properties: map[string]*dcl.Property{
																									"kmsWrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "KmsWrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped",
																										Description: "Key wrapped using Cloud KMS",
																										Conflicts: []string{
																											"transient",
																											"unwrapped",
																										},
																										Required: []string{
																											"wrappedKey",
																											"cryptoKeyName",
																										},
																										Properties: map[string]*dcl.Property{
																											"cryptoKeyName": &dcl.Property{
																												Type:        "string",
																												GoName:      "CryptoKeyName",
																												Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																												ResourceReferences: []*dcl.PropertyResourceReference{
																													&dcl.PropertyResourceReference{
																														Resource: "Cloudkms/CryptoKey",
																														Field:    "name",
																													},
																												},
																											},
																											"wrappedKey": &dcl.Property{
																												Type:        "string",
																												GoName:      "WrappedKey",
																												Description: "Required. The wrapped data crypto key.",
																											},
																										},
																									},
																									"transient": &dcl.Property{
																										Type:        "object",
																										GoName:      "Transient",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransient",
																										Description: "Transient crypto key",
																										Conflicts: []string{
																											"unwrapped",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"name",
																										},
																										Properties: map[string]*dcl.Property{
																											"name": &dcl.Property{
																												Type:        "string",
																												GoName:      "Name",
																												Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																											},
																										},
																									},
																									"unwrapped": &dcl.Property{
																										Type:        "object",
																										GoName:      "Unwrapped",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrapped",
																										Description: "Unwrapped crypto key",
																										Conflicts: []string{
																											"transient",
																											"kmsWrapped",
																										},
																										Required: []string{
																											"key",
																										},
																										Properties: map[string]*dcl.Property{
																											"key": &dcl.Property{
																												Type:        "string",
																												GoName:      "Key",
																												Description: "Required. A 128/192/256 bit key.",
																											},
																										},
																									},
																								},
																							},
																							"lowerBoundDays": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "LowerBoundDays",
																								Description: "Required. For example, -5 means shift date to at most 5 days back in the past.",
																							},
																							"upperBoundDays": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "UpperBoundDays",
																								Description: "Required. Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.",
																							},
																						},
																					},
																					"fixedSizeBucketingConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "FixedSizeBucketingConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfig",
																						Description: "Fixed size bucketing",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Required: []string{
																							"lowerBound",
																							"upperBound",
																							"bucketSize",
																						},
																						Properties: map[string]*dcl.Property{
																							"bucketSize": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "BucketSize",
																								Description: "Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.",
																							},
																							"lowerBound": &dcl.Property{
																								Type:        "object",
																								GoName:      "LowerBound",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBound",
																								Description: "Required. Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value \"-10\".",
																								Properties: map[string]*dcl.Property{
																									"booleanValue": &dcl.Property{
																										Type:        "boolean",
																										GoName:      "BooleanValue",
																										Description: "boolean",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"dateValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "DateValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValue",
																										Description: "date",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"day": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Day",
																												Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																											},
																											"month": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Month",
																												Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																											},
																											"year": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Year",
																												Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																											},
																										},
																									},
																									"dayOfWeekValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "DayOfWeekValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDayOfWeekValueEnum",
																										Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																										},
																										Enum: []string{
																											"DAY_OF_WEEK_UNSPECIFIED",
																											"MONDAY",
																											"TUESDAY",
																											"WEDNESDAY",
																											"THURSDAY",
																											"FRIDAY",
																											"SATURDAY",
																											"SUNDAY",
																										},
																									},
																									"floatValue": &dcl.Property{
																										Type:        "number",
																										Format:      "double",
																										GoName:      "FloatValue",
																										Description: "float",
																										Conflicts: []string{
																											"integerValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"integerValue": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "IntegerValue",
																										Description: "integer",
																										Conflicts: []string{
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"stringValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "StringValue",
																										Description: "string",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"timeValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "TimeValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValue",
																										Description: "time of day",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"hours": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Hours",
																												Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																											},
																											"minutes": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Minutes",
																												Description: "Minutes of hour of day. Must be from 0 to 59.",
																											},
																											"nanos": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Nanos",
																												Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																											},
																											"seconds": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Seconds",
																												Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																											},
																										},
																									},
																									"timestampValue": &dcl.Property{
																										Type:        "string",
																										Format:      "date-time",
																										GoName:      "TimestampValue",
																										Description: "timestamp",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																								},
																							},
																							"upperBound": &dcl.Property{
																								Type:        "object",
																								GoName:      "UpperBound",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBound",
																								Description: "Required. Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value \"89+\".",
																								Properties: map[string]*dcl.Property{
																									"booleanValue": &dcl.Property{
																										Type:        "boolean",
																										GoName:      "BooleanValue",
																										Description: "boolean",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"dateValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "DateValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValue",
																										Description: "date",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"day": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Day",
																												Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																											},
																											"month": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Month",
																												Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																											},
																											"year": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Year",
																												Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																											},
																										},
																									},
																									"dayOfWeekValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "DayOfWeekValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDayOfWeekValueEnum",
																										Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																										},
																										Enum: []string{
																											"DAY_OF_WEEK_UNSPECIFIED",
																											"MONDAY",
																											"TUESDAY",
																											"WEDNESDAY",
																											"THURSDAY",
																											"FRIDAY",
																											"SATURDAY",
																											"SUNDAY",
																										},
																									},
																									"floatValue": &dcl.Property{
																										Type:        "number",
																										Format:      "double",
																										GoName:      "FloatValue",
																										Description: "float",
																										Conflicts: []string{
																											"integerValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"integerValue": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "IntegerValue",
																										Description: "integer",
																										Conflicts: []string{
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"stringValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "StringValue",
																										Description: "string",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"timeValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "TimeValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValue",
																										Description: "time of day",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"hours": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Hours",
																												Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																											},
																											"minutes": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Minutes",
																												Description: "Minutes of hour of day. Must be from 0 to 59.",
																											},
																											"nanos": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Nanos",
																												Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																											},
																											"seconds": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Seconds",
																												Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																											},
																										},
																									},
																									"timestampValue": &dcl.Property{
																										Type:        "string",
																										Format:      "date-time",
																										GoName:      "TimestampValue",
																										Description: "timestamp",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																								},
																							},
																						},
																					},
																					"redactConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "RedactConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationRedactConfig",
																						Description: "Redact",
																						Conflicts: []string{
																							"replaceConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						SendEmpty:  true,
																						Properties: map[string]*dcl.Property{},
																					},
																					"replaceConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "ReplaceConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfig",
																						Description: "Replace with a specified value.",
																						Conflicts: []string{
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Properties: map[string]*dcl.Property{
																							"newValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "NewValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValue",
																								Description: "Value to replace it with.",
																								Properties: map[string]*dcl.Property{
																									"booleanValue": &dcl.Property{
																										Type:        "boolean",
																										GoName:      "BooleanValue",
																										Description: "boolean",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"dateValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "DateValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueDateValue",
																										Description: "date",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"day": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Day",
																												Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																											},
																											"month": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Month",
																												Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																											},
																											"year": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Year",
																												Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																											},
																										},
																									},
																									"dayOfWeekValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "DayOfWeekValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueDayOfWeekValueEnum",
																										Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																										},
																										Enum: []string{
																											"DAY_OF_WEEK_UNSPECIFIED",
																											"MONDAY",
																											"TUESDAY",
																											"WEDNESDAY",
																											"THURSDAY",
																											"FRIDAY",
																											"SATURDAY",
																											"SUNDAY",
																										},
																									},
																									"floatValue": &dcl.Property{
																										Type:        "number",
																										Format:      "double",
																										GoName:      "FloatValue",
																										Description: "float",
																										Conflicts: []string{
																											"integerValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"integerValue": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "IntegerValue",
																										Description: "integer",
																										Conflicts: []string{
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"stringValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "StringValue",
																										Description: "string",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"timeValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "TimeValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValue",
																										Description: "time of day",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"hours": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Hours",
																												Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																											},
																											"minutes": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Minutes",
																												Description: "Minutes of hour of day. Must be from 0 to 59.",
																											},
																											"nanos": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Nanos",
																												Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																											},
																											"seconds": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Seconds",
																												Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																											},
																										},
																									},
																									"timestampValue": &dcl.Property{
																										Type:        "string",
																										Format:      "date-time",
																										GoName:      "TimestampValue",
																										Description: "timestamp",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																								},
																							},
																						},
																					},
																					"replaceWithInfoTypeConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "ReplaceWithInfoTypeConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationReplaceWithInfoTypeConfig",
																						Description: "Replace with infotype",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"timePartConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						SendEmpty:  true,
																						Properties: map[string]*dcl.Property{},
																					},
																					"timePartConfig": &dcl.Property{
																						Type:        "object",
																						GoName:      "TimePartConfig",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationTimePartConfig",
																						Description: "Time extraction",
																						Conflicts: []string{
																							"replaceConfig",
																							"redactConfig",
																							"characterMaskConfig",
																							"cryptoReplaceFfxFpeConfig",
																							"fixedSizeBucketingConfig",
																							"bucketingConfig",
																							"replaceWithInfoTypeConfig",
																							"cryptoHashConfig",
																							"dateShiftConfig",
																							"cryptoDeterministicConfig",
																						},
																						Properties: map[string]*dcl.Property{
																							"partToExtract": &dcl.Property{
																								Type:        "string",
																								GoName:      "PartToExtract",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsInfoTypeTransformationsTransformationsPrimitiveTransformationTimePartConfigPartToExtractEnum",
																								Description: "The part of the time to keep. Possible values: TIME_PART_UNSPECIFIED, YEAR, MONTH, DAY_OF_MONTH, DAY_OF_WEEK, WEEK_OF_YEAR, HOUR_OF_DAY",
																								Enum: []string{
																									"TIME_PART_UNSPECIFIED",
																									"YEAR",
																									"MONTH",
																									"DAY_OF_MONTH",
																									"DAY_OF_WEEK",
																									"WEEK_OF_YEAR",
																									"HOUR_OF_DAY",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														"primitiveTransformation": &dcl.Property{
															Type:        "object",
															GoName:      "PrimitiveTransformation",
															GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformation",
															Description: "Apply the transformation to the entire field.",
															Conflicts: []string{
																"infoTypeTransformations",
															},
															Properties: map[string]*dcl.Property{
																"bucketingConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "BucketingConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfig",
																	Description: "Bucketing",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"buckets": &dcl.Property{
																			Type:        "array",
																			GoName:      "Buckets",
																			Description: "Set of buckets. Ranges must be non-overlapping.",
																			SendEmpty:   true,
																			ListType:    "list",
																			Items: &dcl.Property{
																				Type:   "object",
																				GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBuckets",
																				Required: []string{
																					"replacementValue",
																				},
																				Properties: map[string]*dcl.Property{
																					"max": &dcl.Property{
																						Type:        "object",
																						GoName:      "Max",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMax",
																						Description: "Upper bound of the range, exclusive; type must match min.",
																						Properties: map[string]*dcl.Property{
																							"booleanValue": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "BooleanValue",
																								Description: "boolean",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"dateValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "DateValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDateValue",
																								Description: "date",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"day": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Day",
																										Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																									},
																									"month": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Month",
																										Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																									},
																									"year": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Year",
																										Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																									},
																								},
																							},
																							"dayOfWeekValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "DayOfWeekValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxDayOfWeekValueEnum",
																								Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																								},
																								Enum: []string{
																									"DAY_OF_WEEK_UNSPECIFIED",
																									"MONDAY",
																									"TUESDAY",
																									"WEDNESDAY",
																									"THURSDAY",
																									"FRIDAY",
																									"SATURDAY",
																									"SUNDAY",
																								},
																							},
																							"floatValue": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "FloatValue",
																								Description: "float",
																								Conflicts: []string{
																									"integerValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"integerValue": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "IntegerValue",
																								Description: "integer",
																								Conflicts: []string{
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"stringValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "StringValue",
																								Description: "string",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"timeValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "TimeValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMaxTimeValue",
																								Description: "time of day",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"hours": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Hours",
																										Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																									},
																									"minutes": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Minutes",
																										Description: "Minutes of hour of day. Must be from 0 to 59.",
																									},
																									"nanos": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Nanos",
																										Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																									},
																									"seconds": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Seconds",
																										Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																									},
																								},
																							},
																							"timestampValue": &dcl.Property{
																								Type:        "string",
																								Format:      "date-time",
																								GoName:      "TimestampValue",
																								Description: "timestamp",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																						},
																					},
																					"min": &dcl.Property{
																						Type:        "object",
																						GoName:      "Min",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMin",
																						Description: "Lower bound of the range, inclusive. Type should be the same as max if used.",
																						Properties: map[string]*dcl.Property{
																							"booleanValue": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "BooleanValue",
																								Description: "boolean",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"dateValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "DateValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDateValue",
																								Description: "date",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"day": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Day",
																										Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																									},
																									"month": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Month",
																										Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																									},
																									"year": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Year",
																										Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																									},
																								},
																							},
																							"dayOfWeekValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "DayOfWeekValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinDayOfWeekValueEnum",
																								Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																								},
																								Enum: []string{
																									"DAY_OF_WEEK_UNSPECIFIED",
																									"MONDAY",
																									"TUESDAY",
																									"WEDNESDAY",
																									"THURSDAY",
																									"FRIDAY",
																									"SATURDAY",
																									"SUNDAY",
																								},
																							},
																							"floatValue": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "FloatValue",
																								Description: "float",
																								Conflicts: []string{
																									"integerValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"integerValue": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "IntegerValue",
																								Description: "integer",
																								Conflicts: []string{
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"stringValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "StringValue",
																								Description: "string",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"timeValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "TimeValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsMinTimeValue",
																								Description: "time of day",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"hours": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Hours",
																										Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																									},
																									"minutes": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Minutes",
																										Description: "Minutes of hour of day. Must be from 0 to 59.",
																									},
																									"nanos": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Nanos",
																										Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																									},
																									"seconds": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Seconds",
																										Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																									},
																								},
																							},
																							"timestampValue": &dcl.Property{
																								Type:        "string",
																								Format:      "date-time",
																								GoName:      "TimestampValue",
																								Description: "timestamp",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																						},
																					},
																					"replacementValue": &dcl.Property{
																						Type:        "object",
																						GoName:      "ReplacementValue",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValue",
																						Description: "Required. Replacement value for this bucket.",
																						Properties: map[string]*dcl.Property{
																							"booleanValue": &dcl.Property{
																								Type:        "boolean",
																								GoName:      "BooleanValue",
																								Description: "boolean",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"dateValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "DateValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDateValue",
																								Description: "date",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"day": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Day",
																										Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																									},
																									"month": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Month",
																										Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																									},
																									"year": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Year",
																										Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																									},
																								},
																							},
																							"dayOfWeekValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "DayOfWeekValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueDayOfWeekValueEnum",
																								Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																								},
																								Enum: []string{
																									"DAY_OF_WEEK_UNSPECIFIED",
																									"MONDAY",
																									"TUESDAY",
																									"WEDNESDAY",
																									"THURSDAY",
																									"FRIDAY",
																									"SATURDAY",
																									"SUNDAY",
																								},
																							},
																							"floatValue": &dcl.Property{
																								Type:        "number",
																								Format:      "double",
																								GoName:      "FloatValue",
																								Description: "float",
																								Conflicts: []string{
																									"integerValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"integerValue": &dcl.Property{
																								Type:        "integer",
																								Format:      "int64",
																								GoName:      "IntegerValue",
																								Description: "integer",
																								Conflicts: []string{
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"stringValue": &dcl.Property{
																								Type:        "string",
																								GoName:      "StringValue",
																								Description: "string",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"booleanValue",
																									"timestampValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																							"timeValue": &dcl.Property{
																								Type:        "object",
																								GoName:      "TimeValue",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationBucketingConfigBucketsReplacementValueTimeValue",
																								Description: "time of day",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timestampValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																								Properties: map[string]*dcl.Property{
																									"hours": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Hours",
																										Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																									},
																									"minutes": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Minutes",
																										Description: "Minutes of hour of day. Must be from 0 to 59.",
																									},
																									"nanos": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Nanos",
																										Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																									},
																									"seconds": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "Seconds",
																										Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																									},
																								},
																							},
																							"timestampValue": &dcl.Property{
																								Type:        "string",
																								Format:      "date-time",
																								GoName:      "TimestampValue",
																								Description: "timestamp",
																								Conflicts: []string{
																									"integerValue",
																									"floatValue",
																									"stringValue",
																									"booleanValue",
																									"timeValue",
																									"dateValue",
																									"dayOfWeekValue",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																"characterMaskConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CharacterMaskConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfig",
																	Description: "Mask",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"charactersToIgnore": &dcl.Property{
																			Type:        "array",
																			GoName:      "CharactersToIgnore",
																			Description: "When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.",
																			SendEmpty:   true,
																			ListType:    "list",
																			Items: &dcl.Property{
																				Type:   "object",
																				GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnore",
																				Properties: map[string]*dcl.Property{
																					"charactersToSkip": &dcl.Property{
																						Type:        "string",
																						GoName:      "CharactersToSkip",
																						Description: "Characters to not transform when masking.",
																						Conflicts: []string{
																							"commonCharactersToIgnore",
																						},
																					},
																					"commonCharactersToIgnore": &dcl.Property{
																						Type:        "string",
																						GoName:      "CommonCharactersToIgnore",
																						GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCharacterMaskConfigCharactersToIgnoreCommonCharactersToIgnoreEnum",
																						Description: "Common characters to not transform when masking. Useful to avoid removing punctuation. Possible values: COMMON_CHARS_TO_IGNORE_UNSPECIFIED, NUMERIC, ALPHA_UPPER_CASE, ALPHA_LOWER_CASE, PUNCTUATION, WHITESPACE",
																						Conflicts: []string{
																							"charactersToSkip",
																						},
																						Enum: []string{
																							"COMMON_CHARS_TO_IGNORE_UNSPECIFIED",
																							"NUMERIC",
																							"ALPHA_UPPER_CASE",
																							"ALPHA_LOWER_CASE",
																							"PUNCTUATION",
																							"WHITESPACE",
																						},
																					},
																				},
																			},
																		},
																		"maskingCharacter": &dcl.Property{
																			Type:        "string",
																			GoName:      "MaskingCharacter",
																			Description: "Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.",
																		},
																		"numberToMask": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "NumberToMask",
																			Description: "Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally.",
																		},
																		"reverseOrder": &dcl.Property{
																			Type:        "boolean",
																			GoName:      "ReverseOrder",
																			Description: "Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.",
																		},
																	},
																},
																"cryptoDeterministicConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CryptoDeterministicConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfig",
																	Description: "Deterministic Crypto",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"context": &dcl.Property{
																			Type:        "object",
																			GoName:      "Context",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigContext",
																			Description: "A context may be used for higher security and maintaining referential integrity such that the same identifier in two different contexts will be given a distinct surrogate. The context is appended to plaintext value being encrypted. On decryption the provided context is validated against the value used during encryption. If a context was provided during encryption, same context must be provided during decryption as well. If the context is not set, plaintext would be used as is for encryption. If the context is set but: 1. there is no record present when transforming a given value or 2. the field is not present when transforming a given value, plaintext would be used as is for encryption. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and non-structured `ContentItem`s.",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name describing the field.",
																				},
																			},
																		},
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKey",
																			Description: "The key used by the encryption function. For deterministic encryption using AES-SIV, the provided key is internally expanded to 64 bytes prior to use.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																		"surrogateInfoType": &dcl.Property{
																			Type:        "object",
																			GoName:      "SurrogateInfoType",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoDeterministicConfigSurrogateInfoType",
																			Description: "The custom info type to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom info type followed by the number of characters comprising the surrogate. The following scheme defines the format: {info type name}({surrogate character count}):{surrogate} For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom info type 'Surrogate'. This facilitates reversal of the surrogate when it occurs in free text. Note: For record transformations where the entire cell in a table is being transformed, surrogates are not mandatory. Surrogates are used to denote the location of the token and are necessary for re-identification in free form text. In order for inspection to work properly, the name of this info type must not occur naturally anywhere in your data; otherwise, inspection may either - reverse a surrogate that does not correspond to an actual identifier - be unable to parse the surrogate and result in an error Therefore, choose your custom info type name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE.",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																				},
																			},
																		},
																	},
																},
																"cryptoHashConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CryptoHashConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfig",
																	Description: "Crypto",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKey",
																			Description: "The key used by the hash function.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoHashConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																"cryptoReplaceFfxFpeConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "CryptoReplaceFfxFpeConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfig",
																	Description: "Ffx-Fpe",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Required: []string{
																		"cryptoKey",
																	},
																	Properties: map[string]*dcl.Property{
																		"commonAlphabet": &dcl.Property{
																			Type:        "string",
																			GoName:      "CommonAlphabet",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCommonAlphabetEnum",
																			Description: "Common alphabets. Possible values: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED, NUMERIC, HEXADECIMAL, UPPER_CASE_ALPHA_NUMERIC, ALPHA_NUMERIC",
																			Conflicts: []string{
																				"customAlphabet",
																				"radix",
																			},
																			Enum: []string{
																				"FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED",
																				"NUMERIC",
																				"HEXADECIMAL",
																				"UPPER_CASE_ALPHA_NUMERIC",
																				"ALPHA_NUMERIC",
																			},
																		},
																		"context": &dcl.Property{
																			Type:        "object",
																			GoName:      "Context",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigContext",
																			Description: "The 'tweak', a context may be used for higher security since the same identifier in two different contexts won't be given the same surrogate. If the context is not set, a default tweak will be used. If the context is set but: 1. there is no record present when transforming a given value or 1. the field is not present when transforming a given value, a default tweak will be used. Note that case (1) is expected when an `InfoTypeTransformation` is applied to both structured and non-structured `ContentItem`s. Currently, the referenced field may be of value type integer or string. The tweak is constructed as a sequence of bytes in big endian byte order such that: - a 64 bit integer is encoded followed by a single byte of value 1 - a string is encoded in UTF-8 format followed by a single byte of value 2",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name describing the field.",
																				},
																			},
																		},
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKey",
																			Description: "Required. The key used by the encryption algorithm.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																		"customAlphabet": &dcl.Property{
																			Type:        "string",
																			GoName:      "CustomAlphabet",
																			Description: "This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: ``0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|:;\"'<,>.?/``",
																			Conflicts: []string{
																				"commonAlphabet",
																				"radix",
																			},
																		},
																		"radix": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "Radix",
																			Description: "The native way to select the alphabet. Must be in the range [2, 95].",
																			Conflicts: []string{
																				"commonAlphabet",
																				"customAlphabet",
																			},
																		},
																		"surrogateInfoType": &dcl.Property{
																			Type:        "object",
																			GoName:      "SurrogateInfoType",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationCryptoReplaceFfxFpeConfigSurrogateInfoType",
																			Description: "The custom infoType to annotate the surrogate with. This annotation will be applied to the surrogate by prefixing it with the name of the custom infoType followed by the number of characters comprising the surrogate. The following scheme defines the format: info_type_name(surrogate_character_count):surrogate For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the surrogate when inspecting content using the custom infoType [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype). This facilitates reversal of the surrogate when it occurs in free text. In order for inspection to work properly, the name of this infoType must not occur naturally anywhere in your data; otherwise, inspection may find a surrogate that does not correspond to an actual identifier. Therefore, choose your custom infoType name carefully after considering what your data looks like. One way to select a name that has a high chance of yielding reliable detection is to include one or more unicode characters that are highly improbable to exist in your data. For example, assuming your data is entered from a regular ASCII keyboard, the symbol with the hex code point 29DD might be used like so: ⧝MY_TOKEN_TYPE",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.",
																				},
																			},
																		},
																	},
																},
																"dateShiftConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "DateShiftConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfig",
																	Description: "Date Shift",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"cryptoDeterministicConfig",
																	},
																	Required: []string{
																		"upperBoundDays",
																		"lowerBoundDays",
																	},
																	Properties: map[string]*dcl.Property{
																		"context": &dcl.Property{
																			Type:        "object",
																			GoName:      "Context",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigContext",
																			Description: "Points to the field that contains the context, for example, an entity id. If set, must also set cryptoKey. If set, shift will be consistent for the given context.",
																			Properties: map[string]*dcl.Property{
																				"name": &dcl.Property{
																					Type:        "string",
																					GoName:      "Name",
																					Description: "Name describing the field.",
																				},
																			},
																		},
																		"cryptoKey": &dcl.Property{
																			Type:        "object",
																			GoName:      "CryptoKey",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKey",
																			Description: "Causes the shift to be computed based on this key and the context. This results in the same shift for the same context and crypto_key. If set, must also set context. Can only be applied to table items.",
																			Properties: map[string]*dcl.Property{
																				"kmsWrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "KmsWrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyKmsWrapped",
																					Description: "Key wrapped using Cloud KMS",
																					Conflicts: []string{
																						"transient",
																						"unwrapped",
																					},
																					Required: []string{
																						"wrappedKey",
																						"cryptoKeyName",
																					},
																					Properties: map[string]*dcl.Property{
																						"cryptoKeyName": &dcl.Property{
																							Type:        "string",
																							GoName:      "CryptoKeyName",
																							Description: "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
																							ResourceReferences: []*dcl.PropertyResourceReference{
																								&dcl.PropertyResourceReference{
																									Resource: "Cloudkms/CryptoKey",
																									Field:    "name",
																								},
																							},
																						},
																						"wrappedKey": &dcl.Property{
																							Type:        "string",
																							GoName:      "WrappedKey",
																							Description: "Required. The wrapped data crypto key.",
																						},
																					},
																				},
																				"transient": &dcl.Property{
																					Type:        "object",
																					GoName:      "Transient",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyTransient",
																					Description: "Transient crypto key",
																					Conflicts: []string{
																						"unwrapped",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"name",
																					},
																					Properties: map[string]*dcl.Property{
																						"name": &dcl.Property{
																							Type:        "string",
																							GoName:      "Name",
																							Description: "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
																						},
																					},
																				},
																				"unwrapped": &dcl.Property{
																					Type:        "object",
																					GoName:      "Unwrapped",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationDateShiftConfigCryptoKeyUnwrapped",
																					Description: "Unwrapped crypto key",
																					Conflicts: []string{
																						"transient",
																						"kmsWrapped",
																					},
																					Required: []string{
																						"key",
																					},
																					Properties: map[string]*dcl.Property{
																						"key": &dcl.Property{
																							Type:        "string",
																							GoName:      "Key",
																							Description: "Required. A 128/192/256 bit key.",
																						},
																					},
																				},
																			},
																		},
																		"lowerBoundDays": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "LowerBoundDays",
																			Description: "Required. For example, -5 means shift date to at most 5 days back in the past.",
																		},
																		"upperBoundDays": &dcl.Property{
																			Type:        "integer",
																			Format:      "int64",
																			GoName:      "UpperBoundDays",
																			Description: "Required. Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.",
																		},
																	},
																},
																"fixedSizeBucketingConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "FixedSizeBucketingConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfig",
																	Description: "Fixed size bucketing",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Required: []string{
																		"lowerBound",
																		"upperBound",
																		"bucketSize",
																	},
																	Properties: map[string]*dcl.Property{
																		"bucketSize": &dcl.Property{
																			Type:        "number",
																			Format:      "double",
																			GoName:      "BucketSize",
																			Description: "Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.",
																		},
																		"lowerBound": &dcl.Property{
																			Type:        "object",
																			GoName:      "LowerBound",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBound",
																			Description: "Required. Lower bound value of buckets. All values less than `lower_bound` are grouped together into a single bucket; for example if `lower_bound` = 10, then all values less than 10 are replaced with the value \"-10\".",
																			Properties: map[string]*dcl.Property{
																				"booleanValue": &dcl.Property{
																					Type:        "boolean",
																					GoName:      "BooleanValue",
																					Description: "boolean",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"dateValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "DateValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDateValue",
																					Description: "date",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"day": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Day",
																							Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																						},
																						"month": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Month",
																							Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																						},
																						"year": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Year",
																							Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																						},
																					},
																				},
																				"dayOfWeekValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "DayOfWeekValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundDayOfWeekValueEnum",
																					Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																					},
																					Enum: []string{
																						"DAY_OF_WEEK_UNSPECIFIED",
																						"MONDAY",
																						"TUESDAY",
																						"WEDNESDAY",
																						"THURSDAY",
																						"FRIDAY",
																						"SATURDAY",
																						"SUNDAY",
																					},
																				},
																				"floatValue": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "FloatValue",
																					Description: "float",
																					Conflicts: []string{
																						"integerValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"integerValue": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "IntegerValue",
																					Description: "integer",
																					Conflicts: []string{
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"stringValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "StringValue",
																					Description: "string",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"timeValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigLowerBoundTimeValue",
																					Description: "time of day",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"hours": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Hours",
																							Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																						},
																						"minutes": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Minutes",
																							Description: "Minutes of hour of day. Must be from 0 to 59.",
																						},
																						"nanos": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Nanos",
																							Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																						},
																						"seconds": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Seconds",
																							Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																						},
																					},
																				},
																				"timestampValue": &dcl.Property{
																					Type:        "string",
																					Format:      "date-time",
																					GoName:      "TimestampValue",
																					Description: "timestamp",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																			},
																		},
																		"upperBound": &dcl.Property{
																			Type:        "object",
																			GoName:      "UpperBound",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBound",
																			Description: "Required. Upper bound value of buckets. All values greater than upper_bound are grouped together into a single bucket; for example if `upper_bound` = 89, then all values greater than 89 are replaced with the value \"89+\".",
																			Properties: map[string]*dcl.Property{
																				"booleanValue": &dcl.Property{
																					Type:        "boolean",
																					GoName:      "BooleanValue",
																					Description: "boolean",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"dateValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "DateValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDateValue",
																					Description: "date",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"day": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Day",
																							Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																						},
																						"month": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Month",
																							Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																						},
																						"year": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Year",
																							Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																						},
																					},
																				},
																				"dayOfWeekValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "DayOfWeekValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundDayOfWeekValueEnum",
																					Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																					},
																					Enum: []string{
																						"DAY_OF_WEEK_UNSPECIFIED",
																						"MONDAY",
																						"TUESDAY",
																						"WEDNESDAY",
																						"THURSDAY",
																						"FRIDAY",
																						"SATURDAY",
																						"SUNDAY",
																					},
																				},
																				"floatValue": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "FloatValue",
																					Description: "float",
																					Conflicts: []string{
																						"integerValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"integerValue": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "IntegerValue",
																					Description: "integer",
																					Conflicts: []string{
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"stringValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "StringValue",
																					Description: "string",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"timeValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationFixedSizeBucketingConfigUpperBoundTimeValue",
																					Description: "time of day",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"hours": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Hours",
																							Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																						},
																						"minutes": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Minutes",
																							Description: "Minutes of hour of day. Must be from 0 to 59.",
																						},
																						"nanos": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Nanos",
																							Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																						},
																						"seconds": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Seconds",
																							Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																						},
																					},
																				},
																				"timestampValue": &dcl.Property{
																					Type:        "string",
																					Format:      "date-time",
																					GoName:      "TimestampValue",
																					Description: "timestamp",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																			},
																		},
																	},
																},
																"redactConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "RedactConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationRedactConfig",
																	Description: "Redact",
																	Conflicts: []string{
																		"replaceConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	SendEmpty:  true,
																	Properties: map[string]*dcl.Property{},
																},
																"replaceConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "ReplaceConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfig",
																	Description: "Replace with a specified value.",
																	Conflicts: []string{
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"newValue": &dcl.Property{
																			Type:        "object",
																			GoName:      "NewValue",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValue",
																			Description: "Value to replace it with.",
																			Properties: map[string]*dcl.Property{
																				"booleanValue": &dcl.Property{
																					Type:        "boolean",
																					GoName:      "BooleanValue",
																					Description: "boolean",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"dateValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "DateValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDateValue",
																					Description: "date",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"day": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Day",
																							Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																						},
																						"month": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Month",
																							Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																						},
																						"year": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Year",
																							Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																						},
																					},
																				},
																				"dayOfWeekValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "DayOfWeekValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueDayOfWeekValueEnum",
																					Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																					},
																					Enum: []string{
																						"DAY_OF_WEEK_UNSPECIFIED",
																						"MONDAY",
																						"TUESDAY",
																						"WEDNESDAY",
																						"THURSDAY",
																						"FRIDAY",
																						"SATURDAY",
																						"SUNDAY",
																					},
																				},
																				"floatValue": &dcl.Property{
																					Type:        "number",
																					Format:      "double",
																					GoName:      "FloatValue",
																					Description: "float",
																					Conflicts: []string{
																						"integerValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"integerValue": &dcl.Property{
																					Type:        "integer",
																					Format:      "int64",
																					GoName:      "IntegerValue",
																					Description: "integer",
																					Conflicts: []string{
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"stringValue": &dcl.Property{
																					Type:        "string",
																					GoName:      "StringValue",
																					Description: "string",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"booleanValue",
																						"timestampValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																				"timeValue": &dcl.Property{
																					Type:        "object",
																					GoName:      "TimeValue",
																					GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceConfigNewValueTimeValue",
																					Description: "time of day",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timestampValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																					Properties: map[string]*dcl.Property{
																						"hours": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Hours",
																							Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																						},
																						"minutes": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Minutes",
																							Description: "Minutes of hour of day. Must be from 0 to 59.",
																						},
																						"nanos": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Nanos",
																							Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																						},
																						"seconds": &dcl.Property{
																							Type:        "integer",
																							Format:      "int64",
																							GoName:      "Seconds",
																							Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																						},
																					},
																				},
																				"timestampValue": &dcl.Property{
																					Type:        "string",
																					Format:      "date-time",
																					GoName:      "TimestampValue",
																					Description: "timestamp",
																					Conflicts: []string{
																						"integerValue",
																						"floatValue",
																						"stringValue",
																						"booleanValue",
																						"timeValue",
																						"dateValue",
																						"dayOfWeekValue",
																					},
																				},
																			},
																		},
																	},
																},
																"replaceWithInfoTypeConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "ReplaceWithInfoTypeConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationReplaceWithInfoTypeConfig",
																	Description: "Replace with infotype",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"timePartConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	SendEmpty:  true,
																	Properties: map[string]*dcl.Property{},
																},
																"timePartConfig": &dcl.Property{
																	Type:        "object",
																	GoName:      "TimePartConfig",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfig",
																	Description: "Time extraction",
																	Conflicts: []string{
																		"replaceConfig",
																		"redactConfig",
																		"characterMaskConfig",
																		"cryptoReplaceFfxFpeConfig",
																		"fixedSizeBucketingConfig",
																		"bucketingConfig",
																		"replaceWithInfoTypeConfig",
																		"cryptoHashConfig",
																		"dateShiftConfig",
																		"cryptoDeterministicConfig",
																	},
																	Properties: map[string]*dcl.Property{
																		"partToExtract": &dcl.Property{
																			Type:        "string",
																			GoName:      "PartToExtract",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsFieldTransformationsPrimitiveTransformationTimePartConfigPartToExtractEnum",
																			Description: "The part of the time to keep. Possible values: TIME_PART_UNSPECIFIED, YEAR, MONTH, DAY_OF_MONTH, DAY_OF_WEEK, WEEK_OF_YEAR, HOUR_OF_DAY",
																			Enum: []string{
																				"TIME_PART_UNSPECIFIED",
																				"YEAR",
																				"MONTH",
																				"DAY_OF_MONTH",
																				"DAY_OF_WEEK",
																				"WEEK_OF_YEAR",
																				"HOUR_OF_DAY",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											"recordSuppressions": &dcl.Property{
												Type:        "array",
												GoName:      "RecordSuppressions",
												Description: "Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.",
												SendEmpty:   true,
												ListType:    "list",
												Items: &dcl.Property{
													Type:   "object",
													GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressions",
													Properties: map[string]*dcl.Property{
														"condition": &dcl.Property{
															Type:        "object",
															GoName:      "Condition",
															GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsCondition",
															Description: "A condition that when it evaluates to true will result in the record being evaluated to be suppressed from the transformed content.",
															Properties: map[string]*dcl.Property{
																"expressions": &dcl.Property{
																	Type:        "object",
																	GoName:      "Expressions",
																	GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressions",
																	Description: "An expression.",
																	Properties: map[string]*dcl.Property{
																		"conditions": &dcl.Property{
																			Type:        "object",
																			GoName:      "Conditions",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditions",
																			Description: "Conditions to apply to the expression.",
																			Properties: map[string]*dcl.Property{
																				"conditions": &dcl.Property{
																					Type:        "array",
																					GoName:      "Conditions",
																					Description: "A collection of conditions.",
																					SendEmpty:   true,
																					ListType:    "list",
																					Items: &dcl.Property{
																						Type:   "object",
																						GoType: "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditions",
																						Required: []string{
																							"field",
																							"operator",
																						},
																						Properties: map[string]*dcl.Property{
																							"field": &dcl.Property{
																								Type:        "object",
																								GoName:      "Field",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsField",
																								Description: "Required. Field within the record this condition is evaluated against.",
																								Properties: map[string]*dcl.Property{
																									"name": &dcl.Property{
																										Type:        "string",
																										GoName:      "Name",
																										Description: "Name describing the field.",
																									},
																								},
																							},
																							"operator": &dcl.Property{
																								Type:        "string",
																								GoName:      "Operator",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsOperatorEnum",
																								Description: "Required. Operator used to compare the field or infoType to the value. Possible values: LOGICAL_OPERATOR_UNSPECIFIED, AND",
																								Enum: []string{
																									"LOGICAL_OPERATOR_UNSPECIFIED",
																									"AND",
																								},
																							},
																							"value": &dcl.Property{
																								Type:        "object",
																								GoName:      "Value",
																								GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValue",
																								Description: "Value to compare against. [Mandatory, except for `EXISTS` tests.]",
																								Properties: map[string]*dcl.Property{
																									"booleanValue": &dcl.Property{
																										Type:        "boolean",
																										GoName:      "BooleanValue",
																										Description: "boolean",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"dateValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "DateValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDateValue",
																										Description: "date",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"day": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Day",
																												Description: "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
																											},
																											"month": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Month",
																												Description: "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
																											},
																											"year": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Year",
																												Description: "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
																											},
																										},
																									},
																									"dayOfWeekValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "DayOfWeekValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueDayOfWeekValueEnum",
																										Description: "day of week Possible values: DAY_OF_WEEK_UNSPECIFIED, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																										},
																										Enum: []string{
																											"DAY_OF_WEEK_UNSPECIFIED",
																											"MONDAY",
																											"TUESDAY",
																											"WEDNESDAY",
																											"THURSDAY",
																											"FRIDAY",
																											"SATURDAY",
																											"SUNDAY",
																										},
																									},
																									"floatValue": &dcl.Property{
																										Type:        "number",
																										Format:      "double",
																										GoName:      "FloatValue",
																										Description: "float",
																										Conflicts: []string{
																											"integerValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"integerValue": &dcl.Property{
																										Type:        "integer",
																										Format:      "int64",
																										GoName:      "IntegerValue",
																										Description: "integer",
																										Conflicts: []string{
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"stringValue": &dcl.Property{
																										Type:        "string",
																										GoName:      "StringValue",
																										Description: "string",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"booleanValue",
																											"timestampValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																									"timeValue": &dcl.Property{
																										Type:        "object",
																										GoName:      "TimeValue",
																										GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsConditionsConditionsValueTimeValue",
																										Description: "time of day",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timestampValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																										Properties: map[string]*dcl.Property{
																											"hours": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Hours",
																												Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
																											},
																											"minutes": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Minutes",
																												Description: "Minutes of hour of day. Must be from 0 to 59.",
																											},
																											"nanos": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Nanos",
																												Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
																											},
																											"seconds": &dcl.Property{
																												Type:        "integer",
																												Format:      "int64",
																												GoName:      "Seconds",
																												Description: "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
																											},
																										},
																									},
																									"timestampValue": &dcl.Property{
																										Type:        "string",
																										Format:      "date-time",
																										GoName:      "TimestampValue",
																										Description: "timestamp",
																										Conflicts: []string{
																											"integerValue",
																											"floatValue",
																											"stringValue",
																											"booleanValue",
																											"timeValue",
																											"dateValue",
																											"dayOfWeekValue",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		"logicalOperator": &dcl.Property{
																			Type:        "string",
																			GoName:      "LogicalOperator",
																			GoType:      "DeidentifyTemplateDeidentifyConfigRecordTransformationsRecordSuppressionsConditionExpressionsLogicalOperatorEnum",
																			Description: "The operator to apply to the result of conditions. Default and currently only supported value is `AND`. Possible values: LOGICAL_OPERATOR_UNSPECIFIED, AND",
																			Enum: []string{
																				"LOGICAL_OPERATOR_UNSPECIFIED",
																				"AND",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"transformationErrorHandling": &dcl.Property{
										Type:        "object",
										GoName:      "TransformationErrorHandling",
										GoType:      "DeidentifyTemplateDeidentifyConfigTransformationErrorHandling",
										Description: "Mode for handling transformation errors. If left unspecified, the default mode is `TransformationErrorHandling.ThrowError`.",
										Properties: map[string]*dcl.Property{
											"leaveUntransformed": &dcl.Property{
												Type:        "object",
												GoName:      "LeaveUntransformed",
												GoType:      "DeidentifyTemplateDeidentifyConfigTransformationErrorHandlingLeaveUntransformed",
												Description: "Ignore errors",
												Conflicts: []string{
													"throwError",
												},
												Properties: map[string]*dcl.Property{},
											},
											"throwError": &dcl.Property{
												Type:        "object",
												GoName:      "ThrowError",
												GoType:      "DeidentifyTemplateDeidentifyConfigTransformationErrorHandlingThrowError",
												Description: "Throw an error",
												Conflicts: []string{
													"leaveUntransformed",
												},
												Properties: map[string]*dcl.Property{},
											},
										},
									},
								},
							},
							"description": &dcl.Property{
								Type:        "string",
								GoName:      "Description",
								Description: "Short description (max 256 chars).",
							},
							"displayName": &dcl.Property{
								Type:        "string",
								GoName:      "DisplayName",
								Description: "Display name (max 256 chars).",
							},
							"location": &dcl.Property{
								Type:        "string",
								GoName:      "Location",
								Description: "The location of the resource",
								Immutable:   true,
							},
							"locationId": &dcl.Property{
								Type:        "string",
								GoName:      "LocationId",
								ReadOnly:    true,
								Description: "Output only. The geographic location where this resource is stored.",
								Immutable:   true,
							},
							"name": &dcl.Property{
								Type:                     "string",
								GoName:                   "Name",
								Description:              "Output only. The template name. The template will have one of the following formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`",
								Immutable:                true,
								ServerGeneratedParameter: true,
							},
							"parent": &dcl.Property{
								Type:                "string",
								GoName:              "Parent",
								Description:         "The parent of the resource",
								Immutable:           true,
								ForwardSlashAllowed: true,
								ResourceReferences: []*dcl.PropertyResourceReference{
									&dcl.PropertyResourceReference{
										Resource: "Cloudresourcemanager/Organization",
										Field:    "name",
										Parent:   true,
									},
									&dcl.PropertyResourceReference{
										Resource: "Cloudresourcemanager/Project",
										Field:    "name",
										Parent:   true,
									},
								},
							},
							"updateTime": &dcl.Property{
								Type:        "string",
								Format:      "date-time",
								GoName:      "UpdateTime",
								ReadOnly:    true,
								Description: "Output only. The last update timestamp of an inspectTemplate.",
								Immutable:   true,
							},
						},
					},
				},
			},
		},
	}
}
