// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
// All generated protos should be opaque, with "xxx_hidden_" prepended to their field names.


package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";


enum FilestoreAlphaInstanceStateEnum {
  FilestoreAlphaInstanceStateEnumNO_VALUE_DO_NOT_USE = 0;
  FilestoreAlphaInstanceStateEnumSTATE_UNSPECIFIED = 1;
  FilestoreAlphaInstanceStateEnumCREATING = 2;
  FilestoreAlphaInstanceStateEnumREADY = 3;
  FilestoreAlphaInstanceStateEnumREPAIRING = 4;
  FilestoreAlphaInstanceStateEnumDELETING = 5;
  FilestoreAlphaInstanceStateEnumERROR = 6;
}

enum FilestoreAlphaInstanceTierEnum {
  FilestoreAlphaInstanceTierEnumNO_VALUE_DO_NOT_USE = 0;
  FilestoreAlphaInstanceTierEnumTIER_UNSPECIFIED = 1;
  FilestoreAlphaInstanceTierEnumSTANDARD = 2;
  FilestoreAlphaInstanceTierEnumPREMIUM = 3;
  FilestoreAlphaInstanceTierEnumBASIC_HDD = 4;
  FilestoreAlphaInstanceTierEnumBASIC_SSD = 5;
  FilestoreAlphaInstanceTierEnumHIGH_SCALE_SSD = 6;
  FilestoreAlphaInstanceTierEnumENTERPRISE = 7;
}

enum FilestoreAlphaInstanceFileSharesNfsExportOptionsAccessModeEnum {
  FilestoreAlphaInstanceFileSharesNfsExportOptionsAccessModeEnumNO_VALUE_DO_NOT_USE = 0;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsAccessModeEnumACCESS_MODE_UNSPECIFIED = 1;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsAccessModeEnumREAD_ONLY = 2;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsAccessModeEnumREAD_WRITE = 3;
}

enum FilestoreAlphaInstanceFileSharesNfsExportOptionsSquashModeEnum {
  FilestoreAlphaInstanceFileSharesNfsExportOptionsSquashModeEnumNO_VALUE_DO_NOT_USE = 0;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsSquashModeEnumSQUASH_MODE_UNSPECIFIED = 1;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsSquashModeEnumNO_ROOT_SQUASH = 2;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsSquashModeEnumROOT_SQUASH = 3;
}

enum FilestoreAlphaInstanceNetworksModesEnum {
  FilestoreAlphaInstanceNetworksModesEnumNO_VALUE_DO_NOT_USE = 0;
  FilestoreAlphaInstanceNetworksModesEnumADDRESS_MODE_UNSPECIFIED = 1;
  FilestoreAlphaInstanceNetworksModesEnumMODE_IPV4 = 2;
}

message FilestoreAlphaInstance {
  string name = 1;
  string description = 2;
  FilestoreAlphaInstanceStateEnum state = 3;
  string status_message = 4;
  string create_time = 5;
  FilestoreAlphaInstanceTierEnum tier = 6;
  map<string, string> labels = 7;
  repeated FilestoreAlphaInstanceFileShares file_shares = 8;
  repeated FilestoreAlphaInstanceNetworks networks = 9;
  string etag = 10;
  string project = 11;
  string location = 12;
}

message FilestoreAlphaInstanceFileShares {
  string name = 1;
  int64 capacity_gb = 2;
  string source_backup = 3;
  repeated FilestoreAlphaInstanceFileSharesNfsExportOptions nfs_export_options = 4;
}

message FilestoreAlphaInstanceFileSharesNfsExportOptions {
  repeated string ip_ranges = 1;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsAccessModeEnum access_mode = 2;
  FilestoreAlphaInstanceFileSharesNfsExportOptionsSquashModeEnum squash_mode = 3;
  int64 anon_uid = 4;
  int64 anon_gid = 5;
}

message FilestoreAlphaInstanceNetworks {
  string network = 1;
  repeated FilestoreAlphaInstanceNetworksModesEnum modes = 2;
  string reserved_ip_range = 3;
  repeated string ip_addresses = 4;
}

message ApplyFilestoreAlphaInstanceRequest {
  FilestoreAlphaInstance resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteFilestoreAlphaInstanceRequest {
  string service_account_file = 1;
  FilestoreAlphaInstance resource = 2;
}

message ListFilestoreAlphaInstanceRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
}

message ListFilestoreAlphaInstanceResponse {
  repeated FilestoreAlphaInstance items = 1;
}

service FilestoreAlphaInstanceService {
  rpc ApplyFilestoreAlphaInstance(ApplyFilestoreAlphaInstanceRequest) returns (FilestoreAlphaInstance);
  rpc DeleteFilestoreAlphaInstance(DeleteFilestoreAlphaInstanceRequest) returns (google.protobuf.Empty);
  rpc ListFilestoreAlphaInstance(ListFilestoreAlphaInstanceRequest) returns (ListFilestoreAlphaInstanceResponse);
}
