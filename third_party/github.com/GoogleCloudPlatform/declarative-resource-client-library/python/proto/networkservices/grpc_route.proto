// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
// All generated protos should be opaque, with "xxx_hidden_" prepended to their field names.


package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";


enum NetworkservicesGrpcRouteRulesMatchesMethodTypeEnum {
  NetworkservicesGrpcRouteRulesMatchesMethodTypeEnumNO_VALUE_DO_NOT_USE = 0;
  NetworkservicesGrpcRouteRulesMatchesMethodTypeEnumTYPE_UNSPECIFIED = 1;
  NetworkservicesGrpcRouteRulesMatchesMethodTypeEnumEXACT = 2;
  NetworkservicesGrpcRouteRulesMatchesMethodTypeEnumREGULAR_EXPRESSION = 3;
}

enum NetworkservicesGrpcRouteRulesMatchesHeadersTypeEnum {
  NetworkservicesGrpcRouteRulesMatchesHeadersTypeEnumNO_VALUE_DO_NOT_USE = 0;
  NetworkservicesGrpcRouteRulesMatchesHeadersTypeEnumMATCH_TYPE_UNSPECIFIED = 1;
  NetworkservicesGrpcRouteRulesMatchesHeadersTypeEnumMATCH_ANY = 2;
  NetworkservicesGrpcRouteRulesMatchesHeadersTypeEnumMATCH_ALL = 3;
}

message NetworkservicesGrpcRoute {
  string name = 1;
  string create_time = 2;
  string update_time = 3;
  map<string, string> labels = 4;
  string description = 5;
  repeated string hostnames = 6;
  repeated string meshes = 7;
  repeated string gateways = 8;
  repeated NetworkservicesGrpcRouteRules rules = 9;
  string project = 10;
  string location = 11;
  string self_link = 12;
}

message NetworkservicesGrpcRouteRules {
  repeated NetworkservicesGrpcRouteRulesMatches matches = 1;
  NetworkservicesGrpcRouteRulesAction action = 2;
}

message NetworkservicesGrpcRouteRulesMatches {
  NetworkservicesGrpcRouteRulesMatchesMethod method = 1;
  repeated NetworkservicesGrpcRouteRulesMatchesHeaders headers = 2;
}

message NetworkservicesGrpcRouteRulesMatchesMethod {
  NetworkservicesGrpcRouteRulesMatchesMethodTypeEnum type = 1;
  string grpc_service = 2;
  string grpc_method = 3;
  bool case_sensitive = 4;
}

message NetworkservicesGrpcRouteRulesMatchesHeaders {
  NetworkservicesGrpcRouteRulesMatchesHeadersTypeEnum type = 1;
  string key = 2;
  string value = 3;
}

message NetworkservicesGrpcRouteRulesAction {
  repeated NetworkservicesGrpcRouteRulesActionDestinations destinations = 1;
  NetworkservicesGrpcRouteRulesActionFaultInjectionPolicy fault_injection_policy = 2;
  string timeout = 3;
  NetworkservicesGrpcRouteRulesActionRetryPolicy retry_policy = 4;
}

message NetworkservicesGrpcRouteRulesActionDestinations {
  int64 weight = 1;
  string service_name = 2;
}

message NetworkservicesGrpcRouteRulesActionFaultInjectionPolicy {
  NetworkservicesGrpcRouteRulesActionFaultInjectionPolicyDelay delay = 1;
  NetworkservicesGrpcRouteRulesActionFaultInjectionPolicyAbort abort = 2;
}

message NetworkservicesGrpcRouteRulesActionFaultInjectionPolicyDelay {
  string fixed_delay = 1;
  int64 percentage = 2;
}

message NetworkservicesGrpcRouteRulesActionFaultInjectionPolicyAbort {
  int64 http_status = 1;
  int64 percentage = 2;
}

message NetworkservicesGrpcRouteRulesActionRetryPolicy {
  repeated string retry_conditions = 1;
  int64 num_retries = 2;
}

message ApplyNetworkservicesGrpcRouteRequest {
  NetworkservicesGrpcRoute resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteNetworkservicesGrpcRouteRequest {
  string service_account_file = 1;
  NetworkservicesGrpcRoute resource = 2;
}

message ListNetworkservicesGrpcRouteRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
}

message ListNetworkservicesGrpcRouteResponse {
  repeated NetworkservicesGrpcRoute items = 1;
}

service NetworkservicesGrpcRouteService {
  rpc ApplyNetworkservicesGrpcRoute(ApplyNetworkservicesGrpcRouteRequest) returns (NetworkservicesGrpcRoute);
  rpc DeleteNetworkservicesGrpcRoute(DeleteNetworkservicesGrpcRouteRequest) returns (google.protobuf.Empty);
  rpc ListNetworkservicesGrpcRoute(ListNetworkservicesGrpcRouteRequest) returns (ListNetworkservicesGrpcRouteResponse);
}
